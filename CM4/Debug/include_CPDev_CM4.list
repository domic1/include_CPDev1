
include_CPDev_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c4  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0810e85c  0810e85c  0000f85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e8ac  0810e8ac  0000f8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e8b4  0810e8b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810e8b8  0810e8b8  0000f8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  0810e8bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  1000006c  0810e928  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  100000cc  0810e988  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec8  1000012c  0810e9e8  0001012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000ff4  0810e9e8  00010ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036230  00000000  00000000  0001015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056de  00000000  00000000  0004638c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002970  00000000  00000000  0004ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002054  00000000  00000000  0004e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004f989  00000000  00000000  00050434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037752  00000000  00000000  0009fdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e6597  00000000  00000000  000d750f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002bdaa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcac  00000000  00000000  002bdaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  002c9798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000012c 	.word	0x1000012c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810e844 	.word	0x0810e844

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000130 	.word	0x10000130
 81002d4:	0810e844 	.word	0x0810e844

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b082      	sub	sp, #8
 8100668:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810066a:	4b30      	ldr	r3, [pc, #192]	@ (810072c <main+0xc8>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a2e      	ldr	r2, [pc, #184]	@ (810072c <main+0xc8>)
 8100672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b2c      	ldr	r3, [pc, #176]	@ (810072c <main+0xc8>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100688:	2001      	movs	r0, #1
 810068a:	f005 f93b 	bl	8105904 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810068e:	f005 fb19 	bl	8105cc4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100692:	2201      	movs	r2, #1
 8100694:	2102      	movs	r1, #2
 8100696:	2000      	movs	r0, #0
 8100698:	f005 fa9a 	bl	8105bd0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810069c:	4b24      	ldr	r3, [pc, #144]	@ (8100730 <main+0xcc>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006a4:	2b70      	cmp	r3, #112	@ 0x70
 81006a6:	d108      	bne.n	81006ba <main+0x56>
 81006a8:	4b22      	ldr	r3, [pc, #136]	@ (8100734 <main+0xd0>)
 81006aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ae:	4a21      	ldr	r2, [pc, #132]	@ (8100734 <main+0xd0>)
 81006b0:	f043 0301 	orr.w	r3, r3, #1
 81006b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006b8:	e007      	b.n	81006ca <main+0x66>
 81006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8100734 <main+0xd0>)
 81006bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c0:	4a1c      	ldr	r2, [pc, #112]	@ (8100734 <main+0xd0>)
 81006c2:	f043 0301 	orr.w	r3, r3, #1
 81006c6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ca:	f002 f97b 	bl	81029c4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006ce:	f000 fe01 	bl	81012d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 81006d2:	f000 fd93 	bl	81011fc <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 81006d6:	f000 f831 	bl	810073c <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 81006da:	f000 f8b9 	bl	8100850 <_ZL12MX_ADC3_Initv>
  MX_ETH_Init();
 81006de:	f000 f925 	bl	810092c <_ZL11MX_ETH_Initv>
  MX_FMC_Init();
 81006e2:	f000 fda5 	bl	8101230 <_ZL11MX_FMC_Initv>
  MX_HDMI_CEC_Init();
 81006e6:	f000 f973 	bl	81009d0 <_ZL16MX_HDMI_CEC_Initv>
  MX_QUADSPI_Init();
 81006ea:	f000 f9ab 	bl	8100a44 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 81006ee:	f000 f9d7 	bl	8100aa0 <_ZL11MX_RTC_Initv>
  MX_SAI1_Init();
 81006f2:	f000 fa2d 	bl	8100b50 <_ZL12MX_SAI1_Initv>
  MX_SDMMC1_SD_Init();
 81006f6:	f000 fad7 	bl	8100ca8 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX1_Init();
 81006fa:	f000 fafd 	bl	8100cf8 <_ZL16MX_SPDIFRX1_Initv>
  MX_SPI2_Init();
 81006fe:	f000 fb39 	bl	8100d74 <_ZL12MX_SPI2_Initv>
  MX_SPI5_Init();
 8100702:	f000 fb91 	bl	8100e28 <_ZL12MX_SPI5_Initv>
  MX_TIM8_Init();
 8100706:	f000 fbe9 	bl	8100edc <_ZL12MX_TIM8_Initv>
  MX_TIM13_Init();
 810070a:	f000 fc8b 	bl	8101024 <_ZL13MX_TIM13_Initv>
  MX_UART8_Init();
 810070e:	f000 fcdf 	bl	81010d0 <_ZL13MX_UART8_Initv>
  MX_USB_OTG_HS_PCD_Init();
 8100712:	f000 fd3d 	bl	8101190 <_ZL22MX_USB_OTG_HS_PCD_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8100716:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 810071a:	4807      	ldr	r0, [pc, #28]	@ (8100738 <main+0xd4>)
 810071c:	f005 f8d7 	bl	81058ce <HAL_GPIO_TogglePin>
	  HAL_Delay(375);
 8100720:	f240 1077 	movw	r0, #375	@ 0x177
 8100724:	f002 fa02 	bl	8102b2c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8100728:	bf00      	nop
 810072a:	e7f4      	b.n	8100716 <main+0xb2>
 810072c:	58024400 	.word	0x58024400
 8100730:	e000ed00 	.word	0xe000ed00
 8100734:	58026400 	.word	0x58026400
 8100738:	58022000 	.word	0x58022000

0810073c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810073c:	b580      	push	{r7, lr}
 810073e:	b08a      	sub	sp, #40	@ 0x28
 8100740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100742:	f107 031c 	add.w	r3, r7, #28
 8100746:	2200      	movs	r2, #0
 8100748:	601a      	str	r2, [r3, #0]
 810074a:	605a      	str	r2, [r3, #4]
 810074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810074e:	463b      	mov	r3, r7
 8100750:	2200      	movs	r2, #0
 8100752:	601a      	str	r2, [r3, #0]
 8100754:	605a      	str	r2, [r3, #4]
 8100756:	609a      	str	r2, [r3, #8]
 8100758:	60da      	str	r2, [r3, #12]
 810075a:	611a      	str	r2, [r3, #16]
 810075c:	615a      	str	r2, [r3, #20]
 810075e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100760:	4b38      	ldr	r3, [pc, #224]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100762:	4a39      	ldr	r2, [pc, #228]	@ (8100848 <_ZL12MX_ADC1_Initv+0x10c>)
 8100764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8100766:	4b37      	ldr	r3, [pc, #220]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100768:	2200      	movs	r2, #0
 810076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810076c:	4b35      	ldr	r3, [pc, #212]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 810076e:	2200      	movs	r2, #0
 8100770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100772:	4b34      	ldr	r3, [pc, #208]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100774:	2200      	movs	r2, #0
 8100776:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100778:	4b32      	ldr	r3, [pc, #200]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 810077a:	2204      	movs	r2, #4
 810077c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810077e:	4b31      	ldr	r3, [pc, #196]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100780:	2200      	movs	r2, #0
 8100782:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100784:	4b2f      	ldr	r3, [pc, #188]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100786:	2200      	movs	r2, #0
 8100788:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810078a:	4b2e      	ldr	r3, [pc, #184]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 810078c:	2201      	movs	r2, #1
 810078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100790:	4b2c      	ldr	r3, [pc, #176]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100792:	2200      	movs	r2, #0
 8100794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100796:	4b2b      	ldr	r3, [pc, #172]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100798:	2200      	movs	r2, #0
 810079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810079c:	4b29      	ldr	r3, [pc, #164]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 810079e:	2200      	movs	r2, #0
 81007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81007a2:	4b28      	ldr	r3, [pc, #160]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007a4:	2200      	movs	r2, #0
 81007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81007a8:	4b26      	ldr	r3, [pc, #152]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007aa:	2200      	movs	r2, #0
 81007ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81007ae:	4b25      	ldr	r3, [pc, #148]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007b0:	2200      	movs	r2, #0
 81007b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81007b4:	4b23      	ldr	r3, [pc, #140]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81007bc:	4b21      	ldr	r3, [pc, #132]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007be:	2201      	movs	r2, #1
 81007c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81007c2:	4820      	ldr	r0, [pc, #128]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007c4:	f002 fbca 	bl	8102f5c <HAL_ADC_Init>
 81007c8:	4603      	mov	r3, r0
 81007ca:	2b00      	cmp	r3, #0
 81007cc:	bf14      	ite	ne
 81007ce:	2301      	movne	r3, #1
 81007d0:	2300      	moveq	r3, #0
 81007d2:	b2db      	uxtb	r3, r3
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	d001      	beq.n	81007dc <_ZL12MX_ADC1_Initv+0xa0>
  {
    Error_Handler();
 81007d8:	f000 fe5c 	bl	8101494 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007dc:	2300      	movs	r3, #0
 81007de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81007e0:	f107 031c 	add.w	r3, r7, #28
 81007e4:	4619      	mov	r1, r3
 81007e6:	4817      	ldr	r0, [pc, #92]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 81007e8:	f003 f97c 	bl	8103ae4 <HAL_ADCEx_MultiModeConfigChannel>
 81007ec:	4603      	mov	r3, r0
 81007ee:	2b00      	cmp	r3, #0
 81007f0:	bf14      	ite	ne
 81007f2:	2301      	movne	r3, #1
 81007f4:	2300      	moveq	r3, #0
 81007f6:	b2db      	uxtb	r3, r3
 81007f8:	2b00      	cmp	r3, #0
 81007fa:	d001      	beq.n	8100800 <_ZL12MX_ADC1_Initv+0xc4>
  {
    Error_Handler();
 81007fc:	f000 fe4a 	bl	8101494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100800:	4b12      	ldr	r3, [pc, #72]	@ (810084c <_ZL12MX_ADC1_Initv+0x110>)
 8100802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100804:	2306      	movs	r3, #6
 8100806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100808:	2300      	movs	r3, #0
 810080a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810080c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100810:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100812:	2304      	movs	r3, #4
 8100814:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100816:	2300      	movs	r3, #0
 8100818:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810081a:	2300      	movs	r3, #0
 810081c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810081e:	463b      	mov	r3, r7
 8100820:	4619      	mov	r1, r3
 8100822:	4808      	ldr	r0, [pc, #32]	@ (8100844 <_ZL12MX_ADC1_Initv+0x108>)
 8100824:	f002 fd3c 	bl	81032a0 <HAL_ADC_ConfigChannel>
 8100828:	4603      	mov	r3, r0
 810082a:	2b00      	cmp	r3, #0
 810082c:	bf14      	ite	ne
 810082e:	2301      	movne	r3, #1
 8100830:	2300      	moveq	r3, #0
 8100832:	b2db      	uxtb	r3, r3
 8100834:	2b00      	cmp	r3, #0
 8100836:	d001      	beq.n	810083c <_ZL12MX_ADC1_Initv+0x100>
  {
    Error_Handler();
 8100838:	f000 fe2c 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810083c:	bf00      	nop
 810083e:	3728      	adds	r7, #40	@ 0x28
 8100840:	46bd      	mov	sp, r7
 8100842:	bd80      	pop	{r7, pc}
 8100844:	10000180 	.word	0x10000180
 8100848:	40022000 	.word	0x40022000
 810084c:	04300002 	.word	0x04300002

08100850 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100850:	b580      	push	{r7, lr}
 8100852:	b088      	sub	sp, #32
 8100854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8100856:	1d3b      	adds	r3, r7, #4
 8100858:	2200      	movs	r2, #0
 810085a:	601a      	str	r2, [r3, #0]
 810085c:	605a      	str	r2, [r3, #4]
 810085e:	609a      	str	r2, [r3, #8]
 8100860:	60da      	str	r2, [r3, #12]
 8100862:	611a      	str	r2, [r3, #16]
 8100864:	615a      	str	r2, [r3, #20]
 8100866:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100868:	4b2e      	ldr	r3, [pc, #184]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 810086a:	4a2f      	ldr	r2, [pc, #188]	@ (8100928 <_ZL12MX_ADC3_Initv+0xd8>)
 810086c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810086e:	4b2d      	ldr	r3, [pc, #180]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100870:	2200      	movs	r2, #0
 8100872:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100874:	4b2b      	ldr	r3, [pc, #172]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100876:	2200      	movs	r2, #0
 8100878:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810087a:	4b2a      	ldr	r3, [pc, #168]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 810087c:	2204      	movs	r2, #4
 810087e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100880:	4b28      	ldr	r3, [pc, #160]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100882:	2200      	movs	r2, #0
 8100884:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100886:	4b27      	ldr	r3, [pc, #156]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100888:	2200      	movs	r2, #0
 810088a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810088c:	4b25      	ldr	r3, [pc, #148]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 810088e:	2201      	movs	r2, #1
 8100890:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100892:	4b24      	ldr	r3, [pc, #144]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100894:	2200      	movs	r2, #0
 8100896:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100898:	4b22      	ldr	r3, [pc, #136]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 810089a:	2200      	movs	r2, #0
 810089c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810089e:	4b21      	ldr	r3, [pc, #132]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008a0:	2200      	movs	r2, #0
 81008a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008a6:	2200      	movs	r2, #0
 81008a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81008aa:	4b1e      	ldr	r3, [pc, #120]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008ac:	2200      	movs	r2, #0
 81008ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008b2:	2200      	movs	r2, #0
 81008b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 81008b6:	4b1b      	ldr	r3, [pc, #108]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008b8:	2200      	movs	r2, #0
 81008ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 81008be:	4b19      	ldr	r3, [pc, #100]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008c0:	2201      	movs	r2, #1
 81008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81008c4:	4817      	ldr	r0, [pc, #92]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 81008c6:	f002 fb49 	bl	8102f5c <HAL_ADC_Init>
 81008ca:	4603      	mov	r3, r0
 81008cc:	2b00      	cmp	r3, #0
 81008ce:	bf14      	ite	ne
 81008d0:	2301      	movne	r3, #1
 81008d2:	2300      	moveq	r3, #0
 81008d4:	b2db      	uxtb	r3, r3
 81008d6:	2b00      	cmp	r3, #0
 81008d8:	d001      	beq.n	81008de <_ZL12MX_ADC3_Initv+0x8e>
  {
    Error_Handler();
 81008da:	f000 fddb 	bl	8101494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81008de:	2301      	movs	r3, #1
 81008e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81008e2:	2306      	movs	r3, #6
 81008e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81008e6:	2300      	movs	r3, #0
 81008e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81008ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81008ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81008f0:	2304      	movs	r3, #4
 81008f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81008f4:	2300      	movs	r3, #0
 81008f6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81008f8:	2300      	movs	r3, #0
 81008fa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81008fc:	1d3b      	adds	r3, r7, #4
 81008fe:	4619      	mov	r1, r3
 8100900:	4808      	ldr	r0, [pc, #32]	@ (8100924 <_ZL12MX_ADC3_Initv+0xd4>)
 8100902:	f002 fccd 	bl	81032a0 <HAL_ADC_ConfigChannel>
 8100906:	4603      	mov	r3, r0
 8100908:	2b00      	cmp	r3, #0
 810090a:	bf14      	ite	ne
 810090c:	2301      	movne	r3, #1
 810090e:	2300      	moveq	r3, #0
 8100910:	b2db      	uxtb	r3, r3
 8100912:	2b00      	cmp	r3, #0
 8100914:	d001      	beq.n	810091a <_ZL12MX_ADC3_Initv+0xca>
  {
    Error_Handler();
 8100916:	f000 fdbd 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810091a:	bf00      	nop
 810091c:	3720      	adds	r7, #32
 810091e:	46bd      	mov	sp, r7
 8100920:	bd80      	pop	{r7, pc}
 8100922:	bf00      	nop
 8100924:	100001e4 	.word	0x100001e4
 8100928:	58026000 	.word	0x58026000

0810092c <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 810092c:	b580      	push	{r7, lr}
 810092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100930:	4b21      	ldr	r3, [pc, #132]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8100932:	4a22      	ldr	r2, [pc, #136]	@ (81009bc <_ZL11MX_ETH_Initv+0x90>)
 8100934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100936:	4b22      	ldr	r3, [pc, #136]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 8100938:	2200      	movs	r2, #0
 810093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 810093c:	4b20      	ldr	r3, [pc, #128]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 810093e:	2280      	movs	r2, #128	@ 0x80
 8100940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100942:	4b1f      	ldr	r3, [pc, #124]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 8100944:	22e1      	movs	r2, #225	@ 0xe1
 8100946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100948:	4b1d      	ldr	r3, [pc, #116]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 810094a:	2200      	movs	r2, #0
 810094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810094e:	4b1c      	ldr	r3, [pc, #112]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 8100950:	2200      	movs	r2, #0
 8100952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100954:	4b1a      	ldr	r3, [pc, #104]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 8100956:	2200      	movs	r2, #0
 8100958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 810095a:	4b17      	ldr	r3, [pc, #92]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 810095c:	4a18      	ldr	r2, [pc, #96]	@ (81009c0 <_ZL11MX_ETH_Initv+0x94>)
 810095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8100960:	4b15      	ldr	r3, [pc, #84]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8100962:	2201      	movs	r2, #1
 8100964:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100966:	4b14      	ldr	r3, [pc, #80]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8100968:	4a16      	ldr	r2, [pc, #88]	@ (81009c4 <_ZL11MX_ETH_Initv+0x98>)
 810096a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810096c:	4b12      	ldr	r3, [pc, #72]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 810096e:	4a16      	ldr	r2, [pc, #88]	@ (81009c8 <_ZL11MX_ETH_Initv+0x9c>)
 8100970:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8100972:	4b11      	ldr	r3, [pc, #68]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8100974:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100978:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810097a:	480f      	ldr	r0, [pc, #60]	@ (81009b8 <_ZL11MX_ETH_Initv+0x8c>)
 810097c:	f004 f9aa 	bl	8104cd4 <HAL_ETH_Init>
 8100980:	4603      	mov	r3, r0
 8100982:	2b00      	cmp	r3, #0
 8100984:	bf14      	ite	ne
 8100986:	2301      	movne	r3, #1
 8100988:	2300      	moveq	r3, #0
 810098a:	b2db      	uxtb	r3, r3
 810098c:	2b00      	cmp	r3, #0
 810098e:	d001      	beq.n	8100994 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8100990:	f000 fd80 	bl	8101494 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100994:	2238      	movs	r2, #56	@ 0x38
 8100996:	2100      	movs	r1, #0
 8100998:	480c      	ldr	r0, [pc, #48]	@ (81009cc <_ZL11MX_ETH_Initv+0xa0>)
 810099a:	f00d fc9f 	bl	810e2dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 810099e:	4b0b      	ldr	r3, [pc, #44]	@ (81009cc <_ZL11MX_ETH_Initv+0xa0>)
 81009a0:	2221      	movs	r2, #33	@ 0x21
 81009a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81009a4:	4b09      	ldr	r3, [pc, #36]	@ (81009cc <_ZL11MX_ETH_Initv+0xa0>)
 81009a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 81009aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81009ac:	4b07      	ldr	r3, [pc, #28]	@ (81009cc <_ZL11MX_ETH_Initv+0xa0>)
 81009ae:	2200      	movs	r2, #0
 81009b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 81009b2:	bf00      	nop
 81009b4:	bd80      	pop	{r7, pc}
 81009b6:	bf00      	nop
 81009b8:	10000248 	.word	0x10000248
 81009bc:	40028000 	.word	0x40028000
 81009c0:	10000e90 	.word	0x10000e90
 81009c4:	100000cc 	.word	0x100000cc
 81009c8:	1000006c 	.word	0x1000006c
 81009cc:	10000148 	.word	0x10000148

081009d0 <_ZL16MX_HDMI_CEC_Initv>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 81009d0:	b580      	push	{r7, lr}
 81009d2:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 81009d4:	4b18      	ldr	r3, [pc, #96]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009d6:	4a19      	ldr	r2, [pc, #100]	@ (8100a3c <_ZL16MX_HDMI_CEC_Initv+0x6c>)
 81009d8:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 81009da:	4b17      	ldr	r3, [pc, #92]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009dc:	2200      	movs	r2, #0
 81009de:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 81009e0:	4b15      	ldr	r3, [pc, #84]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009e2:	2200      	movs	r2, #0
 81009e4:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 81009e6:	4b14      	ldr	r3, [pc, #80]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009e8:	2210      	movs	r2, #16
 81009ea:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 81009ec:	4b12      	ldr	r3, [pc, #72]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009ee:	2200      	movs	r2, #0
 81009f0:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81009f2:	4b11      	ldr	r3, [pc, #68]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009f4:	2200      	movs	r2, #0
 81009f6:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81009fa:	2200      	movs	r2, #0
 81009fc:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a00:	2200      	movs	r2, #0
 8100a02:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100a04:	4b0c      	ldr	r3, [pc, #48]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100a0a:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a0e:	2200      	movs	r2, #0
 8100a10:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100a12:	4b09      	ldr	r3, [pc, #36]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a14:	4a0a      	ldr	r2, [pc, #40]	@ (8100a40 <_ZL16MX_HDMI_CEC_Initv+0x70>)
 8100a16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100a18:	4807      	ldr	r0, [pc, #28]	@ (8100a38 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a1a:	f003 f945 	bl	8103ca8 <HAL_CEC_Init>
 8100a1e:	4603      	mov	r3, r0
 8100a20:	2b00      	cmp	r3, #0
 8100a22:	bf14      	ite	ne
 8100a24:	2301      	movne	r3, #1
 8100a26:	2300      	moveq	r3, #0
 8100a28:	b2db      	uxtb	r3, r3
 8100a2a:	2b00      	cmp	r3, #0
 8100a2c:	d001      	beq.n	8100a32 <_ZL16MX_HDMI_CEC_Initv+0x62>
  {
    Error_Handler();
 8100a2e:	f000 fd31 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100a32:	bf00      	nop
 8100a34:	bd80      	pop	{r7, pc}
 8100a36:	bf00      	nop
 8100a38:	100002f8 	.word	0x100002f8
 8100a3c:	40006c00 	.word	0x40006c00
 8100a40:	10000e80 	.word	0x10000e80

08100a44 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100a44:	b580      	push	{r7, lr}
 8100a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100a48:	4b13      	ldr	r3, [pc, #76]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a4a:	4a14      	ldr	r2, [pc, #80]	@ (8100a9c <_ZL15MX_QUADSPI_Initv+0x58>)
 8100a4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100a4e:	4b12      	ldr	r3, [pc, #72]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a50:	22ff      	movs	r2, #255	@ 0xff
 8100a52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100a54:	4b10      	ldr	r3, [pc, #64]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a56:	2201      	movs	r2, #1
 8100a58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a5c:	2200      	movs	r2, #0
 8100a5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100a60:	4b0d      	ldr	r3, [pc, #52]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a62:	2201      	movs	r2, #1
 8100a64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100a66:	4b0c      	ldr	r3, [pc, #48]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a68:	2200      	movs	r2, #0
 8100a6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a6e:	2200      	movs	r2, #0
 8100a70:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100a72:	4b09      	ldr	r3, [pc, #36]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a74:	2240      	movs	r2, #64	@ 0x40
 8100a76:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100a78:	4807      	ldr	r0, [pc, #28]	@ (8100a98 <_ZL15MX_QUADSPI_Initv+0x54>)
 8100a7a:	f005 f941 	bl	8105d00 <HAL_QSPI_Init>
 8100a7e:	4603      	mov	r3, r0
 8100a80:	2b00      	cmp	r3, #0
 8100a82:	bf14      	ite	ne
 8100a84:	2301      	movne	r3, #1
 8100a86:	2300      	moveq	r3, #0
 8100a88:	b2db      	uxtb	r3, r3
 8100a8a:	2b00      	cmp	r3, #0
 8100a8c:	d001      	beq.n	8100a92 <_ZL15MX_QUADSPI_Initv+0x4e>
  {
    Error_Handler();
 8100a8e:	f000 fd01 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100a92:	bf00      	nop
 8100a94:	bd80      	pop	{r7, pc}
 8100a96:	bf00      	nop
 8100a98:	1000033c 	.word	0x1000033c
 8100a9c:	52005000 	.word	0x52005000

08100aa0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100aa0:	b580      	push	{r7, lr}
 8100aa2:	b08a      	sub	sp, #40	@ 0x28
 8100aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100aa6:	463b      	mov	r3, r7
 8100aa8:	2228      	movs	r2, #40	@ 0x28
 8100aaa:	2100      	movs	r1, #0
 8100aac:	4618      	mov	r0, r3
 8100aae:	f00d fc15 	bl	810e2dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100ab2:	4b25      	ldr	r3, [pc, #148]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ab4:	4a25      	ldr	r2, [pc, #148]	@ (8100b4c <_ZL11MX_RTC_Initv+0xac>)
 8100ab6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100ab8:	4b23      	ldr	r3, [pc, #140]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100aba:	2200      	movs	r2, #0
 8100abc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100abe:	4b22      	ldr	r3, [pc, #136]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ac0:	227f      	movs	r2, #127	@ 0x7f
 8100ac2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100ac4:	4b20      	ldr	r3, [pc, #128]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ac6:	22ff      	movs	r2, #255	@ 0xff
 8100ac8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100aca:	4b1f      	ldr	r3, [pc, #124]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100acc:	2200      	movs	r2, #0
 8100ace:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ad2:	2200      	movs	r2, #0
 8100ad4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ad8:	2200      	movs	r2, #0
 8100ada:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100adc:	4b1a      	ldr	r3, [pc, #104]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ade:	2200      	movs	r2, #0
 8100ae0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100ae2:	4819      	ldr	r0, [pc, #100]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100ae4:	f008 f8dc 	bl	8108ca0 <HAL_RTC_Init>
 8100ae8:	4603      	mov	r3, r0
 8100aea:	2b00      	cmp	r3, #0
 8100aec:	bf14      	ite	ne
 8100aee:	2301      	movne	r3, #1
 8100af0:	2300      	moveq	r3, #0
 8100af2:	b2db      	uxtb	r3, r3
 8100af4:	2b00      	cmp	r3, #0
 8100af6:	d001      	beq.n	8100afc <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 8100af8:	f000 fccc 	bl	8101494 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100afc:	2301      	movs	r3, #1
 8100afe:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100b00:	2301      	movs	r3, #1
 8100b02:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100b04:	2300      	movs	r3, #0
 8100b06:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100b08:	2300      	movs	r3, #0
 8100b0a:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100b0c:	2300      	movs	r3, #0
 8100b0e:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100b10:	2300      	movs	r3, #0
 8100b12:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100b14:	2300      	movs	r3, #0
 8100b16:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100b18:	2300      	movs	r3, #0
 8100b1a:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100b1c:	2380      	movs	r3, #128	@ 0x80
 8100b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100b20:	463b      	mov	r3, r7
 8100b22:	4619      	mov	r1, r3
 8100b24:	4808      	ldr	r0, [pc, #32]	@ (8100b48 <_ZL11MX_RTC_Initv+0xa8>)
 8100b26:	f008 f9d3 	bl	8108ed0 <HAL_RTCEx_SetTamper>
 8100b2a:	4603      	mov	r3, r0
 8100b2c:	2b00      	cmp	r3, #0
 8100b2e:	bf14      	ite	ne
 8100b30:	2301      	movne	r3, #1
 8100b32:	2300      	moveq	r3, #0
 8100b34:	b2db      	uxtb	r3, r3
 8100b36:	2b00      	cmp	r3, #0
 8100b38:	d001      	beq.n	8100b3e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8100b3a:	f000 fcab 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100b3e:	bf00      	nop
 8100b40:	3728      	adds	r7, #40	@ 0x28
 8100b42:	46bd      	mov	sp, r7
 8100b44:	bd80      	pop	{r7, pc}
 8100b46:	bf00      	nop
 8100b48:	10000388 	.word	0x10000388
 8100b4c:	58004000 	.word	0x58004000

08100b50 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100b50:	b580      	push	{r7, lr}
 8100b52:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100b54:	4b4f      	ldr	r3, [pc, #316]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b56:	4a50      	ldr	r2, [pc, #320]	@ (8100c98 <_ZL12MX_SAI1_Initv+0x148>)
 8100b58:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100b60:	4b4c      	ldr	r3, [pc, #304]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100b66:	4b4b      	ldr	r3, [pc, #300]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b68:	2240      	movs	r2, #64	@ 0x40
 8100b6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100b6c:	4b49      	ldr	r3, [pc, #292]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b6e:	2200      	movs	r2, #0
 8100b70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100b72:	4b48      	ldr	r3, [pc, #288]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100b78:	4b46      	ldr	r3, [pc, #280]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b7a:	2200      	movs	r2, #0
 8100b7c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b7e:	4b45      	ldr	r3, [pc, #276]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b80:	2200      	movs	r2, #0
 8100b82:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b84:	4b43      	ldr	r3, [pc, #268]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b86:	2200      	movs	r2, #0
 8100b88:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b8a:	4b42      	ldr	r3, [pc, #264]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b8c:	2200      	movs	r2, #0
 8100b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b90:	4b40      	ldr	r3, [pc, #256]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b92:	2200      	movs	r2, #0
 8100b94:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100b96:	4b3f      	ldr	r3, [pc, #252]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b98:	4a40      	ldr	r2, [pc, #256]	@ (8100c9c <_ZL12MX_SAI1_Initv+0x14c>)
 8100b9a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100b9e:	2200      	movs	r2, #0
 8100ba0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100ba4:	2200      	movs	r2, #0
 8100ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100baa:	2200      	movs	r2, #0
 8100bac:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100bae:	4b39      	ldr	r3, [pc, #228]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bb0:	2200      	movs	r2, #0
 8100bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100bb4:	4b37      	ldr	r3, [pc, #220]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bb6:	2200      	movs	r2, #0
 8100bb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100bbc:	4b35      	ldr	r3, [pc, #212]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bbe:	2201      	movs	r2, #1
 8100bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100bc2:	4b34      	ldr	r3, [pc, #208]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100bca:	4b32      	ldr	r3, [pc, #200]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bcc:	2208      	movs	r2, #8
 8100bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100bd0:	4b30      	ldr	r3, [pc, #192]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bd2:	2201      	movs	r2, #1
 8100bd4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bd8:	2200      	movs	r2, #0
 8100bda:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bde:	2200      	movs	r2, #0
 8100be0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100be2:	4b2c      	ldr	r3, [pc, #176]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100be4:	2200      	movs	r2, #0
 8100be6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100be8:	4b2a      	ldr	r3, [pc, #168]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bea:	2200      	movs	r2, #0
 8100bec:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100bee:	4b29      	ldr	r3, [pc, #164]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bf0:	2200      	movs	r2, #0
 8100bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100bf4:	4b27      	ldr	r3, [pc, #156]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bf6:	2201      	movs	r2, #1
 8100bf8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100bfa:	4b26      	ldr	r3, [pc, #152]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100bfc:	2200      	movs	r2, #0
 8100bfe:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100c00:	4824      	ldr	r0, [pc, #144]	@ (8100c94 <_ZL12MX_SAI1_Initv+0x144>)
 8100c02:	f008 fa45 	bl	8109090 <HAL_SAI_Init>
 8100c06:	4603      	mov	r3, r0
 8100c08:	2b00      	cmp	r3, #0
 8100c0a:	bf14      	ite	ne
 8100c0c:	2301      	movne	r3, #1
 8100c0e:	2300      	moveq	r3, #0
 8100c10:	b2db      	uxtb	r3, r3
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d001      	beq.n	8100c1a <_ZL12MX_SAI1_Initv+0xca>
  {
    Error_Handler();
 8100c16:	f000 fc3d 	bl	8101494 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100c1a:	4b21      	ldr	r3, [pc, #132]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c1c:	4a21      	ldr	r2, [pc, #132]	@ (8100ca4 <_ZL12MX_SAI1_Initv+0x154>)
 8100c1e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100c20:	4b1f      	ldr	r3, [pc, #124]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c22:	2204      	movs	r2, #4
 8100c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100c26:	4b1e      	ldr	r3, [pc, #120]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c28:	2200      	movs	r2, #0
 8100c2a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c2e:	2200      	movs	r2, #0
 8100c30:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100c32:	4b1b      	ldr	r3, [pc, #108]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c34:	2200      	movs	r2, #0
 8100c36:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c38:	4b19      	ldr	r3, [pc, #100]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c3e:	4b18      	ldr	r3, [pc, #96]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c40:	2200      	movs	r2, #0
 8100c42:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100c44:	4b16      	ldr	r3, [pc, #88]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c46:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100c4a:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c4c:	4b14      	ldr	r3, [pc, #80]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c4e:	2200      	movs	r2, #0
 8100c50:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c52:	4b13      	ldr	r3, [pc, #76]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c54:	2200      	movs	r2, #0
 8100c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c58:	4b11      	ldr	r3, [pc, #68]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c5a:	2200      	movs	r2, #0
 8100c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100c5e:	4b10      	ldr	r3, [pc, #64]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c60:	2200      	movs	r2, #0
 8100c62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100c66:	4b0e      	ldr	r3, [pc, #56]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c68:	2201      	movs	r2, #1
 8100c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c72:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100c74:	480a      	ldr	r0, [pc, #40]	@ (8100ca0 <_ZL12MX_SAI1_Initv+0x150>)
 8100c76:	f008 fa0b 	bl	8109090 <HAL_SAI_Init>
 8100c7a:	4603      	mov	r3, r0
 8100c7c:	2b00      	cmp	r3, #0
 8100c7e:	bf14      	ite	ne
 8100c80:	2301      	movne	r3, #1
 8100c82:	2300      	moveq	r3, #0
 8100c84:	b2db      	uxtb	r3, r3
 8100c86:	2b00      	cmp	r3, #0
 8100c88:	d001      	beq.n	8100c8e <_ZL12MX_SAI1_Initv+0x13e>
  {
    Error_Handler();
 8100c8a:	f000 fc03 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100c8e:	bf00      	nop
 8100c90:	bd80      	pop	{r7, pc}
 8100c92:	bf00      	nop
 8100c94:	100003ac 	.word	0x100003ac
 8100c98:	40015804 	.word	0x40015804
 8100c9c:	0002ee00 	.word	0x0002ee00
 8100ca0:	10000444 	.word	0x10000444
 8100ca4:	40015824 	.word	0x40015824

08100ca8 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100ca8:	b580      	push	{r7, lr}
 8100caa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100cac:	4b10      	ldr	r3, [pc, #64]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cae:	4a11      	ldr	r2, [pc, #68]	@ (8100cf4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8100cb0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cb4:	2200      	movs	r2, #0
 8100cb6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cba:	2200      	movs	r2, #0
 8100cbc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100cc4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cc8:	2200      	movs	r2, #0
 8100cca:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100ccc:	4b08      	ldr	r3, [pc, #32]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cce:	2200      	movs	r2, #0
 8100cd0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100cd2:	4807      	ldr	r0, [pc, #28]	@ (8100cf0 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100cd4:	f008 fcc0 	bl	8109658 <HAL_SD_Init>
 8100cd8:	4603      	mov	r3, r0
 8100cda:	2b00      	cmp	r3, #0
 8100cdc:	bf14      	ite	ne
 8100cde:	2301      	movne	r3, #1
 8100ce0:	2300      	moveq	r3, #0
 8100ce2:	b2db      	uxtb	r3, r3
 8100ce4:	2b00      	cmp	r3, #0
 8100ce6:	d001      	beq.n	8100cec <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8100ce8:	f000 fbd4 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100cec:	bf00      	nop
 8100cee:	bd80      	pop	{r7, pc}
 8100cf0:	100004dc 	.word	0x100004dc
 8100cf4:	52007000 	.word	0x52007000

08100cf8 <_ZL16MX_SPDIFRX1_Initv>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100cf8:	b580      	push	{r7, lr}
 8100cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100cfe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100d02:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100d04:	4b1a      	ldr	r3, [pc, #104]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d06:	2200      	movs	r2, #0
 8100d08:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100d0a:	4b19      	ldr	r3, [pc, #100]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d0c:	2200      	movs	r2, #0
 8100d0e:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100d10:	4b17      	ldr	r3, [pc, #92]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d12:	2200      	movs	r2, #0
 8100d14:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100d16:	4b16      	ldr	r3, [pc, #88]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100d1c:	4b14      	ldr	r3, [pc, #80]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100d22:	4b13      	ldr	r3, [pc, #76]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100d28:	4b11      	ldr	r3, [pc, #68]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d2a:	2200      	movs	r2, #0
 8100d2c:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100d2e:	4b10      	ldr	r3, [pc, #64]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d30:	2200      	movs	r2, #0
 8100d32:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100d34:	4b0e      	ldr	r3, [pc, #56]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d36:	2200      	movs	r2, #0
 8100d38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d3c:	2200      	movs	r2, #0
 8100d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100d40:	4b0b      	ldr	r3, [pc, #44]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d42:	2200      	movs	r2, #0
 8100d44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100d48:	4b09      	ldr	r3, [pc, #36]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d4a:	2200      	movs	r2, #0
 8100d4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100d50:	4807      	ldr	r0, [pc, #28]	@ (8100d70 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d52:	f009 fd2b 	bl	810a7ac <HAL_SPDIFRX_Init>
 8100d56:	4603      	mov	r3, r0
 8100d58:	2b00      	cmp	r3, #0
 8100d5a:	bf14      	ite	ne
 8100d5c:	2301      	movne	r3, #1
 8100d5e:	2300      	moveq	r3, #0
 8100d60:	b2db      	uxtb	r3, r3
 8100d62:	2b00      	cmp	r3, #0
 8100d64:	d001      	beq.n	8100d6a <_ZL16MX_SPDIFRX1_Initv+0x72>
  {
    Error_Handler();
 8100d66:	f000 fb95 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100d6a:	bf00      	nop
 8100d6c:	bd80      	pop	{r7, pc}
 8100d6e:	bf00      	nop
 8100d70:	10000558 	.word	0x10000558

08100d74 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100d74:	b580      	push	{r7, lr}
 8100d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100d78:	4b29      	ldr	r3, [pc, #164]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8100e24 <_ZL12MX_SPI2_Initv+0xb0>)
 8100d7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100d7e:	4b28      	ldr	r3, [pc, #160]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d80:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100d84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100d86:	4b26      	ldr	r3, [pc, #152]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100d8c:	4b24      	ldr	r3, [pc, #144]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d8e:	2203      	movs	r2, #3
 8100d90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d92:	4b23      	ldr	r3, [pc, #140]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d94:	2200      	movs	r2, #0
 8100d96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100d98:	4b21      	ldr	r3, [pc, #132]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100d9e:	4b20      	ldr	r3, [pc, #128]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100da0:	2200      	movs	r2, #0
 8100da2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100da4:	4b1e      	ldr	r3, [pc, #120]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100da6:	2200      	movs	r2, #0
 8100da8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100daa:	4b1d      	ldr	r3, [pc, #116]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dac:	2200      	movs	r2, #0
 8100dae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100db0:	4b1b      	ldr	r3, [pc, #108]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100db2:	2200      	movs	r2, #0
 8100db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100db6:	4b1a      	ldr	r3, [pc, #104]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100dbc:	4b18      	ldr	r3, [pc, #96]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100dc2:	4b17      	ldr	r3, [pc, #92]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100dc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100dca:	4b15      	ldr	r3, [pc, #84]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100dd0:	4b13      	ldr	r3, [pc, #76]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dd2:	2200      	movs	r2, #0
 8100dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100dd6:	4b12      	ldr	r3, [pc, #72]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dd8:	2200      	movs	r2, #0
 8100dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ddc:	4b10      	ldr	r3, [pc, #64]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dde:	2200      	movs	r2, #0
 8100de0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100de2:	4b0f      	ldr	r3, [pc, #60]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100de4:	2200      	movs	r2, #0
 8100de6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100de8:	4b0d      	ldr	r3, [pc, #52]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dea:	2200      	movs	r2, #0
 8100dec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100dee:	4b0c      	ldr	r3, [pc, #48]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100df0:	2200      	movs	r2, #0
 8100df2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100df4:	4b0a      	ldr	r3, [pc, #40]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100df6:	2200      	movs	r2, #0
 8100df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100dfa:	4b09      	ldr	r3, [pc, #36]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100e00:	4807      	ldr	r0, [pc, #28]	@ (8100e20 <_ZL12MX_SPI2_Initv+0xac>)
 8100e02:	f009 fd41 	bl	810a888 <HAL_SPI_Init>
 8100e06:	4603      	mov	r3, r0
 8100e08:	2b00      	cmp	r3, #0
 8100e0a:	bf14      	ite	ne
 8100e0c:	2301      	movne	r3, #1
 8100e0e:	2300      	moveq	r3, #0
 8100e10:	b2db      	uxtb	r3, r3
 8100e12:	2b00      	cmp	r3, #0
 8100e14:	d001      	beq.n	8100e1a <_ZL12MX_SPI2_Initv+0xa6>
  {
    Error_Handler();
 8100e16:	f000 fb3d 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100e1a:	bf00      	nop
 8100e1c:	bd80      	pop	{r7, pc}
 8100e1e:	bf00      	nop
 8100e20:	100005a8 	.word	0x100005a8
 8100e24:	40003800 	.word	0x40003800

08100e28 <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e2c:	4b29      	ldr	r3, [pc, #164]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8100ed8 <_ZL12MX_SPI5_Initv+0xb0>)
 8100e30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100e32:	4b28      	ldr	r3, [pc, #160]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100e3a:	4b26      	ldr	r3, [pc, #152]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e40:	4b24      	ldr	r3, [pc, #144]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e42:	2203      	movs	r2, #3
 8100e44:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e46:	4b23      	ldr	r3, [pc, #140]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e48:	2200      	movs	r2, #0
 8100e4a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e4c:	4b21      	ldr	r3, [pc, #132]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e4e:	2200      	movs	r2, #0
 8100e50:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100e52:	4b20      	ldr	r3, [pc, #128]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e54:	2200      	movs	r2, #0
 8100e56:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100e58:	4b1e      	ldr	r3, [pc, #120]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e5a:	2200      	movs	r2, #0
 8100e5c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e60:	2200      	movs	r2, #0
 8100e62:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e64:	4b1b      	ldr	r3, [pc, #108]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e66:	2200      	movs	r2, #0
 8100e68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e6c:	2200      	movs	r2, #0
 8100e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100e70:	4b18      	ldr	r3, [pc, #96]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e72:	2200      	movs	r2, #0
 8100e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e76:	4b17      	ldr	r3, [pc, #92]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100e7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e7e:	4b15      	ldr	r3, [pc, #84]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e80:	2200      	movs	r2, #0
 8100e82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e84:	4b13      	ldr	r3, [pc, #76]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e86:	2200      	movs	r2, #0
 8100e88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e8a:	4b12      	ldr	r3, [pc, #72]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e8c:	2200      	movs	r2, #0
 8100e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e90:	4b10      	ldr	r3, [pc, #64]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e92:	2200      	movs	r2, #0
 8100e94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e96:	4b0f      	ldr	r3, [pc, #60]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e98:	2200      	movs	r2, #0
 8100e9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100e9e:	2200      	movs	r2, #0
 8100ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100ea4:	2200      	movs	r2, #0
 8100ea6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100eaa:	2200      	movs	r2, #0
 8100eac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100eae:	4b09      	ldr	r3, [pc, #36]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100eb4:	4807      	ldr	r0, [pc, #28]	@ (8100ed4 <_ZL12MX_SPI5_Initv+0xac>)
 8100eb6:	f009 fce7 	bl	810a888 <HAL_SPI_Init>
 8100eba:	4603      	mov	r3, r0
 8100ebc:	2b00      	cmp	r3, #0
 8100ebe:	bf14      	ite	ne
 8100ec0:	2301      	movne	r3, #1
 8100ec2:	2300      	moveq	r3, #0
 8100ec4:	b2db      	uxtb	r3, r3
 8100ec6:	2b00      	cmp	r3, #0
 8100ec8:	d001      	beq.n	8100ece <_ZL12MX_SPI5_Initv+0xa6>
  {
    Error_Handler();
 8100eca:	f000 fae3 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100ece:	bf00      	nop
 8100ed0:	bd80      	pop	{r7, pc}
 8100ed2:	bf00      	nop
 8100ed4:	10000630 	.word	0x10000630
 8100ed8:	40015000 	.word	0x40015000

08100edc <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100edc:	b580      	push	{r7, lr}
 8100ede:	b096      	sub	sp, #88	@ 0x58
 8100ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100ee2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	601a      	str	r2, [r3, #0]
 8100eea:	605a      	str	r2, [r3, #4]
 8100eec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100eee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100ef2:	2200      	movs	r2, #0
 8100ef4:	601a      	str	r2, [r3, #0]
 8100ef6:	605a      	str	r2, [r3, #4]
 8100ef8:	609a      	str	r2, [r3, #8]
 8100efa:	60da      	str	r2, [r3, #12]
 8100efc:	611a      	str	r2, [r3, #16]
 8100efe:	615a      	str	r2, [r3, #20]
 8100f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100f02:	1d3b      	adds	r3, r7, #4
 8100f04:	222c      	movs	r2, #44	@ 0x2c
 8100f06:	2100      	movs	r1, #0
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f00d f9e7 	bl	810e2dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100f0e:	4b43      	ldr	r3, [pc, #268]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f10:	4a43      	ldr	r2, [pc, #268]	@ (8101020 <_ZL12MX_TIM8_Initv+0x144>)
 8100f12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100f14:	4b41      	ldr	r3, [pc, #260]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f1a:	4b40      	ldr	r3, [pc, #256]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f1c:	2200      	movs	r2, #0
 8100f1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100f20:	4b3e      	ldr	r3, [pc, #248]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100f26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f28:	4b3c      	ldr	r3, [pc, #240]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100f2e:	4b3b      	ldr	r3, [pc, #236]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f30:	2200      	movs	r2, #0
 8100f32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f34:	4b39      	ldr	r3, [pc, #228]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f36:	2200      	movs	r2, #0
 8100f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100f3a:	4838      	ldr	r0, [pc, #224]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f3c:	f009 fe3a 	bl	810abb4 <HAL_TIM_OC_Init>
 8100f40:	4603      	mov	r3, r0
 8100f42:	2b00      	cmp	r3, #0
 8100f44:	bf14      	ite	ne
 8100f46:	2301      	movne	r3, #1
 8100f48:	2300      	moveq	r3, #0
 8100f4a:	b2db      	uxtb	r3, r3
 8100f4c:	2b00      	cmp	r3, #0
 8100f4e:	d001      	beq.n	8100f54 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8100f50:	f000 faa0 	bl	8101494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100f54:	2300      	movs	r3, #0
 8100f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100f58:	2300      	movs	r3, #0
 8100f5a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100f5c:	2300      	movs	r3, #0
 8100f5e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100f60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100f64:	4619      	mov	r1, r3
 8100f66:	482d      	ldr	r0, [pc, #180]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100f68:	f00a fc92 	bl	810b890 <HAL_TIMEx_MasterConfigSynchronization>
 8100f6c:	4603      	mov	r3, r0
 8100f6e:	2b00      	cmp	r3, #0
 8100f70:	bf14      	ite	ne
 8100f72:	2301      	movne	r3, #1
 8100f74:	2300      	moveq	r3, #0
 8100f76:	b2db      	uxtb	r3, r3
 8100f78:	2b00      	cmp	r3, #0
 8100f7a:	d001      	beq.n	8100f80 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8100f7c:	f000 fa8a 	bl	8101494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100f80:	2300      	movs	r3, #0
 8100f82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8100f84:	2300      	movs	r3, #0
 8100f86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100f88:	2300      	movs	r3, #0
 8100f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100f8c:	2300      	movs	r3, #0
 8100f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100f90:	2300      	movs	r3, #0
 8100f92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100f94:	2300      	movs	r3, #0
 8100f96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100f98:	2300      	movs	r3, #0
 8100f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100fa0:	2204      	movs	r2, #4
 8100fa2:	4619      	mov	r1, r3
 8100fa4:	481d      	ldr	r0, [pc, #116]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100fa6:	f009 febd 	bl	810ad24 <HAL_TIM_OC_ConfigChannel>
 8100faa:	4603      	mov	r3, r0
 8100fac:	2b00      	cmp	r3, #0
 8100fae:	bf14      	ite	ne
 8100fb0:	2301      	movne	r3, #1
 8100fb2:	2300      	moveq	r3, #0
 8100fb4:	b2db      	uxtb	r3, r3
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	d001      	beq.n	8100fbe <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8100fba:	f000 fa6b 	bl	8101494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100fbe:	2300      	movs	r3, #0
 8100fc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100fc2:	2300      	movs	r3, #0
 8100fc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100fc6:	2300      	movs	r3, #0
 8100fc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100fca:	2300      	movs	r3, #0
 8100fcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100fce:	2300      	movs	r3, #0
 8100fd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100fd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100fd8:	2300      	movs	r3, #0
 8100fda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100fdc:	2300      	movs	r3, #0
 8100fde:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8100fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100fe6:	2300      	movs	r3, #0
 8100fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100fea:	2300      	movs	r3, #0
 8100fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100fee:	1d3b      	adds	r3, r7, #4
 8100ff0:	4619      	mov	r1, r3
 8100ff2:	480a      	ldr	r0, [pc, #40]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 8100ff4:	f00a fcda 	bl	810b9ac <HAL_TIMEx_ConfigBreakDeadTime>
 8100ff8:	4603      	mov	r3, r0
 8100ffa:	2b00      	cmp	r3, #0
 8100ffc:	bf14      	ite	ne
 8100ffe:	2301      	movne	r3, #1
 8101000:	2300      	moveq	r3, #0
 8101002:	b2db      	uxtb	r3, r3
 8101004:	2b00      	cmp	r3, #0
 8101006:	d001      	beq.n	810100c <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 8101008:	f000 fa44 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 810100c:	4803      	ldr	r0, [pc, #12]	@ (810101c <_ZL12MX_TIM8_Initv+0x140>)
 810100e:	f000 ffe5 	bl	8101fdc <HAL_TIM_MspPostInit>

}
 8101012:	bf00      	nop
 8101014:	3758      	adds	r7, #88	@ 0x58
 8101016:	46bd      	mov	sp, r7
 8101018:	bd80      	pop	{r7, pc}
 810101a:	bf00      	nop
 810101c:	100006b8 	.word	0x100006b8
 8101020:	40010400 	.word	0x40010400

08101024 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8101024:	b580      	push	{r7, lr}
 8101026:	b084      	sub	sp, #16
 8101028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 810102a:	463b      	mov	r3, r7
 810102c:	2200      	movs	r2, #0
 810102e:	601a      	str	r2, [r3, #0]
 8101030:	605a      	str	r2, [r3, #4]
 8101032:	609a      	str	r2, [r3, #8]
 8101034:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8101036:	4b24      	ldr	r3, [pc, #144]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 8101038:	4a24      	ldr	r2, [pc, #144]	@ (81010cc <_ZL13MX_TIM13_Initv+0xa8>)
 810103a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 810103c:	4b22      	ldr	r3, [pc, #136]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 810103e:	2200      	movs	r2, #0
 8101040:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101042:	4b21      	ldr	r3, [pc, #132]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 8101044:	2200      	movs	r2, #0
 8101046:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8101048:	4b1f      	ldr	r3, [pc, #124]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 810104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810104e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101050:	4b1d      	ldr	r3, [pc, #116]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 8101052:	2200      	movs	r2, #0
 8101054:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101056:	4b1c      	ldr	r3, [pc, #112]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 8101058:	2200      	movs	r2, #0
 810105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 810105c:	481a      	ldr	r0, [pc, #104]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 810105e:	f009 fd52 	bl	810ab06 <HAL_TIM_Base_Init>
 8101062:	4603      	mov	r3, r0
 8101064:	2b00      	cmp	r3, #0
 8101066:	bf14      	ite	ne
 8101068:	2301      	movne	r3, #1
 810106a:	2300      	moveq	r3, #0
 810106c:	b2db      	uxtb	r3, r3
 810106e:	2b00      	cmp	r3, #0
 8101070:	d001      	beq.n	8101076 <_ZL13MX_TIM13_Initv+0x52>
  {
    Error_Handler();
 8101072:	f000 fa0f 	bl	8101494 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8101076:	4814      	ldr	r0, [pc, #80]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 8101078:	f009 fdf3 	bl	810ac62 <HAL_TIM_IC_Init>
 810107c:	4603      	mov	r3, r0
 810107e:	2b00      	cmp	r3, #0
 8101080:	bf14      	ite	ne
 8101082:	2301      	movne	r3, #1
 8101084:	2300      	moveq	r3, #0
 8101086:	b2db      	uxtb	r3, r3
 8101088:	2b00      	cmp	r3, #0
 810108a:	d001      	beq.n	8101090 <_ZL13MX_TIM13_Initv+0x6c>
  {
    Error_Handler();
 810108c:	f000 fa02 	bl	8101494 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8101090:	2300      	movs	r3, #0
 8101092:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8101094:	2301      	movs	r3, #1
 8101096:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8101098:	2300      	movs	r3, #0
 810109a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 810109c:	2300      	movs	r3, #0
 810109e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81010a0:	463b      	mov	r3, r7
 81010a2:	2200      	movs	r2, #0
 81010a4:	4619      	mov	r1, r3
 81010a6:	4808      	ldr	r0, [pc, #32]	@ (81010c8 <_ZL13MX_TIM13_Initv+0xa4>)
 81010a8:	f009 feb6 	bl	810ae18 <HAL_TIM_IC_ConfigChannel>
 81010ac:	4603      	mov	r3, r0
 81010ae:	2b00      	cmp	r3, #0
 81010b0:	bf14      	ite	ne
 81010b2:	2301      	movne	r3, #1
 81010b4:	2300      	moveq	r3, #0
 81010b6:	b2db      	uxtb	r3, r3
 81010b8:	2b00      	cmp	r3, #0
 81010ba:	d001      	beq.n	81010c0 <_ZL13MX_TIM13_Initv+0x9c>
  {
    Error_Handler();
 81010bc:	f000 f9ea 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 81010c0:	bf00      	nop
 81010c2:	3710      	adds	r7, #16
 81010c4:	46bd      	mov	sp, r7
 81010c6:	bd80      	pop	{r7, pc}
 81010c8:	10000704 	.word	0x10000704
 81010cc:	40001c00 	.word	0x40001c00

081010d0 <_ZL13MX_UART8_Initv>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 81010d0:	b580      	push	{r7, lr}
 81010d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 81010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010d6:	4a2d      	ldr	r2, [pc, #180]	@ (810118c <_ZL13MX_UART8_Initv+0xbc>)
 81010d8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 81010da:	4b2b      	ldr	r3, [pc, #172]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81010e0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 81010e2:	4b29      	ldr	r3, [pc, #164]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010e4:	2200      	movs	r2, #0
 81010e6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 81010e8:	4b27      	ldr	r3, [pc, #156]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010ea:	2200      	movs	r2, #0
 81010ec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 81010ee:	4b26      	ldr	r3, [pc, #152]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010f0:	2200      	movs	r2, #0
 81010f2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 81010f4:	4b24      	ldr	r3, [pc, #144]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010f6:	220c      	movs	r2, #12
 81010f8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81010fa:	4b23      	ldr	r3, [pc, #140]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 81010fc:	2200      	movs	r2, #0
 81010fe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8101100:	4b21      	ldr	r3, [pc, #132]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 8101102:	2200      	movs	r2, #0
 8101104:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101106:	4b20      	ldr	r3, [pc, #128]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 8101108:	2200      	movs	r2, #0
 810110a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810110c:	4b1e      	ldr	r3, [pc, #120]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 810110e:	2200      	movs	r2, #0
 8101110:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101112:	4b1d      	ldr	r3, [pc, #116]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 8101114:	2200      	movs	r2, #0
 8101116:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8101118:	481b      	ldr	r0, [pc, #108]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 810111a:	f00a fcc5 	bl	810baa8 <HAL_UART_Init>
 810111e:	4603      	mov	r3, r0
 8101120:	2b00      	cmp	r3, #0
 8101122:	bf14      	ite	ne
 8101124:	2301      	movne	r3, #1
 8101126:	2300      	moveq	r3, #0
 8101128:	b2db      	uxtb	r3, r3
 810112a:	2b00      	cmp	r3, #0
 810112c:	d001      	beq.n	8101132 <_ZL13MX_UART8_Initv+0x62>
  {
    Error_Handler();
 810112e:	f000 f9b1 	bl	8101494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101132:	2100      	movs	r1, #0
 8101134:	4814      	ldr	r0, [pc, #80]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 8101136:	f00b fd55 	bl	810cbe4 <HAL_UARTEx_SetTxFifoThreshold>
 810113a:	4603      	mov	r3, r0
 810113c:	2b00      	cmp	r3, #0
 810113e:	bf14      	ite	ne
 8101140:	2301      	movne	r3, #1
 8101142:	2300      	moveq	r3, #0
 8101144:	b2db      	uxtb	r3, r3
 8101146:	2b00      	cmp	r3, #0
 8101148:	d001      	beq.n	810114e <_ZL13MX_UART8_Initv+0x7e>
  {
    Error_Handler();
 810114a:	f000 f9a3 	bl	8101494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810114e:	2100      	movs	r1, #0
 8101150:	480d      	ldr	r0, [pc, #52]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 8101152:	f00b fd85 	bl	810cc60 <HAL_UARTEx_SetRxFifoThreshold>
 8101156:	4603      	mov	r3, r0
 8101158:	2b00      	cmp	r3, #0
 810115a:	bf14      	ite	ne
 810115c:	2301      	movne	r3, #1
 810115e:	2300      	moveq	r3, #0
 8101160:	b2db      	uxtb	r3, r3
 8101162:	2b00      	cmp	r3, #0
 8101164:	d001      	beq.n	810116a <_ZL13MX_UART8_Initv+0x9a>
  {
    Error_Handler();
 8101166:	f000 f995 	bl	8101494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 810116a:	4807      	ldr	r0, [pc, #28]	@ (8101188 <_ZL13MX_UART8_Initv+0xb8>)
 810116c:	f00b fd01 	bl	810cb72 <HAL_UARTEx_DisableFifoMode>
 8101170:	4603      	mov	r3, r0
 8101172:	2b00      	cmp	r3, #0
 8101174:	bf14      	ite	ne
 8101176:	2301      	movne	r3, #1
 8101178:	2300      	moveq	r3, #0
 810117a:	b2db      	uxtb	r3, r3
 810117c:	2b00      	cmp	r3, #0
 810117e:	d001      	beq.n	8101184 <_ZL13MX_UART8_Initv+0xb4>
  {
    Error_Handler();
 8101180:	f000 f988 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8101184:	bf00      	nop
 8101186:	bd80      	pop	{r7, pc}
 8101188:	10000750 	.word	0x10000750
 810118c:	40007c00 	.word	0x40007c00

08101190 <_ZL22MX_USB_OTG_HS_PCD_Initv>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8101190:	b580      	push	{r7, lr}
 8101192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101194:	4b17      	ldr	r3, [pc, #92]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101196:	4a18      	ldr	r2, [pc, #96]	@ (81011f8 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x68>)
 8101198:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810119a:	4b16      	ldr	r3, [pc, #88]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810119c:	2209      	movs	r2, #9
 810119e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 81011a0:	4b14      	ldr	r3, [pc, #80]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011a2:	2200      	movs	r2, #0
 81011a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 81011a6:	4b13      	ldr	r3, [pc, #76]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011a8:	2200      	movs	r2, #0
 81011aa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 81011ac:	4b11      	ldr	r3, [pc, #68]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011ae:	2201      	movs	r2, #1
 81011b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 81011b2:	4b10      	ldr	r3, [pc, #64]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011b4:	2200      	movs	r2, #0
 81011b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 81011b8:	4b0e      	ldr	r3, [pc, #56]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011ba:	2200      	movs	r2, #0
 81011bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 81011be:	4b0d      	ldr	r3, [pc, #52]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011c0:	2200      	movs	r2, #0
 81011c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 81011c4:	4b0b      	ldr	r3, [pc, #44]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011c6:	2200      	movs	r2, #0
 81011c8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 81011ca:	4b0a      	ldr	r3, [pc, #40]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011cc:	2200      	movs	r2, #0
 81011ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 81011d0:	4b08      	ldr	r3, [pc, #32]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011d2:	2200      	movs	r2, #0
 81011d4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 81011d6:	4807      	ldr	r0, [pc, #28]	@ (81011f4 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 81011d8:	f004 fbca 	bl	8105970 <HAL_PCD_Init>
 81011dc:	4603      	mov	r3, r0
 81011de:	2b00      	cmp	r3, #0
 81011e0:	bf14      	ite	ne
 81011e2:	2301      	movne	r3, #1
 81011e4:	2300      	moveq	r3, #0
 81011e6:	b2db      	uxtb	r3, r3
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d001      	beq.n	81011f0 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x60>
  {
    Error_Handler();
 81011ec:	f000 f952 	bl	8101494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 81011f0:	bf00      	nop
 81011f2:	bd80      	pop	{r7, pc}
 81011f4:	10000968 	.word	0x10000968
 81011f8:	40040000 	.word	0x40040000

081011fc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81011fc:	b480      	push	{r7}
 81011fe:	b083      	sub	sp, #12
 8101200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101202:	4b0a      	ldr	r3, [pc, #40]	@ (810122c <_ZL11MX_DMA_Initv+0x30>)
 8101204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101208:	4a08      	ldr	r2, [pc, #32]	@ (810122c <_ZL11MX_DMA_Initv+0x30>)
 810120a:	f043 0301 	orr.w	r3, r3, #1
 810120e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101212:	4b06      	ldr	r3, [pc, #24]	@ (810122c <_ZL11MX_DMA_Initv+0x30>)
 8101214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101218:	f003 0301 	and.w	r3, r3, #1
 810121c:	607b      	str	r3, [r7, #4]
 810121e:	687b      	ldr	r3, [r7, #4]

}
 8101220:	bf00      	nop
 8101222:	370c      	adds	r7, #12
 8101224:	46bd      	mov	sp, r7
 8101226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810122a:	4770      	bx	lr
 810122c:	58024400 	.word	0x58024400

08101230 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8101230:	b580      	push	{r7, lr}
 8101232:	b088      	sub	sp, #32
 8101234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8101236:	1d3b      	adds	r3, r7, #4
 8101238:	2200      	movs	r2, #0
 810123a:	601a      	str	r2, [r3, #0]
 810123c:	605a      	str	r2, [r3, #4]
 810123e:	609a      	str	r2, [r3, #8]
 8101240:	60da      	str	r2, [r3, #12]
 8101242:	611a      	str	r2, [r3, #16]
 8101244:	615a      	str	r2, [r3, #20]
 8101246:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8101248:	4b20      	ldr	r3, [pc, #128]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 810124a:	4a21      	ldr	r2, [pc, #132]	@ (81012d0 <_ZL11MX_FMC_Initv+0xa0>)
 810124c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 810124e:	4b1f      	ldr	r3, [pc, #124]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101250:	2201      	movs	r2, #1
 8101252:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8101254:	4b1d      	ldr	r3, [pc, #116]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101256:	2200      	movs	r2, #0
 8101258:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 810125a:	4b1c      	ldr	r3, [pc, #112]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 810125c:	2208      	movs	r2, #8
 810125e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8101260:	4b1a      	ldr	r3, [pc, #104]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101262:	2220      	movs	r2, #32
 8101264:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8101266:	4b19      	ldr	r3, [pc, #100]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101268:	2200      	movs	r2, #0
 810126a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 810126c:	4b17      	ldr	r3, [pc, #92]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 810126e:	2280      	movs	r2, #128	@ 0x80
 8101270:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8101272:	4b16      	ldr	r3, [pc, #88]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101274:	2200      	movs	r2, #0
 8101276:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8101278:	4b14      	ldr	r3, [pc, #80]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 810127a:	2200      	movs	r2, #0
 810127c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 810127e:	4b13      	ldr	r3, [pc, #76]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101280:	2200      	movs	r2, #0
 8101282:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8101284:	4b11      	ldr	r3, [pc, #68]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 8101286:	2200      	movs	r2, #0
 8101288:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 810128a:	2310      	movs	r3, #16
 810128c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 810128e:	2310      	movs	r3, #16
 8101290:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8101292:	2310      	movs	r3, #16
 8101294:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8101296:	2310      	movs	r3, #16
 8101298:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 810129a:	2310      	movs	r3, #16
 810129c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 810129e:	2310      	movs	r3, #16
 81012a0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 81012a2:	2310      	movs	r3, #16
 81012a4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 81012a6:	1d3b      	adds	r3, r7, #4
 81012a8:	4619      	mov	r1, r3
 81012aa:	4808      	ldr	r0, [pc, #32]	@ (81012cc <_ZL11MX_FMC_Initv+0x9c>)
 81012ac:	f009 fa42 	bl	810a734 <HAL_SDRAM_Init>
 81012b0:	4603      	mov	r3, r0
 81012b2:	2b00      	cmp	r3, #0
 81012b4:	bf14      	ite	ne
 81012b6:	2301      	movne	r3, #1
 81012b8:	2300      	moveq	r3, #0
 81012ba:	b2db      	uxtb	r3, r3
 81012bc:	2b00      	cmp	r3, #0
 81012be:	d001      	beq.n	81012c4 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 81012c0:	f000 f8e8 	bl	8101494 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81012c4:	bf00      	nop
 81012c6:	3720      	adds	r7, #32
 81012c8:	46bd      	mov	sp, r7
 81012ca:	bd80      	pop	{r7, pc}
 81012cc:	10000e4c 	.word	0x10000e4c
 81012d0:	52004140 	.word	0x52004140

081012d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81012d4:	b580      	push	{r7, lr}
 81012d6:	b090      	sub	sp, #64	@ 0x40
 81012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012de:	2200      	movs	r2, #0
 81012e0:	601a      	str	r2, [r3, #0]
 81012e2:	605a      	str	r2, [r3, #4]
 81012e4:	609a      	str	r2, [r3, #8]
 81012e6:	60da      	str	r2, [r3, #12]
 81012e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81012ea:	4b5f      	ldr	r3, [pc, #380]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012f0:	4a5d      	ldr	r2, [pc, #372]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81012f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8101306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101308:	4b57      	ldr	r3, [pc, #348]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810130e:	4a56      	ldr	r2, [pc, #344]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101310:	f043 0302 	orr.w	r3, r3, #2
 8101314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101318:	4b53      	ldr	r3, [pc, #332]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810131e:	f003 0302 	and.w	r3, r3, #2
 8101322:	627b      	str	r3, [r7, #36]	@ 0x24
 8101324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101326:	4b50      	ldr	r3, [pc, #320]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810132c:	4a4e      	ldr	r2, [pc, #312]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810132e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101336:	4b4c      	ldr	r3, [pc, #304]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810133c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101340:	623b      	str	r3, [r7, #32]
 8101342:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101344:	4b48      	ldr	r3, [pc, #288]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810134a:	4a47      	ldr	r2, [pc, #284]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810134c:	f043 0304 	orr.w	r3, r3, #4
 8101350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101354:	4b44      	ldr	r3, [pc, #272]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810135a:	f003 0304 	and.w	r3, r3, #4
 810135e:	61fb      	str	r3, [r7, #28]
 8101360:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101362:	4b41      	ldr	r3, [pc, #260]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101368:	4a3f      	ldr	r2, [pc, #252]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810136a:	f043 0310 	orr.w	r3, r3, #16
 810136e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101372:	4b3d      	ldr	r3, [pc, #244]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101378:	f003 0310 	and.w	r3, r3, #16
 810137c:	61bb      	str	r3, [r7, #24]
 810137e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101380:	4b39      	ldr	r3, [pc, #228]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101386:	4a38      	ldr	r2, [pc, #224]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810138c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101390:	4b35      	ldr	r3, [pc, #212]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810139a:	617b      	str	r3, [r7, #20]
 810139c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810139e:	4b32      	ldr	r3, [pc, #200]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013a4:	4a30      	ldr	r2, [pc, #192]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013a6:	f043 0308 	orr.w	r3, r3, #8
 81013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013b4:	f003 0308 	and.w	r3, r3, #8
 81013b8:	613b      	str	r3, [r7, #16]
 81013ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013c2:	4a29      	ldr	r2, [pc, #164]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013c4:	f043 0301 	orr.w	r3, r3, #1
 81013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013cc:	4b26      	ldr	r3, [pc, #152]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013d2:	f003 0301 	and.w	r3, r3, #1
 81013d6:	60fb      	str	r3, [r7, #12]
 81013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81013da:	4b23      	ldr	r3, [pc, #140]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013e0:	4a21      	ldr	r2, [pc, #132]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013e2:	f043 0320 	orr.w	r3, r3, #32
 81013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013f0:	f003 0320 	and.w	r3, r3, #32
 81013f4:	60bb      	str	r3, [r7, #8]
 81013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 81013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101408:	4b17      	ldr	r3, [pc, #92]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810140e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101412:	607b      	str	r3, [r7, #4]
 8101414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101416:	4b14      	ldr	r3, [pc, #80]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810141c:	4a12      	ldr	r2, [pc, #72]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 810141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101422:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101426:	4b10      	ldr	r3, [pc, #64]	@ (8101468 <_ZL12MX_GPIO_Initv+0x194>)
 8101428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810142c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101430:	603b      	str	r3, [r7, #0]
 8101432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8101434:	2200      	movs	r2, #0
 8101436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 810143a:	480c      	ldr	r0, [pc, #48]	@ (810146c <_ZL12MX_GPIO_Initv+0x198>)
 810143c:	f004 fa2e 	bl	810589c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8101440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8101444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101446:	2301      	movs	r3, #1
 8101448:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810144a:	2300      	movs	r3, #0
 810144c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810144e:	2300      	movs	r3, #0
 8101450:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8101452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101456:	4619      	mov	r1, r3
 8101458:	4804      	ldr	r0, [pc, #16]	@ (810146c <_ZL12MX_GPIO_Initv+0x198>)
 810145a:	f004 f86f 	bl	810553c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 810145e:	bf00      	nop
 8101460:	3740      	adds	r7, #64	@ 0x40
 8101462:	46bd      	mov	sp, r7
 8101464:	bd80      	pop	{r7, pc}
 8101466:	bf00      	nop
 8101468:	58024400 	.word	0x58024400
 810146c:	58022000 	.word	0x58022000

08101470 <__io_putchar>:

/* USER CODE BEGIN 4 */
extern "C" {
    PUTCHAR_PROTOTYPE
    {
 8101470:	b580      	push	{r7, lr}
 8101472:	b082      	sub	sp, #8
 8101474:	af00      	add	r7, sp, #0
 8101476:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8101478:	1d39      	adds	r1, r7, #4
 810147a:	f04f 33ff 	mov.w	r3, #4294967295
 810147e:	2201      	movs	r2, #1
 8101480:	4803      	ldr	r0, [pc, #12]	@ (8101490 <__io_putchar+0x20>)
 8101482:	f00a fb61 	bl	810bb48 <HAL_UART_Transmit>
        return ch;
 8101486:	687b      	ldr	r3, [r7, #4]
    }
 8101488:	4618      	mov	r0, r3
 810148a:	3708      	adds	r7, #8
 810148c:	46bd      	mov	sp, r7
 810148e:	bd80      	pop	{r7, pc}
 8101490:	100007e4 	.word	0x100007e4

08101494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101494:	b580      	push	{r7, lr}
 8101496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101498:	b672      	cpsid	i
}
 810149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("CM4 Started\r\n");
 810149c:	4801      	ldr	r0, [pc, #4]	@ (81014a4 <Error_Handler+0x10>)
 810149e:	f00c fe3d 	bl	810e11c <puts>
 81014a2:	e7fb      	b.n	810149c <Error_Handler+0x8>
 81014a4:	0810e85c 	.word	0x0810e85c

081014a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014a8:	b580      	push	{r7, lr}
 81014aa:	b082      	sub	sp, #8
 81014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014ae:	4b0d      	ldr	r3, [pc, #52]	@ (81014e4 <HAL_MspInit+0x3c>)
 81014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81014b4:	4a0b      	ldr	r2, [pc, #44]	@ (81014e4 <HAL_MspInit+0x3c>)
 81014b6:	f043 0302 	orr.w	r3, r3, #2
 81014ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81014be:	4b09      	ldr	r3, [pc, #36]	@ (81014e4 <HAL_MspInit+0x3c>)
 81014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81014c4:	f003 0302 	and.w	r3, r3, #2
 81014c8:	607b      	str	r3, [r7, #4]
 81014ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 81014cc:	2200      	movs	r2, #0
 81014ce:	2100      	movs	r1, #0
 81014d0:	207e      	movs	r0, #126	@ 0x7e
 81014d2:	f002 fe22 	bl	810411a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81014d6:	207e      	movs	r0, #126	@ 0x7e
 81014d8:	f002 fe39 	bl	810414e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014dc:	bf00      	nop
 81014de:	3708      	adds	r7, #8
 81014e0:	46bd      	mov	sp, r7
 81014e2:	bd80      	pop	{r7, pc}
 81014e4:	58024400 	.word	0x58024400

081014e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b08c      	sub	sp, #48	@ 0x30
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014f0:	f107 031c 	add.w	r3, r7, #28
 81014f4:	2200      	movs	r2, #0
 81014f6:	601a      	str	r2, [r3, #0]
 81014f8:	605a      	str	r2, [r3, #4]
 81014fa:	609a      	str	r2, [r3, #8]
 81014fc:	60da      	str	r2, [r3, #12]
 81014fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	4a3e      	ldr	r2, [pc, #248]	@ (8101600 <HAL_ADC_MspInit+0x118>)
 8101506:	4293      	cmp	r3, r2
 8101508:	d12a      	bne.n	8101560 <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810150a:	4b3e      	ldr	r3, [pc, #248]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810150c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101510:	4a3c      	ldr	r2, [pc, #240]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 8101512:	f043 0320 	orr.w	r3, r3, #32
 8101516:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810151a:	4b3a      	ldr	r3, [pc, #232]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101520:	f003 0320 	and.w	r3, r3, #32
 8101524:	61bb      	str	r3, [r7, #24]
 8101526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101528:	4b36      	ldr	r3, [pc, #216]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810152e:	4a35      	ldr	r2, [pc, #212]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 8101530:	f043 0301 	orr.w	r3, r3, #1
 8101534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101538:	4b32      	ldr	r3, [pc, #200]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810153e:	f003 0301 	and.w	r3, r3, #1
 8101542:	617b      	str	r3, [r7, #20]
 8101544:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101546:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 810154a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 810154e:	f001 fb31 	bl	8102bb4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101552:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8101556:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 810155a:	f001 fb2b 	bl	8102bb4 <HAL_SYSCFG_AnalogSwitchConfig>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 810155e:	e04a      	b.n	81015f6 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8101560:	687b      	ldr	r3, [r7, #4]
 8101562:	681b      	ldr	r3, [r3, #0]
 8101564:	4a28      	ldr	r2, [pc, #160]	@ (8101608 <HAL_ADC_MspInit+0x120>)
 8101566:	4293      	cmp	r3, r2
 8101568:	d145      	bne.n	81015f6 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 810156a:	4b26      	ldr	r3, [pc, #152]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101570:	4a24      	ldr	r2, [pc, #144]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 8101572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810157a:	4b22      	ldr	r3, [pc, #136]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101584:	613b      	str	r3, [r7, #16]
 8101586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101588:	4b1e      	ldr	r3, [pc, #120]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810158e:	4a1d      	ldr	r2, [pc, #116]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 8101590:	f043 0320 	orr.w	r3, r3, #32
 8101594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101598:	4b1a      	ldr	r3, [pc, #104]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 810159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810159e:	f003 0320 	and.w	r3, r3, #32
 81015a2:	60fb      	str	r3, [r7, #12]
 81015a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81015a6:	4b17      	ldr	r3, [pc, #92]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 81015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015ac:	4a15      	ldr	r2, [pc, #84]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 81015ae:	f043 0304 	orr.w	r3, r3, #4
 81015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015b6:	4b13      	ldr	r3, [pc, #76]	@ (8101604 <HAL_ADC_MspInit+0x11c>)
 81015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015bc:	f003 0304 	and.w	r3, r3, #4
 81015c0:	60bb      	str	r3, [r7, #8]
 81015c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81015c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81015ca:	2303      	movs	r3, #3
 81015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ce:	2300      	movs	r3, #0
 81015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81015d2:	f107 031c 	add.w	r3, r7, #28
 81015d6:	4619      	mov	r1, r3
 81015d8:	480c      	ldr	r0, [pc, #48]	@ (810160c <HAL_ADC_MspInit+0x124>)
 81015da:	f003 ffaf 	bl	810553c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81015de:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81015e2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81015e6:	f001 fae5 	bl	8102bb4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81015ea:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81015ee:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81015f2:	f001 fadf 	bl	8102bb4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81015f6:	bf00      	nop
 81015f8:	3730      	adds	r7, #48	@ 0x30
 81015fa:	46bd      	mov	sp, r7
 81015fc:	bd80      	pop	{r7, pc}
 81015fe:	bf00      	nop
 8101600:	40022000 	.word	0x40022000
 8101604:	58024400 	.word	0x58024400
 8101608:	58026000 	.word	0x58026000
 810160c:	58021400 	.word	0x58021400

08101610 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	b08e      	sub	sp, #56	@ 0x38
 8101614:	af00      	add	r7, sp, #0
 8101616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810161c:	2200      	movs	r2, #0
 810161e:	601a      	str	r2, [r3, #0]
 8101620:	605a      	str	r2, [r3, #4]
 8101622:	609a      	str	r2, [r3, #8]
 8101624:	60da      	str	r2, [r3, #12]
 8101626:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8101628:	687b      	ldr	r3, [r7, #4]
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	4a49      	ldr	r2, [pc, #292]	@ (8101754 <HAL_ETH_MspInit+0x144>)
 810162e:	4293      	cmp	r3, r2
 8101630:	f040 808b 	bne.w	810174a <HAL_ETH_MspInit+0x13a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8101634:	4b48      	ldr	r3, [pc, #288]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810163a:	4a47      	ldr	r2, [pc, #284]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 810163c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101640:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101644:	4b44      	ldr	r3, [pc, #272]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810164a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810164e:	623b      	str	r3, [r7, #32]
 8101650:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8101652:	4b41      	ldr	r3, [pc, #260]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101658:	4a3f      	ldr	r2, [pc, #252]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 810165a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810165e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101662:	4b3d      	ldr	r3, [pc, #244]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810166c:	61fb      	str	r3, [r7, #28]
 810166e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101670:	4b39      	ldr	r3, [pc, #228]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101672:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101676:	4a38      	ldr	r2, [pc, #224]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810167c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101680:	4b35      	ldr	r3, [pc, #212]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810168a:	61bb      	str	r3, [r7, #24]
 810168c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810168e:	4b32      	ldr	r3, [pc, #200]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101694:	4a30      	ldr	r2, [pc, #192]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 8101696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810169a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810169e:	4b2e      	ldr	r3, [pc, #184]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81016a8:	617b      	str	r3, [r7, #20]
 81016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016b2:	4a29      	ldr	r2, [pc, #164]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016b4:	f043 0304 	orr.w	r3, r3, #4
 81016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016bc:	4b26      	ldr	r3, [pc, #152]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016c2:	f003 0304 	and.w	r3, r3, #4
 81016c6:	613b      	str	r3, [r7, #16]
 81016c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81016ca:	4b23      	ldr	r3, [pc, #140]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016d0:	4a21      	ldr	r2, [pc, #132]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016d2:	f043 0301 	orr.w	r3, r3, #1
 81016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016da:	4b1f      	ldr	r3, [pc, #124]	@ (8101758 <HAL_ETH_MspInit+0x148>)
 81016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016e0:	f003 0301 	and.w	r3, r3, #1
 81016e4:	60fb      	str	r3, [r7, #12]
 81016e6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81016e8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81016ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016ee:	2302      	movs	r3, #2
 81016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f2:	2300      	movs	r3, #0
 81016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f6:	2300      	movs	r3, #0
 81016f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81016fa:	230b      	movs	r3, #11
 81016fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81016fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101702:	4619      	mov	r1, r3
 8101704:	4815      	ldr	r0, [pc, #84]	@ (810175c <HAL_ETH_MspInit+0x14c>)
 8101706:	f003 ff19 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 810170a:	2332      	movs	r3, #50	@ 0x32
 810170c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810170e:	2302      	movs	r3, #2
 8101710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101712:	2300      	movs	r3, #0
 8101714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101716:	2300      	movs	r3, #0
 8101718:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810171a:	230b      	movs	r3, #11
 810171c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101722:	4619      	mov	r1, r3
 8101724:	480e      	ldr	r0, [pc, #56]	@ (8101760 <HAL_ETH_MspInit+0x150>)
 8101726:	f003 ff09 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 810172a:	2386      	movs	r3, #134	@ 0x86
 810172c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810172e:	2302      	movs	r3, #2
 8101730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101732:	2300      	movs	r3, #0
 8101734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101736:	2300      	movs	r3, #0
 8101738:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810173a:	230b      	movs	r3, #11
 810173c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810173e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101742:	4619      	mov	r1, r3
 8101744:	4807      	ldr	r0, [pc, #28]	@ (8101764 <HAL_ETH_MspInit+0x154>)
 8101746:	f003 fef9 	bl	810553c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 810174a:	bf00      	nop
 810174c:	3738      	adds	r7, #56	@ 0x38
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}
 8101752:	bf00      	nop
 8101754:	40028000 	.word	0x40028000
 8101758:	58024400 	.word	0x58024400
 810175c:	58021800 	.word	0x58021800
 8101760:	58020800 	.word	0x58020800
 8101764:	58020000 	.word	0x58020000

08101768 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101768:	b580      	push	{r7, lr}
 810176a:	b0bc      	sub	sp, #240	@ 0xf0
 810176c:	af00      	add	r7, sp, #0
 810176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101770:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101774:	2200      	movs	r2, #0
 8101776:	601a      	str	r2, [r3, #0]
 8101778:	605a      	str	r2, [r3, #4]
 810177a:	609a      	str	r2, [r3, #8]
 810177c:	60da      	str	r2, [r3, #12]
 810177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101780:	f107 0310 	add.w	r3, r7, #16
 8101784:	22c8      	movs	r2, #200	@ 0xc8
 8101786:	2100      	movs	r1, #0
 8101788:	4618      	mov	r0, r3
 810178a:	f00c fda7 	bl	810e2dc <memset>
  if(hcec->Instance==CEC)
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	681b      	ldr	r3, [r3, #0]
 8101792:	4a2b      	ldr	r2, [pc, #172]	@ (8101840 <HAL_CEC_MspInit+0xd8>)
 8101794:	4293      	cmp	r3, r2
 8101796:	d14e      	bne.n	8101836 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 810179c:	f04f 0300 	mov.w	r3, #0
 81017a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 81017a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81017a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017ac:	f107 0310 	add.w	r3, r7, #16
 81017b0:	4618      	mov	r0, r3
 81017b2:	f004 fd37 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 81017b6:	4603      	mov	r3, r0
 81017b8:	2b00      	cmp	r3, #0
 81017ba:	d001      	beq.n	81017c0 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81017bc:	f7ff fe6a 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81017c0:	4b20      	ldr	r3, [pc, #128]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81017c6:	4a1f      	ldr	r2, [pc, #124]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81017cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81017d0:	4b1c      	ldr	r3, [pc, #112]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81017d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81017da:	60fb      	str	r3, [r7, #12]
 81017dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81017de:	4b19      	ldr	r3, [pc, #100]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017e4:	4a17      	ldr	r2, [pc, #92]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017e6:	f043 0302 	orr.w	r3, r3, #2
 81017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017ee:	4b15      	ldr	r3, [pc, #84]	@ (8101844 <HAL_CEC_MspInit+0xdc>)
 81017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017f4:	f003 0302 	and.w	r3, r3, #2
 81017f8:	60bb      	str	r3, [r7, #8]
 81017fa:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81017fc:	2340      	movs	r3, #64	@ 0x40
 81017fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101802:	2312      	movs	r3, #18
 8101804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101808:	2300      	movs	r3, #0
 810180a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810180e:	2300      	movs	r3, #0
 8101810:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101814:	2305      	movs	r3, #5
 8101816:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810181a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810181e:	4619      	mov	r1, r3
 8101820:	4809      	ldr	r0, [pc, #36]	@ (8101848 <HAL_CEC_MspInit+0xe0>)
 8101822:	f003 fe8b 	bl	810553c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8101826:	2200      	movs	r2, #0
 8101828:	2100      	movs	r1, #0
 810182a:	205e      	movs	r0, #94	@ 0x5e
 810182c:	f002 fc75 	bl	810411a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101830:	205e      	movs	r0, #94	@ 0x5e
 8101832:	f002 fc8c 	bl	810414e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8101836:	bf00      	nop
 8101838:	37f0      	adds	r7, #240	@ 0xf0
 810183a:	46bd      	mov	sp, r7
 810183c:	bd80      	pop	{r7, pc}
 810183e:	bf00      	nop
 8101840:	40006c00 	.word	0x40006c00
 8101844:	58024400 	.word	0x58024400
 8101848:	58020400 	.word	0x58020400

0810184c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 810184c:	b580      	push	{r7, lr}
 810184e:	b0c0      	sub	sp, #256	@ 0x100
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101854:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101858:	2200      	movs	r2, #0
 810185a:	601a      	str	r2, [r3, #0]
 810185c:	605a      	str	r2, [r3, #4]
 810185e:	609a      	str	r2, [r3, #8]
 8101860:	60da      	str	r2, [r3, #12]
 8101862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101864:	f107 0320 	add.w	r3, r7, #32
 8101868:	22c8      	movs	r2, #200	@ 0xc8
 810186a:	2100      	movs	r1, #0
 810186c:	4618      	mov	r0, r3
 810186e:	f00c fd35 	bl	810e2dc <memset>
  if(hqspi->Instance==QUADSPI)
 8101872:	687b      	ldr	r3, [r7, #4]
 8101874:	681b      	ldr	r3, [r3, #0]
 8101876:	4a85      	ldr	r2, [pc, #532]	@ (8101a8c <HAL_QSPI_MspInit+0x240>)
 8101878:	4293      	cmp	r3, r2
 810187a:	f040 8102 	bne.w	8101a82 <HAL_QSPI_MspInit+0x236>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 810187e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8101882:	f04f 0300 	mov.w	r3, #0
 8101886:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 810188a:	2300      	movs	r3, #0
 810188c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810188e:	f107 0320 	add.w	r3, r7, #32
 8101892:	4618      	mov	r0, r3
 8101894:	f004 fcc6 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101898:	4603      	mov	r3, r0
 810189a:	2b00      	cmp	r3, #0
 810189c:	d001      	beq.n	81018a2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810189e:	f7ff fdf9 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 81018a2:	4b7b      	ldr	r3, [pc, #492]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81018a8:	4a79      	ldr	r2, [pc, #484]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81018ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81018b2:	4b77      	ldr	r3, [pc, #476]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81018b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81018bc:	61fb      	str	r3, [r7, #28]
 81018be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81018c0:	4b73      	ldr	r3, [pc, #460]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018c6:	4a72      	ldr	r2, [pc, #456]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018d0:	4b6f      	ldr	r3, [pc, #444]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81018da:	61bb      	str	r3, [r7, #24]
 81018dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81018de:	4b6c      	ldr	r3, [pc, #432]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018e4:	4a6a      	ldr	r2, [pc, #424]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018e6:	f043 0320 	orr.w	r3, r3, #32
 81018ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018ee:	4b68      	ldr	r3, [pc, #416]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018f4:	f003 0320 	and.w	r3, r3, #32
 81018f8:	617b      	str	r3, [r7, #20]
 81018fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81018fc:	4b64      	ldr	r3, [pc, #400]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 81018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101902:	4a63      	ldr	r2, [pc, #396]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 8101904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810190c:	4b60      	ldr	r3, [pc, #384]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 810190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101916:	613b      	str	r3, [r7, #16]
 8101918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810191a:	4b5d      	ldr	r3, [pc, #372]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 810191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101920:	4a5b      	ldr	r2, [pc, #364]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 8101922:	f043 0302 	orr.w	r3, r3, #2
 8101926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810192a:	4b59      	ldr	r3, [pc, #356]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 810192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101930:	f003 0302 	and.w	r3, r3, #2
 8101934:	60fb      	str	r3, [r7, #12]
 8101936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101938:	4b55      	ldr	r3, [pc, #340]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 810193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810193e:	4a54      	ldr	r2, [pc, #336]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 8101940:	f043 0308 	orr.w	r3, r3, #8
 8101944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101948:	4b51      	ldr	r3, [pc, #324]	@ (8101a90 <HAL_QSPI_MspInit+0x244>)
 810194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810194e:	f003 0308 	and.w	r3, r3, #8
 8101952:	60bb      	str	r3, [r7, #8]
 8101954:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8101956:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810195a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810195e:	2302      	movs	r3, #2
 8101960:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101964:	2300      	movs	r3, #0
 8101966:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810196a:	2300      	movs	r3, #0
 810196c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101970:	2309      	movs	r3, #9
 8101972:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101976:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810197a:	4619      	mov	r1, r3
 810197c:	4845      	ldr	r0, [pc, #276]	@ (8101a94 <HAL_QSPI_MspInit+0x248>)
 810197e:	f003 fddd 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8101982:	2340      	movs	r3, #64	@ 0x40
 8101984:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101988:	2302      	movs	r3, #2
 810198a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810198e:	2300      	movs	r3, #0
 8101990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101994:	2300      	movs	r3, #0
 8101996:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810199a:	230a      	movs	r3, #10
 810199c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 81019a0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81019a4:	4619      	mov	r1, r3
 81019a6:	483b      	ldr	r0, [pc, #236]	@ (8101a94 <HAL_QSPI_MspInit+0x248>)
 81019a8:	f003 fdc8 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 81019ac:	23c0      	movs	r3, #192	@ 0xc0
 81019ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019b2:	2302      	movs	r3, #2
 81019b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019b8:	2300      	movs	r3, #0
 81019ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019be:	2300      	movs	r3, #0
 81019c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81019c4:	2309      	movs	r3, #9
 81019c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81019ca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81019ce:	4619      	mov	r1, r3
 81019d0:	4831      	ldr	r0, [pc, #196]	@ (8101a98 <HAL_QSPI_MspInit+0x24c>)
 81019d2:	f003 fdb3 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 81019d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81019da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019de:	2302      	movs	r3, #2
 81019e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019e4:	2300      	movs	r3, #0
 81019e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019ea:	2300      	movs	r3, #0
 81019ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81019f0:	230a      	movs	r3, #10
 81019f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 81019f6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81019fa:	4619      	mov	r1, r3
 81019fc:	4826      	ldr	r0, [pc, #152]	@ (8101a98 <HAL_QSPI_MspInit+0x24c>)
 81019fe:	f003 fd9d 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101a02:	230c      	movs	r3, #12
 8101a04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a08:	2302      	movs	r3, #2
 8101a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0e:	2300      	movs	r3, #0
 8101a10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a14:	2300      	movs	r3, #0
 8101a16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a1a:	2309      	movs	r3, #9
 8101a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101a20:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a24:	4619      	mov	r1, r3
 8101a26:	481d      	ldr	r0, [pc, #116]	@ (8101a9c <HAL_QSPI_MspInit+0x250>)
 8101a28:	f003 fd88 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101a2c:	2304      	movs	r3, #4
 8101a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a32:	2302      	movs	r3, #2
 8101a34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a38:	2300      	movs	r3, #0
 8101a3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a3e:	2300      	movs	r3, #0
 8101a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a44:	2309      	movs	r3, #9
 8101a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101a4a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a4e:	4619      	mov	r1, r3
 8101a50:	4813      	ldr	r0, [pc, #76]	@ (8101aa0 <HAL_QSPI_MspInit+0x254>)
 8101a52:	f003 fd73 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101a56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a5e:	2302      	movs	r3, #2
 8101a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a64:	2300      	movs	r3, #0
 8101a66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a6a:	2300      	movs	r3, #0
 8101a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a70:	2309      	movs	r3, #9
 8101a72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101a76:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a7a:	4619      	mov	r1, r3
 8101a7c:	4809      	ldr	r0, [pc, #36]	@ (8101aa4 <HAL_QSPI_MspInit+0x258>)
 8101a7e:	f003 fd5d 	bl	810553c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101a82:	bf00      	nop
 8101a84:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	52005000 	.word	0x52005000
 8101a90:	58024400 	.word	0x58024400
 8101a94:	58021800 	.word	0x58021800
 8101a98:	58021400 	.word	0x58021400
 8101a9c:	58021c00 	.word	0x58021c00
 8101aa0:	58020400 	.word	0x58020400
 8101aa4:	58020c00 	.word	0x58020c00

08101aa8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b0b4      	sub	sp, #208	@ 0xd0
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ab0:	f107 0308 	add.w	r3, r7, #8
 8101ab4:	22c8      	movs	r2, #200	@ 0xc8
 8101ab6:	2100      	movs	r1, #0
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f00c fc0f 	bl	810e2dc <memset>
  if(hrtc->Instance==RTC)
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	4a10      	ldr	r2, [pc, #64]	@ (8101b04 <HAL_RTC_MspInit+0x5c>)
 8101ac4:	4293      	cmp	r3, r2
 8101ac6:	d119      	bne.n	8101afc <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101ac8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101acc:	f04f 0300 	mov.w	r3, #0
 8101ad0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101adc:	f107 0308 	add.w	r3, r7, #8
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	f004 fb9f 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101ae6:	4603      	mov	r3, r0
 8101ae8:	2b00      	cmp	r3, #0
 8101aea:	d001      	beq.n	8101af0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101aec:	f7ff fcd2 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101af0:	4b05      	ldr	r3, [pc, #20]	@ (8101b08 <HAL_RTC_MspInit+0x60>)
 8101af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101af4:	4a04      	ldr	r2, [pc, #16]	@ (8101b08 <HAL_RTC_MspInit+0x60>)
 8101af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101afa:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101afc:	bf00      	nop
 8101afe:	37d0      	adds	r7, #208	@ 0xd0
 8101b00:	46bd      	mov	sp, r7
 8101b02:	bd80      	pop	{r7, pc}
 8101b04:	58004000 	.word	0x58004000
 8101b08:	58024400 	.word	0x58024400

08101b0c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101b0c:	b580      	push	{r7, lr}
 8101b0e:	b0be      	sub	sp, #248	@ 0xf8
 8101b10:	af00      	add	r7, sp, #0
 8101b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b14:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101b18:	2200      	movs	r2, #0
 8101b1a:	601a      	str	r2, [r3, #0]
 8101b1c:	605a      	str	r2, [r3, #4]
 8101b1e:	609a      	str	r2, [r3, #8]
 8101b20:	60da      	str	r2, [r3, #12]
 8101b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b24:	f107 0318 	add.w	r3, r7, #24
 8101b28:	22c8      	movs	r2, #200	@ 0xc8
 8101b2a:	2100      	movs	r1, #0
 8101b2c:	4618      	mov	r0, r3
 8101b2e:	f00c fbd5 	bl	810e2dc <memset>
  if(hsd->Instance==SDMMC1)
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	681b      	ldr	r3, [r3, #0]
 8101b36:	4a38      	ldr	r2, [pc, #224]	@ (8101c18 <HAL_SD_MspInit+0x10c>)
 8101b38:	4293      	cmp	r3, r2
 8101b3a:	d169      	bne.n	8101c10 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101b3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101b40:	f04f 0300 	mov.w	r3, #0
 8101b44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101b48:	2300      	movs	r3, #0
 8101b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b4c:	f107 0318 	add.w	r3, r7, #24
 8101b50:	4618      	mov	r0, r3
 8101b52:	f004 fb67 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101b56:	4603      	mov	r3, r0
 8101b58:	2b00      	cmp	r3, #0
 8101b5a:	d001      	beq.n	8101b60 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101b5c:	f7ff fc9a 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101b60:	4b2e      	ldr	r3, [pc, #184]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101b66:	4a2d      	ldr	r2, [pc, #180]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101b6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101b70:	4b2a      	ldr	r3, [pc, #168]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101b7a:	617b      	str	r3, [r7, #20]
 8101b7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b7e:	4b27      	ldr	r3, [pc, #156]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b84:	4a25      	ldr	r2, [pc, #148]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b86:	f043 0304 	orr.w	r3, r3, #4
 8101b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b8e:	4b23      	ldr	r3, [pc, #140]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b94:	f003 0304 	and.w	r3, r3, #4
 8101b98:	613b      	str	r3, [r7, #16]
 8101b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101ba4:	f043 0308 	orr.w	r3, r3, #8
 8101ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101bac:	4b1b      	ldr	r3, [pc, #108]	@ (8101c1c <HAL_SD_MspInit+0x110>)
 8101bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101bb2:	f003 0308 	and.w	r3, r3, #8
 8101bb6:	60fb      	str	r3, [r7, #12]
 8101bb8:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101bba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8101bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc2:	2302      	movs	r3, #2
 8101bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc8:	2300      	movs	r3, #0
 8101bca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101bce:	2303      	movs	r3, #3
 8101bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101bd4:	230c      	movs	r3, #12
 8101bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101bda:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101bde:	4619      	mov	r1, r3
 8101be0:	480f      	ldr	r0, [pc, #60]	@ (8101c20 <HAL_SD_MspInit+0x114>)
 8101be2:	f003 fcab 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101be6:	2304      	movs	r3, #4
 8101be8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bec:	2302      	movs	r3, #2
 8101bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bf2:	2300      	movs	r3, #0
 8101bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101bf8:	2303      	movs	r3, #3
 8101bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101bfe:	230c      	movs	r3, #12
 8101c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101c04:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101c08:	4619      	mov	r1, r3
 8101c0a:	4806      	ldr	r0, [pc, #24]	@ (8101c24 <HAL_SD_MspInit+0x118>)
 8101c0c:	f003 fc96 	bl	810553c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8101c10:	bf00      	nop
 8101c12:	37f8      	adds	r7, #248	@ 0xf8
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}
 8101c18:	52007000 	.word	0x52007000
 8101c1c:	58024400 	.word	0x58024400
 8101c20:	58020800 	.word	0x58020800
 8101c24:	58020c00 	.word	0x58020c00

08101c28 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b0bc      	sub	sp, #240	@ 0xf0
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c40:	f107 0310 	add.w	r3, r7, #16
 8101c44:	22c8      	movs	r2, #200	@ 0xc8
 8101c46:	2100      	movs	r1, #0
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f00c fb47 	bl	810e2dc <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101c56:	d144      	bne.n	8101ce2 <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101c58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101c5c:	f04f 0300 	mov.w	r3, #0
 8101c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101c64:	2300      	movs	r3, #0
 8101c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c68:	f107 0310 	add.w	r3, r7, #16
 8101c6c:	4618      	mov	r0, r3
 8101c6e:	f004 fad9 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101c72:	4603      	mov	r3, r0
 8101c74:	2b00      	cmp	r3, #0
 8101c76:	d001      	beq.n	8101c7c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101c78:	f7ff fc0c 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c82:	4a1a      	ldr	r2, [pc, #104]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101c88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101c8c:	4b17      	ldr	r3, [pc, #92]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101c96:	60fb      	str	r3, [r7, #12]
 8101c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c9a:	4b14      	ldr	r3, [pc, #80]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ca0:	4a12      	ldr	r2, [pc, #72]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101ca2:	f043 0308 	orr.w	r3, r3, #8
 8101ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101caa:	4b10      	ldr	r3, [pc, #64]	@ (8101cec <HAL_SPDIFRX_MspInit+0xc4>)
 8101cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101cb0:	f003 0308 	and.w	r3, r3, #8
 8101cb4:	60bb      	str	r3, [r7, #8]
 8101cb6:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101cb8:	2380      	movs	r3, #128	@ 0x80
 8101cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cbe:	2302      	movs	r3, #2
 8101cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cc4:	2300      	movs	r3, #0
 8101cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cca:	2300      	movs	r3, #0
 8101ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101cd0:	2309      	movs	r3, #9
 8101cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101cd6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101cda:	4619      	mov	r1, r3
 8101cdc:	4804      	ldr	r0, [pc, #16]	@ (8101cf0 <HAL_SPDIFRX_MspInit+0xc8>)
 8101cde:	f003 fc2d 	bl	810553c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101ce2:	bf00      	nop
 8101ce4:	37f0      	adds	r7, #240	@ 0xf0
 8101ce6:	46bd      	mov	sp, r7
 8101ce8:	bd80      	pop	{r7, pc}
 8101cea:	bf00      	nop
 8101cec:	58024400 	.word	0x58024400
 8101cf0:	58020c00 	.word	0x58020c00

08101cf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101cf4:	b580      	push	{r7, lr}
 8101cf6:	b0c0      	sub	sp, #256	@ 0x100
 8101cf8:	af00      	add	r7, sp, #0
 8101cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cfc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101d00:	2200      	movs	r2, #0
 8101d02:	601a      	str	r2, [r3, #0]
 8101d04:	605a      	str	r2, [r3, #4]
 8101d06:	609a      	str	r2, [r3, #8]
 8101d08:	60da      	str	r2, [r3, #12]
 8101d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d0c:	f107 0320 	add.w	r3, r7, #32
 8101d10:	22c8      	movs	r2, #200	@ 0xc8
 8101d12:	2100      	movs	r1, #0
 8101d14:	4618      	mov	r0, r3
 8101d16:	f00c fae1 	bl	810e2dc <memset>
  if(hspi->Instance==SPI2)
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	4a72      	ldr	r2, [pc, #456]	@ (8101ee8 <HAL_SPI_MspInit+0x1f4>)
 8101d20:	4293      	cmp	r3, r2
 8101d22:	d16b      	bne.n	8101dfc <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101d24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101d28:	f04f 0300 	mov.w	r3, #0
 8101d2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101d30:	2300      	movs	r3, #0
 8101d32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d36:	f107 0320 	add.w	r3, r7, #32
 8101d3a:	4618      	mov	r0, r3
 8101d3c:	f004 fa72 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101d40:	4603      	mov	r3, r0
 8101d42:	2b00      	cmp	r3, #0
 8101d44:	d001      	beq.n	8101d4a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101d46:	f7ff fba5 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101d4a:	4b68      	ldr	r3, [pc, #416]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d50:	4a66      	ldr	r2, [pc, #408]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101d56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101d5a:	4b64      	ldr	r3, [pc, #400]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101d64:	61fb      	str	r3, [r7, #28]
 8101d66:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101d68:	4b60      	ldr	r3, [pc, #384]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d70:	f043 0301 	orr.w	r3, r3, #1
 8101d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d78:	4b5c      	ldr	r3, [pc, #368]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d7e:	f003 0301 	and.w	r3, r3, #1
 8101d82:	61bb      	str	r3, [r7, #24]
 8101d84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d86:	4b59      	ldr	r3, [pc, #356]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d8c:	4a57      	ldr	r2, [pc, #348]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d8e:	f043 0304 	orr.w	r3, r3, #4
 8101d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d96:	4b55      	ldr	r3, [pc, #340]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d9c:	f003 0304 	and.w	r3, r3, #4
 8101da0:	617b      	str	r3, [r7, #20]
 8101da2:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101da4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101da8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dac:	2302      	movs	r3, #2
 8101dae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101db2:	2300      	movs	r3, #0
 8101db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101db8:	2300      	movs	r3, #0
 8101dba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101dbe:	2305      	movs	r3, #5
 8101dc0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101dc4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101dc8:	4619      	mov	r1, r3
 8101dca:	4849      	ldr	r0, [pc, #292]	@ (8101ef0 <HAL_SPI_MspInit+0x1fc>)
 8101dcc:	f003 fbb6 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101dd0:	230c      	movs	r3, #12
 8101dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dd6:	2302      	movs	r3, #2
 8101dd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ddc:	2300      	movs	r3, #0
 8101dde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101de2:	2300      	movs	r3, #0
 8101de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101de8:	2305      	movs	r3, #5
 8101dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101dee:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101df2:	4619      	mov	r1, r3
 8101df4:	483f      	ldr	r0, [pc, #252]	@ (8101ef4 <HAL_SPI_MspInit+0x200>)
 8101df6:	f003 fba1 	bl	810553c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101dfa:	e06f      	b.n	8101edc <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	4a3d      	ldr	r2, [pc, #244]	@ (8101ef8 <HAL_SPI_MspInit+0x204>)
 8101e02:	4293      	cmp	r3, r2
 8101e04:	d16a      	bne.n	8101edc <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101e06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101e0a:	f04f 0300 	mov.w	r3, #0
 8101e0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101e12:	2300      	movs	r3, #0
 8101e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e18:	f107 0320 	add.w	r3, r7, #32
 8101e1c:	4618      	mov	r0, r3
 8101e1e:	f004 fa01 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8101e22:	4603      	mov	r3, r0
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d001      	beq.n	8101e2c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101e28:	f7ff fb34 	bl	8101494 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101e32:	4a2e      	ldr	r2, [pc, #184]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8101e38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101e46:	613b      	str	r3, [r7, #16]
 8101e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101e4a:	4b28      	ldr	r3, [pc, #160]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e50:	4a26      	ldr	r2, [pc, #152]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e5a:	4b24      	ldr	r3, [pc, #144]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101e64:	60fb      	str	r3, [r7, #12]
 8101e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e68:	4b20      	ldr	r3, [pc, #128]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e78:	4b1c      	ldr	r3, [pc, #112]	@ (8101eec <HAL_SPI_MspInit+0x1f8>)
 8101e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101e82:	60bb      	str	r3, [r7, #8]
 8101e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101e86:	2303      	movs	r3, #3
 8101e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e8c:	2302      	movs	r3, #2
 8101e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e92:	2300      	movs	r3, #0
 8101e94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e98:	2300      	movs	r3, #0
 8101e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101e9e:	2305      	movs	r3, #5
 8101ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101ea4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101ea8:	4619      	mov	r1, r3
 8101eaa:	4814      	ldr	r0, [pc, #80]	@ (8101efc <HAL_SPI_MspInit+0x208>)
 8101eac:	f003 fb46 	bl	810553c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101eb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101eb8:	2302      	movs	r3, #2
 8101eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ebe:	2300      	movs	r3, #0
 8101ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ec4:	2300      	movs	r3, #0
 8101ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101eca:	2305      	movs	r3, #5
 8101ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101ed0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101ed4:	4619      	mov	r1, r3
 8101ed6:	480a      	ldr	r0, [pc, #40]	@ (8101f00 <HAL_SPI_MspInit+0x20c>)
 8101ed8:	f003 fb30 	bl	810553c <HAL_GPIO_Init>
}
 8101edc:	bf00      	nop
 8101ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101ee2:	46bd      	mov	sp, r7
 8101ee4:	bd80      	pop	{r7, pc}
 8101ee6:	bf00      	nop
 8101ee8:	40003800 	.word	0x40003800
 8101eec:	58024400 	.word	0x58024400
 8101ef0:	58020000 	.word	0x58020000
 8101ef4:	58020800 	.word	0x58020800
 8101ef8:	40015000 	.word	0x40015000
 8101efc:	58022800 	.word	0x58022800
 8101f00:	58022400 	.word	0x58022400

08101f04 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101f04:	b480      	push	{r7}
 8101f06:	b085      	sub	sp, #20
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	4a0b      	ldr	r2, [pc, #44]	@ (8101f40 <HAL_TIM_OC_MspInit+0x3c>)
 8101f12:	4293      	cmp	r3, r2
 8101f14:	d10e      	bne.n	8101f34 <HAL_TIM_OC_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101f16:	4b0b      	ldr	r3, [pc, #44]	@ (8101f44 <HAL_TIM_OC_MspInit+0x40>)
 8101f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f1c:	4a09      	ldr	r2, [pc, #36]	@ (8101f44 <HAL_TIM_OC_MspInit+0x40>)
 8101f1e:	f043 0302 	orr.w	r3, r3, #2
 8101f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101f26:	4b07      	ldr	r3, [pc, #28]	@ (8101f44 <HAL_TIM_OC_MspInit+0x40>)
 8101f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f2c:	f003 0302 	and.w	r3, r3, #2
 8101f30:	60fb      	str	r3, [r7, #12]
 8101f32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101f34:	bf00      	nop
 8101f36:	3714      	adds	r7, #20
 8101f38:	46bd      	mov	sp, r7
 8101f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3e:	4770      	bx	lr
 8101f40:	40010400 	.word	0x40010400
 8101f44:	58024400 	.word	0x58024400

08101f48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101f48:	b580      	push	{r7, lr}
 8101f4a:	b08a      	sub	sp, #40	@ 0x28
 8101f4c:	af00      	add	r7, sp, #0
 8101f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f50:	f107 0314 	add.w	r3, r7, #20
 8101f54:	2200      	movs	r2, #0
 8101f56:	601a      	str	r2, [r3, #0]
 8101f58:	605a      	str	r2, [r3, #4]
 8101f5a:	609a      	str	r2, [r3, #8]
 8101f5c:	60da      	str	r2, [r3, #12]
 8101f5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	4a1a      	ldr	r2, [pc, #104]	@ (8101fd0 <HAL_TIM_Base_MspInit+0x88>)
 8101f66:	4293      	cmp	r3, r2
 8101f68:	d12e      	bne.n	8101fc8 <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f70:	4a18      	ldr	r2, [pc, #96]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101f76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101f7a:	4b16      	ldr	r3, [pc, #88]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101f84:	613b      	str	r3, [r7, #16]
 8101f86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101f88:	4b12      	ldr	r3, [pc, #72]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f8e:	4a11      	ldr	r2, [pc, #68]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f90:	f043 0320 	orr.w	r3, r3, #32
 8101f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f98:	4b0e      	ldr	r3, [pc, #56]	@ (8101fd4 <HAL_TIM_Base_MspInit+0x8c>)
 8101f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f9e:	f003 0320 	and.w	r3, r3, #32
 8101fa2:	60fb      	str	r3, [r7, #12]
 8101fa4:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8101faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fac:	2302      	movs	r3, #2
 8101fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fb0:	2300      	movs	r3, #0
 8101fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fb4:	2300      	movs	r3, #0
 8101fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101fb8:	2309      	movs	r3, #9
 8101fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101fbc:	f107 0314 	add.w	r3, r7, #20
 8101fc0:	4619      	mov	r1, r3
 8101fc2:	4805      	ldr	r0, [pc, #20]	@ (8101fd8 <HAL_TIM_Base_MspInit+0x90>)
 8101fc4:	f003 faba 	bl	810553c <HAL_GPIO_Init>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101fc8:	bf00      	nop
 8101fca:	3728      	adds	r7, #40	@ 0x28
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	bd80      	pop	{r7, pc}
 8101fd0:	40001c00 	.word	0x40001c00
 8101fd4:	58024400 	.word	0x58024400
 8101fd8:	58021400 	.word	0x58021400

08101fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101fdc:	b580      	push	{r7, lr}
 8101fde:	b088      	sub	sp, #32
 8101fe0:	af00      	add	r7, sp, #0
 8101fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fe4:	f107 030c 	add.w	r3, r7, #12
 8101fe8:	2200      	movs	r2, #0
 8101fea:	601a      	str	r2, [r3, #0]
 8101fec:	605a      	str	r2, [r3, #4]
 8101fee:	609a      	str	r2, [r3, #8]
 8101ff0:	60da      	str	r2, [r3, #12]
 8101ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a12      	ldr	r2, [pc, #72]	@ (8102044 <HAL_TIM_MspPostInit+0x68>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d11e      	bne.n	810203c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101ffe:	4b12      	ldr	r3, [pc, #72]	@ (8102048 <HAL_TIM_MspPostInit+0x6c>)
 8102000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102004:	4a10      	ldr	r2, [pc, #64]	@ (8102048 <HAL_TIM_MspPostInit+0x6c>)
 8102006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810200a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810200e:	4b0e      	ldr	r3, [pc, #56]	@ (8102048 <HAL_TIM_MspPostInit+0x6c>)
 8102010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102018:	60bb      	str	r3, [r7, #8]
 810201a:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 810201c:	23c0      	movs	r3, #192	@ 0xc0
 810201e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102020:	2302      	movs	r3, #2
 8102022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102024:	2300      	movs	r3, #0
 8102026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102028:	2300      	movs	r3, #0
 810202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 810202c:	2303      	movs	r3, #3
 810202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102030:	f107 030c 	add.w	r3, r7, #12
 8102034:	4619      	mov	r1, r3
 8102036:	4805      	ldr	r0, [pc, #20]	@ (810204c <HAL_TIM_MspPostInit+0x70>)
 8102038:	f003 fa80 	bl	810553c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 810203c:	bf00      	nop
 810203e:	3720      	adds	r7, #32
 8102040:	46bd      	mov	sp, r7
 8102042:	bd80      	pop	{r7, pc}
 8102044:	40010400 	.word	0x40010400
 8102048:	58024400 	.word	0x58024400
 810204c:	58022400 	.word	0x58022400

08102050 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102050:	b580      	push	{r7, lr}
 8102052:	b0be      	sub	sp, #248	@ 0xf8
 8102054:	af00      	add	r7, sp, #0
 8102056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102058:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810205c:	2200      	movs	r2, #0
 810205e:	601a      	str	r2, [r3, #0]
 8102060:	605a      	str	r2, [r3, #4]
 8102062:	609a      	str	r2, [r3, #8]
 8102064:	60da      	str	r2, [r3, #12]
 8102066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102068:	f107 0318 	add.w	r3, r7, #24
 810206c:	22c8      	movs	r2, #200	@ 0xc8
 810206e:	2100      	movs	r1, #0
 8102070:	4618      	mov	r0, r3
 8102072:	f00c f933 	bl	810e2dc <memset>
  if(huart->Instance==UART8)
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a68      	ldr	r2, [pc, #416]	@ (810221c <HAL_UART_MspInit+0x1cc>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d147      	bne.n	8102110 <HAL_UART_MspInit+0xc0>

    /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8102080:	f04f 0202 	mov.w	r2, #2
 8102084:	f04f 0300 	mov.w	r3, #0
 8102088:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810208c:	2300      	movs	r3, #0
 810208e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102092:	f107 0318 	add.w	r3, r7, #24
 8102096:	4618      	mov	r0, r3
 8102098:	f004 f8c4 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 810209c:	4603      	mov	r3, r0
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d001      	beq.n	81020a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81020a2:	f7ff f9f7 	bl	8101494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 81020a6:	4b5e      	ldr	r3, [pc, #376]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81020ac:	4a5c      	ldr	r2, [pc, #368]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81020b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81020b6:	4b5a      	ldr	r3, [pc, #360]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81020bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81020c0:	617b      	str	r3, [r7, #20]
 81020c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81020c4:	4b56      	ldr	r3, [pc, #344]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020ca:	4a55      	ldr	r2, [pc, #340]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020d4:	4b52      	ldr	r3, [pc, #328]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 81020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81020de:	613b      	str	r3, [r7, #16]
 81020e0:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 81020e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81020e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020ea:	2302      	movs	r3, #2
 81020ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020f0:	2300      	movs	r3, #0
 81020f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020f6:	2300      	movs	r3, #0
 81020f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 81020fc:	2308      	movs	r3, #8
 81020fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102102:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102106:	4619      	mov	r1, r3
 8102108:	4846      	ldr	r0, [pc, #280]	@ (8102224 <HAL_UART_MspInit+0x1d4>)
 810210a:	f003 fa17 	bl	810553c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 810210e:	e081      	b.n	8102214 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	4a44      	ldr	r2, [pc, #272]	@ (8102228 <HAL_UART_MspInit+0x1d8>)
 8102116:	4293      	cmp	r3, r2
 8102118:	d17c      	bne.n	8102214 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 810211a:	f04f 0201 	mov.w	r2, #1
 810211e:	f04f 0300 	mov.w	r3, #0
 8102122:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8102126:	2300      	movs	r3, #0
 8102128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810212c:	f107 0318 	add.w	r3, r7, #24
 8102130:	4618      	mov	r0, r3
 8102132:	f004 f877 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8102136:	4603      	mov	r3, r0
 8102138:	2b00      	cmp	r3, #0
 810213a:	d001      	beq.n	8102140 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 810213c:	f7ff f9aa 	bl	8101494 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8102140:	4b37      	ldr	r3, [pc, #220]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 8102142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102146:	4a36      	ldr	r2, [pc, #216]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 8102148:	f043 0310 	orr.w	r3, r3, #16
 810214c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102150:	4b33      	ldr	r3, [pc, #204]	@ (8102220 <HAL_UART_MspInit+0x1d0>)
 8102152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102156:	f003 0310 	and.w	r3, r3, #16
 810215a:	60fb      	str	r3, [r7, #12]
 810215c:	68fb      	ldr	r3, [r7, #12]
    hdma_usart1_rx.Instance = DMA1_Stream0;
 810215e:	4b33      	ldr	r3, [pc, #204]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102160:	4a33      	ldr	r2, [pc, #204]	@ (8102230 <HAL_UART_MspInit+0x1e0>)
 8102162:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8102164:	4b31      	ldr	r3, [pc, #196]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102166:	2229      	movs	r2, #41	@ 0x29
 8102168:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810216a:	4b30      	ldr	r3, [pc, #192]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 810216c:	2200      	movs	r2, #0
 810216e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102170:	4b2e      	ldr	r3, [pc, #184]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102172:	2200      	movs	r2, #0
 8102174:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102176:	4b2d      	ldr	r3, [pc, #180]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810217c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810217e:	4b2b      	ldr	r3, [pc, #172]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102180:	2200      	movs	r2, #0
 8102182:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102184:	4b29      	ldr	r3, [pc, #164]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102186:	2200      	movs	r2, #0
 8102188:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 810218a:	4b28      	ldr	r3, [pc, #160]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 810218c:	2200      	movs	r2, #0
 810218e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8102190:	4b26      	ldr	r3, [pc, #152]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102192:	2200      	movs	r2, #0
 8102194:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102196:	4b25      	ldr	r3, [pc, #148]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 8102198:	2200      	movs	r2, #0
 810219a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 810219c:	4823      	ldr	r0, [pc, #140]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 810219e:	f002 f803 	bl	81041a8 <HAL_DMA_Init>
 81021a2:	4603      	mov	r3, r0
 81021a4:	2b00      	cmp	r3, #0
 81021a6:	d001      	beq.n	81021ac <HAL_UART_MspInit+0x15c>
      Error_Handler();
 81021a8:	f7ff f974 	bl	8101494 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	4a1f      	ldr	r2, [pc, #124]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 81021b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81021b4:	4a1d      	ldr	r2, [pc, #116]	@ (810222c <HAL_UART_MspInit+0x1dc>)
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 81021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021bc:	4a1e      	ldr	r2, [pc, #120]	@ (8102238 <HAL_UART_MspInit+0x1e8>)
 81021be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 81021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021c2:	222a      	movs	r2, #42	@ 0x2a
 81021c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021c8:	2240      	movs	r2, #64	@ 0x40
 81021ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81021cc:	4b19      	ldr	r3, [pc, #100]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021ce:	2200      	movs	r2, #0
 81021d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81021d2:	4b18      	ldr	r3, [pc, #96]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81021d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81021da:	4b16      	ldr	r3, [pc, #88]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021dc:	2200      	movs	r2, #0
 81021de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81021e0:	4b14      	ldr	r3, [pc, #80]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021e2:	2200      	movs	r2, #0
 81021e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 81021e6:	4b13      	ldr	r3, [pc, #76]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021e8:	2200      	movs	r2, #0
 81021ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 81021ec:	4b11      	ldr	r3, [pc, #68]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021ee:	2200      	movs	r2, #0
 81021f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81021f2:	4b10      	ldr	r3, [pc, #64]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021f4:	2200      	movs	r2, #0
 81021f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 81021f8:	480e      	ldr	r0, [pc, #56]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 81021fa:	f001 ffd5 	bl	81041a8 <HAL_DMA_Init>
 81021fe:	4603      	mov	r3, r0
 8102200:	2b00      	cmp	r3, #0
 8102202:	d001      	beq.n	8102208 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8102204:	f7ff f946 	bl	8101494 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	4a0a      	ldr	r2, [pc, #40]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 810220c:	67da      	str	r2, [r3, #124]	@ 0x7c
 810220e:	4a09      	ldr	r2, [pc, #36]	@ (8102234 <HAL_UART_MspInit+0x1e4>)
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8102214:	bf00      	nop
 8102216:	37f8      	adds	r7, #248	@ 0xf8
 8102218:	46bd      	mov	sp, r7
 810221a:	bd80      	pop	{r7, pc}
 810221c:	40007c00 	.word	0x40007c00
 8102220:	58024400 	.word	0x58024400
 8102224:	58022400 	.word	0x58022400
 8102228:	40011000 	.word	0x40011000
 810222c:	10000878 	.word	0x10000878
 8102230:	40020010 	.word	0x40020010
 8102234:	100008f0 	.word	0x100008f0
 8102238:	40020028 	.word	0x40020028

0810223c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 810223c:	b580      	push	{r7, lr}
 810223e:	b0c2      	sub	sp, #264	@ 0x108
 8102240:	af00      	add	r7, sp, #0
 8102242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810224a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810224c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102250:	2200      	movs	r2, #0
 8102252:	601a      	str	r2, [r3, #0]
 8102254:	605a      	str	r2, [r3, #4]
 8102256:	609a      	str	r2, [r3, #8]
 8102258:	60da      	str	r2, [r3, #12]
 810225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810225c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102260:	22c8      	movs	r2, #200	@ 0xc8
 8102262:	2100      	movs	r1, #0
 8102264:	4618      	mov	r0, r3
 8102266:	f00c f839 	bl	810e2dc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 810226a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810226e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	4a79      	ldr	r2, [pc, #484]	@ (810245c <HAL_PCD_MspInit+0x220>)
 8102278:	4293      	cmp	r3, r2
 810227a:	f040 80ea 	bne.w	8102452 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810227e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8102282:	f04f 0300 	mov.w	r3, #0
 8102286:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 810228a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810228e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102296:	4618      	mov	r0, r3
 8102298:	f003 ffc4 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 810229c:	4603      	mov	r3, r0
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d001      	beq.n	81022a6 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81022a2:	f7ff f8f7 	bl	8101494 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81022a6:	f003 fd1b 	bl	8105ce0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81022aa:	4b6d      	ldr	r3, [pc, #436]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022b0:	4a6b      	ldr	r2, [pc, #428]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022b2:	f043 0302 	orr.w	r3, r3, #2
 81022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022ba:	4b69      	ldr	r3, [pc, #420]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022c0:	f003 0302 	and.w	r3, r3, #2
 81022c4:	627b      	str	r3, [r7, #36]	@ 0x24
 81022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81022c8:	4b65      	ldr	r3, [pc, #404]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ce:	4a64      	ldr	r2, [pc, #400]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81022d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022d8:	4b61      	ldr	r3, [pc, #388]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81022e2:	623b      	str	r3, [r7, #32]
 81022e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81022e6:	4b5e      	ldr	r3, [pc, #376]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ec:	4a5c      	ldr	r2, [pc, #368]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022ee:	f043 0304 	orr.w	r3, r3, #4
 81022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022f6:	4b5a      	ldr	r3, [pc, #360]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 81022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022fc:	f003 0304 	and.w	r3, r3, #4
 8102300:	61fb      	str	r3, [r7, #28]
 8102302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8102304:	4b56      	ldr	r3, [pc, #344]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810230a:	4a55      	ldr	r2, [pc, #340]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 810230c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8102310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102314:	4b52      	ldr	r3, [pc, #328]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810231e:	61bb      	str	r3, [r7, #24]
 8102320:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102322:	4b4f      	ldr	r3, [pc, #316]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102328:	4a4d      	ldr	r2, [pc, #308]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 810232a:	f043 0301 	orr.w	r3, r3, #1
 810232e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102332:	4b4b      	ldr	r3, [pc, #300]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102338:	f003 0301 	and.w	r3, r3, #1
 810233c:	617b      	str	r3, [r7, #20]
 810233e:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8102340:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8102344:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102348:	2302      	movs	r3, #2
 810234a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810234e:	2300      	movs	r3, #0
 8102350:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102354:	2302      	movs	r3, #2
 8102356:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810235a:	230a      	movs	r3, #10
 810235c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102360:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102364:	4619      	mov	r1, r3
 8102366:	483f      	ldr	r0, [pc, #252]	@ (8102464 <HAL_PCD_MspInit+0x228>)
 8102368:	f003 f8e8 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 810236c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102370:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102374:	2302      	movs	r3, #2
 8102376:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810237a:	2300      	movs	r3, #0
 810237c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102380:	2302      	movs	r3, #2
 8102382:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102386:	230a      	movs	r3, #10
 8102388:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 810238c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102390:	4619      	mov	r1, r3
 8102392:	4835      	ldr	r0, [pc, #212]	@ (8102468 <HAL_PCD_MspInit+0x22c>)
 8102394:	f003 f8d2 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8102398:	2301      	movs	r3, #1
 810239a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810239e:	2302      	movs	r3, #2
 81023a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023a4:	2300      	movs	r3, #0
 81023a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81023aa:	2302      	movs	r3, #2
 81023ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81023b0:	230a      	movs	r3, #10
 81023b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 81023b6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81023ba:	4619      	mov	r1, r3
 81023bc:	482b      	ldr	r0, [pc, #172]	@ (810246c <HAL_PCD_MspInit+0x230>)
 81023be:	f003 f8bd 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 81023c2:	2310      	movs	r3, #16
 81023c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023c8:	2302      	movs	r3, #2
 81023ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023ce:	2300      	movs	r3, #0
 81023d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81023d4:	2302      	movs	r3, #2
 81023d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81023da:	230a      	movs	r3, #10
 81023dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 81023e0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81023e4:	4619      	mov	r1, r3
 81023e6:	4822      	ldr	r0, [pc, #136]	@ (8102470 <HAL_PCD_MspInit+0x234>)
 81023e8:	f003 f8a8 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 81023ec:	2328      	movs	r3, #40	@ 0x28
 81023ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023f2:	2302      	movs	r3, #2
 81023f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023f8:	2300      	movs	r3, #0
 81023fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81023fe:	2302      	movs	r3, #2
 8102400:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102404:	230a      	movs	r3, #10
 8102406:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810240a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810240e:	4619      	mov	r1, r3
 8102410:	4818      	ldr	r0, [pc, #96]	@ (8102474 <HAL_PCD_MspInit+0x238>)
 8102412:	f003 f893 	bl	810553c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8102416:	4b12      	ldr	r3, [pc, #72]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810241c:	4a10      	ldr	r2, [pc, #64]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 810241e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102422:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102426:	4b0e      	ldr	r3, [pc, #56]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102430:	613b      	str	r3, [r7, #16]
 8102432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8102434:	4b0a      	ldr	r3, [pc, #40]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102436:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810243a:	4a09      	ldr	r2, [pc, #36]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 810243c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8102440:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102444:	4b06      	ldr	r3, [pc, #24]	@ (8102460 <HAL_PCD_MspInit+0x224>)
 8102446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810244a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810244e:	60fb      	str	r3, [r7, #12]
 8102450:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8102452:	bf00      	nop
 8102454:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8102458:	46bd      	mov	sp, r7
 810245a:	bd80      	pop	{r7, pc}
 810245c:	40040000 	.word	0x40040000
 8102460:	58024400 	.word	0x58024400
 8102464:	58020400 	.word	0x58020400
 8102468:	58022000 	.word	0x58022000
 810246c:	58020800 	.word	0x58020800
 8102470:	58021c00 	.word	0x58021c00
 8102474:	58020000 	.word	0x58020000

08102478 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8102478:	b580      	push	{r7, lr}
 810247a:	b0ba      	sub	sp, #232	@ 0xe8
 810247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 810247e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102482:	2200      	movs	r2, #0
 8102484:	601a      	str	r2, [r3, #0]
 8102486:	605a      	str	r2, [r3, #4]
 8102488:	609a      	str	r2, [r3, #8]
 810248a:	60da      	str	r2, [r3, #12]
 810248c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 810248e:	4b5c      	ldr	r3, [pc, #368]	@ (8102600 <HAL_FMC_MspInit+0x188>)
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	2b00      	cmp	r3, #0
 8102494:	f040 80b0 	bne.w	81025f8 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8102498:	4b59      	ldr	r3, [pc, #356]	@ (8102600 <HAL_FMC_MspInit+0x188>)
 810249a:	2201      	movs	r2, #1
 810249c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810249e:	f107 0308 	add.w	r3, r7, #8
 81024a2:	22c8      	movs	r2, #200	@ 0xc8
 81024a4:	2100      	movs	r1, #0
 81024a6:	4618      	mov	r0, r3
 81024a8:	f00b ff18 	bl	810e2dc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81024ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81024b0:	f04f 0300 	mov.w	r3, #0
 81024b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 81024b8:	2300      	movs	r3, #0
 81024ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81024bc:	f107 0308 	add.w	r3, r7, #8
 81024c0:	4618      	mov	r0, r3
 81024c2:	f003 feaf 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 81024c6:	4603      	mov	r3, r0
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d001      	beq.n	81024d0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 81024cc:	f7fe ffe2 	bl	8101494 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 81024d0:	4b4c      	ldr	r3, [pc, #304]	@ (8102604 <HAL_FMC_MspInit+0x18c>)
 81024d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81024d6:	4a4b      	ldr	r2, [pc, #300]	@ (8102604 <HAL_FMC_MspInit+0x18c>)
 81024d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81024dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81024e0:	4b48      	ldr	r3, [pc, #288]	@ (8102604 <HAL_FMC_MspInit+0x18c>)
 81024e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81024e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81024ea:	607b      	str	r3, [r7, #4]
 81024ec:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 81024ee:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81024f6:	2302      	movs	r3, #2
 81024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024fc:	2300      	movs	r3, #0
 81024fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102502:	2303      	movs	r3, #3
 8102504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102508:	230c      	movs	r3, #12
 810250a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810250e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102512:	4619      	mov	r1, r3
 8102514:	483c      	ldr	r0, [pc, #240]	@ (8102608 <HAL_FMC_MspInit+0x190>)
 8102516:	f003 f811 	bl	810553c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 810251a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 810251e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102522:	2302      	movs	r3, #2
 8102524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102528:	2300      	movs	r3, #0
 810252a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810252e:	2303      	movs	r3, #3
 8102530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102534:	230c      	movs	r3, #12
 8102536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810253a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810253e:	4619      	mov	r1, r3
 8102540:	4832      	ldr	r0, [pc, #200]	@ (810260c <HAL_FMC_MspInit+0x194>)
 8102542:	f002 fffb 	bl	810553c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8102546:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 810254a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810254e:	2302      	movs	r3, #2
 8102550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102554:	2300      	movs	r3, #0
 8102556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810255a:	2303      	movs	r3, #3
 810255c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102560:	230c      	movs	r3, #12
 8102562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8102566:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810256a:	4619      	mov	r1, r3
 810256c:	4828      	ldr	r0, [pc, #160]	@ (8102610 <HAL_FMC_MspInit+0x198>)
 810256e:	f002 ffe5 	bl	810553c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 8102572:	f248 1317 	movw	r3, #33047	@ 0x8117
 8102576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810257a:	2302      	movs	r3, #2
 810257c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102580:	2300      	movs	r3, #0
 8102582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102586:	2303      	movs	r3, #3
 8102588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810258c:	230c      	movs	r3, #12
 810258e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8102592:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102596:	4619      	mov	r1, r3
 8102598:	481e      	ldr	r0, [pc, #120]	@ (8102614 <HAL_FMC_MspInit+0x19c>)
 810259a:	f002 ffcf 	bl	810553c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 810259e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 81025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025a6:	2302      	movs	r3, #2
 81025a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025ac:	2300      	movs	r3, #0
 81025ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81025b2:	2303      	movs	r3, #3
 81025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81025b8:	230c      	movs	r3, #12
 81025ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81025be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81025c2:	4619      	mov	r1, r3
 81025c4:	4814      	ldr	r0, [pc, #80]	@ (8102618 <HAL_FMC_MspInit+0x1a0>)
 81025c6:	f002 ffb9 	bl	810553c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 81025ca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 81025ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025d2:	2302      	movs	r3, #2
 81025d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025d8:	2300      	movs	r3, #0
 81025da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81025de:	2303      	movs	r3, #3
 81025e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81025e4:	230c      	movs	r3, #12
 81025e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81025ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81025ee:	4619      	mov	r1, r3
 81025f0:	480a      	ldr	r0, [pc, #40]	@ (810261c <HAL_FMC_MspInit+0x1a4>)
 81025f2:	f002 ffa3 	bl	810553c <HAL_GPIO_Init>
 81025f6:	e000      	b.n	81025fa <HAL_FMC_MspInit+0x182>
    return;
 81025f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 81025fa:	37e8      	adds	r7, #232	@ 0xe8
 81025fc:	46bd      	mov	sp, r7
 81025fe:	bd80      	pop	{r7, pc}
 8102600:	10000e98 	.word	0x10000e98
 8102604:	58024400 	.word	0x58024400
 8102608:	58022000 	.word	0x58022000
 810260c:	58021000 	.word	0x58021000
 8102610:	58021c00 	.word	0x58021c00
 8102614:	58021800 	.word	0x58021800
 8102618:	58020c00 	.word	0x58020c00
 810261c:	58021400 	.word	0x58021400

08102620 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8102620:	b580      	push	{r7, lr}
 8102622:	b082      	sub	sp, #8
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8102628:	f7ff ff26 	bl	8102478 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 810262c:	bf00      	nop
 810262e:	3708      	adds	r7, #8
 8102630:	46bd      	mov	sp, r7
 8102632:	bd80      	pop	{r7, pc}

08102634 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8102634:	b580      	push	{r7, lr}
 8102636:	b0bc      	sub	sp, #240	@ 0xf0
 8102638:	af00      	add	r7, sp, #0
 810263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810263c:	f107 0310 	add.w	r3, r7, #16
 8102640:	22c8      	movs	r2, #200	@ 0xc8
 8102642:	2100      	movs	r1, #0
 8102644:	4618      	mov	r0, r3
 8102646:	f00b fe49 	bl	810e2dc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	4a4f      	ldr	r2, [pc, #316]	@ (810278c <HAL_SAI_MspInit+0x158>)
 8102650:	4293      	cmp	r3, r2
 8102652:	d153      	bne.n	81026fc <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102658:	f04f 0300 	mov.w	r3, #0
 810265c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8102660:	2300      	movs	r3, #0
 8102662:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102664:	f107 0310 	add.w	r3, r7, #16
 8102668:	4618      	mov	r0, r3
 810266a:	f003 fddb 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 810266e:	4603      	mov	r3, r0
 8102670:	2b00      	cmp	r3, #0
 8102672:	d001      	beq.n	8102678 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8102674:	f7fe ff0e 	bl	8101494 <Error_Handler>
    }

    if (SAI1_client == 0)
 8102678:	4b45      	ldr	r3, [pc, #276]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	2b00      	cmp	r3, #0
 810267e:	d10e      	bne.n	810269e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102680:	4b44      	ldr	r3, [pc, #272]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 8102682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102686:	4a43      	ldr	r2, [pc, #268]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 8102688:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810268c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102690:	4b40      	ldr	r3, [pc, #256]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 8102692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810269a:	60fb      	str	r3, [r7, #12]
 810269c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810269e:	4b3c      	ldr	r3, [pc, #240]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	3301      	adds	r3, #1
 81026a4:	4a3a      	ldr	r2, [pc, #232]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 81026a6:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 81026a8:	2370      	movs	r3, #112	@ 0x70
 81026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81026ae:	2302      	movs	r3, #2
 81026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026b4:	2300      	movs	r3, #0
 81026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026ba:	2300      	movs	r3, #0
 81026bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81026c0:	2306      	movs	r3, #6
 81026c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81026c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81026ca:	4619      	mov	r1, r3
 81026cc:	4832      	ldr	r0, [pc, #200]	@ (8102798 <HAL_SAI_MspInit+0x164>)
 81026ce:	f002 ff35 	bl	810553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 81026d2:	2380      	movs	r3, #128	@ 0x80
 81026d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81026d8:	2302      	movs	r3, #2
 81026da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026de:	2300      	movs	r3, #0
 81026e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026e4:	2300      	movs	r3, #0
 81026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81026ea:	2306      	movs	r3, #6
 81026ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81026f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81026f4:	4619      	mov	r1, r3
 81026f6:	4829      	ldr	r0, [pc, #164]	@ (810279c <HAL_SAI_MspInit+0x168>)
 81026f8:	f002 ff20 	bl	810553c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a27      	ldr	r2, [pc, #156]	@ (81027a0 <HAL_SAI_MspInit+0x16c>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d13e      	bne.n	8102784 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810270a:	f04f 0300 	mov.w	r3, #0
 810270e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8102712:	2300      	movs	r3, #0
 8102714:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102716:	f107 0310 	add.w	r3, r7, #16
 810271a:	4618      	mov	r0, r3
 810271c:	f003 fd82 	bl	8106224 <HAL_RCCEx_PeriphCLKConfig>
 8102720:	4603      	mov	r3, r0
 8102722:	2b00      	cmp	r3, #0
 8102724:	d001      	beq.n	810272a <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8102726:	f7fe feb5 	bl	8101494 <Error_Handler>
    }

      if (SAI1_client == 0)
 810272a:	4b19      	ldr	r3, [pc, #100]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	2b00      	cmp	r3, #0
 8102730:	d10e      	bne.n	8102750 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102732:	4b18      	ldr	r3, [pc, #96]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 8102734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102738:	4a16      	ldr	r2, [pc, #88]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 810273a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810273e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102742:	4b14      	ldr	r3, [pc, #80]	@ (8102794 <HAL_SAI_MspInit+0x160>)
 8102744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810274c:	60bb      	str	r3, [r7, #8]
 810274e:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8102750:	4b0f      	ldr	r3, [pc, #60]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	3301      	adds	r3, #1
 8102756:	4a0e      	ldr	r2, [pc, #56]	@ (8102790 <HAL_SAI_MspInit+0x15c>)
 8102758:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 810275a:	2308      	movs	r3, #8
 810275c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102760:	2302      	movs	r3, #2
 8102762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102766:	2300      	movs	r3, #0
 8102768:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810276c:	2300      	movs	r3, #0
 810276e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102772:	2306      	movs	r3, #6
 8102774:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102778:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810277c:	4619      	mov	r1, r3
 810277e:	4806      	ldr	r0, [pc, #24]	@ (8102798 <HAL_SAI_MspInit+0x164>)
 8102780:	f002 fedc 	bl	810553c <HAL_GPIO_Init>

    }
}
 8102784:	bf00      	nop
 8102786:	37f0      	adds	r7, #240	@ 0xf0
 8102788:	46bd      	mov	sp, r7
 810278a:	bd80      	pop	{r7, pc}
 810278c:	40015804 	.word	0x40015804
 8102790:	10000e9c 	.word	0x10000e9c
 8102794:	58024400 	.word	0x58024400
 8102798:	58021000 	.word	0x58021000
 810279c:	58021800 	.word	0x58021800
 81027a0:	40015824 	.word	0x40015824

081027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81027a4:	b480      	push	{r7}
 81027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81027a8:	bf00      	nop
 81027aa:	e7fd      	b.n	81027a8 <NMI_Handler+0x4>

081027ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81027ac:	b480      	push	{r7}
 81027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81027b0:	bf00      	nop
 81027b2:	e7fd      	b.n	81027b0 <HardFault_Handler+0x4>

081027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81027b4:	b480      	push	{r7}
 81027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81027b8:	bf00      	nop
 81027ba:	e7fd      	b.n	81027b8 <MemManage_Handler+0x4>

081027bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81027bc:	b480      	push	{r7}
 81027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81027c0:	bf00      	nop
 81027c2:	e7fd      	b.n	81027c0 <BusFault_Handler+0x4>

081027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81027c4:	b480      	push	{r7}
 81027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81027c8:	bf00      	nop
 81027ca:	e7fd      	b.n	81027c8 <UsageFault_Handler+0x4>

081027cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81027cc:	b480      	push	{r7}
 81027ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81027d0:	bf00      	nop
 81027d2:	46bd      	mov	sp, r7
 81027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d8:	4770      	bx	lr

081027da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81027da:	b480      	push	{r7}
 81027dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81027de:	bf00      	nop
 81027e0:	46bd      	mov	sp, r7
 81027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027e6:	4770      	bx	lr

081027e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81027e8:	b480      	push	{r7}
 81027ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81027ec:	bf00      	nop
 81027ee:	46bd      	mov	sp, r7
 81027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027f4:	4770      	bx	lr

081027f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81027f6:	b580      	push	{r7, lr}
 81027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81027fa:	f000 f977 	bl	8102aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81027fe:	bf00      	nop
 8102800:	bd80      	pop	{r7, pc}
	...

08102804 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102804:	b580      	push	{r7, lr}
 8102806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102808:	4802      	ldr	r0, [pc, #8]	@ (8102814 <CEC_IRQHandler+0x10>)
 810280a:	f001 faaf 	bl	8103d6c <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810280e:	bf00      	nop
 8102810:	bd80      	pop	{r7, pc}
 8102812:	bf00      	nop
 8102814:	100002f8 	.word	0x100002f8

08102818 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102818:	b580      	push	{r7, lr}
 810281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810281c:	f003 f884 	bl	8105928 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8102820:	bf00      	nop
 8102822:	bd80      	pop	{r7, pc}

08102824 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102824:	b580      	push	{r7, lr}
 8102826:	b086      	sub	sp, #24
 8102828:	af00      	add	r7, sp, #0
 810282a:	60f8      	str	r0, [r7, #12]
 810282c:	60b9      	str	r1, [r7, #8]
 810282e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102830:	2300      	movs	r3, #0
 8102832:	617b      	str	r3, [r7, #20]
 8102834:	e00a      	b.n	810284c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102836:	f3af 8000 	nop.w
 810283a:	4601      	mov	r1, r0
 810283c:	68bb      	ldr	r3, [r7, #8]
 810283e:	1c5a      	adds	r2, r3, #1
 8102840:	60ba      	str	r2, [r7, #8]
 8102842:	b2ca      	uxtb	r2, r1
 8102844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102846:	697b      	ldr	r3, [r7, #20]
 8102848:	3301      	adds	r3, #1
 810284a:	617b      	str	r3, [r7, #20]
 810284c:	697a      	ldr	r2, [r7, #20]
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	429a      	cmp	r2, r3
 8102852:	dbf0      	blt.n	8102836 <_read+0x12>
  }

  return len;
 8102854:	687b      	ldr	r3, [r7, #4]
}
 8102856:	4618      	mov	r0, r3
 8102858:	3718      	adds	r7, #24
 810285a:	46bd      	mov	sp, r7
 810285c:	bd80      	pop	{r7, pc}

0810285e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810285e:	b580      	push	{r7, lr}
 8102860:	b086      	sub	sp, #24
 8102862:	af00      	add	r7, sp, #0
 8102864:	60f8      	str	r0, [r7, #12]
 8102866:	60b9      	str	r1, [r7, #8]
 8102868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810286a:	2300      	movs	r3, #0
 810286c:	617b      	str	r3, [r7, #20]
 810286e:	e009      	b.n	8102884 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102870:	68bb      	ldr	r3, [r7, #8]
 8102872:	1c5a      	adds	r2, r3, #1
 8102874:	60ba      	str	r2, [r7, #8]
 8102876:	781b      	ldrb	r3, [r3, #0]
 8102878:	4618      	mov	r0, r3
 810287a:	f7fe fdf9 	bl	8101470 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810287e:	697b      	ldr	r3, [r7, #20]
 8102880:	3301      	adds	r3, #1
 8102882:	617b      	str	r3, [r7, #20]
 8102884:	697a      	ldr	r2, [r7, #20]
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	429a      	cmp	r2, r3
 810288a:	dbf1      	blt.n	8102870 <_write+0x12>
  }
  return len;
 810288c:	687b      	ldr	r3, [r7, #4]
}
 810288e:	4618      	mov	r0, r3
 8102890:	3718      	adds	r7, #24
 8102892:	46bd      	mov	sp, r7
 8102894:	bd80      	pop	{r7, pc}

08102896 <_close>:

int _close(int file)
{
 8102896:	b480      	push	{r7}
 8102898:	b083      	sub	sp, #12
 810289a:	af00      	add	r7, sp, #0
 810289c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810289e:	f04f 33ff 	mov.w	r3, #4294967295
}
 81028a2:	4618      	mov	r0, r3
 81028a4:	370c      	adds	r7, #12
 81028a6:	46bd      	mov	sp, r7
 81028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028ac:	4770      	bx	lr

081028ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 81028ae:	b480      	push	{r7}
 81028b0:	b083      	sub	sp, #12
 81028b2:	af00      	add	r7, sp, #0
 81028b4:	6078      	str	r0, [r7, #4]
 81028b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81028b8:	683b      	ldr	r3, [r7, #0]
 81028ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81028be:	605a      	str	r2, [r3, #4]
  return 0;
 81028c0:	2300      	movs	r3, #0
}
 81028c2:	4618      	mov	r0, r3
 81028c4:	370c      	adds	r7, #12
 81028c6:	46bd      	mov	sp, r7
 81028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028cc:	4770      	bx	lr

081028ce <_isatty>:

int _isatty(int file)
{
 81028ce:	b480      	push	{r7}
 81028d0:	b083      	sub	sp, #12
 81028d2:	af00      	add	r7, sp, #0
 81028d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81028d6:	2301      	movs	r3, #1
}
 81028d8:	4618      	mov	r0, r3
 81028da:	370c      	adds	r7, #12
 81028dc:	46bd      	mov	sp, r7
 81028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e2:	4770      	bx	lr

081028e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81028e4:	b480      	push	{r7}
 81028e6:	b085      	sub	sp, #20
 81028e8:	af00      	add	r7, sp, #0
 81028ea:	60f8      	str	r0, [r7, #12]
 81028ec:	60b9      	str	r1, [r7, #8]
 81028ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81028f0:	2300      	movs	r3, #0
}
 81028f2:	4618      	mov	r0, r3
 81028f4:	3714      	adds	r7, #20
 81028f6:	46bd      	mov	sp, r7
 81028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028fc:	4770      	bx	lr
	...

08102900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102900:	b580      	push	{r7, lr}
 8102902:	b086      	sub	sp, #24
 8102904:	af00      	add	r7, sp, #0
 8102906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102908:	4a14      	ldr	r2, [pc, #80]	@ (810295c <_sbrk+0x5c>)
 810290a:	4b15      	ldr	r3, [pc, #84]	@ (8102960 <_sbrk+0x60>)
 810290c:	1ad3      	subs	r3, r2, r3
 810290e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102910:	697b      	ldr	r3, [r7, #20]
 8102912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102914:	4b13      	ldr	r3, [pc, #76]	@ (8102964 <_sbrk+0x64>)
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	2b00      	cmp	r3, #0
 810291a:	d102      	bne.n	8102922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810291c:	4b11      	ldr	r3, [pc, #68]	@ (8102964 <_sbrk+0x64>)
 810291e:	4a12      	ldr	r2, [pc, #72]	@ (8102968 <_sbrk+0x68>)
 8102920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102922:	4b10      	ldr	r3, [pc, #64]	@ (8102964 <_sbrk+0x64>)
 8102924:	681a      	ldr	r2, [r3, #0]
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	4413      	add	r3, r2
 810292a:	693a      	ldr	r2, [r7, #16]
 810292c:	429a      	cmp	r2, r3
 810292e:	d207      	bcs.n	8102940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102930:	f00b fd22 	bl	810e378 <__errno>
 8102934:	4603      	mov	r3, r0
 8102936:	220c      	movs	r2, #12
 8102938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810293a:	f04f 33ff 	mov.w	r3, #4294967295
 810293e:	e009      	b.n	8102954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102940:	4b08      	ldr	r3, [pc, #32]	@ (8102964 <_sbrk+0x64>)
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102946:	4b07      	ldr	r3, [pc, #28]	@ (8102964 <_sbrk+0x64>)
 8102948:	681a      	ldr	r2, [r3, #0]
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	4413      	add	r3, r2
 810294e:	4a05      	ldr	r2, [pc, #20]	@ (8102964 <_sbrk+0x64>)
 8102950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102952:	68fb      	ldr	r3, [r7, #12]
}
 8102954:	4618      	mov	r0, r3
 8102956:	3718      	adds	r7, #24
 8102958:	46bd      	mov	sp, r7
 810295a:	bd80      	pop	{r7, pc}
 810295c:	10048000 	.word	0x10048000
 8102960:	00000400 	.word	0x00000400
 8102964:	10000ea0 	.word	0x10000ea0
 8102968:	10000ff8 	.word	0x10000ff8

0810296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810296c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81029a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8102970:	f7fd fe60 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8102974:	f7fd fe46 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102978:	480c      	ldr	r0, [pc, #48]	@ (81029ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810297a:	490d      	ldr	r1, [pc, #52]	@ (81029b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810297c:	4a0d      	ldr	r2, [pc, #52]	@ (81029b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102980:	e002      	b.n	8102988 <LoopCopyDataInit>

08102982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102986:	3304      	adds	r3, #4

08102988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810298c:	d3f9      	bcc.n	8102982 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810298e:	4a0a      	ldr	r2, [pc, #40]	@ (81029b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102990:	4c0a      	ldr	r4, [pc, #40]	@ (81029bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8102992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102994:	e001      	b.n	810299a <LoopFillZerobss>

08102996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102998:	3204      	adds	r2, #4

0810299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810299c:	d3fb      	bcc.n	8102996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810299e:	f00b fcf1 	bl	810e384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81029a2:	f7fd fe5f 	bl	8100664 <main>
  bx  lr
 81029a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81029a8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81029ac:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81029b0:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 81029b4:	0810e8bc 	.word	0x0810e8bc
  ldr r2, =_sbss
 81029b8:	1000012c 	.word	0x1000012c
  ldr r4, =_ebss
 81029bc:	10000ff4 	.word	0x10000ff4

081029c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029c0:	e7fe      	b.n	81029c0 <ADC3_IRQHandler>
	...

081029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81029c4:	b580      	push	{r7, lr}
 81029c6:	b082      	sub	sp, #8
 81029c8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81029ca:	4b28      	ldr	r3, [pc, #160]	@ (8102a6c <HAL_Init+0xa8>)
 81029cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81029d0:	4a26      	ldr	r2, [pc, #152]	@ (8102a6c <HAL_Init+0xa8>)
 81029d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81029d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81029da:	4b24      	ldr	r3, [pc, #144]	@ (8102a6c <HAL_Init+0xa8>)
 81029dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81029e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81029e4:	603b      	str	r3, [r7, #0]
 81029e6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81029e8:	4b21      	ldr	r3, [pc, #132]	@ (8102a70 <HAL_Init+0xac>)
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81029f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8102a70 <HAL_Init+0xac>)
 81029f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81029fa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81029fc:	4b1c      	ldr	r3, [pc, #112]	@ (8102a70 <HAL_Init+0xac>)
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a1b      	ldr	r2, [pc, #108]	@ (8102a70 <HAL_Init+0xac>)
 8102a02:	f043 0301 	orr.w	r3, r3, #1
 8102a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a08:	2003      	movs	r0, #3
 8102a0a:	f001 fb7b 	bl	8104104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a0e:	f003 fa31 	bl	8105e74 <HAL_RCC_GetSysClockFreq>
 8102a12:	4602      	mov	r2, r0
 8102a14:	4b15      	ldr	r3, [pc, #84]	@ (8102a6c <HAL_Init+0xa8>)
 8102a16:	699b      	ldr	r3, [r3, #24]
 8102a18:	0a1b      	lsrs	r3, r3, #8
 8102a1a:	f003 030f 	and.w	r3, r3, #15
 8102a1e:	4915      	ldr	r1, [pc, #84]	@ (8102a74 <HAL_Init+0xb0>)
 8102a20:	5ccb      	ldrb	r3, [r1, r3]
 8102a22:	f003 031f 	and.w	r3, r3, #31
 8102a26:	fa22 f303 	lsr.w	r3, r2, r3
 8102a2a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8102a6c <HAL_Init+0xa8>)
 8102a2e:	699b      	ldr	r3, [r3, #24]
 8102a30:	f003 030f 	and.w	r3, r3, #15
 8102a34:	4a0f      	ldr	r2, [pc, #60]	@ (8102a74 <HAL_Init+0xb0>)
 8102a36:	5cd3      	ldrb	r3, [r2, r3]
 8102a38:	f003 031f 	and.w	r3, r3, #31
 8102a3c:	687a      	ldr	r2, [r7, #4]
 8102a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8102a42:	4a0d      	ldr	r2, [pc, #52]	@ (8102a78 <HAL_Init+0xb4>)
 8102a44:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a46:	4b0c      	ldr	r3, [pc, #48]	@ (8102a78 <HAL_Init+0xb4>)
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8102a7c <HAL_Init+0xb8>)
 8102a4c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102a4e:	2000      	movs	r0, #0
 8102a50:	f000 f816 	bl	8102a80 <HAL_InitTick>
 8102a54:	4603      	mov	r3, r0
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	d001      	beq.n	8102a5e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102a5a:	2301      	movs	r3, #1
 8102a5c:	e002      	b.n	8102a64 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102a5e:	f7fe fd23 	bl	81014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102a62:	2300      	movs	r3, #0
}
 8102a64:	4618      	mov	r0, r3
 8102a66:	3708      	adds	r7, #8
 8102a68:	46bd      	mov	sp, r7
 8102a6a:	bd80      	pop	{r7, pc}
 8102a6c:	58024400 	.word	0x58024400
 8102a70:	40024400 	.word	0x40024400
 8102a74:	0810e86c 	.word	0x0810e86c
 8102a78:	10000004 	.word	0x10000004
 8102a7c:	10000000 	.word	0x10000000

08102a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102a80:	b580      	push	{r7, lr}
 8102a82:	b082      	sub	sp, #8
 8102a84:	af00      	add	r7, sp, #0
 8102a86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102a88:	4b15      	ldr	r3, [pc, #84]	@ (8102ae0 <HAL_InitTick+0x60>)
 8102a8a:	781b      	ldrb	r3, [r3, #0]
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	d101      	bne.n	8102a94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102a90:	2301      	movs	r3, #1
 8102a92:	e021      	b.n	8102ad8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102a94:	4b13      	ldr	r3, [pc, #76]	@ (8102ae4 <HAL_InitTick+0x64>)
 8102a96:	681a      	ldr	r2, [r3, #0]
 8102a98:	4b11      	ldr	r3, [pc, #68]	@ (8102ae0 <HAL_InitTick+0x60>)
 8102a9a:	781b      	ldrb	r3, [r3, #0]
 8102a9c:	4619      	mov	r1, r3
 8102a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8102aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8102aaa:	4618      	mov	r0, r3
 8102aac:	f001 fb5d 	bl	810416a <HAL_SYSTICK_Config>
 8102ab0:	4603      	mov	r3, r0
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d001      	beq.n	8102aba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102ab6:	2301      	movs	r3, #1
 8102ab8:	e00e      	b.n	8102ad8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	2b0f      	cmp	r3, #15
 8102abe:	d80a      	bhi.n	8102ad6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102ac0:	2200      	movs	r2, #0
 8102ac2:	6879      	ldr	r1, [r7, #4]
 8102ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8102ac8:	f001 fb27 	bl	810411a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102acc:	4a06      	ldr	r2, [pc, #24]	@ (8102ae8 <HAL_InitTick+0x68>)
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102ad2:	2300      	movs	r3, #0
 8102ad4:	e000      	b.n	8102ad8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102ad6:	2301      	movs	r3, #1
}
 8102ad8:	4618      	mov	r0, r3
 8102ada:	3708      	adds	r7, #8
 8102adc:	46bd      	mov	sp, r7
 8102ade:	bd80      	pop	{r7, pc}
 8102ae0:	1000000c 	.word	0x1000000c
 8102ae4:	10000000 	.word	0x10000000
 8102ae8:	10000008 	.word	0x10000008

08102aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102aec:	b480      	push	{r7}
 8102aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102af0:	4b06      	ldr	r3, [pc, #24]	@ (8102b0c <HAL_IncTick+0x20>)
 8102af2:	781b      	ldrb	r3, [r3, #0]
 8102af4:	461a      	mov	r2, r3
 8102af6:	4b06      	ldr	r3, [pc, #24]	@ (8102b10 <HAL_IncTick+0x24>)
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	4413      	add	r3, r2
 8102afc:	4a04      	ldr	r2, [pc, #16]	@ (8102b10 <HAL_IncTick+0x24>)
 8102afe:	6013      	str	r3, [r2, #0]
}
 8102b00:	bf00      	nop
 8102b02:	46bd      	mov	sp, r7
 8102b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b08:	4770      	bx	lr
 8102b0a:	bf00      	nop
 8102b0c:	1000000c 	.word	0x1000000c
 8102b10:	10000ea4 	.word	0x10000ea4

08102b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102b14:	b480      	push	{r7}
 8102b16:	af00      	add	r7, sp, #0
  return uwTick;
 8102b18:	4b03      	ldr	r3, [pc, #12]	@ (8102b28 <HAL_GetTick+0x14>)
 8102b1a:	681b      	ldr	r3, [r3, #0]
}
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	46bd      	mov	sp, r7
 8102b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b24:	4770      	bx	lr
 8102b26:	bf00      	nop
 8102b28:	10000ea4 	.word	0x10000ea4

08102b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102b2c:	b580      	push	{r7, lr}
 8102b2e:	b084      	sub	sp, #16
 8102b30:	af00      	add	r7, sp, #0
 8102b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102b34:	f7ff ffee 	bl	8102b14 <HAL_GetTick>
 8102b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102b3e:	68fb      	ldr	r3, [r7, #12]
 8102b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b44:	d005      	beq.n	8102b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102b46:	4b0a      	ldr	r3, [pc, #40]	@ (8102b70 <HAL_Delay+0x44>)
 8102b48:	781b      	ldrb	r3, [r3, #0]
 8102b4a:	461a      	mov	r2, r3
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	4413      	add	r3, r2
 8102b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102b52:	bf00      	nop
 8102b54:	f7ff ffde 	bl	8102b14 <HAL_GetTick>
 8102b58:	4602      	mov	r2, r0
 8102b5a:	68bb      	ldr	r3, [r7, #8]
 8102b5c:	1ad3      	subs	r3, r2, r3
 8102b5e:	68fa      	ldr	r2, [r7, #12]
 8102b60:	429a      	cmp	r2, r3
 8102b62:	d8f7      	bhi.n	8102b54 <HAL_Delay+0x28>
  {
  }
}
 8102b64:	bf00      	nop
 8102b66:	bf00      	nop
 8102b68:	3710      	adds	r7, #16
 8102b6a:	46bd      	mov	sp, r7
 8102b6c:	bd80      	pop	{r7, pc}
 8102b6e:	bf00      	nop
 8102b70:	1000000c 	.word	0x1000000c

08102b74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102b74:	b480      	push	{r7}
 8102b76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102b78:	4b03      	ldr	r3, [pc, #12]	@ (8102b88 <HAL_GetREVID+0x14>)
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	0c1b      	lsrs	r3, r3, #16
}
 8102b7e:	4618      	mov	r0, r3
 8102b80:	46bd      	mov	sp, r7
 8102b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b86:	4770      	bx	lr
 8102b88:	5c001000 	.word	0x5c001000

08102b8c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102b8c:	b480      	push	{r7}
 8102b8e:	b083      	sub	sp, #12
 8102b90:	af00      	add	r7, sp, #0
 8102b92:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102b94:	4b06      	ldr	r3, [pc, #24]	@ (8102bb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102b96:	685b      	ldr	r3, [r3, #4]
 8102b98:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8102b9c:	4904      	ldr	r1, [pc, #16]	@ (8102bb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	4313      	orrs	r3, r2
 8102ba2:	604b      	str	r3, [r1, #4]
}
 8102ba4:	bf00      	nop
 8102ba6:	370c      	adds	r7, #12
 8102ba8:	46bd      	mov	sp, r7
 8102baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bae:	4770      	bx	lr
 8102bb0:	58000400 	.word	0x58000400

08102bb4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102bb4:	b480      	push	{r7}
 8102bb6:	b083      	sub	sp, #12
 8102bb8:	af00      	add	r7, sp, #0
 8102bba:	6078      	str	r0, [r7, #4]
 8102bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102bbe:	4b07      	ldr	r3, [pc, #28]	@ (8102bdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102bc0:	685a      	ldr	r2, [r3, #4]
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	43db      	mvns	r3, r3
 8102bc6:	401a      	ands	r2, r3
 8102bc8:	4904      	ldr	r1, [pc, #16]	@ (8102bdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102bca:	683b      	ldr	r3, [r7, #0]
 8102bcc:	4313      	orrs	r3, r2
 8102bce:	604b      	str	r3, [r1, #4]
}
 8102bd0:	bf00      	nop
 8102bd2:	370c      	adds	r7, #12
 8102bd4:	46bd      	mov	sp, r7
 8102bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bda:	4770      	bx	lr
 8102bdc:	58000400 	.word	0x58000400

08102be0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102be0:	b480      	push	{r7}
 8102be2:	b083      	sub	sp, #12
 8102be4:	af00      	add	r7, sp, #0
 8102be6:	6078      	str	r0, [r7, #4]
 8102be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	689b      	ldr	r3, [r3, #8]
 8102bee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102bf2:	683b      	ldr	r3, [r7, #0]
 8102bf4:	431a      	orrs	r2, r3
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	609a      	str	r2, [r3, #8]
}
 8102bfa:	bf00      	nop
 8102bfc:	370c      	adds	r7, #12
 8102bfe:	46bd      	mov	sp, r7
 8102c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c04:	4770      	bx	lr

08102c06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102c06:	b480      	push	{r7}
 8102c08:	b083      	sub	sp, #12
 8102c0a:	af00      	add	r7, sp, #0
 8102c0c:	6078      	str	r0, [r7, #4]
 8102c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	689b      	ldr	r3, [r3, #8]
 8102c14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102c18:	683b      	ldr	r3, [r7, #0]
 8102c1a:	431a      	orrs	r2, r3
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	609a      	str	r2, [r3, #8]
}
 8102c20:	bf00      	nop
 8102c22:	370c      	adds	r7, #12
 8102c24:	46bd      	mov	sp, r7
 8102c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c2a:	4770      	bx	lr

08102c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102c2c:	b480      	push	{r7}
 8102c2e:	b083      	sub	sp, #12
 8102c30:	af00      	add	r7, sp, #0
 8102c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	689b      	ldr	r3, [r3, #8]
 8102c38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102c3c:	4618      	mov	r0, r3
 8102c3e:	370c      	adds	r7, #12
 8102c40:	46bd      	mov	sp, r7
 8102c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c46:	4770      	bx	lr

08102c48 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8102c48:	b480      	push	{r7}
 8102c4a:	b087      	sub	sp, #28
 8102c4c:	af00      	add	r7, sp, #0
 8102c4e:	6078      	str	r0, [r7, #4]
 8102c50:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8102c52:	683b      	ldr	r3, [r7, #0]
 8102c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c58:	2b00      	cmp	r3, #0
 8102c5a:	d107      	bne.n	8102c6c <LL_ADC_SetChannelPreselection+0x24>
 8102c5c:	683b      	ldr	r3, [r7, #0]
 8102c5e:	0e9b      	lsrs	r3, r3, #26
 8102c60:	f003 031f 	and.w	r3, r3, #31
 8102c64:	2201      	movs	r2, #1
 8102c66:	fa02 f303 	lsl.w	r3, r2, r3
 8102c6a:	e015      	b.n	8102c98 <LL_ADC_SetChannelPreselection+0x50>
 8102c6c:	683b      	ldr	r3, [r7, #0]
 8102c6e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c70:	693b      	ldr	r3, [r7, #16]
 8102c72:	fa93 f3a3 	rbit	r3, r3
 8102c76:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102c78:	68fb      	ldr	r3, [r7, #12]
 8102c7a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102c7c:	697b      	ldr	r3, [r7, #20]
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d101      	bne.n	8102c86 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8102c82:	2320      	movs	r3, #32
 8102c84:	e003      	b.n	8102c8e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8102c86:	697b      	ldr	r3, [r7, #20]
 8102c88:	fab3 f383 	clz	r3, r3
 8102c8c:	b2db      	uxtb	r3, r3
 8102c8e:	f003 031f 	and.w	r3, r3, #31
 8102c92:	2201      	movs	r2, #1
 8102c94:	fa02 f303 	lsl.w	r3, r2, r3
 8102c98:	687a      	ldr	r2, [r7, #4]
 8102c9a:	69d2      	ldr	r2, [r2, #28]
 8102c9c:	431a      	orrs	r2, r3
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8102ca2:	bf00      	nop
 8102ca4:	371c      	adds	r7, #28
 8102ca6:	46bd      	mov	sp, r7
 8102ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cac:	4770      	bx	lr

08102cae <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102cae:	b480      	push	{r7}
 8102cb0:	b087      	sub	sp, #28
 8102cb2:	af00      	add	r7, sp, #0
 8102cb4:	60f8      	str	r0, [r7, #12]
 8102cb6:	60b9      	str	r1, [r7, #8]
 8102cb8:	607a      	str	r2, [r7, #4]
 8102cba:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102cbc:	68fb      	ldr	r3, [r7, #12]
 8102cbe:	3360      	adds	r3, #96	@ 0x60
 8102cc0:	461a      	mov	r2, r3
 8102cc2:	68bb      	ldr	r3, [r7, #8]
 8102cc4:	009b      	lsls	r3, r3, #2
 8102cc6:	4413      	add	r3, r2
 8102cc8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102cca:	697b      	ldr	r3, [r7, #20]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102cd8:	683b      	ldr	r3, [r7, #0]
 8102cda:	430b      	orrs	r3, r1
 8102cdc:	431a      	orrs	r2, r3
 8102cde:	697b      	ldr	r3, [r7, #20]
 8102ce0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102ce2:	bf00      	nop
 8102ce4:	371c      	adds	r7, #28
 8102ce6:	46bd      	mov	sp, r7
 8102ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cec:	4770      	bx	lr

08102cee <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102cee:	b480      	push	{r7}
 8102cf0:	b085      	sub	sp, #20
 8102cf2:	af00      	add	r7, sp, #0
 8102cf4:	60f8      	str	r0, [r7, #12]
 8102cf6:	60b9      	str	r1, [r7, #8]
 8102cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	691b      	ldr	r3, [r3, #16]
 8102cfe:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102d02:	68bb      	ldr	r3, [r7, #8]
 8102d04:	f003 031f 	and.w	r3, r3, #31
 8102d08:	6879      	ldr	r1, [r7, #4]
 8102d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8102d0e:	431a      	orrs	r2, r3
 8102d10:	68fb      	ldr	r3, [r7, #12]
 8102d12:	611a      	str	r2, [r3, #16]
}
 8102d14:	bf00      	nop
 8102d16:	3714      	adds	r7, #20
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d1e:	4770      	bx	lr

08102d20 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102d20:	b480      	push	{r7}
 8102d22:	b087      	sub	sp, #28
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	60f8      	str	r0, [r7, #12]
 8102d28:	60b9      	str	r1, [r7, #8]
 8102d2a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	3360      	adds	r3, #96	@ 0x60
 8102d30:	461a      	mov	r2, r3
 8102d32:	68bb      	ldr	r3, [r7, #8]
 8102d34:	009b      	lsls	r3, r3, #2
 8102d36:	4413      	add	r3, r2
 8102d38:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d3a:	697b      	ldr	r3, [r7, #20]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	431a      	orrs	r2, r3
 8102d46:	697b      	ldr	r3, [r7, #20]
 8102d48:	601a      	str	r2, [r3, #0]
  }
}
 8102d4a:	bf00      	nop
 8102d4c:	371c      	adds	r7, #28
 8102d4e:	46bd      	mov	sp, r7
 8102d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d54:	4770      	bx	lr

08102d56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102d56:	b480      	push	{r7}
 8102d58:	b087      	sub	sp, #28
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	60f8      	str	r0, [r7, #12]
 8102d5e:	60b9      	str	r1, [r7, #8]
 8102d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	3330      	adds	r3, #48	@ 0x30
 8102d66:	461a      	mov	r2, r3
 8102d68:	68bb      	ldr	r3, [r7, #8]
 8102d6a:	0a1b      	lsrs	r3, r3, #8
 8102d6c:	009b      	lsls	r3, r3, #2
 8102d6e:	f003 030c 	and.w	r3, r3, #12
 8102d72:	4413      	add	r3, r2
 8102d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102d76:	697b      	ldr	r3, [r7, #20]
 8102d78:	681a      	ldr	r2, [r3, #0]
 8102d7a:	68bb      	ldr	r3, [r7, #8]
 8102d7c:	f003 031f 	and.w	r3, r3, #31
 8102d80:	211f      	movs	r1, #31
 8102d82:	fa01 f303 	lsl.w	r3, r1, r3
 8102d86:	43db      	mvns	r3, r3
 8102d88:	401a      	ands	r2, r3
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	0e9b      	lsrs	r3, r3, #26
 8102d8e:	f003 011f 	and.w	r1, r3, #31
 8102d92:	68bb      	ldr	r3, [r7, #8]
 8102d94:	f003 031f 	and.w	r3, r3, #31
 8102d98:	fa01 f303 	lsl.w	r3, r1, r3
 8102d9c:	431a      	orrs	r2, r3
 8102d9e:	697b      	ldr	r3, [r7, #20]
 8102da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102da2:	bf00      	nop
 8102da4:	371c      	adds	r7, #28
 8102da6:	46bd      	mov	sp, r7
 8102da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dac:	4770      	bx	lr

08102dae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102dae:	b480      	push	{r7}
 8102db0:	b087      	sub	sp, #28
 8102db2:	af00      	add	r7, sp, #0
 8102db4:	60f8      	str	r0, [r7, #12]
 8102db6:	60b9      	str	r1, [r7, #8]
 8102db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	3314      	adds	r3, #20
 8102dbe:	461a      	mov	r2, r3
 8102dc0:	68bb      	ldr	r3, [r7, #8]
 8102dc2:	0e5b      	lsrs	r3, r3, #25
 8102dc4:	009b      	lsls	r3, r3, #2
 8102dc6:	f003 0304 	and.w	r3, r3, #4
 8102dca:	4413      	add	r3, r2
 8102dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102dce:	697b      	ldr	r3, [r7, #20]
 8102dd0:	681a      	ldr	r2, [r3, #0]
 8102dd2:	68bb      	ldr	r3, [r7, #8]
 8102dd4:	0d1b      	lsrs	r3, r3, #20
 8102dd6:	f003 031f 	and.w	r3, r3, #31
 8102dda:	2107      	movs	r1, #7
 8102ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8102de0:	43db      	mvns	r3, r3
 8102de2:	401a      	ands	r2, r3
 8102de4:	68bb      	ldr	r3, [r7, #8]
 8102de6:	0d1b      	lsrs	r3, r3, #20
 8102de8:	f003 031f 	and.w	r3, r3, #31
 8102dec:	6879      	ldr	r1, [r7, #4]
 8102dee:	fa01 f303 	lsl.w	r3, r1, r3
 8102df2:	431a      	orrs	r2, r3
 8102df4:	697b      	ldr	r3, [r7, #20]
 8102df6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102df8:	bf00      	nop
 8102dfa:	371c      	adds	r7, #28
 8102dfc:	46bd      	mov	sp, r7
 8102dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e02:	4770      	bx	lr

08102e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102e04:	b480      	push	{r7}
 8102e06:	b085      	sub	sp, #20
 8102e08:	af00      	add	r7, sp, #0
 8102e0a:	60f8      	str	r0, [r7, #12]
 8102e0c:	60b9      	str	r1, [r7, #8]
 8102e0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102e10:	68fb      	ldr	r3, [r7, #12]
 8102e12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102e16:	68bb      	ldr	r3, [r7, #8]
 8102e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e1c:	43db      	mvns	r3, r3
 8102e1e:	401a      	ands	r2, r3
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	f003 0318 	and.w	r3, r3, #24
 8102e26:	4908      	ldr	r1, [pc, #32]	@ (8102e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102e28:	40d9      	lsrs	r1, r3
 8102e2a:	68bb      	ldr	r3, [r7, #8]
 8102e2c:	400b      	ands	r3, r1
 8102e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e32:	431a      	orrs	r2, r3
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102e3a:	bf00      	nop
 8102e3c:	3714      	adds	r7, #20
 8102e3e:	46bd      	mov	sp, r7
 8102e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e44:	4770      	bx	lr
 8102e46:	bf00      	nop
 8102e48:	000fffff 	.word	0x000fffff

08102e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102e4c:	b480      	push	{r7}
 8102e4e:	b083      	sub	sp, #12
 8102e50:	af00      	add	r7, sp, #0
 8102e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	689b      	ldr	r3, [r3, #8]
 8102e58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8102e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102e60:	687a      	ldr	r2, [r7, #4]
 8102e62:	6093      	str	r3, [r2, #8]
}
 8102e64:	bf00      	nop
 8102e66:	370c      	adds	r7, #12
 8102e68:	46bd      	mov	sp, r7
 8102e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e6e:	4770      	bx	lr

08102e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8102e70:	b480      	push	{r7}
 8102e72:	b083      	sub	sp, #12
 8102e74:	af00      	add	r7, sp, #0
 8102e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	689b      	ldr	r3, [r3, #8]
 8102e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102e84:	d101      	bne.n	8102e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102e86:	2301      	movs	r3, #1
 8102e88:	e000      	b.n	8102e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102e8a:	2300      	movs	r3, #0
}
 8102e8c:	4618      	mov	r0, r3
 8102e8e:	370c      	adds	r7, #12
 8102e90:	46bd      	mov	sp, r7
 8102e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e96:	4770      	bx	lr

08102e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102e98:	b480      	push	{r7}
 8102e9a:	b083      	sub	sp, #12
 8102e9c:	af00      	add	r7, sp, #0
 8102e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	689b      	ldr	r3, [r3, #8]
 8102ea4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102ea8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102eac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102eb4:	bf00      	nop
 8102eb6:	370c      	adds	r7, #12
 8102eb8:	46bd      	mov	sp, r7
 8102eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ebe:	4770      	bx	lr

08102ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8102ec0:	b480      	push	{r7}
 8102ec2:	b083      	sub	sp, #12
 8102ec4:	af00      	add	r7, sp, #0
 8102ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	689b      	ldr	r3, [r3, #8]
 8102ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102ed4:	d101      	bne.n	8102eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102ed6:	2301      	movs	r3, #1
 8102ed8:	e000      	b.n	8102edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102eda:	2300      	movs	r3, #0
}
 8102edc:	4618      	mov	r0, r3
 8102ede:	370c      	adds	r7, #12
 8102ee0:	46bd      	mov	sp, r7
 8102ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee6:	4770      	bx	lr

08102ee8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8102ee8:	b480      	push	{r7}
 8102eea:	b083      	sub	sp, #12
 8102eec:	af00      	add	r7, sp, #0
 8102eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	689b      	ldr	r3, [r3, #8]
 8102ef4:	f003 0301 	and.w	r3, r3, #1
 8102ef8:	2b01      	cmp	r3, #1
 8102efa:	d101      	bne.n	8102f00 <LL_ADC_IsEnabled+0x18>
 8102efc:	2301      	movs	r3, #1
 8102efe:	e000      	b.n	8102f02 <LL_ADC_IsEnabled+0x1a>
 8102f00:	2300      	movs	r3, #0
}
 8102f02:	4618      	mov	r0, r3
 8102f04:	370c      	adds	r7, #12
 8102f06:	46bd      	mov	sp, r7
 8102f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f0c:	4770      	bx	lr

08102f0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102f0e:	b480      	push	{r7}
 8102f10:	b083      	sub	sp, #12
 8102f12:	af00      	add	r7, sp, #0
 8102f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	689b      	ldr	r3, [r3, #8]
 8102f1a:	f003 0304 	and.w	r3, r3, #4
 8102f1e:	2b04      	cmp	r3, #4
 8102f20:	d101      	bne.n	8102f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102f22:	2301      	movs	r3, #1
 8102f24:	e000      	b.n	8102f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102f26:	2300      	movs	r3, #0
}
 8102f28:	4618      	mov	r0, r3
 8102f2a:	370c      	adds	r7, #12
 8102f2c:	46bd      	mov	sp, r7
 8102f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f32:	4770      	bx	lr

08102f34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102f34:	b480      	push	{r7}
 8102f36:	b083      	sub	sp, #12
 8102f38:	af00      	add	r7, sp, #0
 8102f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	689b      	ldr	r3, [r3, #8]
 8102f40:	f003 0308 	and.w	r3, r3, #8
 8102f44:	2b08      	cmp	r3, #8
 8102f46:	d101      	bne.n	8102f4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102f48:	2301      	movs	r3, #1
 8102f4a:	e000      	b.n	8102f4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102f4c:	2300      	movs	r3, #0
}
 8102f4e:	4618      	mov	r0, r3
 8102f50:	370c      	adds	r7, #12
 8102f52:	46bd      	mov	sp, r7
 8102f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f58:	4770      	bx	lr
	...

08102f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102f5c:	b590      	push	{r4, r7, lr}
 8102f5e:	b089      	sub	sp, #36	@ 0x24
 8102f60:	af00      	add	r7, sp, #0
 8102f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102f64:	2300      	movs	r3, #0
 8102f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102f68:	2300      	movs	r3, #0
 8102f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	2b00      	cmp	r3, #0
 8102f70:	d101      	bne.n	8102f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102f72:	2301      	movs	r3, #1
 8102f74:	e18f      	b.n	8103296 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	68db      	ldr	r3, [r3, #12]
 8102f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f80:	2b00      	cmp	r3, #0
 8102f82:	d109      	bne.n	8102f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102f84:	6878      	ldr	r0, [r7, #4]
 8102f86:	f7fe faaf 	bl	81014e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	2200      	movs	r2, #0
 8102f8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	2200      	movs	r2, #0
 8102f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	4618      	mov	r0, r3
 8102f9e:	f7ff ff67 	bl	8102e70 <LL_ADC_IsDeepPowerDownEnabled>
 8102fa2:	4603      	mov	r3, r0
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d004      	beq.n	8102fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	4618      	mov	r0, r3
 8102fae:	f7ff ff4d 	bl	8102e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	4618      	mov	r0, r3
 8102fb8:	f7ff ff82 	bl	8102ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8102fbc:	4603      	mov	r3, r0
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d114      	bne.n	8102fec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4618      	mov	r0, r3
 8102fc8:	f7ff ff66 	bl	8102e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102fcc:	4b88      	ldr	r3, [pc, #544]	@ (81031f0 <HAL_ADC_Init+0x294>)
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	099b      	lsrs	r3, r3, #6
 8102fd2:	4a88      	ldr	r2, [pc, #544]	@ (81031f4 <HAL_ADC_Init+0x298>)
 8102fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8102fd8:	099b      	lsrs	r3, r3, #6
 8102fda:	3301      	adds	r3, #1
 8102fdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102fde:	e002      	b.n	8102fe6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102fe0:	68bb      	ldr	r3, [r7, #8]
 8102fe2:	3b01      	subs	r3, #1
 8102fe4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102fe6:	68bb      	ldr	r3, [r7, #8]
 8102fe8:	2b00      	cmp	r3, #0
 8102fea:	d1f9      	bne.n	8102fe0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	4618      	mov	r0, r3
 8102ff2:	f7ff ff65 	bl	8102ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	2b00      	cmp	r3, #0
 8102ffa:	d10d      	bne.n	8103018 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103000:	f043 0210 	orr.w	r2, r3, #16
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810300c:	f043 0201 	orr.w	r2, r3, #1
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8103014:	2301      	movs	r3, #1
 8103016:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4618      	mov	r0, r3
 810301e:	f7ff ff76 	bl	8102f0e <LL_ADC_REG_IsConversionOngoing>
 8103022:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103028:	f003 0310 	and.w	r3, r3, #16
 810302c:	2b00      	cmp	r3, #0
 810302e:	f040 8129 	bne.w	8103284 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103032:	697b      	ldr	r3, [r7, #20]
 8103034:	2b00      	cmp	r3, #0
 8103036:	f040 8125 	bne.w	8103284 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810303e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8103042:	f043 0202 	orr.w	r2, r3, #2
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	4618      	mov	r0, r3
 8103050:	f7ff ff4a 	bl	8102ee8 <LL_ADC_IsEnabled>
 8103054:	4603      	mov	r3, r0
 8103056:	2b00      	cmp	r3, #0
 8103058:	d136      	bne.n	81030c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	4a66      	ldr	r2, [pc, #408]	@ (81031f8 <HAL_ADC_Init+0x29c>)
 8103060:	4293      	cmp	r3, r2
 8103062:	d004      	beq.n	810306e <HAL_ADC_Init+0x112>
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	4a64      	ldr	r2, [pc, #400]	@ (81031fc <HAL_ADC_Init+0x2a0>)
 810306a:	4293      	cmp	r3, r2
 810306c:	d10e      	bne.n	810308c <HAL_ADC_Init+0x130>
 810306e:	4862      	ldr	r0, [pc, #392]	@ (81031f8 <HAL_ADC_Init+0x29c>)
 8103070:	f7ff ff3a 	bl	8102ee8 <LL_ADC_IsEnabled>
 8103074:	4604      	mov	r4, r0
 8103076:	4861      	ldr	r0, [pc, #388]	@ (81031fc <HAL_ADC_Init+0x2a0>)
 8103078:	f7ff ff36 	bl	8102ee8 <LL_ADC_IsEnabled>
 810307c:	4603      	mov	r3, r0
 810307e:	4323      	orrs	r3, r4
 8103080:	2b00      	cmp	r3, #0
 8103082:	bf0c      	ite	eq
 8103084:	2301      	moveq	r3, #1
 8103086:	2300      	movne	r3, #0
 8103088:	b2db      	uxtb	r3, r3
 810308a:	e008      	b.n	810309e <HAL_ADC_Init+0x142>
 810308c:	485c      	ldr	r0, [pc, #368]	@ (8103200 <HAL_ADC_Init+0x2a4>)
 810308e:	f7ff ff2b 	bl	8102ee8 <LL_ADC_IsEnabled>
 8103092:	4603      	mov	r3, r0
 8103094:	2b00      	cmp	r3, #0
 8103096:	bf0c      	ite	eq
 8103098:	2301      	moveq	r3, #1
 810309a:	2300      	movne	r3, #0
 810309c:	b2db      	uxtb	r3, r3
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d012      	beq.n	81030c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a54      	ldr	r2, [pc, #336]	@ (81031f8 <HAL_ADC_Init+0x29c>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d004      	beq.n	81030b6 <HAL_ADC_Init+0x15a>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a52      	ldr	r2, [pc, #328]	@ (81031fc <HAL_ADC_Init+0x2a0>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d101      	bne.n	81030ba <HAL_ADC_Init+0x15e>
 81030b6:	4a53      	ldr	r2, [pc, #332]	@ (8103204 <HAL_ADC_Init+0x2a8>)
 81030b8:	e000      	b.n	81030bc <HAL_ADC_Init+0x160>
 81030ba:	4a53      	ldr	r2, [pc, #332]	@ (8103208 <HAL_ADC_Init+0x2ac>)
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	685b      	ldr	r3, [r3, #4]
 81030c0:	4619      	mov	r1, r3
 81030c2:	4610      	mov	r0, r2
 81030c4:	f7ff fd8c 	bl	8102be0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81030c8:	f7ff fd54 	bl	8102b74 <HAL_GetREVID>
 81030cc:	4603      	mov	r3, r0
 81030ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d914      	bls.n	8103100 <HAL_ADC_Init+0x1a4>
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	689b      	ldr	r3, [r3, #8]
 81030da:	2b10      	cmp	r3, #16
 81030dc:	d110      	bne.n	8103100 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	7d5b      	ldrb	r3, [r3, #21]
 81030e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81030ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	7f1b      	ldrb	r3, [r3, #28]
 81030f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81030f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81030f8:	f043 030c 	orr.w	r3, r3, #12
 81030fc:	61bb      	str	r3, [r7, #24]
 81030fe:	e00d      	b.n	810311c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	7d5b      	ldrb	r3, [r3, #21]
 8103104:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810310a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103110:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	7f1b      	ldrb	r3, [r3, #28]
 8103116:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103118:	4313      	orrs	r3, r2
 810311a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	7f1b      	ldrb	r3, [r3, #28]
 8103120:	2b01      	cmp	r3, #1
 8103122:	d106      	bne.n	8103132 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	6a1b      	ldr	r3, [r3, #32]
 8103128:	3b01      	subs	r3, #1
 810312a:	045b      	lsls	r3, r3, #17
 810312c:	69ba      	ldr	r2, [r7, #24]
 810312e:	4313      	orrs	r3, r2
 8103130:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103136:	2b00      	cmp	r3, #0
 8103138:	d009      	beq.n	810314e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810313e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103146:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103148:	69ba      	ldr	r2, [r7, #24]
 810314a:	4313      	orrs	r3, r2
 810314c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	68da      	ldr	r2, [r3, #12]
 8103154:	4b2d      	ldr	r3, [pc, #180]	@ (810320c <HAL_ADC_Init+0x2b0>)
 8103156:	4013      	ands	r3, r2
 8103158:	687a      	ldr	r2, [r7, #4]
 810315a:	6812      	ldr	r2, [r2, #0]
 810315c:	69b9      	ldr	r1, [r7, #24]
 810315e:	430b      	orrs	r3, r1
 8103160:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4618      	mov	r0, r3
 8103168:	f7ff fed1 	bl	8102f0e <LL_ADC_REG_IsConversionOngoing>
 810316c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	4618      	mov	r0, r3
 8103174:	f7ff fede 	bl	8102f34 <LL_ADC_INJ_IsConversionOngoing>
 8103178:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810317a:	693b      	ldr	r3, [r7, #16]
 810317c:	2b00      	cmp	r3, #0
 810317e:	d15f      	bne.n	8103240 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103180:	68fb      	ldr	r3, [r7, #12]
 8103182:	2b00      	cmp	r3, #0
 8103184:	d15c      	bne.n	8103240 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	7d1b      	ldrb	r3, [r3, #20]
 810318a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8103190:	4313      	orrs	r3, r2
 8103192:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	68db      	ldr	r3, [r3, #12]
 810319a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810319e:	f023 0303 	bic.w	r3, r3, #3
 81031a2:	687a      	ldr	r2, [r7, #4]
 81031a4:	6812      	ldr	r2, [r2, #0]
 81031a6:	69b9      	ldr	r1, [r7, #24]
 81031a8:	430b      	orrs	r3, r1
 81031aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81031b2:	2b01      	cmp	r3, #1
 81031b4:	d12e      	bne.n	8103214 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81031ba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	691a      	ldr	r2, [r3, #16]
 81031c2:	4b13      	ldr	r3, [pc, #76]	@ (8103210 <HAL_ADC_Init+0x2b4>)
 81031c4:	4013      	ands	r3, r2
 81031c6:	687a      	ldr	r2, [r7, #4]
 81031c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 81031ca:	3a01      	subs	r2, #1
 81031cc:	0411      	lsls	r1, r2, #16
 81031ce:	687a      	ldr	r2, [r7, #4]
 81031d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 81031d2:	4311      	orrs	r1, r2
 81031d4:	687a      	ldr	r2, [r7, #4]
 81031d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81031d8:	4311      	orrs	r1, r2
 81031da:	687a      	ldr	r2, [r7, #4]
 81031dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81031de:	430a      	orrs	r2, r1
 81031e0:	431a      	orrs	r2, r3
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	f042 0201 	orr.w	r2, r2, #1
 81031ea:	611a      	str	r2, [r3, #16]
 81031ec:	e01a      	b.n	8103224 <HAL_ADC_Init+0x2c8>
 81031ee:	bf00      	nop
 81031f0:	10000000 	.word	0x10000000
 81031f4:	053e2d63 	.word	0x053e2d63
 81031f8:	40022000 	.word	0x40022000
 81031fc:	40022100 	.word	0x40022100
 8103200:	58026000 	.word	0x58026000
 8103204:	40022300 	.word	0x40022300
 8103208:	58026300 	.word	0x58026300
 810320c:	fff0c003 	.word	0xfff0c003
 8103210:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	691a      	ldr	r2, [r3, #16]
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	f022 0201 	bic.w	r2, r2, #1
 8103222:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	691b      	ldr	r3, [r3, #16]
 810322a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	430a      	orrs	r2, r1
 8103238:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810323a:	6878      	ldr	r0, [r7, #4]
 810323c:	f000 fb20 	bl	8103880 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	68db      	ldr	r3, [r3, #12]
 8103244:	2b01      	cmp	r3, #1
 8103246:	d10c      	bne.n	8103262 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810324e:	f023 010f 	bic.w	r1, r3, #15
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	699b      	ldr	r3, [r3, #24]
 8103256:	1e5a      	subs	r2, r3, #1
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	430a      	orrs	r2, r1
 810325e:	631a      	str	r2, [r3, #48]	@ 0x30
 8103260:	e007      	b.n	8103272 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	f022 020f 	bic.w	r2, r2, #15
 8103270:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103276:	f023 0303 	bic.w	r3, r3, #3
 810327a:	f043 0201 	orr.w	r2, r3, #1
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	655a      	str	r2, [r3, #84]	@ 0x54
 8103282:	e007      	b.n	8103294 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103288:	f043 0210 	orr.w	r2, r3, #16
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103290:	2301      	movs	r3, #1
 8103292:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103294:	7ffb      	ldrb	r3, [r7, #31]
}
 8103296:	4618      	mov	r0, r3
 8103298:	3724      	adds	r7, #36	@ 0x24
 810329a:	46bd      	mov	sp, r7
 810329c:	bd90      	pop	{r4, r7, pc}
 810329e:	bf00      	nop

081032a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81032a0:	b590      	push	{r4, r7, lr}
 81032a2:	b08d      	sub	sp, #52	@ 0x34
 81032a4:	af00      	add	r7, sp, #0
 81032a6:	6078      	str	r0, [r7, #4]
 81032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81032aa:	2300      	movs	r3, #0
 81032ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81032b0:	2300      	movs	r3, #0
 81032b2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81032b4:	683b      	ldr	r3, [r7, #0]
 81032b6:	68db      	ldr	r3, [r3, #12]
 81032b8:	4a65      	ldr	r2, [pc, #404]	@ (8103450 <HAL_ADC_ConfigChannel+0x1b0>)
 81032ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81032c2:	2b01      	cmp	r3, #1
 81032c4:	d101      	bne.n	81032ca <HAL_ADC_ConfigChannel+0x2a>
 81032c6:	2302      	movs	r3, #2
 81032c8:	e2c7      	b.n	810385a <HAL_ADC_ConfigChannel+0x5ba>
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	2201      	movs	r2, #1
 81032ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	4618      	mov	r0, r3
 81032d8:	f7ff fe19 	bl	8102f0e <LL_ADC_REG_IsConversionOngoing>
 81032dc:	4603      	mov	r3, r0
 81032de:	2b00      	cmp	r3, #0
 81032e0:	f040 82ac 	bne.w	810383c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 81032e4:	683b      	ldr	r3, [r7, #0]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	2b00      	cmp	r3, #0
 81032ea:	db2c      	blt.n	8103346 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81032ec:	683b      	ldr	r3, [r7, #0]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d108      	bne.n	810330a <HAL_ADC_ConfigChannel+0x6a>
 81032f8:	683b      	ldr	r3, [r7, #0]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	0e9b      	lsrs	r3, r3, #26
 81032fe:	f003 031f 	and.w	r3, r3, #31
 8103302:	2201      	movs	r2, #1
 8103304:	fa02 f303 	lsl.w	r3, r2, r3
 8103308:	e016      	b.n	8103338 <HAL_ADC_ConfigChannel+0x98>
 810330a:	683b      	ldr	r3, [r7, #0]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103310:	697b      	ldr	r3, [r7, #20]
 8103312:	fa93 f3a3 	rbit	r3, r3
 8103316:	613b      	str	r3, [r7, #16]
  return result;
 8103318:	693b      	ldr	r3, [r7, #16]
 810331a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 810331c:	69bb      	ldr	r3, [r7, #24]
 810331e:	2b00      	cmp	r3, #0
 8103320:	d101      	bne.n	8103326 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8103322:	2320      	movs	r3, #32
 8103324:	e003      	b.n	810332e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8103326:	69bb      	ldr	r3, [r7, #24]
 8103328:	fab3 f383 	clz	r3, r3
 810332c:	b2db      	uxtb	r3, r3
 810332e:	f003 031f 	and.w	r3, r3, #31
 8103332:	2201      	movs	r2, #1
 8103334:	fa02 f303 	lsl.w	r3, r2, r3
 8103338:	687a      	ldr	r2, [r7, #4]
 810333a:	6812      	ldr	r2, [r2, #0]
 810333c:	69d1      	ldr	r1, [r2, #28]
 810333e:	687a      	ldr	r2, [r7, #4]
 8103340:	6812      	ldr	r2, [r2, #0]
 8103342:	430b      	orrs	r3, r1
 8103344:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6818      	ldr	r0, [r3, #0]
 810334a:	683b      	ldr	r3, [r7, #0]
 810334c:	6859      	ldr	r1, [r3, #4]
 810334e:	683b      	ldr	r3, [r7, #0]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	461a      	mov	r2, r3
 8103354:	f7ff fcff 	bl	8102d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	4618      	mov	r0, r3
 810335e:	f7ff fdd6 	bl	8102f0e <LL_ADC_REG_IsConversionOngoing>
 8103362:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	4618      	mov	r0, r3
 810336a:	f7ff fde3 	bl	8102f34 <LL_ADC_INJ_IsConversionOngoing>
 810336e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103372:	2b00      	cmp	r3, #0
 8103374:	f040 80b8 	bne.w	81034e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810337a:	2b00      	cmp	r3, #0
 810337c:	f040 80b4 	bne.w	81034e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	6818      	ldr	r0, [r3, #0]
 8103384:	683b      	ldr	r3, [r7, #0]
 8103386:	6819      	ldr	r1, [r3, #0]
 8103388:	683b      	ldr	r3, [r7, #0]
 810338a:	689b      	ldr	r3, [r3, #8]
 810338c:	461a      	mov	r2, r3
 810338e:	f7ff fd0e 	bl	8102dae <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103392:	4b30      	ldr	r3, [pc, #192]	@ (8103454 <HAL_ADC_ConfigChannel+0x1b4>)
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810339a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810339e:	d10b      	bne.n	81033b8 <HAL_ADC_ConfigChannel+0x118>
 81033a0:	683b      	ldr	r3, [r7, #0]
 81033a2:	695a      	ldr	r2, [r3, #20]
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	68db      	ldr	r3, [r3, #12]
 81033aa:	089b      	lsrs	r3, r3, #2
 81033ac:	f003 0307 	and.w	r3, r3, #7
 81033b0:	005b      	lsls	r3, r3, #1
 81033b2:	fa02 f303 	lsl.w	r3, r2, r3
 81033b6:	e01d      	b.n	81033f4 <HAL_ADC_ConfigChannel+0x154>
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	68db      	ldr	r3, [r3, #12]
 81033be:	f003 0310 	and.w	r3, r3, #16
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d10b      	bne.n	81033de <HAL_ADC_ConfigChannel+0x13e>
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	695a      	ldr	r2, [r3, #20]
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	68db      	ldr	r3, [r3, #12]
 81033d0:	089b      	lsrs	r3, r3, #2
 81033d2:	f003 0307 	and.w	r3, r3, #7
 81033d6:	005b      	lsls	r3, r3, #1
 81033d8:	fa02 f303 	lsl.w	r3, r2, r3
 81033dc:	e00a      	b.n	81033f4 <HAL_ADC_ConfigChannel+0x154>
 81033de:	683b      	ldr	r3, [r7, #0]
 81033e0:	695a      	ldr	r2, [r3, #20]
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	68db      	ldr	r3, [r3, #12]
 81033e8:	089b      	lsrs	r3, r3, #2
 81033ea:	f003 0304 	and.w	r3, r3, #4
 81033ee:	005b      	lsls	r3, r3, #1
 81033f0:	fa02 f303 	lsl.w	r3, r2, r3
 81033f4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81033f6:	683b      	ldr	r3, [r7, #0]
 81033f8:	691b      	ldr	r3, [r3, #16]
 81033fa:	2b04      	cmp	r3, #4
 81033fc:	d02c      	beq.n	8103458 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	6818      	ldr	r0, [r3, #0]
 8103402:	683b      	ldr	r3, [r7, #0]
 8103404:	6919      	ldr	r1, [r3, #16]
 8103406:	683b      	ldr	r3, [r7, #0]
 8103408:	681a      	ldr	r2, [r3, #0]
 810340a:	6a3b      	ldr	r3, [r7, #32]
 810340c:	f7ff fc4f 	bl	8102cae <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	6818      	ldr	r0, [r3, #0]
 8103414:	683b      	ldr	r3, [r7, #0]
 8103416:	6919      	ldr	r1, [r3, #16]
 8103418:	683b      	ldr	r3, [r7, #0]
 810341a:	7e5b      	ldrb	r3, [r3, #25]
 810341c:	2b01      	cmp	r3, #1
 810341e:	d102      	bne.n	8103426 <HAL_ADC_ConfigChannel+0x186>
 8103420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103424:	e000      	b.n	8103428 <HAL_ADC_ConfigChannel+0x188>
 8103426:	2300      	movs	r3, #0
 8103428:	461a      	mov	r2, r3
 810342a:	f7ff fc79 	bl	8102d20 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	6818      	ldr	r0, [r3, #0]
 8103432:	683b      	ldr	r3, [r7, #0]
 8103434:	6919      	ldr	r1, [r3, #16]
 8103436:	683b      	ldr	r3, [r7, #0]
 8103438:	7e1b      	ldrb	r3, [r3, #24]
 810343a:	2b01      	cmp	r3, #1
 810343c:	d102      	bne.n	8103444 <HAL_ADC_ConfigChannel+0x1a4>
 810343e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103442:	e000      	b.n	8103446 <HAL_ADC_ConfigChannel+0x1a6>
 8103444:	2300      	movs	r3, #0
 8103446:	461a      	mov	r2, r3
 8103448:	f7ff fc51 	bl	8102cee <LL_ADC_SetDataRightShift>
 810344c:	e04c      	b.n	81034e8 <HAL_ADC_ConfigChannel+0x248>
 810344e:	bf00      	nop
 8103450:	47ff0000 	.word	0x47ff0000
 8103454:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810345e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103462:	683b      	ldr	r3, [r7, #0]
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	069b      	lsls	r3, r3, #26
 8103468:	429a      	cmp	r2, r3
 810346a:	d107      	bne.n	810347c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810347a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103482:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103486:	683b      	ldr	r3, [r7, #0]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	069b      	lsls	r3, r3, #26
 810348c:	429a      	cmp	r2, r3
 810348e:	d107      	bne.n	81034a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	681b      	ldr	r3, [r3, #0]
 810349a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810349e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81034a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81034aa:	683b      	ldr	r3, [r7, #0]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	069b      	lsls	r3, r3, #26
 81034b0:	429a      	cmp	r2, r3
 81034b2:	d107      	bne.n	81034c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81034c2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81034ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81034ce:	683b      	ldr	r3, [r7, #0]
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	069b      	lsls	r3, r3, #26
 81034d4:	429a      	cmp	r2, r3
 81034d6:	d107      	bne.n	81034e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81034e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4618      	mov	r0, r3
 81034ee:	f7ff fcfb 	bl	8102ee8 <LL_ADC_IsEnabled>
 81034f2:	4603      	mov	r3, r0
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	f040 81aa 	bne.w	810384e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	6818      	ldr	r0, [r3, #0]
 81034fe:	683b      	ldr	r3, [r7, #0]
 8103500:	6819      	ldr	r1, [r3, #0]
 8103502:	683b      	ldr	r3, [r7, #0]
 8103504:	68db      	ldr	r3, [r3, #12]
 8103506:	461a      	mov	r2, r3
 8103508:	f7ff fc7c 	bl	8102e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810350c:	683b      	ldr	r3, [r7, #0]
 810350e:	68db      	ldr	r3, [r3, #12]
 8103510:	4a87      	ldr	r2, [pc, #540]	@ (8103730 <HAL_ADC_ConfigChannel+0x490>)
 8103512:	4293      	cmp	r3, r2
 8103514:	f040 809a 	bne.w	810364c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681a      	ldr	r2, [r3, #0]
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4984      	ldr	r1, [pc, #528]	@ (8103734 <HAL_ADC_ConfigChannel+0x494>)
 8103522:	428b      	cmp	r3, r1
 8103524:	d147      	bne.n	81035b6 <HAL_ADC_ConfigChannel+0x316>
 8103526:	683b      	ldr	r3, [r7, #0]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4983      	ldr	r1, [pc, #524]	@ (8103738 <HAL_ADC_ConfigChannel+0x498>)
 810352c:	428b      	cmp	r3, r1
 810352e:	d040      	beq.n	81035b2 <HAL_ADC_ConfigChannel+0x312>
 8103530:	683b      	ldr	r3, [r7, #0]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4981      	ldr	r1, [pc, #516]	@ (810373c <HAL_ADC_ConfigChannel+0x49c>)
 8103536:	428b      	cmp	r3, r1
 8103538:	d039      	beq.n	81035ae <HAL_ADC_ConfigChannel+0x30e>
 810353a:	683b      	ldr	r3, [r7, #0]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4980      	ldr	r1, [pc, #512]	@ (8103740 <HAL_ADC_ConfigChannel+0x4a0>)
 8103540:	428b      	cmp	r3, r1
 8103542:	d032      	beq.n	81035aa <HAL_ADC_ConfigChannel+0x30a>
 8103544:	683b      	ldr	r3, [r7, #0]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	497e      	ldr	r1, [pc, #504]	@ (8103744 <HAL_ADC_ConfigChannel+0x4a4>)
 810354a:	428b      	cmp	r3, r1
 810354c:	d02b      	beq.n	81035a6 <HAL_ADC_ConfigChannel+0x306>
 810354e:	683b      	ldr	r3, [r7, #0]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	497d      	ldr	r1, [pc, #500]	@ (8103748 <HAL_ADC_ConfigChannel+0x4a8>)
 8103554:	428b      	cmp	r3, r1
 8103556:	d024      	beq.n	81035a2 <HAL_ADC_ConfigChannel+0x302>
 8103558:	683b      	ldr	r3, [r7, #0]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	497b      	ldr	r1, [pc, #492]	@ (810374c <HAL_ADC_ConfigChannel+0x4ac>)
 810355e:	428b      	cmp	r3, r1
 8103560:	d01d      	beq.n	810359e <HAL_ADC_ConfigChannel+0x2fe>
 8103562:	683b      	ldr	r3, [r7, #0]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	497a      	ldr	r1, [pc, #488]	@ (8103750 <HAL_ADC_ConfigChannel+0x4b0>)
 8103568:	428b      	cmp	r3, r1
 810356a:	d016      	beq.n	810359a <HAL_ADC_ConfigChannel+0x2fa>
 810356c:	683b      	ldr	r3, [r7, #0]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	4978      	ldr	r1, [pc, #480]	@ (8103754 <HAL_ADC_ConfigChannel+0x4b4>)
 8103572:	428b      	cmp	r3, r1
 8103574:	d00f      	beq.n	8103596 <HAL_ADC_ConfigChannel+0x2f6>
 8103576:	683b      	ldr	r3, [r7, #0]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	4977      	ldr	r1, [pc, #476]	@ (8103758 <HAL_ADC_ConfigChannel+0x4b8>)
 810357c:	428b      	cmp	r3, r1
 810357e:	d008      	beq.n	8103592 <HAL_ADC_ConfigChannel+0x2f2>
 8103580:	683b      	ldr	r3, [r7, #0]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	4975      	ldr	r1, [pc, #468]	@ (810375c <HAL_ADC_ConfigChannel+0x4bc>)
 8103586:	428b      	cmp	r3, r1
 8103588:	d101      	bne.n	810358e <HAL_ADC_ConfigChannel+0x2ee>
 810358a:	4b75      	ldr	r3, [pc, #468]	@ (8103760 <HAL_ADC_ConfigChannel+0x4c0>)
 810358c:	e05a      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810358e:	2300      	movs	r3, #0
 8103590:	e058      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103592:	4b74      	ldr	r3, [pc, #464]	@ (8103764 <HAL_ADC_ConfigChannel+0x4c4>)
 8103594:	e056      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103596:	4b74      	ldr	r3, [pc, #464]	@ (8103768 <HAL_ADC_ConfigChannel+0x4c8>)
 8103598:	e054      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810359a:	4b6e      	ldr	r3, [pc, #440]	@ (8103754 <HAL_ADC_ConfigChannel+0x4b4>)
 810359c:	e052      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810359e:	4b6c      	ldr	r3, [pc, #432]	@ (8103750 <HAL_ADC_ConfigChannel+0x4b0>)
 81035a0:	e050      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035a2:	4b72      	ldr	r3, [pc, #456]	@ (810376c <HAL_ADC_ConfigChannel+0x4cc>)
 81035a4:	e04e      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035a6:	4b72      	ldr	r3, [pc, #456]	@ (8103770 <HAL_ADC_ConfigChannel+0x4d0>)
 81035a8:	e04c      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035aa:	4b72      	ldr	r3, [pc, #456]	@ (8103774 <HAL_ADC_ConfigChannel+0x4d4>)
 81035ac:	e04a      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035ae:	4b72      	ldr	r3, [pc, #456]	@ (8103778 <HAL_ADC_ConfigChannel+0x4d8>)
 81035b0:	e048      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035b2:	2301      	movs	r3, #1
 81035b4:	e046      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	4970      	ldr	r1, [pc, #448]	@ (810377c <HAL_ADC_ConfigChannel+0x4dc>)
 81035bc:	428b      	cmp	r3, r1
 81035be:	d140      	bne.n	8103642 <HAL_ADC_ConfigChannel+0x3a2>
 81035c0:	683b      	ldr	r3, [r7, #0]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	495c      	ldr	r1, [pc, #368]	@ (8103738 <HAL_ADC_ConfigChannel+0x498>)
 81035c6:	428b      	cmp	r3, r1
 81035c8:	d039      	beq.n	810363e <HAL_ADC_ConfigChannel+0x39e>
 81035ca:	683b      	ldr	r3, [r7, #0]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	495b      	ldr	r1, [pc, #364]	@ (810373c <HAL_ADC_ConfigChannel+0x49c>)
 81035d0:	428b      	cmp	r3, r1
 81035d2:	d032      	beq.n	810363a <HAL_ADC_ConfigChannel+0x39a>
 81035d4:	683b      	ldr	r3, [r7, #0]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	4959      	ldr	r1, [pc, #356]	@ (8103740 <HAL_ADC_ConfigChannel+0x4a0>)
 81035da:	428b      	cmp	r3, r1
 81035dc:	d02b      	beq.n	8103636 <HAL_ADC_ConfigChannel+0x396>
 81035de:	683b      	ldr	r3, [r7, #0]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	4958      	ldr	r1, [pc, #352]	@ (8103744 <HAL_ADC_ConfigChannel+0x4a4>)
 81035e4:	428b      	cmp	r3, r1
 81035e6:	d024      	beq.n	8103632 <HAL_ADC_ConfigChannel+0x392>
 81035e8:	683b      	ldr	r3, [r7, #0]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	4956      	ldr	r1, [pc, #344]	@ (8103748 <HAL_ADC_ConfigChannel+0x4a8>)
 81035ee:	428b      	cmp	r3, r1
 81035f0:	d01d      	beq.n	810362e <HAL_ADC_ConfigChannel+0x38e>
 81035f2:	683b      	ldr	r3, [r7, #0]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4955      	ldr	r1, [pc, #340]	@ (810374c <HAL_ADC_ConfigChannel+0x4ac>)
 81035f8:	428b      	cmp	r3, r1
 81035fa:	d016      	beq.n	810362a <HAL_ADC_ConfigChannel+0x38a>
 81035fc:	683b      	ldr	r3, [r7, #0]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	4953      	ldr	r1, [pc, #332]	@ (8103750 <HAL_ADC_ConfigChannel+0x4b0>)
 8103602:	428b      	cmp	r3, r1
 8103604:	d00f      	beq.n	8103626 <HAL_ADC_ConfigChannel+0x386>
 8103606:	683b      	ldr	r3, [r7, #0]
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	4952      	ldr	r1, [pc, #328]	@ (8103754 <HAL_ADC_ConfigChannel+0x4b4>)
 810360c:	428b      	cmp	r3, r1
 810360e:	d008      	beq.n	8103622 <HAL_ADC_ConfigChannel+0x382>
 8103610:	683b      	ldr	r3, [r7, #0]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	4951      	ldr	r1, [pc, #324]	@ (810375c <HAL_ADC_ConfigChannel+0x4bc>)
 8103616:	428b      	cmp	r3, r1
 8103618:	d101      	bne.n	810361e <HAL_ADC_ConfigChannel+0x37e>
 810361a:	4b51      	ldr	r3, [pc, #324]	@ (8103760 <HAL_ADC_ConfigChannel+0x4c0>)
 810361c:	e012      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810361e:	2300      	movs	r3, #0
 8103620:	e010      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103622:	4b51      	ldr	r3, [pc, #324]	@ (8103768 <HAL_ADC_ConfigChannel+0x4c8>)
 8103624:	e00e      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103626:	4b4b      	ldr	r3, [pc, #300]	@ (8103754 <HAL_ADC_ConfigChannel+0x4b4>)
 8103628:	e00c      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810362a:	4b49      	ldr	r3, [pc, #292]	@ (8103750 <HAL_ADC_ConfigChannel+0x4b0>)
 810362c:	e00a      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810362e:	4b4f      	ldr	r3, [pc, #316]	@ (810376c <HAL_ADC_ConfigChannel+0x4cc>)
 8103630:	e008      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103632:	4b4f      	ldr	r3, [pc, #316]	@ (8103770 <HAL_ADC_ConfigChannel+0x4d0>)
 8103634:	e006      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103636:	4b4f      	ldr	r3, [pc, #316]	@ (8103774 <HAL_ADC_ConfigChannel+0x4d4>)
 8103638:	e004      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810363a:	4b4f      	ldr	r3, [pc, #316]	@ (8103778 <HAL_ADC_ConfigChannel+0x4d8>)
 810363c:	e002      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 810363e:	2301      	movs	r3, #1
 8103640:	e000      	b.n	8103644 <HAL_ADC_ConfigChannel+0x3a4>
 8103642:	2300      	movs	r3, #0
 8103644:	4619      	mov	r1, r3
 8103646:	4610      	mov	r0, r2
 8103648:	f7ff fafe 	bl	8102c48 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810364c:	683b      	ldr	r3, [r7, #0]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	2b00      	cmp	r3, #0
 8103652:	f280 80fc 	bge.w	810384e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	4a36      	ldr	r2, [pc, #216]	@ (8103734 <HAL_ADC_ConfigChannel+0x494>)
 810365c:	4293      	cmp	r3, r2
 810365e:	d004      	beq.n	810366a <HAL_ADC_ConfigChannel+0x3ca>
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	4a45      	ldr	r2, [pc, #276]	@ (810377c <HAL_ADC_ConfigChannel+0x4dc>)
 8103666:	4293      	cmp	r3, r2
 8103668:	d101      	bne.n	810366e <HAL_ADC_ConfigChannel+0x3ce>
 810366a:	4b45      	ldr	r3, [pc, #276]	@ (8103780 <HAL_ADC_ConfigChannel+0x4e0>)
 810366c:	e000      	b.n	8103670 <HAL_ADC_ConfigChannel+0x3d0>
 810366e:	4b45      	ldr	r3, [pc, #276]	@ (8103784 <HAL_ADC_ConfigChannel+0x4e4>)
 8103670:	4618      	mov	r0, r3
 8103672:	f7ff fadb 	bl	8102c2c <LL_ADC_GetCommonPathInternalCh>
 8103676:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	4a2d      	ldr	r2, [pc, #180]	@ (8103734 <HAL_ADC_ConfigChannel+0x494>)
 810367e:	4293      	cmp	r3, r2
 8103680:	d004      	beq.n	810368c <HAL_ADC_ConfigChannel+0x3ec>
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	4a3d      	ldr	r2, [pc, #244]	@ (810377c <HAL_ADC_ConfigChannel+0x4dc>)
 8103688:	4293      	cmp	r3, r2
 810368a:	d10e      	bne.n	81036aa <HAL_ADC_ConfigChannel+0x40a>
 810368c:	4829      	ldr	r0, [pc, #164]	@ (8103734 <HAL_ADC_ConfigChannel+0x494>)
 810368e:	f7ff fc2b 	bl	8102ee8 <LL_ADC_IsEnabled>
 8103692:	4604      	mov	r4, r0
 8103694:	4839      	ldr	r0, [pc, #228]	@ (810377c <HAL_ADC_ConfigChannel+0x4dc>)
 8103696:	f7ff fc27 	bl	8102ee8 <LL_ADC_IsEnabled>
 810369a:	4603      	mov	r3, r0
 810369c:	4323      	orrs	r3, r4
 810369e:	2b00      	cmp	r3, #0
 81036a0:	bf0c      	ite	eq
 81036a2:	2301      	moveq	r3, #1
 81036a4:	2300      	movne	r3, #0
 81036a6:	b2db      	uxtb	r3, r3
 81036a8:	e008      	b.n	81036bc <HAL_ADC_ConfigChannel+0x41c>
 81036aa:	4837      	ldr	r0, [pc, #220]	@ (8103788 <HAL_ADC_ConfigChannel+0x4e8>)
 81036ac:	f7ff fc1c 	bl	8102ee8 <LL_ADC_IsEnabled>
 81036b0:	4603      	mov	r3, r0
 81036b2:	2b00      	cmp	r3, #0
 81036b4:	bf0c      	ite	eq
 81036b6:	2301      	moveq	r3, #1
 81036b8:	2300      	movne	r3, #0
 81036ba:	b2db      	uxtb	r3, r3
 81036bc:	2b00      	cmp	r3, #0
 81036be:	f000 80b3 	beq.w	8103828 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81036c2:	683b      	ldr	r3, [r7, #0]
 81036c4:	681b      	ldr	r3, [r3, #0]
 81036c6:	4a31      	ldr	r2, [pc, #196]	@ (810378c <HAL_ADC_ConfigChannel+0x4ec>)
 81036c8:	4293      	cmp	r3, r2
 81036ca:	d165      	bne.n	8103798 <HAL_ADC_ConfigChannel+0x4f8>
 81036cc:	69fb      	ldr	r3, [r7, #28]
 81036ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81036d2:	2b00      	cmp	r3, #0
 81036d4:	d160      	bne.n	8103798 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	4a2b      	ldr	r2, [pc, #172]	@ (8103788 <HAL_ADC_ConfigChannel+0x4e8>)
 81036dc:	4293      	cmp	r3, r2
 81036de:	f040 80b6 	bne.w	810384e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a13      	ldr	r2, [pc, #76]	@ (8103734 <HAL_ADC_ConfigChannel+0x494>)
 81036e8:	4293      	cmp	r3, r2
 81036ea:	d004      	beq.n	81036f6 <HAL_ADC_ConfigChannel+0x456>
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	4a22      	ldr	r2, [pc, #136]	@ (810377c <HAL_ADC_ConfigChannel+0x4dc>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d101      	bne.n	81036fa <HAL_ADC_ConfigChannel+0x45a>
 81036f6:	4a22      	ldr	r2, [pc, #136]	@ (8103780 <HAL_ADC_ConfigChannel+0x4e0>)
 81036f8:	e000      	b.n	81036fc <HAL_ADC_ConfigChannel+0x45c>
 81036fa:	4a22      	ldr	r2, [pc, #136]	@ (8103784 <HAL_ADC_ConfigChannel+0x4e4>)
 81036fc:	69fb      	ldr	r3, [r7, #28]
 81036fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103702:	4619      	mov	r1, r3
 8103704:	4610      	mov	r0, r2
 8103706:	f7ff fa7e 	bl	8102c06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810370a:	4b21      	ldr	r3, [pc, #132]	@ (8103790 <HAL_ADC_ConfigChannel+0x4f0>)
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	099b      	lsrs	r3, r3, #6
 8103710:	4a20      	ldr	r2, [pc, #128]	@ (8103794 <HAL_ADC_ConfigChannel+0x4f4>)
 8103712:	fba2 2303 	umull	r2, r3, r2, r3
 8103716:	099b      	lsrs	r3, r3, #6
 8103718:	3301      	adds	r3, #1
 810371a:	005b      	lsls	r3, r3, #1
 810371c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 810371e:	e002      	b.n	8103726 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	3b01      	subs	r3, #1
 8103724:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8103726:	68fb      	ldr	r3, [r7, #12]
 8103728:	2b00      	cmp	r3, #0
 810372a:	d1f9      	bne.n	8103720 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810372c:	e08f      	b.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
 810372e:	bf00      	nop
 8103730:	47ff0000 	.word	0x47ff0000
 8103734:	40022000 	.word	0x40022000
 8103738:	04300002 	.word	0x04300002
 810373c:	08600004 	.word	0x08600004
 8103740:	0c900008 	.word	0x0c900008
 8103744:	10c00010 	.word	0x10c00010
 8103748:	14f00020 	.word	0x14f00020
 810374c:	2a000400 	.word	0x2a000400
 8103750:	2e300800 	.word	0x2e300800
 8103754:	32601000 	.word	0x32601000
 8103758:	43210000 	.word	0x43210000
 810375c:	4b840000 	.word	0x4b840000
 8103760:	4fb80000 	.word	0x4fb80000
 8103764:	47520000 	.word	0x47520000
 8103768:	36902000 	.word	0x36902000
 810376c:	25b00200 	.word	0x25b00200
 8103770:	21800100 	.word	0x21800100
 8103774:	1d500080 	.word	0x1d500080
 8103778:	19200040 	.word	0x19200040
 810377c:	40022100 	.word	0x40022100
 8103780:	40022300 	.word	0x40022300
 8103784:	58026300 	.word	0x58026300
 8103788:	58026000 	.word	0x58026000
 810378c:	cb840000 	.word	0xcb840000
 8103790:	10000000 	.word	0x10000000
 8103794:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103798:	683b      	ldr	r3, [r7, #0]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	4a31      	ldr	r2, [pc, #196]	@ (8103864 <HAL_ADC_ConfigChannel+0x5c4>)
 810379e:	4293      	cmp	r3, r2
 81037a0:	d11e      	bne.n	81037e0 <HAL_ADC_ConfigChannel+0x540>
 81037a2:	69fb      	ldr	r3, [r7, #28]
 81037a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81037a8:	2b00      	cmp	r3, #0
 81037aa:	d119      	bne.n	81037e0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a2d      	ldr	r2, [pc, #180]	@ (8103868 <HAL_ADC_ConfigChannel+0x5c8>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d14b      	bne.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a2c      	ldr	r2, [pc, #176]	@ (810386c <HAL_ADC_ConfigChannel+0x5cc>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d004      	beq.n	81037ca <HAL_ADC_ConfigChannel+0x52a>
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8103870 <HAL_ADC_ConfigChannel+0x5d0>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	d101      	bne.n	81037ce <HAL_ADC_ConfigChannel+0x52e>
 81037ca:	4a2a      	ldr	r2, [pc, #168]	@ (8103874 <HAL_ADC_ConfigChannel+0x5d4>)
 81037cc:	e000      	b.n	81037d0 <HAL_ADC_ConfigChannel+0x530>
 81037ce:	4a2a      	ldr	r2, [pc, #168]	@ (8103878 <HAL_ADC_ConfigChannel+0x5d8>)
 81037d0:	69fb      	ldr	r3, [r7, #28]
 81037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81037d6:	4619      	mov	r1, r3
 81037d8:	4610      	mov	r0, r2
 81037da:	f7ff fa14 	bl	8102c06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81037de:	e036      	b.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81037e0:	683b      	ldr	r3, [r7, #0]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a25      	ldr	r2, [pc, #148]	@ (810387c <HAL_ADC_ConfigChannel+0x5dc>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d131      	bne.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
 81037ea:	69fb      	ldr	r3, [r7, #28]
 81037ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81037f0:	2b00      	cmp	r3, #0
 81037f2:	d12c      	bne.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8103868 <HAL_ADC_ConfigChannel+0x5c8>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d127      	bne.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a1a      	ldr	r2, [pc, #104]	@ (810386c <HAL_ADC_ConfigChannel+0x5cc>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d004      	beq.n	8103812 <HAL_ADC_ConfigChannel+0x572>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a18      	ldr	r2, [pc, #96]	@ (8103870 <HAL_ADC_ConfigChannel+0x5d0>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d101      	bne.n	8103816 <HAL_ADC_ConfigChannel+0x576>
 8103812:	4a18      	ldr	r2, [pc, #96]	@ (8103874 <HAL_ADC_ConfigChannel+0x5d4>)
 8103814:	e000      	b.n	8103818 <HAL_ADC_ConfigChannel+0x578>
 8103816:	4a18      	ldr	r2, [pc, #96]	@ (8103878 <HAL_ADC_ConfigChannel+0x5d8>)
 8103818:	69fb      	ldr	r3, [r7, #28]
 810381a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810381e:	4619      	mov	r1, r3
 8103820:	4610      	mov	r0, r2
 8103822:	f7ff f9f0 	bl	8102c06 <LL_ADC_SetCommonPathInternalCh>
 8103826:	e012      	b.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810382c:	f043 0220 	orr.w	r2, r3, #32
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8103834:	2301      	movs	r3, #1
 8103836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 810383a:	e008      	b.n	810384e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103840:	f043 0220 	orr.w	r2, r3, #32
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103848:	2301      	movs	r3, #1
 810384a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	2200      	movs	r2, #0
 8103852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 810385a:	4618      	mov	r0, r3
 810385c:	3734      	adds	r7, #52	@ 0x34
 810385e:	46bd      	mov	sp, r7
 8103860:	bd90      	pop	{r4, r7, pc}
 8103862:	bf00      	nop
 8103864:	c7520000 	.word	0xc7520000
 8103868:	58026000 	.word	0x58026000
 810386c:	40022000 	.word	0x40022000
 8103870:	40022100 	.word	0x40022100
 8103874:	40022300 	.word	0x40022300
 8103878:	58026300 	.word	0x58026300
 810387c:	cfb80000 	.word	0xcfb80000

08103880 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103880:	b580      	push	{r7, lr}
 8103882:	b084      	sub	sp, #16
 8103884:	af00      	add	r7, sp, #0
 8103886:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	4a7a      	ldr	r2, [pc, #488]	@ (8103a78 <ADC_ConfigureBoostMode+0x1f8>)
 810388e:	4293      	cmp	r3, r2
 8103890:	d004      	beq.n	810389c <ADC_ConfigureBoostMode+0x1c>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	4a79      	ldr	r2, [pc, #484]	@ (8103a7c <ADC_ConfigureBoostMode+0x1fc>)
 8103898:	4293      	cmp	r3, r2
 810389a:	d109      	bne.n	81038b0 <ADC_ConfigureBoostMode+0x30>
 810389c:	4b78      	ldr	r3, [pc, #480]	@ (8103a80 <ADC_ConfigureBoostMode+0x200>)
 810389e:	689b      	ldr	r3, [r3, #8]
 81038a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81038a4:	2b00      	cmp	r3, #0
 81038a6:	bf14      	ite	ne
 81038a8:	2301      	movne	r3, #1
 81038aa:	2300      	moveq	r3, #0
 81038ac:	b2db      	uxtb	r3, r3
 81038ae:	e008      	b.n	81038c2 <ADC_ConfigureBoostMode+0x42>
 81038b0:	4b74      	ldr	r3, [pc, #464]	@ (8103a84 <ADC_ConfigureBoostMode+0x204>)
 81038b2:	689b      	ldr	r3, [r3, #8]
 81038b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	bf14      	ite	ne
 81038bc:	2301      	movne	r3, #1
 81038be:	2300      	moveq	r3, #0
 81038c0:	b2db      	uxtb	r3, r3
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	d01c      	beq.n	8103900 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81038c6:	f002 fc4f 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 81038ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	685b      	ldr	r3, [r3, #4]
 81038d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81038d4:	d010      	beq.n	81038f8 <ADC_ConfigureBoostMode+0x78>
 81038d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81038da:	d873      	bhi.n	81039c4 <ADC_ConfigureBoostMode+0x144>
 81038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81038e0:	d002      	beq.n	81038e8 <ADC_ConfigureBoostMode+0x68>
 81038e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81038e6:	d16d      	bne.n	81039c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	685b      	ldr	r3, [r3, #4]
 81038ec:	0c1b      	lsrs	r3, r3, #16
 81038ee:	68fa      	ldr	r2, [r7, #12]
 81038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 81038f4:	60fb      	str	r3, [r7, #12]
        break;
 81038f6:	e068      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81038f8:	68fb      	ldr	r3, [r7, #12]
 81038fa:	089b      	lsrs	r3, r3, #2
 81038fc:	60fb      	str	r3, [r7, #12]
        break;
 81038fe:	e064      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103900:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103904:	f04f 0100 	mov.w	r1, #0
 8103908:	f003 fed6 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 810390c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	685b      	ldr	r3, [r3, #4]
 8103912:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103916:	d051      	beq.n	81039bc <ADC_ConfigureBoostMode+0x13c>
 8103918:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 810391c:	d854      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 810391e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103922:	d047      	beq.n	81039b4 <ADC_ConfigureBoostMode+0x134>
 8103924:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103928:	d84e      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 810392a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 810392e:	d03d      	beq.n	81039ac <ADC_ConfigureBoostMode+0x12c>
 8103930:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103934:	d848      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 8103936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810393a:	d033      	beq.n	81039a4 <ADC_ConfigureBoostMode+0x124>
 810393c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103940:	d842      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 8103942:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103946:	d029      	beq.n	810399c <ADC_ConfigureBoostMode+0x11c>
 8103948:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 810394c:	d83c      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 810394e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103952:	d01a      	beq.n	810398a <ADC_ConfigureBoostMode+0x10a>
 8103954:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103958:	d836      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 810395a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810395e:	d014      	beq.n	810398a <ADC_ConfigureBoostMode+0x10a>
 8103960:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103964:	d830      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 8103966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810396a:	d00e      	beq.n	810398a <ADC_ConfigureBoostMode+0x10a>
 810396c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103970:	d82a      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 8103972:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103976:	d008      	beq.n	810398a <ADC_ConfigureBoostMode+0x10a>
 8103978:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810397c:	d824      	bhi.n	81039c8 <ADC_ConfigureBoostMode+0x148>
 810397e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103982:	d002      	beq.n	810398a <ADC_ConfigureBoostMode+0x10a>
 8103984:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103988:	d11e      	bne.n	81039c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	685b      	ldr	r3, [r3, #4]
 810398e:	0c9b      	lsrs	r3, r3, #18
 8103990:	005b      	lsls	r3, r3, #1
 8103992:	68fa      	ldr	r2, [r7, #12]
 8103994:	fbb2 f3f3 	udiv	r3, r2, r3
 8103998:	60fb      	str	r3, [r7, #12]
        break;
 810399a:	e016      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 810399c:	68fb      	ldr	r3, [r7, #12]
 810399e:	091b      	lsrs	r3, r3, #4
 81039a0:	60fb      	str	r3, [r7, #12]
        break;
 81039a2:	e012      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81039a4:	68fb      	ldr	r3, [r7, #12]
 81039a6:	095b      	lsrs	r3, r3, #5
 81039a8:	60fb      	str	r3, [r7, #12]
        break;
 81039aa:	e00e      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81039ac:	68fb      	ldr	r3, [r7, #12]
 81039ae:	099b      	lsrs	r3, r3, #6
 81039b0:	60fb      	str	r3, [r7, #12]
        break;
 81039b2:	e00a      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81039b4:	68fb      	ldr	r3, [r7, #12]
 81039b6:	09db      	lsrs	r3, r3, #7
 81039b8:	60fb      	str	r3, [r7, #12]
        break;
 81039ba:	e006      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81039bc:	68fb      	ldr	r3, [r7, #12]
 81039be:	0a1b      	lsrs	r3, r3, #8
 81039c0:	60fb      	str	r3, [r7, #12]
        break;
 81039c2:	e002      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
        break;
 81039c4:	bf00      	nop
 81039c6:	e000      	b.n	81039ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 81039c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81039ca:	f7ff f8d3 	bl	8102b74 <HAL_GetREVID>
 81039ce:	4603      	mov	r3, r0
 81039d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 81039d4:	4293      	cmp	r3, r2
 81039d6:	d815      	bhi.n	8103a04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81039d8:	68fb      	ldr	r3, [r7, #12]
 81039da:	4a2b      	ldr	r2, [pc, #172]	@ (8103a88 <ADC_ConfigureBoostMode+0x208>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d908      	bls.n	81039f2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	689a      	ldr	r2, [r3, #8]
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81039ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81039f0:	e03e      	b.n	8103a70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	689a      	ldr	r2, [r3, #8]
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	681b      	ldr	r3, [r3, #0]
 81039fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103a00:	609a      	str	r2, [r3, #8]
}
 8103a02:	e035      	b.n	8103a70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103a04:	68fb      	ldr	r3, [r7, #12]
 8103a06:	085b      	lsrs	r3, r3, #1
 8103a08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8103a8c <ADC_ConfigureBoostMode+0x20c>)
 8103a0e:	4293      	cmp	r3, r2
 8103a10:	d808      	bhi.n	8103a24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	689a      	ldr	r2, [r3, #8]
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8103a20:	609a      	str	r2, [r3, #8]
}
 8103a22:	e025      	b.n	8103a70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	4a1a      	ldr	r2, [pc, #104]	@ (8103a90 <ADC_ConfigureBoostMode+0x210>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d80a      	bhi.n	8103a42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	689b      	ldr	r3, [r3, #8]
 8103a32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103a3e:	609a      	str	r2, [r3, #8]
}
 8103a40:	e016      	b.n	8103a70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103a42:	68fb      	ldr	r3, [r7, #12]
 8103a44:	4a13      	ldr	r2, [pc, #76]	@ (8103a94 <ADC_ConfigureBoostMode+0x214>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d80a      	bhi.n	8103a60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	689b      	ldr	r3, [r3, #8]
 8103a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103a5c:	609a      	str	r2, [r3, #8]
}
 8103a5e:	e007      	b.n	8103a70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	689a      	ldr	r2, [r3, #8]
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8103a6e:	609a      	str	r2, [r3, #8]
}
 8103a70:	bf00      	nop
 8103a72:	3710      	adds	r7, #16
 8103a74:	46bd      	mov	sp, r7
 8103a76:	bd80      	pop	{r7, pc}
 8103a78:	40022000 	.word	0x40022000
 8103a7c:	40022100 	.word	0x40022100
 8103a80:	40022300 	.word	0x40022300
 8103a84:	58026300 	.word	0x58026300
 8103a88:	01312d00 	.word	0x01312d00
 8103a8c:	005f5e10 	.word	0x005f5e10
 8103a90:	00bebc20 	.word	0x00bebc20
 8103a94:	017d7840 	.word	0x017d7840

08103a98 <LL_ADC_IsEnabled>:
{
 8103a98:	b480      	push	{r7}
 8103a9a:	b083      	sub	sp, #12
 8103a9c:	af00      	add	r7, sp, #0
 8103a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	689b      	ldr	r3, [r3, #8]
 8103aa4:	f003 0301 	and.w	r3, r3, #1
 8103aa8:	2b01      	cmp	r3, #1
 8103aaa:	d101      	bne.n	8103ab0 <LL_ADC_IsEnabled+0x18>
 8103aac:	2301      	movs	r3, #1
 8103aae:	e000      	b.n	8103ab2 <LL_ADC_IsEnabled+0x1a>
 8103ab0:	2300      	movs	r3, #0
}
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	370c      	adds	r7, #12
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103abc:	4770      	bx	lr

08103abe <LL_ADC_REG_IsConversionOngoing>:
{
 8103abe:	b480      	push	{r7}
 8103ac0:	b083      	sub	sp, #12
 8103ac2:	af00      	add	r7, sp, #0
 8103ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	689b      	ldr	r3, [r3, #8]
 8103aca:	f003 0304 	and.w	r3, r3, #4
 8103ace:	2b04      	cmp	r3, #4
 8103ad0:	d101      	bne.n	8103ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103ad2:	2301      	movs	r3, #1
 8103ad4:	e000      	b.n	8103ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103ad6:	2300      	movs	r3, #0
}
 8103ad8:	4618      	mov	r0, r3
 8103ada:	370c      	adds	r7, #12
 8103adc:	46bd      	mov	sp, r7
 8103ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae2:	4770      	bx	lr

08103ae4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103ae4:	b590      	push	{r4, r7, lr}
 8103ae6:	b09f      	sub	sp, #124	@ 0x7c
 8103ae8:	af00      	add	r7, sp, #0
 8103aea:	6078      	str	r0, [r7, #4]
 8103aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103aee:	2300      	movs	r3, #0
 8103af0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103afa:	2b01      	cmp	r3, #1
 8103afc:	d101      	bne.n	8103b02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103afe:	2302      	movs	r3, #2
 8103b00:	e0c4      	b.n	8103c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	2201      	movs	r2, #1
 8103b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103b0a:	2300      	movs	r3, #0
 8103b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103b0e:	2300      	movs	r3, #0
 8103b10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	4a5f      	ldr	r2, [pc, #380]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b18:	4293      	cmp	r3, r2
 8103b1a:	d102      	bne.n	8103b22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b1e:	60bb      	str	r3, [r7, #8]
 8103b20:	e001      	b.n	8103b26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103b22:	2300      	movs	r3, #0
 8103b24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103b26:	68bb      	ldr	r3, [r7, #8]
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d10b      	bne.n	8103b44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b30:	f043 0220 	orr.w	r2, r3, #32
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	2200      	movs	r2, #0
 8103b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8103b40:	2301      	movs	r3, #1
 8103b42:	e0a3      	b.n	8103c8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103b44:	68bb      	ldr	r3, [r7, #8]
 8103b46:	4618      	mov	r0, r3
 8103b48:	f7ff ffb9 	bl	8103abe <LL_ADC_REG_IsConversionOngoing>
 8103b4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	4618      	mov	r0, r3
 8103b54:	f7ff ffb3 	bl	8103abe <LL_ADC_REG_IsConversionOngoing>
 8103b58:	4603      	mov	r3, r0
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	f040 8085 	bne.w	8103c6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	f040 8081 	bne.w	8103c6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	681b      	ldr	r3, [r3, #0]
 8103b6c:	4a49      	ldr	r2, [pc, #292]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b6e:	4293      	cmp	r3, r2
 8103b70:	d004      	beq.n	8103b7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	681b      	ldr	r3, [r3, #0]
 8103b76:	4a48      	ldr	r2, [pc, #288]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d101      	bne.n	8103b80 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103b7c:	4b47      	ldr	r3, [pc, #284]	@ (8103c9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103b7e:	e000      	b.n	8103b82 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103b80:	4b47      	ldr	r3, [pc, #284]	@ (8103ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103b82:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103b84:	683b      	ldr	r3, [r7, #0]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	2b00      	cmp	r3, #0
 8103b8a:	d03b      	beq.n	8103c04 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b8e:	689b      	ldr	r3, [r3, #8]
 8103b90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103b94:	683b      	ldr	r3, [r7, #0]
 8103b96:	685b      	ldr	r3, [r3, #4]
 8103b98:	431a      	orrs	r2, r3
 8103b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103b9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d004      	beq.n	8103bb2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a3a      	ldr	r2, [pc, #232]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d10e      	bne.n	8103bd0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103bb2:	4838      	ldr	r0, [pc, #224]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103bb4:	f7ff ff70 	bl	8103a98 <LL_ADC_IsEnabled>
 8103bb8:	4604      	mov	r4, r0
 8103bba:	4837      	ldr	r0, [pc, #220]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103bbc:	f7ff ff6c 	bl	8103a98 <LL_ADC_IsEnabled>
 8103bc0:	4603      	mov	r3, r0
 8103bc2:	4323      	orrs	r3, r4
 8103bc4:	2b00      	cmp	r3, #0
 8103bc6:	bf0c      	ite	eq
 8103bc8:	2301      	moveq	r3, #1
 8103bca:	2300      	movne	r3, #0
 8103bcc:	b2db      	uxtb	r3, r3
 8103bce:	e008      	b.n	8103be2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103bd0:	4834      	ldr	r0, [pc, #208]	@ (8103ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103bd2:	f7ff ff61 	bl	8103a98 <LL_ADC_IsEnabled>
 8103bd6:	4603      	mov	r3, r0
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	bf0c      	ite	eq
 8103bdc:	2301      	moveq	r3, #1
 8103bde:	2300      	movne	r3, #0
 8103be0:	b2db      	uxtb	r3, r3
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d04b      	beq.n	8103c7e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103be8:	689b      	ldr	r3, [r3, #8]
 8103bea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103bee:	f023 030f 	bic.w	r3, r3, #15
 8103bf2:	683a      	ldr	r2, [r7, #0]
 8103bf4:	6811      	ldr	r1, [r2, #0]
 8103bf6:	683a      	ldr	r2, [r7, #0]
 8103bf8:	6892      	ldr	r2, [r2, #8]
 8103bfa:	430a      	orrs	r2, r1
 8103bfc:	431a      	orrs	r2, r3
 8103bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c02:	e03c      	b.n	8103c7e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c06:	689b      	ldr	r3, [r3, #8]
 8103c08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	4a1f      	ldr	r2, [pc, #124]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d004      	beq.n	8103c24 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c20:	4293      	cmp	r3, r2
 8103c22:	d10e      	bne.n	8103c42 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103c24:	481b      	ldr	r0, [pc, #108]	@ (8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c26:	f7ff ff37 	bl	8103a98 <LL_ADC_IsEnabled>
 8103c2a:	4604      	mov	r4, r0
 8103c2c:	481a      	ldr	r0, [pc, #104]	@ (8103c98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c2e:	f7ff ff33 	bl	8103a98 <LL_ADC_IsEnabled>
 8103c32:	4603      	mov	r3, r0
 8103c34:	4323      	orrs	r3, r4
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	bf0c      	ite	eq
 8103c3a:	2301      	moveq	r3, #1
 8103c3c:	2300      	movne	r3, #0
 8103c3e:	b2db      	uxtb	r3, r3
 8103c40:	e008      	b.n	8103c54 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103c42:	4818      	ldr	r0, [pc, #96]	@ (8103ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103c44:	f7ff ff28 	bl	8103a98 <LL_ADC_IsEnabled>
 8103c48:	4603      	mov	r3, r0
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	bf0c      	ite	eq
 8103c4e:	2301      	moveq	r3, #1
 8103c50:	2300      	movne	r3, #0
 8103c52:	b2db      	uxtb	r3, r3
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	d012      	beq.n	8103c7e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c5a:	689b      	ldr	r3, [r3, #8]
 8103c5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103c60:	f023 030f 	bic.w	r3, r3, #15
 8103c64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103c66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c68:	e009      	b.n	8103c7e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c6e:	f043 0220 	orr.w	r2, r3, #32
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103c76:	2301      	movs	r3, #1
 8103c78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103c7c:	e000      	b.n	8103c80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	2200      	movs	r2, #0
 8103c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103c88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103c8c:	4618      	mov	r0, r3
 8103c8e:	377c      	adds	r7, #124	@ 0x7c
 8103c90:	46bd      	mov	sp, r7
 8103c92:	bd90      	pop	{r4, r7, pc}
 8103c94:	40022000 	.word	0x40022000
 8103c98:	40022100 	.word	0x40022100
 8103c9c:	40022300 	.word	0x40022300
 8103ca0:	58026300 	.word	0x58026300
 8103ca4:	58026000 	.word	0x58026000

08103ca8 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103ca8:	b580      	push	{r7, lr}
 8103caa:	b082      	sub	sp, #8
 8103cac:	af00      	add	r7, sp, #0
 8103cae:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	d003      	beq.n	8103cbe <HAL_CEC_Init+0x16>
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103cba:	2b00      	cmp	r3, #0
 8103cbc:	d101      	bne.n	8103cc2 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103cbe:	2301      	movs	r3, #1
 8103cc0:	e050      	b.n	8103d64 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d106      	bne.n	8103cd8 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2200      	movs	r2, #0
 8103cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103cd2:	6878      	ldr	r0, [r7, #4]
 8103cd4:	f7fd fd48 	bl	8101768 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	2224      	movs	r2, #36	@ 0x24
 8103cdc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	681a      	ldr	r2, [r3, #0]
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	f022 0201 	bic.w	r2, r2, #1
 8103cec:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	685a      	ldr	r2, [r3, #4]
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	689b      	ldr	r3, [r3, #8]
 8103cf6:	431a      	orrs	r2, r3
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	68db      	ldr	r3, [r3, #12]
 8103cfc:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d02:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	695b      	ldr	r3, [r3, #20]
 8103d08:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103d0e:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d14:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8103d1a:	041b      	lsls	r3, r3, #16
 8103d1c:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d28:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d2a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	695b      	ldr	r3, [r3, #20]
 8103d32:	687a      	ldr	r2, [r7, #4]
 8103d34:	6812      	ldr	r2, [r2, #0]
 8103d36:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103d3a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103d3e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	681a      	ldr	r2, [r3, #0]
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	681b      	ldr	r3, [r3, #0]
 8103d4a:	f042 0201 	orr.w	r2, r2, #1
 8103d4e:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	2200      	movs	r2, #0
 8103d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	2220      	movs	r2, #32
 8103d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	2220      	movs	r2, #32
 8103d60:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8103d62:	2300      	movs	r3, #0
}
 8103d64:	4618      	mov	r0, r3
 8103d66:	3708      	adds	r7, #8
 8103d68:	46bd      	mov	sp, r7
 8103d6a:	bd80      	pop	{r7, pc}

08103d6c <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103d6c:	b580      	push	{r7, lr}
 8103d6e:	b084      	sub	sp, #16
 8103d70:	af00      	add	r7, sp, #0
 8103d72:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	691b      	ldr	r3, [r3, #16]
 8103d7a:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8103d7c:	68fb      	ldr	r3, [r7, #12]
 8103d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d00a      	beq.n	8103d9c <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	2280      	movs	r2, #128	@ 0x80
 8103d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	681b      	ldr	r3, [r3, #0]
 8103d90:	691a      	ldr	r2, [r3, #16]
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103d9a:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8103d9c:	68fb      	ldr	r3, [r7, #12]
 8103d9e:	f003 0301 	and.w	r3, r3, #1
 8103da2:	2b00      	cmp	r3, #0
 8103da4:	d01c      	beq.n	8103de0 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	2222      	movs	r2, #34	@ 0x22
 8103daa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103db0:	3301      	adds	r3, #1
 8103db2:	b29a      	uxth	r2, r3
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	68da      	ldr	r2, [r3, #12]
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103dc2:	b2d2      	uxtb	r2, r2
 8103dc4:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103dca:	1c5a      	adds	r2, r3, #1
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	691a      	ldr	r2, [r3, #16]
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	f042 0201 	orr.w	r2, r2, #1
 8103dde:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	f003 0302 	and.w	r3, r3, #2
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d01e      	beq.n	8103e28 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	691a      	ldr	r2, [r3, #16]
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	f042 0202 	orr.w	r2, r2, #2
 8103df8:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	2220      	movs	r2, #32
 8103dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	2200      	movs	r2, #0
 8103e04:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103e0e:	425b      	negs	r3, r3
 8103e10:	441a      	add	r2, r3
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103e1a:	4619      	mov	r1, r3
 8103e1c:	6878      	ldr	r0, [r7, #4]
 8103e1e:	f000 f88c 	bl	8103f3a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	2200      	movs	r2, #0
 8103e26:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103e2e:	2b00      	cmp	r3, #0
 8103e30:	d024      	beq.n	8103e7c <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103e36:	3b01      	subs	r3, #1
 8103e38:	b29a      	uxth	r2, r3
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d107      	bne.n	8103e56 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	681a      	ldr	r2, [r3, #0]
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	f042 0204 	orr.w	r2, r2, #4
 8103e54:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e5a:	781a      	ldrb	r2, [r3, #0]
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	681b      	ldr	r3, [r3, #0]
 8103e60:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e66:	1c5a      	adds	r2, r3, #1
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	691a      	ldr	r2, [r3, #16]
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103e7a:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d014      	beq.n	8103eb0 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	691a      	ldr	r2, [r3, #16]
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103e94:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	2220      	movs	r2, #32
 8103e9a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	2200      	movs	r2, #0
 8103ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	2200      	movs	r2, #0
 8103ea8:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103eaa:	6878      	ldr	r0, [r7, #4]
 8103eac:	f000 f83b 	bl	8103f26 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8103eb0:	68fa      	ldr	r2, [r7, #12]
 8103eb2:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8103eb6:	4013      	ands	r3, r2
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d030      	beq.n	8103f1e <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	68fa      	ldr	r2, [r7, #12]
 8103ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	691b      	ldr	r3, [r3, #16]
 8103ec8:	687a      	ldr	r2, [r7, #4]
 8103eca:	6812      	ldr	r2, [r2, #0]
 8103ecc:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8103ed0:	f043 031c 	orr.w	r3, r3, #28
 8103ed4:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d00e      	beq.n	8103efe <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103ee8:	425b      	negs	r3, r3
 8103eea:	441a      	add	r2, r3
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	2200      	movs	r2, #0
 8103ef4:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	2220      	movs	r2, #32
 8103efa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103efc:	e00c      	b.n	8103f18 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8103efe:	68fb      	ldr	r3, [r7, #12]
 8103f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103f04:	2b00      	cmp	r3, #0
 8103f06:	d107      	bne.n	8103f18 <HAL_CEC_IRQHandler+0x1ac>
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8103f0e:	2b00      	cmp	r3, #0
 8103f10:	d002      	beq.n	8103f18 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	2220      	movs	r2, #32
 8103f16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103f18:	6878      	ldr	r0, [r7, #4]
 8103f1a:	f000 f819 	bl	8103f50 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8103f1e:	bf00      	nop
 8103f20:	3710      	adds	r7, #16
 8103f22:	46bd      	mov	sp, r7
 8103f24:	bd80      	pop	{r7, pc}

08103f26 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103f26:	b480      	push	{r7}
 8103f28:	b083      	sub	sp, #12
 8103f2a:	af00      	add	r7, sp, #0
 8103f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8103f2e:	bf00      	nop
 8103f30:	370c      	adds	r7, #12
 8103f32:	46bd      	mov	sp, r7
 8103f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f38:	4770      	bx	lr

08103f3a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103f3a:	b480      	push	{r7}
 8103f3c:	b083      	sub	sp, #12
 8103f3e:	af00      	add	r7, sp, #0
 8103f40:	6078      	str	r0, [r7, #4]
 8103f42:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103f44:	bf00      	nop
 8103f46:	370c      	adds	r7, #12
 8103f48:	46bd      	mov	sp, r7
 8103f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f4e:	4770      	bx	lr

08103f50 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8103f50:	b480      	push	{r7}
 8103f52:	b083      	sub	sp, #12
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103f58:	bf00      	nop
 8103f5a:	370c      	adds	r7, #12
 8103f5c:	46bd      	mov	sp, r7
 8103f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f62:	4770      	bx	lr

08103f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103f64:	b480      	push	{r7}
 8103f66:	b085      	sub	sp, #20
 8103f68:	af00      	add	r7, sp, #0
 8103f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	f003 0307 	and.w	r3, r3, #7
 8103f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103f74:	4b0c      	ldr	r3, [pc, #48]	@ (8103fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8103f76:	68db      	ldr	r3, [r3, #12]
 8103f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103f7a:	68ba      	ldr	r2, [r7, #8]
 8103f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103f80:	4013      	ands	r3, r2
 8103f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103f88:	68bb      	ldr	r3, [r7, #8]
 8103f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103f96:	4a04      	ldr	r2, [pc, #16]	@ (8103fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8103f98:	68bb      	ldr	r3, [r7, #8]
 8103f9a:	60d3      	str	r3, [r2, #12]
}
 8103f9c:	bf00      	nop
 8103f9e:	3714      	adds	r7, #20
 8103fa0:	46bd      	mov	sp, r7
 8103fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa6:	4770      	bx	lr
 8103fa8:	e000ed00 	.word	0xe000ed00

08103fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103fac:	b480      	push	{r7}
 8103fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103fb0:	4b04      	ldr	r3, [pc, #16]	@ (8103fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8103fb2:	68db      	ldr	r3, [r3, #12]
 8103fb4:	0a1b      	lsrs	r3, r3, #8
 8103fb6:	f003 0307 	and.w	r3, r3, #7
}
 8103fba:	4618      	mov	r0, r3
 8103fbc:	46bd      	mov	sp, r7
 8103fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc2:	4770      	bx	lr
 8103fc4:	e000ed00 	.word	0xe000ed00

08103fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103fc8:	b480      	push	{r7}
 8103fca:	b083      	sub	sp, #12
 8103fcc:	af00      	add	r7, sp, #0
 8103fce:	4603      	mov	r3, r0
 8103fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	db0b      	blt.n	8103ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103fda:	88fb      	ldrh	r3, [r7, #6]
 8103fdc:	f003 021f 	and.w	r2, r3, #31
 8103fe0:	4907      	ldr	r1, [pc, #28]	@ (8104000 <__NVIC_EnableIRQ+0x38>)
 8103fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103fe6:	095b      	lsrs	r3, r3, #5
 8103fe8:	2001      	movs	r0, #1
 8103fea:	fa00 f202 	lsl.w	r2, r0, r2
 8103fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103ff2:	bf00      	nop
 8103ff4:	370c      	adds	r7, #12
 8103ff6:	46bd      	mov	sp, r7
 8103ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ffc:	4770      	bx	lr
 8103ffe:	bf00      	nop
 8104000:	e000e100 	.word	0xe000e100

08104004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104004:	b480      	push	{r7}
 8104006:	b083      	sub	sp, #12
 8104008:	af00      	add	r7, sp, #0
 810400a:	4603      	mov	r3, r0
 810400c:	6039      	str	r1, [r7, #0]
 810400e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104014:	2b00      	cmp	r3, #0
 8104016:	db0a      	blt.n	810402e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104018:	683b      	ldr	r3, [r7, #0]
 810401a:	b2da      	uxtb	r2, r3
 810401c:	490c      	ldr	r1, [pc, #48]	@ (8104050 <__NVIC_SetPriority+0x4c>)
 810401e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104022:	0112      	lsls	r2, r2, #4
 8104024:	b2d2      	uxtb	r2, r2
 8104026:	440b      	add	r3, r1
 8104028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810402c:	e00a      	b.n	8104044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810402e:	683b      	ldr	r3, [r7, #0]
 8104030:	b2da      	uxtb	r2, r3
 8104032:	4908      	ldr	r1, [pc, #32]	@ (8104054 <__NVIC_SetPriority+0x50>)
 8104034:	88fb      	ldrh	r3, [r7, #6]
 8104036:	f003 030f 	and.w	r3, r3, #15
 810403a:	3b04      	subs	r3, #4
 810403c:	0112      	lsls	r2, r2, #4
 810403e:	b2d2      	uxtb	r2, r2
 8104040:	440b      	add	r3, r1
 8104042:	761a      	strb	r2, [r3, #24]
}
 8104044:	bf00      	nop
 8104046:	370c      	adds	r7, #12
 8104048:	46bd      	mov	sp, r7
 810404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810404e:	4770      	bx	lr
 8104050:	e000e100 	.word	0xe000e100
 8104054:	e000ed00 	.word	0xe000ed00

08104058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104058:	b480      	push	{r7}
 810405a:	b089      	sub	sp, #36	@ 0x24
 810405c:	af00      	add	r7, sp, #0
 810405e:	60f8      	str	r0, [r7, #12]
 8104060:	60b9      	str	r1, [r7, #8]
 8104062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	f003 0307 	and.w	r3, r3, #7
 810406a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810406c:	69fb      	ldr	r3, [r7, #28]
 810406e:	f1c3 0307 	rsb	r3, r3, #7
 8104072:	2b04      	cmp	r3, #4
 8104074:	bf28      	it	cs
 8104076:	2304      	movcs	r3, #4
 8104078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810407a:	69fb      	ldr	r3, [r7, #28]
 810407c:	3304      	adds	r3, #4
 810407e:	2b06      	cmp	r3, #6
 8104080:	d902      	bls.n	8104088 <NVIC_EncodePriority+0x30>
 8104082:	69fb      	ldr	r3, [r7, #28]
 8104084:	3b03      	subs	r3, #3
 8104086:	e000      	b.n	810408a <NVIC_EncodePriority+0x32>
 8104088:	2300      	movs	r3, #0
 810408a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810408c:	f04f 32ff 	mov.w	r2, #4294967295
 8104090:	69bb      	ldr	r3, [r7, #24]
 8104092:	fa02 f303 	lsl.w	r3, r2, r3
 8104096:	43da      	mvns	r2, r3
 8104098:	68bb      	ldr	r3, [r7, #8]
 810409a:	401a      	ands	r2, r3
 810409c:	697b      	ldr	r3, [r7, #20]
 810409e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81040a0:	f04f 31ff 	mov.w	r1, #4294967295
 81040a4:	697b      	ldr	r3, [r7, #20]
 81040a6:	fa01 f303 	lsl.w	r3, r1, r3
 81040aa:	43d9      	mvns	r1, r3
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81040b0:	4313      	orrs	r3, r2
         );
}
 81040b2:	4618      	mov	r0, r3
 81040b4:	3724      	adds	r7, #36	@ 0x24
 81040b6:	46bd      	mov	sp, r7
 81040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040bc:	4770      	bx	lr
	...

081040c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81040c0:	b580      	push	{r7, lr}
 81040c2:	b082      	sub	sp, #8
 81040c4:	af00      	add	r7, sp, #0
 81040c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	3b01      	subs	r3, #1
 81040cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81040d0:	d301      	bcc.n	81040d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81040d2:	2301      	movs	r3, #1
 81040d4:	e00f      	b.n	81040f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81040d6:	4a0a      	ldr	r2, [pc, #40]	@ (8104100 <SysTick_Config+0x40>)
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	3b01      	subs	r3, #1
 81040dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81040de:	210f      	movs	r1, #15
 81040e0:	f04f 30ff 	mov.w	r0, #4294967295
 81040e4:	f7ff ff8e 	bl	8104004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81040e8:	4b05      	ldr	r3, [pc, #20]	@ (8104100 <SysTick_Config+0x40>)
 81040ea:	2200      	movs	r2, #0
 81040ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81040ee:	4b04      	ldr	r3, [pc, #16]	@ (8104100 <SysTick_Config+0x40>)
 81040f0:	2207      	movs	r2, #7
 81040f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81040f4:	2300      	movs	r3, #0
}
 81040f6:	4618      	mov	r0, r3
 81040f8:	3708      	adds	r7, #8
 81040fa:	46bd      	mov	sp, r7
 81040fc:	bd80      	pop	{r7, pc}
 81040fe:	bf00      	nop
 8104100:	e000e010 	.word	0xe000e010

08104104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104104:	b580      	push	{r7, lr}
 8104106:	b082      	sub	sp, #8
 8104108:	af00      	add	r7, sp, #0
 810410a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810410c:	6878      	ldr	r0, [r7, #4]
 810410e:	f7ff ff29 	bl	8103f64 <__NVIC_SetPriorityGrouping>
}
 8104112:	bf00      	nop
 8104114:	3708      	adds	r7, #8
 8104116:	46bd      	mov	sp, r7
 8104118:	bd80      	pop	{r7, pc}

0810411a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810411a:	b580      	push	{r7, lr}
 810411c:	b086      	sub	sp, #24
 810411e:	af00      	add	r7, sp, #0
 8104120:	4603      	mov	r3, r0
 8104122:	60b9      	str	r1, [r7, #8]
 8104124:	607a      	str	r2, [r7, #4]
 8104126:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104128:	f7ff ff40 	bl	8103fac <__NVIC_GetPriorityGrouping>
 810412c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810412e:	687a      	ldr	r2, [r7, #4]
 8104130:	68b9      	ldr	r1, [r7, #8]
 8104132:	6978      	ldr	r0, [r7, #20]
 8104134:	f7ff ff90 	bl	8104058 <NVIC_EncodePriority>
 8104138:	4602      	mov	r2, r0
 810413a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810413e:	4611      	mov	r1, r2
 8104140:	4618      	mov	r0, r3
 8104142:	f7ff ff5f 	bl	8104004 <__NVIC_SetPriority>
}
 8104146:	bf00      	nop
 8104148:	3718      	adds	r7, #24
 810414a:	46bd      	mov	sp, r7
 810414c:	bd80      	pop	{r7, pc}

0810414e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810414e:	b580      	push	{r7, lr}
 8104150:	b082      	sub	sp, #8
 8104152:	af00      	add	r7, sp, #0
 8104154:	4603      	mov	r3, r0
 8104156:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810415c:	4618      	mov	r0, r3
 810415e:	f7ff ff33 	bl	8103fc8 <__NVIC_EnableIRQ>
}
 8104162:	bf00      	nop
 8104164:	3708      	adds	r7, #8
 8104166:	46bd      	mov	sp, r7
 8104168:	bd80      	pop	{r7, pc}

0810416a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810416a:	b580      	push	{r7, lr}
 810416c:	b082      	sub	sp, #8
 810416e:	af00      	add	r7, sp, #0
 8104170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104172:	6878      	ldr	r0, [r7, #4]
 8104174:	f7ff ffa4 	bl	81040c0 <SysTick_Config>
 8104178:	4603      	mov	r3, r0
}
 810417a:	4618      	mov	r0, r3
 810417c:	3708      	adds	r7, #8
 810417e:	46bd      	mov	sp, r7
 8104180:	bd80      	pop	{r7, pc}
	...

08104184 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104184:	b480      	push	{r7}
 8104186:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104188:	4b06      	ldr	r3, [pc, #24]	@ (81041a4 <HAL_GetCurrentCPUID+0x20>)
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8104190:	2b70      	cmp	r3, #112	@ 0x70
 8104192:	d101      	bne.n	8104198 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8104194:	2303      	movs	r3, #3
 8104196:	e000      	b.n	810419a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8104198:	2301      	movs	r3, #1
  }
}
 810419a:	4618      	mov	r0, r3
 810419c:	46bd      	mov	sp, r7
 810419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041a2:	4770      	bx	lr
 81041a4:	e000ed00 	.word	0xe000ed00

081041a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81041a8:	b580      	push	{r7, lr}
 81041aa:	b086      	sub	sp, #24
 81041ac:	af00      	add	r7, sp, #0
 81041ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81041b0:	f7fe fcb0 	bl	8102b14 <HAL_GetTick>
 81041b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	2b00      	cmp	r3, #0
 81041ba:	d101      	bne.n	81041c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81041bc:	2301      	movs	r3, #1
 81041be:	e314      	b.n	81047ea <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	4a66      	ldr	r2, [pc, #408]	@ (8104360 <HAL_DMA_Init+0x1b8>)
 81041c6:	4293      	cmp	r3, r2
 81041c8:	d04a      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	4a65      	ldr	r2, [pc, #404]	@ (8104364 <HAL_DMA_Init+0x1bc>)
 81041d0:	4293      	cmp	r3, r2
 81041d2:	d045      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	4a63      	ldr	r2, [pc, #396]	@ (8104368 <HAL_DMA_Init+0x1c0>)
 81041da:	4293      	cmp	r3, r2
 81041dc:	d040      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	4a62      	ldr	r2, [pc, #392]	@ (810436c <HAL_DMA_Init+0x1c4>)
 81041e4:	4293      	cmp	r3, r2
 81041e6:	d03b      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	4a60      	ldr	r2, [pc, #384]	@ (8104370 <HAL_DMA_Init+0x1c8>)
 81041ee:	4293      	cmp	r3, r2
 81041f0:	d036      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	4a5f      	ldr	r2, [pc, #380]	@ (8104374 <HAL_DMA_Init+0x1cc>)
 81041f8:	4293      	cmp	r3, r2
 81041fa:	d031      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	4a5d      	ldr	r2, [pc, #372]	@ (8104378 <HAL_DMA_Init+0x1d0>)
 8104202:	4293      	cmp	r3, r2
 8104204:	d02c      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	4a5c      	ldr	r2, [pc, #368]	@ (810437c <HAL_DMA_Init+0x1d4>)
 810420c:	4293      	cmp	r3, r2
 810420e:	d027      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	4a5a      	ldr	r2, [pc, #360]	@ (8104380 <HAL_DMA_Init+0x1d8>)
 8104216:	4293      	cmp	r3, r2
 8104218:	d022      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	681b      	ldr	r3, [r3, #0]
 810421e:	4a59      	ldr	r2, [pc, #356]	@ (8104384 <HAL_DMA_Init+0x1dc>)
 8104220:	4293      	cmp	r3, r2
 8104222:	d01d      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	4a57      	ldr	r2, [pc, #348]	@ (8104388 <HAL_DMA_Init+0x1e0>)
 810422a:	4293      	cmp	r3, r2
 810422c:	d018      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	4a56      	ldr	r2, [pc, #344]	@ (810438c <HAL_DMA_Init+0x1e4>)
 8104234:	4293      	cmp	r3, r2
 8104236:	d013      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	681b      	ldr	r3, [r3, #0]
 810423c:	4a54      	ldr	r2, [pc, #336]	@ (8104390 <HAL_DMA_Init+0x1e8>)
 810423e:	4293      	cmp	r3, r2
 8104240:	d00e      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	4a53      	ldr	r2, [pc, #332]	@ (8104394 <HAL_DMA_Init+0x1ec>)
 8104248:	4293      	cmp	r3, r2
 810424a:	d009      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	4a51      	ldr	r2, [pc, #324]	@ (8104398 <HAL_DMA_Init+0x1f0>)
 8104252:	4293      	cmp	r3, r2
 8104254:	d004      	beq.n	8104260 <HAL_DMA_Init+0xb8>
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	4a50      	ldr	r2, [pc, #320]	@ (810439c <HAL_DMA_Init+0x1f4>)
 810425c:	4293      	cmp	r3, r2
 810425e:	d101      	bne.n	8104264 <HAL_DMA_Init+0xbc>
 8104260:	2301      	movs	r3, #1
 8104262:	e000      	b.n	8104266 <HAL_DMA_Init+0xbe>
 8104264:	2300      	movs	r3, #0
 8104266:	2b00      	cmp	r3, #0
 8104268:	f000 813b 	beq.w	81044e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	2202      	movs	r2, #2
 8104270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	2200      	movs	r2, #0
 8104278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a37      	ldr	r2, [pc, #220]	@ (8104360 <HAL_DMA_Init+0x1b8>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d04a      	beq.n	810431c <HAL_DMA_Init+0x174>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	4a36      	ldr	r2, [pc, #216]	@ (8104364 <HAL_DMA_Init+0x1bc>)
 810428c:	4293      	cmp	r3, r2
 810428e:	d045      	beq.n	810431c <HAL_DMA_Init+0x174>
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	4a34      	ldr	r2, [pc, #208]	@ (8104368 <HAL_DMA_Init+0x1c0>)
 8104296:	4293      	cmp	r3, r2
 8104298:	d040      	beq.n	810431c <HAL_DMA_Init+0x174>
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	4a33      	ldr	r2, [pc, #204]	@ (810436c <HAL_DMA_Init+0x1c4>)
 81042a0:	4293      	cmp	r3, r2
 81042a2:	d03b      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a31      	ldr	r2, [pc, #196]	@ (8104370 <HAL_DMA_Init+0x1c8>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d036      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a30      	ldr	r2, [pc, #192]	@ (8104374 <HAL_DMA_Init+0x1cc>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d031      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a2e      	ldr	r2, [pc, #184]	@ (8104378 <HAL_DMA_Init+0x1d0>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d02c      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a2d      	ldr	r2, [pc, #180]	@ (810437c <HAL_DMA_Init+0x1d4>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d027      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a2b      	ldr	r2, [pc, #172]	@ (8104380 <HAL_DMA_Init+0x1d8>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d022      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a2a      	ldr	r2, [pc, #168]	@ (8104384 <HAL_DMA_Init+0x1dc>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d01d      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a28      	ldr	r2, [pc, #160]	@ (8104388 <HAL_DMA_Init+0x1e0>)
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d018      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	4a27      	ldr	r2, [pc, #156]	@ (810438c <HAL_DMA_Init+0x1e4>)
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d013      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a25      	ldr	r2, [pc, #148]	@ (8104390 <HAL_DMA_Init+0x1e8>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d00e      	beq.n	810431c <HAL_DMA_Init+0x174>
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a24      	ldr	r2, [pc, #144]	@ (8104394 <HAL_DMA_Init+0x1ec>)
 8104304:	4293      	cmp	r3, r2
 8104306:	d009      	beq.n	810431c <HAL_DMA_Init+0x174>
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	4a22      	ldr	r2, [pc, #136]	@ (8104398 <HAL_DMA_Init+0x1f0>)
 810430e:	4293      	cmp	r3, r2
 8104310:	d004      	beq.n	810431c <HAL_DMA_Init+0x174>
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	4a21      	ldr	r2, [pc, #132]	@ (810439c <HAL_DMA_Init+0x1f4>)
 8104318:	4293      	cmp	r3, r2
 810431a:	d108      	bne.n	810432e <HAL_DMA_Init+0x186>
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	681a      	ldr	r2, [r3, #0]
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	f022 0201 	bic.w	r2, r2, #1
 810432a:	601a      	str	r2, [r3, #0]
 810432c:	e007      	b.n	810433e <HAL_DMA_Init+0x196>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	681a      	ldr	r2, [r3, #0]
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	f022 0201 	bic.w	r2, r2, #1
 810433c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810433e:	e02f      	b.n	81043a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104340:	f7fe fbe8 	bl	8102b14 <HAL_GetTick>
 8104344:	4602      	mov	r2, r0
 8104346:	693b      	ldr	r3, [r7, #16]
 8104348:	1ad3      	subs	r3, r2, r3
 810434a:	2b05      	cmp	r3, #5
 810434c:	d928      	bls.n	81043a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	2220      	movs	r2, #32
 8104352:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	2203      	movs	r2, #3
 8104358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 810435c:	2301      	movs	r3, #1
 810435e:	e244      	b.n	81047ea <HAL_DMA_Init+0x642>
 8104360:	40020010 	.word	0x40020010
 8104364:	40020028 	.word	0x40020028
 8104368:	40020040 	.word	0x40020040
 810436c:	40020058 	.word	0x40020058
 8104370:	40020070 	.word	0x40020070
 8104374:	40020088 	.word	0x40020088
 8104378:	400200a0 	.word	0x400200a0
 810437c:	400200b8 	.word	0x400200b8
 8104380:	40020410 	.word	0x40020410
 8104384:	40020428 	.word	0x40020428
 8104388:	40020440 	.word	0x40020440
 810438c:	40020458 	.word	0x40020458
 8104390:	40020470 	.word	0x40020470
 8104394:	40020488 	.word	0x40020488
 8104398:	400204a0 	.word	0x400204a0
 810439c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	f003 0301 	and.w	r3, r3, #1
 81043aa:	2b00      	cmp	r3, #0
 81043ac:	d1c8      	bne.n	8104340 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81043b6:	697a      	ldr	r2, [r7, #20]
 81043b8:	4b84      	ldr	r3, [pc, #528]	@ (81045cc <HAL_DMA_Init+0x424>)
 81043ba:	4013      	ands	r3, r2
 81043bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81043c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	691b      	ldr	r3, [r3, #16]
 81043cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81043d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	699b      	ldr	r3, [r3, #24]
 81043d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81043de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	6a1b      	ldr	r3, [r3, #32]
 81043e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81043e6:	697a      	ldr	r2, [r7, #20]
 81043e8:	4313      	orrs	r3, r2
 81043ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81043f0:	2b04      	cmp	r3, #4
 81043f2:	d107      	bne.n	8104404 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81043fc:	4313      	orrs	r3, r2
 81043fe:	697a      	ldr	r2, [r7, #20]
 8104400:	4313      	orrs	r3, r2
 8104402:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104404:	4b72      	ldr	r3, [pc, #456]	@ (81045d0 <HAL_DMA_Init+0x428>)
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	0c1b      	lsrs	r3, r3, #16
 810440a:	041b      	lsls	r3, r3, #16
 810440c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104410:	d328      	bcc.n	8104464 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	685b      	ldr	r3, [r3, #4]
 8104416:	2b28      	cmp	r3, #40	@ 0x28
 8104418:	d903      	bls.n	8104422 <HAL_DMA_Init+0x27a>
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	685b      	ldr	r3, [r3, #4]
 810441e:	2b2e      	cmp	r3, #46	@ 0x2e
 8104420:	d917      	bls.n	8104452 <HAL_DMA_Init+0x2aa>
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	685b      	ldr	r3, [r3, #4]
 8104426:	2b3e      	cmp	r3, #62	@ 0x3e
 8104428:	d903      	bls.n	8104432 <HAL_DMA_Init+0x28a>
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	685b      	ldr	r3, [r3, #4]
 810442e:	2b42      	cmp	r3, #66	@ 0x42
 8104430:	d90f      	bls.n	8104452 <HAL_DMA_Init+0x2aa>
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	685b      	ldr	r3, [r3, #4]
 8104436:	2b46      	cmp	r3, #70	@ 0x46
 8104438:	d903      	bls.n	8104442 <HAL_DMA_Init+0x29a>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	685b      	ldr	r3, [r3, #4]
 810443e:	2b48      	cmp	r3, #72	@ 0x48
 8104440:	d907      	bls.n	8104452 <HAL_DMA_Init+0x2aa>
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	685b      	ldr	r3, [r3, #4]
 8104446:	2b4e      	cmp	r3, #78	@ 0x4e
 8104448:	d905      	bls.n	8104456 <HAL_DMA_Init+0x2ae>
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	685b      	ldr	r3, [r3, #4]
 810444e:	2b52      	cmp	r3, #82	@ 0x52
 8104450:	d801      	bhi.n	8104456 <HAL_DMA_Init+0x2ae>
 8104452:	2301      	movs	r3, #1
 8104454:	e000      	b.n	8104458 <HAL_DMA_Init+0x2b0>
 8104456:	2300      	movs	r3, #0
 8104458:	2b00      	cmp	r3, #0
 810445a:	d003      	beq.n	8104464 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 810445c:	697b      	ldr	r3, [r7, #20]
 810445e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104462:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	697a      	ldr	r2, [r7, #20]
 810446a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	695b      	ldr	r3, [r3, #20]
 8104472:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8104474:	697b      	ldr	r3, [r7, #20]
 8104476:	f023 0307 	bic.w	r3, r3, #7
 810447a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104480:	697a      	ldr	r2, [r7, #20]
 8104482:	4313      	orrs	r3, r2
 8104484:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810448a:	2b04      	cmp	r3, #4
 810448c:	d117      	bne.n	81044be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104492:	697a      	ldr	r2, [r7, #20]
 8104494:	4313      	orrs	r3, r2
 8104496:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810449c:	2b00      	cmp	r3, #0
 810449e:	d00e      	beq.n	81044be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81044a0:	6878      	ldr	r0, [r7, #4]
 81044a2:	f000 fa8d 	bl	81049c0 <DMA_CheckFifoParam>
 81044a6:	4603      	mov	r3, r0
 81044a8:	2b00      	cmp	r3, #0
 81044aa:	d008      	beq.n	81044be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	2240      	movs	r2, #64	@ 0x40
 81044b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	2201      	movs	r2, #1
 81044b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 81044ba:	2301      	movs	r3, #1
 81044bc:	e195      	b.n	81047ea <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	681b      	ldr	r3, [r3, #0]
 81044c2:	697a      	ldr	r2, [r7, #20]
 81044c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81044c6:	6878      	ldr	r0, [r7, #4]
 81044c8:	f000 f9c8 	bl	810485c <DMA_CalcBaseAndBitshift>
 81044cc:	4603      	mov	r3, r0
 81044ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81044d4:	f003 031f 	and.w	r3, r3, #31
 81044d8:	223f      	movs	r2, #63	@ 0x3f
 81044da:	409a      	lsls	r2, r3
 81044dc:	68bb      	ldr	r3, [r7, #8]
 81044de:	609a      	str	r2, [r3, #8]
 81044e0:	e0cb      	b.n	810467a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	4a3b      	ldr	r2, [pc, #236]	@ (81045d4 <HAL_DMA_Init+0x42c>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d022      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	4a39      	ldr	r2, [pc, #228]	@ (81045d8 <HAL_DMA_Init+0x430>)
 81044f2:	4293      	cmp	r3, r2
 81044f4:	d01d      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a38      	ldr	r2, [pc, #224]	@ (81045dc <HAL_DMA_Init+0x434>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d018      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	4a36      	ldr	r2, [pc, #216]	@ (81045e0 <HAL_DMA_Init+0x438>)
 8104506:	4293      	cmp	r3, r2
 8104508:	d013      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	4a35      	ldr	r2, [pc, #212]	@ (81045e4 <HAL_DMA_Init+0x43c>)
 8104510:	4293      	cmp	r3, r2
 8104512:	d00e      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	4a33      	ldr	r2, [pc, #204]	@ (81045e8 <HAL_DMA_Init+0x440>)
 810451a:	4293      	cmp	r3, r2
 810451c:	d009      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	4a32      	ldr	r2, [pc, #200]	@ (81045ec <HAL_DMA_Init+0x444>)
 8104524:	4293      	cmp	r3, r2
 8104526:	d004      	beq.n	8104532 <HAL_DMA_Init+0x38a>
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	4a30      	ldr	r2, [pc, #192]	@ (81045f0 <HAL_DMA_Init+0x448>)
 810452e:	4293      	cmp	r3, r2
 8104530:	d101      	bne.n	8104536 <HAL_DMA_Init+0x38e>
 8104532:	2301      	movs	r3, #1
 8104534:	e000      	b.n	8104538 <HAL_DMA_Init+0x390>
 8104536:	2300      	movs	r3, #0
 8104538:	2b00      	cmp	r3, #0
 810453a:	f000 8095 	beq.w	8104668 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	4a24      	ldr	r2, [pc, #144]	@ (81045d4 <HAL_DMA_Init+0x42c>)
 8104544:	4293      	cmp	r3, r2
 8104546:	d021      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	4a22      	ldr	r2, [pc, #136]	@ (81045d8 <HAL_DMA_Init+0x430>)
 810454e:	4293      	cmp	r3, r2
 8104550:	d01c      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	4a21      	ldr	r2, [pc, #132]	@ (81045dc <HAL_DMA_Init+0x434>)
 8104558:	4293      	cmp	r3, r2
 810455a:	d017      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	4a1f      	ldr	r2, [pc, #124]	@ (81045e0 <HAL_DMA_Init+0x438>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d012      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	4a1e      	ldr	r2, [pc, #120]	@ (81045e4 <HAL_DMA_Init+0x43c>)
 810456c:	4293      	cmp	r3, r2
 810456e:	d00d      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	4a1c      	ldr	r2, [pc, #112]	@ (81045e8 <HAL_DMA_Init+0x440>)
 8104576:	4293      	cmp	r3, r2
 8104578:	d008      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	4a1b      	ldr	r2, [pc, #108]	@ (81045ec <HAL_DMA_Init+0x444>)
 8104580:	4293      	cmp	r3, r2
 8104582:	d003      	beq.n	810458c <HAL_DMA_Init+0x3e4>
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	4a19      	ldr	r2, [pc, #100]	@ (81045f0 <HAL_DMA_Init+0x448>)
 810458a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	2202      	movs	r2, #2
 8104590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	2200      	movs	r2, #0
 8104598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81045a4:	697b      	ldr	r3, [r7, #20]
 81045a6:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 81045aa:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 81045ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	689b      	ldr	r3, [r3, #8]
 81045b4:	2b40      	cmp	r3, #64	@ 0x40
 81045b6:	d01d      	beq.n	81045f4 <HAL_DMA_Init+0x44c>
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	689b      	ldr	r3, [r3, #8]
 81045bc:	2b80      	cmp	r3, #128	@ 0x80
 81045be:	d102      	bne.n	81045c6 <HAL_DMA_Init+0x41e>
 81045c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81045c4:	e017      	b.n	81045f6 <HAL_DMA_Init+0x44e>
 81045c6:	2300      	movs	r3, #0
 81045c8:	e015      	b.n	81045f6 <HAL_DMA_Init+0x44e>
 81045ca:	bf00      	nop
 81045cc:	fe10803f 	.word	0xfe10803f
 81045d0:	5c001000 	.word	0x5c001000
 81045d4:	58025408 	.word	0x58025408
 81045d8:	5802541c 	.word	0x5802541c
 81045dc:	58025430 	.word	0x58025430
 81045e0:	58025444 	.word	0x58025444
 81045e4:	58025458 	.word	0x58025458
 81045e8:	5802546c 	.word	0x5802546c
 81045ec:	58025480 	.word	0x58025480
 81045f0:	58025494 	.word	0x58025494
 81045f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81045f6:	687a      	ldr	r2, [r7, #4]
 81045f8:	68d2      	ldr	r2, [r2, #12]
 81045fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81045fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	691b      	ldr	r3, [r3, #16]
 8104602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	695b      	ldr	r3, [r3, #20]
 810460a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810460c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	699b      	ldr	r3, [r3, #24]
 8104612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	69db      	ldr	r3, [r3, #28]
 810461a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810461c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	6a1b      	ldr	r3, [r3, #32]
 8104622:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104624:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104626:	697a      	ldr	r2, [r7, #20]
 8104628:	4313      	orrs	r3, r2
 810462a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	697a      	ldr	r2, [r7, #20]
 8104632:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	681b      	ldr	r3, [r3, #0]
 8104638:	461a      	mov	r2, r3
 810463a:	4b6e      	ldr	r3, [pc, #440]	@ (81047f4 <HAL_DMA_Init+0x64c>)
 810463c:	4413      	add	r3, r2
 810463e:	4a6e      	ldr	r2, [pc, #440]	@ (81047f8 <HAL_DMA_Init+0x650>)
 8104640:	fba2 2303 	umull	r2, r3, r2, r3
 8104644:	091b      	lsrs	r3, r3, #4
 8104646:	009a      	lsls	r2, r3, #2
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810464c:	6878      	ldr	r0, [r7, #4]
 810464e:	f000 f905 	bl	810485c <DMA_CalcBaseAndBitshift>
 8104652:	4603      	mov	r3, r0
 8104654:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810465a:	f003 031f 	and.w	r3, r3, #31
 810465e:	2201      	movs	r2, #1
 8104660:	409a      	lsls	r2, r3
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	605a      	str	r2, [r3, #4]
 8104666:	e008      	b.n	810467a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	2240      	movs	r2, #64	@ 0x40
 810466c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	2203      	movs	r2, #3
 8104672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8104676:	2301      	movs	r3, #1
 8104678:	e0b7      	b.n	81047ea <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	4a5f      	ldr	r2, [pc, #380]	@ (81047fc <HAL_DMA_Init+0x654>)
 8104680:	4293      	cmp	r3, r2
 8104682:	d072      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	4a5d      	ldr	r2, [pc, #372]	@ (8104800 <HAL_DMA_Init+0x658>)
 810468a:	4293      	cmp	r3, r2
 810468c:	d06d      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	4a5c      	ldr	r2, [pc, #368]	@ (8104804 <HAL_DMA_Init+0x65c>)
 8104694:	4293      	cmp	r3, r2
 8104696:	d068      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	4a5a      	ldr	r2, [pc, #360]	@ (8104808 <HAL_DMA_Init+0x660>)
 810469e:	4293      	cmp	r3, r2
 81046a0:	d063      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	4a59      	ldr	r2, [pc, #356]	@ (810480c <HAL_DMA_Init+0x664>)
 81046a8:	4293      	cmp	r3, r2
 81046aa:	d05e      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	4a57      	ldr	r2, [pc, #348]	@ (8104810 <HAL_DMA_Init+0x668>)
 81046b2:	4293      	cmp	r3, r2
 81046b4:	d059      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	4a56      	ldr	r2, [pc, #344]	@ (8104814 <HAL_DMA_Init+0x66c>)
 81046bc:	4293      	cmp	r3, r2
 81046be:	d054      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	4a54      	ldr	r2, [pc, #336]	@ (8104818 <HAL_DMA_Init+0x670>)
 81046c6:	4293      	cmp	r3, r2
 81046c8:	d04f      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	4a53      	ldr	r2, [pc, #332]	@ (810481c <HAL_DMA_Init+0x674>)
 81046d0:	4293      	cmp	r3, r2
 81046d2:	d04a      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	4a51      	ldr	r2, [pc, #324]	@ (8104820 <HAL_DMA_Init+0x678>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d045      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4a50      	ldr	r2, [pc, #320]	@ (8104824 <HAL_DMA_Init+0x67c>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d040      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	4a4e      	ldr	r2, [pc, #312]	@ (8104828 <HAL_DMA_Init+0x680>)
 81046ee:	4293      	cmp	r3, r2
 81046f0:	d03b      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	4a4d      	ldr	r2, [pc, #308]	@ (810482c <HAL_DMA_Init+0x684>)
 81046f8:	4293      	cmp	r3, r2
 81046fa:	d036      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	4a4b      	ldr	r2, [pc, #300]	@ (8104830 <HAL_DMA_Init+0x688>)
 8104702:	4293      	cmp	r3, r2
 8104704:	d031      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	4a4a      	ldr	r2, [pc, #296]	@ (8104834 <HAL_DMA_Init+0x68c>)
 810470c:	4293      	cmp	r3, r2
 810470e:	d02c      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	4a48      	ldr	r2, [pc, #288]	@ (8104838 <HAL_DMA_Init+0x690>)
 8104716:	4293      	cmp	r3, r2
 8104718:	d027      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	4a47      	ldr	r2, [pc, #284]	@ (810483c <HAL_DMA_Init+0x694>)
 8104720:	4293      	cmp	r3, r2
 8104722:	d022      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	4a45      	ldr	r2, [pc, #276]	@ (8104840 <HAL_DMA_Init+0x698>)
 810472a:	4293      	cmp	r3, r2
 810472c:	d01d      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	4a44      	ldr	r2, [pc, #272]	@ (8104844 <HAL_DMA_Init+0x69c>)
 8104734:	4293      	cmp	r3, r2
 8104736:	d018      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	4a42      	ldr	r2, [pc, #264]	@ (8104848 <HAL_DMA_Init+0x6a0>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d013      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	4a41      	ldr	r2, [pc, #260]	@ (810484c <HAL_DMA_Init+0x6a4>)
 8104748:	4293      	cmp	r3, r2
 810474a:	d00e      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	4a3f      	ldr	r2, [pc, #252]	@ (8104850 <HAL_DMA_Init+0x6a8>)
 8104752:	4293      	cmp	r3, r2
 8104754:	d009      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	4a3e      	ldr	r2, [pc, #248]	@ (8104854 <HAL_DMA_Init+0x6ac>)
 810475c:	4293      	cmp	r3, r2
 810475e:	d004      	beq.n	810476a <HAL_DMA_Init+0x5c2>
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	4a3c      	ldr	r2, [pc, #240]	@ (8104858 <HAL_DMA_Init+0x6b0>)
 8104766:	4293      	cmp	r3, r2
 8104768:	d101      	bne.n	810476e <HAL_DMA_Init+0x5c6>
 810476a:	2301      	movs	r3, #1
 810476c:	e000      	b.n	8104770 <HAL_DMA_Init+0x5c8>
 810476e:	2300      	movs	r3, #0
 8104770:	2b00      	cmp	r3, #0
 8104772:	d032      	beq.n	81047da <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8104774:	6878      	ldr	r0, [r7, #4]
 8104776:	f000 f99f 	bl	8104ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	689b      	ldr	r3, [r3, #8]
 810477e:	2b80      	cmp	r3, #128	@ 0x80
 8104780:	d102      	bne.n	8104788 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	2200      	movs	r2, #0
 8104786:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	685a      	ldr	r2, [r3, #4]
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104790:	b2d2      	uxtb	r2, r2
 8104792:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104798:	687a      	ldr	r2, [r7, #4]
 810479a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 810479c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810479e:	687b      	ldr	r3, [r7, #4]
 81047a0:	685b      	ldr	r3, [r3, #4]
 81047a2:	2b00      	cmp	r3, #0
 81047a4:	d010      	beq.n	81047c8 <HAL_DMA_Init+0x620>
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	685b      	ldr	r3, [r3, #4]
 81047aa:	2b08      	cmp	r3, #8
 81047ac:	d80c      	bhi.n	81047c8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81047ae:	6878      	ldr	r0, [r7, #4]
 81047b0:	f000 fa1c 	bl	8104bec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81047b8:	2200      	movs	r2, #0
 81047ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81047c0:	687a      	ldr	r2, [r7, #4]
 81047c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81047c4:	605a      	str	r2, [r3, #4]
 81047c6:	e008      	b.n	81047da <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	2200      	movs	r2, #0
 81047cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	2200      	movs	r2, #0
 81047d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	2200      	movs	r2, #0
 81047d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	2200      	movs	r2, #0
 81047de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	2201      	movs	r2, #1
 81047e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 81047e8:	2300      	movs	r3, #0
}
 81047ea:	4618      	mov	r0, r3
 81047ec:	3718      	adds	r7, #24
 81047ee:	46bd      	mov	sp, r7
 81047f0:	bd80      	pop	{r7, pc}
 81047f2:	bf00      	nop
 81047f4:	a7fdabf8 	.word	0xa7fdabf8
 81047f8:	cccccccd 	.word	0xcccccccd
 81047fc:	40020010 	.word	0x40020010
 8104800:	40020028 	.word	0x40020028
 8104804:	40020040 	.word	0x40020040
 8104808:	40020058 	.word	0x40020058
 810480c:	40020070 	.word	0x40020070
 8104810:	40020088 	.word	0x40020088
 8104814:	400200a0 	.word	0x400200a0
 8104818:	400200b8 	.word	0x400200b8
 810481c:	40020410 	.word	0x40020410
 8104820:	40020428 	.word	0x40020428
 8104824:	40020440 	.word	0x40020440
 8104828:	40020458 	.word	0x40020458
 810482c:	40020470 	.word	0x40020470
 8104830:	40020488 	.word	0x40020488
 8104834:	400204a0 	.word	0x400204a0
 8104838:	400204b8 	.word	0x400204b8
 810483c:	58025408 	.word	0x58025408
 8104840:	5802541c 	.word	0x5802541c
 8104844:	58025430 	.word	0x58025430
 8104848:	58025444 	.word	0x58025444
 810484c:	58025458 	.word	0x58025458
 8104850:	5802546c 	.word	0x5802546c
 8104854:	58025480 	.word	0x58025480
 8104858:	58025494 	.word	0x58025494

0810485c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 810485c:	b480      	push	{r7}
 810485e:	b085      	sub	sp, #20
 8104860:	af00      	add	r7, sp, #0
 8104862:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	4a43      	ldr	r2, [pc, #268]	@ (8104978 <DMA_CalcBaseAndBitshift+0x11c>)
 810486a:	4293      	cmp	r3, r2
 810486c:	d04a      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	4a42      	ldr	r2, [pc, #264]	@ (810497c <DMA_CalcBaseAndBitshift+0x120>)
 8104874:	4293      	cmp	r3, r2
 8104876:	d045      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	4a40      	ldr	r2, [pc, #256]	@ (8104980 <DMA_CalcBaseAndBitshift+0x124>)
 810487e:	4293      	cmp	r3, r2
 8104880:	d040      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	4a3f      	ldr	r2, [pc, #252]	@ (8104984 <DMA_CalcBaseAndBitshift+0x128>)
 8104888:	4293      	cmp	r3, r2
 810488a:	d03b      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	4a3d      	ldr	r2, [pc, #244]	@ (8104988 <DMA_CalcBaseAndBitshift+0x12c>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d036      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	4a3c      	ldr	r2, [pc, #240]	@ (810498c <DMA_CalcBaseAndBitshift+0x130>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d031      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	4a3a      	ldr	r2, [pc, #232]	@ (8104990 <DMA_CalcBaseAndBitshift+0x134>)
 81048a6:	4293      	cmp	r3, r2
 81048a8:	d02c      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	4a39      	ldr	r2, [pc, #228]	@ (8104994 <DMA_CalcBaseAndBitshift+0x138>)
 81048b0:	4293      	cmp	r3, r2
 81048b2:	d027      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	4a37      	ldr	r2, [pc, #220]	@ (8104998 <DMA_CalcBaseAndBitshift+0x13c>)
 81048ba:	4293      	cmp	r3, r2
 81048bc:	d022      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a36      	ldr	r2, [pc, #216]	@ (810499c <DMA_CalcBaseAndBitshift+0x140>)
 81048c4:	4293      	cmp	r3, r2
 81048c6:	d01d      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	4a34      	ldr	r2, [pc, #208]	@ (81049a0 <DMA_CalcBaseAndBitshift+0x144>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d018      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	4a33      	ldr	r2, [pc, #204]	@ (81049a4 <DMA_CalcBaseAndBitshift+0x148>)
 81048d8:	4293      	cmp	r3, r2
 81048da:	d013      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	4a31      	ldr	r2, [pc, #196]	@ (81049a8 <DMA_CalcBaseAndBitshift+0x14c>)
 81048e2:	4293      	cmp	r3, r2
 81048e4:	d00e      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4a30      	ldr	r2, [pc, #192]	@ (81049ac <DMA_CalcBaseAndBitshift+0x150>)
 81048ec:	4293      	cmp	r3, r2
 81048ee:	d009      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4a2e      	ldr	r2, [pc, #184]	@ (81049b0 <DMA_CalcBaseAndBitshift+0x154>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d004      	beq.n	8104904 <DMA_CalcBaseAndBitshift+0xa8>
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4a2d      	ldr	r2, [pc, #180]	@ (81049b4 <DMA_CalcBaseAndBitshift+0x158>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d101      	bne.n	8104908 <DMA_CalcBaseAndBitshift+0xac>
 8104904:	2301      	movs	r3, #1
 8104906:	e000      	b.n	810490a <DMA_CalcBaseAndBitshift+0xae>
 8104908:	2300      	movs	r3, #0
 810490a:	2b00      	cmp	r3, #0
 810490c:	d026      	beq.n	810495c <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	681b      	ldr	r3, [r3, #0]
 8104912:	b2db      	uxtb	r3, r3
 8104914:	3b10      	subs	r3, #16
 8104916:	4a28      	ldr	r2, [pc, #160]	@ (81049b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8104918:	fba2 2303 	umull	r2, r3, r2, r3
 810491c:	091b      	lsrs	r3, r3, #4
 810491e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	f003 0307 	and.w	r3, r3, #7
 8104926:	4a25      	ldr	r2, [pc, #148]	@ (81049bc <DMA_CalcBaseAndBitshift+0x160>)
 8104928:	5cd3      	ldrb	r3, [r2, r3]
 810492a:	461a      	mov	r2, r3
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	2b03      	cmp	r3, #3
 8104934:	d909      	bls.n	810494a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 810493e:	f023 0303 	bic.w	r3, r3, #3
 8104942:	1d1a      	adds	r2, r3, #4
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	659a      	str	r2, [r3, #88]	@ 0x58
 8104948:	e00e      	b.n	8104968 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8104952:	f023 0303 	bic.w	r3, r3, #3
 8104956:	687a      	ldr	r2, [r7, #4]
 8104958:	6593      	str	r3, [r2, #88]	@ 0x58
 810495a:	e005      	b.n	8104968 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8104964:	687b      	ldr	r3, [r7, #4]
 8104966:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 810496c:	4618      	mov	r0, r3
 810496e:	3714      	adds	r7, #20
 8104970:	46bd      	mov	sp, r7
 8104972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104976:	4770      	bx	lr
 8104978:	40020010 	.word	0x40020010
 810497c:	40020028 	.word	0x40020028
 8104980:	40020040 	.word	0x40020040
 8104984:	40020058 	.word	0x40020058
 8104988:	40020070 	.word	0x40020070
 810498c:	40020088 	.word	0x40020088
 8104990:	400200a0 	.word	0x400200a0
 8104994:	400200b8 	.word	0x400200b8
 8104998:	40020410 	.word	0x40020410
 810499c:	40020428 	.word	0x40020428
 81049a0:	40020440 	.word	0x40020440
 81049a4:	40020458 	.word	0x40020458
 81049a8:	40020470 	.word	0x40020470
 81049ac:	40020488 	.word	0x40020488
 81049b0:	400204a0 	.word	0x400204a0
 81049b4:	400204b8 	.word	0x400204b8
 81049b8:	aaaaaaab 	.word	0xaaaaaaab
 81049bc:	0810e87c 	.word	0x0810e87c

081049c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 81049c0:	b480      	push	{r7}
 81049c2:	b085      	sub	sp, #20
 81049c4:	af00      	add	r7, sp, #0
 81049c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81049c8:	2300      	movs	r3, #0
 81049ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	699b      	ldr	r3, [r3, #24]
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d120      	bne.n	8104a16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049d8:	2b03      	cmp	r3, #3
 81049da:	d858      	bhi.n	8104a8e <DMA_CheckFifoParam+0xce>
 81049dc:	a201      	add	r2, pc, #4	@ (adr r2, 81049e4 <DMA_CheckFifoParam+0x24>)
 81049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049e2:	bf00      	nop
 81049e4:	081049f5 	.word	0x081049f5
 81049e8:	08104a07 	.word	0x08104a07
 81049ec:	081049f5 	.word	0x081049f5
 81049f0:	08104a8f 	.word	0x08104a8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81049fc:	2b00      	cmp	r3, #0
 81049fe:	d048      	beq.n	8104a92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104a00:	2301      	movs	r3, #1
 8104a02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a04:	e045      	b.n	8104a92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104a0e:	d142      	bne.n	8104a96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104a10:	2301      	movs	r3, #1
 8104a12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a14:	e03f      	b.n	8104a96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	699b      	ldr	r3, [r3, #24]
 8104a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104a1e:	d123      	bne.n	8104a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a24:	2b03      	cmp	r3, #3
 8104a26:	d838      	bhi.n	8104a9a <DMA_CheckFifoParam+0xda>
 8104a28:	a201      	add	r2, pc, #4	@ (adr r2, 8104a30 <DMA_CheckFifoParam+0x70>)
 8104a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a2e:	bf00      	nop
 8104a30:	08104a41 	.word	0x08104a41
 8104a34:	08104a47 	.word	0x08104a47
 8104a38:	08104a41 	.word	0x08104a41
 8104a3c:	08104a59 	.word	0x08104a59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104a40:	2301      	movs	r3, #1
 8104a42:	73fb      	strb	r3, [r7, #15]
        break;
 8104a44:	e030      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d025      	beq.n	8104a9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104a52:	2301      	movs	r3, #1
 8104a54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a56:	e022      	b.n	8104a9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104a60:	d11f      	bne.n	8104aa2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104a62:	2301      	movs	r3, #1
 8104a64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a66:	e01c      	b.n	8104aa2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a6c:	2b02      	cmp	r3, #2
 8104a6e:	d902      	bls.n	8104a76 <DMA_CheckFifoParam+0xb6>
 8104a70:	2b03      	cmp	r3, #3
 8104a72:	d003      	beq.n	8104a7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104a74:	e018      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104a76:	2301      	movs	r3, #1
 8104a78:	73fb      	strb	r3, [r7, #15]
        break;
 8104a7a:	e015      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104a84:	2b00      	cmp	r3, #0
 8104a86:	d00e      	beq.n	8104aa6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104a88:	2301      	movs	r3, #1
 8104a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8104a8c:	e00b      	b.n	8104aa6 <DMA_CheckFifoParam+0xe6>
        break;
 8104a8e:	bf00      	nop
 8104a90:	e00a      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8104a92:	bf00      	nop
 8104a94:	e008      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8104a96:	bf00      	nop
 8104a98:	e006      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8104a9a:	bf00      	nop
 8104a9c:	e004      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8104a9e:	bf00      	nop
 8104aa0:	e002      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8104aa2:	bf00      	nop
 8104aa4:	e000      	b.n	8104aa8 <DMA_CheckFifoParam+0xe8>
    break;
 8104aa6:	bf00      	nop
    }
  }

  return status;
 8104aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8104aaa:	4618      	mov	r0, r3
 8104aac:	3714      	adds	r7, #20
 8104aae:	46bd      	mov	sp, r7
 8104ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab4:	4770      	bx	lr
 8104ab6:	bf00      	nop

08104ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104ab8:	b480      	push	{r7}
 8104aba:	b085      	sub	sp, #20
 8104abc:	af00      	add	r7, sp, #0
 8104abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	4a3a      	ldr	r2, [pc, #232]	@ (8104bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104acc:	4293      	cmp	r3, r2
 8104ace:	d022      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	4a38      	ldr	r2, [pc, #224]	@ (8104bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104ad6:	4293      	cmp	r3, r2
 8104ad8:	d01d      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	4a37      	ldr	r2, [pc, #220]	@ (8104bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104ae0:	4293      	cmp	r3, r2
 8104ae2:	d018      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	4a35      	ldr	r2, [pc, #212]	@ (8104bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104aea:	4293      	cmp	r3, r2
 8104aec:	d013      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	4a34      	ldr	r2, [pc, #208]	@ (8104bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104af4:	4293      	cmp	r3, r2
 8104af6:	d00e      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	4a32      	ldr	r2, [pc, #200]	@ (8104bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104afe:	4293      	cmp	r3, r2
 8104b00:	d009      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	4a31      	ldr	r2, [pc, #196]	@ (8104bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104b08:	4293      	cmp	r3, r2
 8104b0a:	d004      	beq.n	8104b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	4a2f      	ldr	r2, [pc, #188]	@ (8104bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104b12:	4293      	cmp	r3, r2
 8104b14:	d101      	bne.n	8104b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104b16:	2301      	movs	r3, #1
 8104b18:	e000      	b.n	8104b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104b1a:	2300      	movs	r3, #0
 8104b1c:	2b00      	cmp	r3, #0
 8104b1e:	d01c      	beq.n	8104b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	b2db      	uxtb	r3, r3
 8104b26:	3b08      	subs	r3, #8
 8104b28:	4a2a      	ldr	r2, [pc, #168]	@ (8104bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8104b2e:	091b      	lsrs	r3, r3, #4
 8104b30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104b32:	68fb      	ldr	r3, [r7, #12]
 8104b34:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8104b38:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8104b3c:	009b      	lsls	r3, r3, #2
 8104b3e:	461a      	mov	r2, r3
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	4a24      	ldr	r2, [pc, #144]	@ (8104bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104b48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	f003 031f 	and.w	r3, r3, #31
 8104b50:	2201      	movs	r2, #1
 8104b52:	409a      	lsls	r2, r3
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104b58:	e026      	b.n	8104ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	b2db      	uxtb	r3, r3
 8104b60:	3b10      	subs	r3, #16
 8104b62:	4a1e      	ldr	r2, [pc, #120]	@ (8104bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104b64:	fba2 2303 	umull	r2, r3, r2, r3
 8104b68:	091b      	lsrs	r3, r3, #4
 8104b6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104b6c:	68bb      	ldr	r3, [r7, #8]
 8104b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8104be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104b70:	4293      	cmp	r3, r2
 8104b72:	d806      	bhi.n	8104b82 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104b74:	68bb      	ldr	r3, [r7, #8]
 8104b76:	4a1b      	ldr	r2, [pc, #108]	@ (8104be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104b78:	4293      	cmp	r3, r2
 8104b7a:	d902      	bls.n	8104b82 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	3308      	adds	r3, #8
 8104b80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104b82:	68fb      	ldr	r3, [r7, #12]
 8104b84:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8104b88:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8104b8c:	009b      	lsls	r3, r3, #2
 8104b8e:	461a      	mov	r2, r3
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	4a14      	ldr	r2, [pc, #80]	@ (8104be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104b98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	f003 031f 	and.w	r3, r3, #31
 8104ba0:	2201      	movs	r2, #1
 8104ba2:	409a      	lsls	r2, r3
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8104ba8:	bf00      	nop
 8104baa:	3714      	adds	r7, #20
 8104bac:	46bd      	mov	sp, r7
 8104bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bb2:	4770      	bx	lr
 8104bb4:	58025408 	.word	0x58025408
 8104bb8:	5802541c 	.word	0x5802541c
 8104bbc:	58025430 	.word	0x58025430
 8104bc0:	58025444 	.word	0x58025444
 8104bc4:	58025458 	.word	0x58025458
 8104bc8:	5802546c 	.word	0x5802546c
 8104bcc:	58025480 	.word	0x58025480
 8104bd0:	58025494 	.word	0x58025494
 8104bd4:	cccccccd 	.word	0xcccccccd
 8104bd8:	58025880 	.word	0x58025880
 8104bdc:	aaaaaaab 	.word	0xaaaaaaab
 8104be0:	400204b8 	.word	0x400204b8
 8104be4:	4002040f 	.word	0x4002040f
 8104be8:	40020880 	.word	0x40020880

08104bec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104bec:	b480      	push	{r7}
 8104bee:	b085      	sub	sp, #20
 8104bf0:	af00      	add	r7, sp, #0
 8104bf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	685b      	ldr	r3, [r3, #4]
 8104bf8:	b2db      	uxtb	r3, r3
 8104bfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104bfc:	68fb      	ldr	r3, [r7, #12]
 8104bfe:	2b00      	cmp	r3, #0
 8104c00:	d04a      	beq.n	8104c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	2b08      	cmp	r3, #8
 8104c06:	d847      	bhi.n	8104c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	4a25      	ldr	r2, [pc, #148]	@ (8104ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104c0e:	4293      	cmp	r3, r2
 8104c10:	d022      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a24      	ldr	r2, [pc, #144]	@ (8104ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d01d      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	4a22      	ldr	r2, [pc, #136]	@ (8104cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d018      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	4a21      	ldr	r2, [pc, #132]	@ (8104cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104c2c:	4293      	cmp	r3, r2
 8104c2e:	d013      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	4a1f      	ldr	r2, [pc, #124]	@ (8104cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104c36:	4293      	cmp	r3, r2
 8104c38:	d00e      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8104cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104c40:	4293      	cmp	r3, r2
 8104c42:	d009      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	4a1c      	ldr	r2, [pc, #112]	@ (8104cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104c4a:	4293      	cmp	r3, r2
 8104c4c:	d004      	beq.n	8104c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	4a1b      	ldr	r2, [pc, #108]	@ (8104cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104c54:	4293      	cmp	r3, r2
 8104c56:	d101      	bne.n	8104c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104c58:	2301      	movs	r3, #1
 8104c5a:	e000      	b.n	8104c5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104c5c:	2300      	movs	r3, #0
 8104c5e:	2b00      	cmp	r3, #0
 8104c60:	d00a      	beq.n	8104c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104c62:	68fa      	ldr	r2, [r7, #12]
 8104c64:	4b17      	ldr	r3, [pc, #92]	@ (8104cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104c66:	4413      	add	r3, r2
 8104c68:	009b      	lsls	r3, r3, #2
 8104c6a:	461a      	mov	r2, r3
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	4a15      	ldr	r2, [pc, #84]	@ (8104cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104c74:	671a      	str	r2, [r3, #112]	@ 0x70
 8104c76:	e009      	b.n	8104c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104c78:	68fa      	ldr	r2, [r7, #12]
 8104c7a:	4b14      	ldr	r3, [pc, #80]	@ (8104ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104c7c:	4413      	add	r3, r2
 8104c7e:	009b      	lsls	r3, r3, #2
 8104c80:	461a      	mov	r2, r3
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	4a11      	ldr	r2, [pc, #68]	@ (8104cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104c8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	3b01      	subs	r3, #1
 8104c90:	2201      	movs	r2, #1
 8104c92:	409a      	lsls	r2, r3
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8104c98:	bf00      	nop
 8104c9a:	3714      	adds	r7, #20
 8104c9c:	46bd      	mov	sp, r7
 8104c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ca2:	4770      	bx	lr
 8104ca4:	58025408 	.word	0x58025408
 8104ca8:	5802541c 	.word	0x5802541c
 8104cac:	58025430 	.word	0x58025430
 8104cb0:	58025444 	.word	0x58025444
 8104cb4:	58025458 	.word	0x58025458
 8104cb8:	5802546c 	.word	0x5802546c
 8104cbc:	58025480 	.word	0x58025480
 8104cc0:	58025494 	.word	0x58025494
 8104cc4:	1600963f 	.word	0x1600963f
 8104cc8:	58025940 	.word	0x58025940
 8104ccc:	1000823f 	.word	0x1000823f
 8104cd0:	40020940 	.word	0x40020940

08104cd4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8104cd4:	b580      	push	{r7, lr}
 8104cd6:	b084      	sub	sp, #16
 8104cd8:	af00      	add	r7, sp, #0
 8104cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	2b00      	cmp	r3, #0
 8104ce0:	d101      	bne.n	8104ce6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8104ce2:	2301      	movs	r3, #1
 8104ce4:	e0e7      	b.n	8104eb6 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104cec:	2b00      	cmp	r3, #0
 8104cee:	d106      	bne.n	8104cfe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	2220      	movs	r2, #32
 8104cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104cf8:	6878      	ldr	r0, [r7, #4]
 8104cfa:	f7fc fc89 	bl	8101610 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104cfe:	4b70      	ldr	r3, [pc, #448]	@ (8104ec0 <HAL_ETH_Init+0x1ec>)
 8104d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104d04:	4a6e      	ldr	r2, [pc, #440]	@ (8104ec0 <HAL_ETH_Init+0x1ec>)
 8104d06:	f043 0302 	orr.w	r3, r3, #2
 8104d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8104ec0 <HAL_ETH_Init+0x1ec>)
 8104d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104d14:	f003 0302 	and.w	r3, r3, #2
 8104d18:	60bb      	str	r3, [r7, #8]
 8104d1a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	7a1b      	ldrb	r3, [r3, #8]
 8104d20:	2b00      	cmp	r3, #0
 8104d22:	d103      	bne.n	8104d2c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8104d24:	2000      	movs	r0, #0
 8104d26:	f7fd ff31 	bl	8102b8c <HAL_SYSCFG_ETHInterfaceSelect>
 8104d2a:	e003      	b.n	8104d34 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8104d2c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8104d30:	f7fd ff2c 	bl	8102b8c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8104d34:	4b63      	ldr	r3, [pc, #396]	@ (8104ec4 <HAL_ETH_Init+0x1f0>)
 8104d36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	681b      	ldr	r3, [r3, #0]
 8104d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	687a      	ldr	r2, [r7, #4]
 8104d44:	6812      	ldr	r2, [r2, #0]
 8104d46:	f043 0301 	orr.w	r3, r3, #1
 8104d4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104d50:	f7fd fee0 	bl	8102b14 <HAL_GetTick>
 8104d54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104d56:	e011      	b.n	8104d7c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104d58:	f7fd fedc 	bl	8102b14 <HAL_GetTick>
 8104d5c:	4602      	mov	r2, r0
 8104d5e:	68fb      	ldr	r3, [r7, #12]
 8104d60:	1ad3      	subs	r3, r2, r3
 8104d62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8104d66:	d909      	bls.n	8104d7c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	2204      	movs	r2, #4
 8104d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	22e0      	movs	r2, #224	@ 0xe0
 8104d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8104d78:	2301      	movs	r3, #1
 8104d7a:	e09c      	b.n	8104eb6 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	f003 0301 	and.w	r3, r3, #1
 8104d8a:	2b00      	cmp	r3, #0
 8104d8c:	d1e4      	bne.n	8104d58 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8104d8e:	6878      	ldr	r0, [r7, #4]
 8104d90:	f000 f89e 	bl	8104ed0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8104d94:	f001 f9e8 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 8104d98:	4603      	mov	r3, r0
 8104d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8104ec8 <HAL_ETH_Init+0x1f4>)
 8104d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8104da0:	0c9a      	lsrs	r2, r3, #18
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	3a01      	subs	r2, #1
 8104da8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8104dac:	6878      	ldr	r0, [r7, #4]
 8104dae:	f000 fa81 	bl	81052b4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104dba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8104dbe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8104dc2:	687a      	ldr	r2, [r7, #4]
 8104dc4:	6812      	ldr	r2, [r2, #0]
 8104dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104dca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104dce:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	695b      	ldr	r3, [r3, #20]
 8104dd6:	f003 0303 	and.w	r3, r3, #3
 8104dda:	2b00      	cmp	r3, #0
 8104ddc:	d009      	beq.n	8104df2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	2201      	movs	r2, #1
 8104de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	22e0      	movs	r2, #224	@ 0xe0
 8104dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8104dee:	2301      	movs	r3, #1
 8104df0:	e061      	b.n	8104eb6 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104dfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104dfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8104e02:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8104e06:	687a      	ldr	r2, [r7, #4]
 8104e08:	6952      	ldr	r2, [r2, #20]
 8104e0a:	0051      	lsls	r1, r2, #1
 8104e0c:	687a      	ldr	r2, [r7, #4]
 8104e0e:	6812      	ldr	r2, [r2, #0]
 8104e10:	430b      	orrs	r3, r1
 8104e12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104e16:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8104e1a:	6878      	ldr	r0, [r7, #4]
 8104e1c:	f000 fae7 	bl	81053ee <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104e20:	6878      	ldr	r0, [r7, #4]
 8104e22:	f000 fb2d 	bl	8105480 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	685b      	ldr	r3, [r3, #4]
 8104e2a:	3305      	adds	r3, #5
 8104e2c:	781b      	ldrb	r3, [r3, #0]
 8104e2e:	021a      	lsls	r2, r3, #8
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	685b      	ldr	r3, [r3, #4]
 8104e34:	3304      	adds	r3, #4
 8104e36:	781b      	ldrb	r3, [r3, #0]
 8104e38:	4619      	mov	r1, r3
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	430a      	orrs	r2, r1
 8104e40:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	685b      	ldr	r3, [r3, #4]
 8104e48:	3303      	adds	r3, #3
 8104e4a:	781b      	ldrb	r3, [r3, #0]
 8104e4c:	061a      	lsls	r2, r3, #24
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	685b      	ldr	r3, [r3, #4]
 8104e52:	3302      	adds	r3, #2
 8104e54:	781b      	ldrb	r3, [r3, #0]
 8104e56:	041b      	lsls	r3, r3, #16
 8104e58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	685b      	ldr	r3, [r3, #4]
 8104e5e:	3301      	adds	r3, #1
 8104e60:	781b      	ldrb	r3, [r3, #0]
 8104e62:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104e64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	685b      	ldr	r3, [r3, #4]
 8104e6a:	781b      	ldrb	r3, [r3, #0]
 8104e6c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104e72:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104e74:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	681a      	ldr	r2, [r3, #0]
 8104e84:	4b11      	ldr	r3, [pc, #68]	@ (8104ecc <HAL_ETH_Init+0x1f8>)
 8104e86:	430b      	orrs	r3, r1
 8104e88:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8104e94:	687a      	ldr	r2, [r7, #4]
 8104e96:	6812      	ldr	r2, [r2, #0]
 8104e98:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8104e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8104ea0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	2200      	movs	r2, #0
 8104ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	2210      	movs	r2, #16
 8104eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104eb4:	2300      	movs	r3, #0
}
 8104eb6:	4618      	mov	r0, r3
 8104eb8:	3710      	adds	r7, #16
 8104eba:	46bd      	mov	sp, r7
 8104ebc:	bd80      	pop	{r7, pc}
 8104ebe:	bf00      	nop
 8104ec0:	58024400 	.word	0x58024400
 8104ec4:	58000400 	.word	0x58000400
 8104ec8:	431bde83 	.word	0x431bde83
 8104ecc:	0c020060 	.word	0x0c020060

08104ed0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8104ed0:	b580      	push	{r7, lr}
 8104ed2:	b084      	sub	sp, #16
 8104ed4:	af00      	add	r7, sp, #0
 8104ed6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8104ee0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8104ee2:	68fb      	ldr	r3, [r7, #12]
 8104ee4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104ee8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8104eea:	f001 f93d 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 8104eee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8104ef0:	68bb      	ldr	r3, [r7, #8]
 8104ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8104f5c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8104ef4:	4293      	cmp	r3, r2
 8104ef6:	d804      	bhi.n	8104f02 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8104efe:	60fb      	str	r3, [r7, #12]
 8104f00:	e022      	b.n	8104f48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8104f02:	68bb      	ldr	r3, [r7, #8]
 8104f04:	4a16      	ldr	r2, [pc, #88]	@ (8104f60 <HAL_ETH_SetMDIOClockRange+0x90>)
 8104f06:	4293      	cmp	r3, r2
 8104f08:	d204      	bcs.n	8104f14 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104f0a:	68fb      	ldr	r3, [r7, #12]
 8104f0c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8104f10:	60fb      	str	r3, [r7, #12]
 8104f12:	e019      	b.n	8104f48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8104f14:	68bb      	ldr	r3, [r7, #8]
 8104f16:	4a13      	ldr	r2, [pc, #76]	@ (8104f64 <HAL_ETH_SetMDIOClockRange+0x94>)
 8104f18:	4293      	cmp	r3, r2
 8104f1a:	d915      	bls.n	8104f48 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8104f1c:	68bb      	ldr	r3, [r7, #8]
 8104f1e:	4a12      	ldr	r2, [pc, #72]	@ (8104f68 <HAL_ETH_SetMDIOClockRange+0x98>)
 8104f20:	4293      	cmp	r3, r2
 8104f22:	d804      	bhi.n	8104f2e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104f2a:	60fb      	str	r3, [r7, #12]
 8104f2c:	e00c      	b.n	8104f48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8104f2e:	68bb      	ldr	r3, [r7, #8]
 8104f30:	4a0e      	ldr	r2, [pc, #56]	@ (8104f6c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d804      	bhi.n	8104f40 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104f36:	68fb      	ldr	r3, [r7, #12]
 8104f38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8104f3c:	60fb      	str	r3, [r7, #12]
 8104f3e:	e003      	b.n	8104f48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8104f40:	68fb      	ldr	r3, [r7, #12]
 8104f42:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8104f46:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	68fa      	ldr	r2, [r7, #12]
 8104f4e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8104f52:	bf00      	nop
 8104f54:	3710      	adds	r7, #16
 8104f56:	46bd      	mov	sp, r7
 8104f58:	bd80      	pop	{r7, pc}
 8104f5a:	bf00      	nop
 8104f5c:	02160ebf 	.word	0x02160ebf
 8104f60:	03938700 	.word	0x03938700
 8104f64:	05f5e0ff 	.word	0x05f5e0ff
 8104f68:	08f0d17f 	.word	0x08f0d17f
 8104f6c:	0ee6b27f 	.word	0x0ee6b27f

08104f70 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8104f70:	b480      	push	{r7}
 8104f72:	b085      	sub	sp, #20
 8104f74:	af00      	add	r7, sp, #0
 8104f76:	6078      	str	r0, [r7, #4]
 8104f78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8104f7a:	683b      	ldr	r3, [r7, #0]
 8104f7c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8104f7e:	683b      	ldr	r3, [r7, #0]
 8104f80:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8104f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8104f84:	683b      	ldr	r3, [r7, #0]
 8104f86:	791b      	ldrb	r3, [r3, #4]
 8104f88:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8104f8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8104f8c:	683b      	ldr	r3, [r7, #0]
 8104f8e:	7b1b      	ldrb	r3, [r3, #12]
 8104f90:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8104f92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8104f94:	683b      	ldr	r3, [r7, #0]
 8104f96:	7b5b      	ldrb	r3, [r3, #13]
 8104f98:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8104f9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8104f9c:	683b      	ldr	r3, [r7, #0]
 8104f9e:	7b9b      	ldrb	r3, [r3, #14]
 8104fa0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8104fa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104fa4:	683b      	ldr	r3, [r7, #0]
 8104fa6:	7bdb      	ldrb	r3, [r3, #15]
 8104fa8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8104faa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8104fac:	683a      	ldr	r2, [r7, #0]
 8104fae:	7c12      	ldrb	r2, [r2, #16]
 8104fb0:	2a00      	cmp	r2, #0
 8104fb2:	d102      	bne.n	8104fba <ETH_SetMACConfig+0x4a>
 8104fb4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8104fb8:	e000      	b.n	8104fbc <ETH_SetMACConfig+0x4c>
 8104fba:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104fbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104fbe:	683a      	ldr	r2, [r7, #0]
 8104fc0:	7c52      	ldrb	r2, [r2, #17]
 8104fc2:	2a00      	cmp	r2, #0
 8104fc4:	d102      	bne.n	8104fcc <ETH_SetMACConfig+0x5c>
 8104fc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8104fca:	e000      	b.n	8104fce <ETH_SetMACConfig+0x5e>
 8104fcc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8104fce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8104fd0:	683b      	ldr	r3, [r7, #0]
 8104fd2:	7c9b      	ldrb	r3, [r3, #18]
 8104fd4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104fd6:	431a      	orrs	r2, r3
               macconf->Speed |
 8104fd8:	683b      	ldr	r3, [r7, #0]
 8104fda:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8104fdc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8104fde:	683b      	ldr	r3, [r7, #0]
 8104fe0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8104fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104fe4:	683b      	ldr	r3, [r7, #0]
 8104fe6:	7f1b      	ldrb	r3, [r3, #28]
 8104fe8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8104fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104fec:	683b      	ldr	r3, [r7, #0]
 8104fee:	7f5b      	ldrb	r3, [r3, #29]
 8104ff0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104ff2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104ff4:	683a      	ldr	r2, [r7, #0]
 8104ff6:	7f92      	ldrb	r2, [r2, #30]
 8104ff8:	2a00      	cmp	r2, #0
 8104ffa:	d102      	bne.n	8105002 <ETH_SetMACConfig+0x92>
 8104ffc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105000:	e000      	b.n	8105004 <ETH_SetMACConfig+0x94>
 8105002:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105004:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105006:	683b      	ldr	r3, [r7, #0]
 8105008:	7fdb      	ldrb	r3, [r3, #31]
 810500a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810500c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810500e:	683a      	ldr	r2, [r7, #0]
 8105010:	f892 2020 	ldrb.w	r2, [r2, #32]
 8105014:	2a00      	cmp	r2, #0
 8105016:	d102      	bne.n	810501e <ETH_SetMACConfig+0xae>
 8105018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810501c:	e000      	b.n	8105020 <ETH_SetMACConfig+0xb0>
 810501e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105020:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8105022:	683b      	ldr	r3, [r7, #0]
 8105024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8105026:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8105028:	683b      	ldr	r3, [r7, #0]
 810502a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810502e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8105030:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8105032:	683b      	ldr	r3, [r7, #0]
 8105034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8105036:	4313      	orrs	r3, r2
 8105038:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	681b      	ldr	r3, [r3, #0]
 810503e:	681a      	ldr	r2, [r3, #0]
 8105040:	4b57      	ldr	r3, [pc, #348]	@ (81051a0 <ETH_SetMACConfig+0x230>)
 8105042:	4013      	ands	r3, r2
 8105044:	687a      	ldr	r2, [r7, #4]
 8105046:	6812      	ldr	r2, [r2, #0]
 8105048:	68f9      	ldr	r1, [r7, #12]
 810504a:	430b      	orrs	r3, r1
 810504c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810504e:	683b      	ldr	r3, [r7, #0]
 8105050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105052:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8105054:	683b      	ldr	r3, [r7, #0]
 8105056:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810505a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810505c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810505e:	683b      	ldr	r3, [r7, #0]
 8105060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8105064:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8105066:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105068:	683b      	ldr	r3, [r7, #0]
 810506a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810506e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8105070:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8105072:	683a      	ldr	r2, [r7, #0]
 8105074:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8105078:	2a00      	cmp	r2, #0
 810507a:	d102      	bne.n	8105082 <ETH_SetMACConfig+0x112>
 810507c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8105080:	e000      	b.n	8105084 <ETH_SetMACConfig+0x114>
 8105082:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105084:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8105086:	683b      	ldr	r3, [r7, #0]
 8105088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810508a:	4313      	orrs	r3, r2
 810508c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	685a      	ldr	r2, [r3, #4]
 8105094:	4b43      	ldr	r3, [pc, #268]	@ (81051a4 <ETH_SetMACConfig+0x234>)
 8105096:	4013      	ands	r3, r2
 8105098:	687a      	ldr	r2, [r7, #4]
 810509a:	6812      	ldr	r2, [r2, #0]
 810509c:	68f9      	ldr	r1, [r7, #12]
 810509e:	430b      	orrs	r3, r1
 81050a0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81050a2:	683b      	ldr	r3, [r7, #0]
 81050a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81050a8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81050aa:	683b      	ldr	r3, [r7, #0]
 81050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81050ae:	4313      	orrs	r3, r2
 81050b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	68db      	ldr	r3, [r3, #12]
 81050b8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81050bc:	f023 0301 	bic.w	r3, r3, #1
 81050c0:	687a      	ldr	r2, [r7, #4]
 81050c2:	6812      	ldr	r2, [r2, #0]
 81050c4:	68f9      	ldr	r1, [r7, #12]
 81050c6:	430b      	orrs	r3, r1
 81050c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81050ca:	683b      	ldr	r3, [r7, #0]
 81050cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 81050d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81050d2:	683b      	ldr	r3, [r7, #0]
 81050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81050d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81050d8:	683a      	ldr	r2, [r7, #0]
 81050da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 81050de:	2a00      	cmp	r2, #0
 81050e0:	d101      	bne.n	81050e6 <ETH_SetMACConfig+0x176>
 81050e2:	2280      	movs	r2, #128	@ 0x80
 81050e4:	e000      	b.n	81050e8 <ETH_SetMACConfig+0x178>
 81050e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 81050e8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 81050ea:	683b      	ldr	r3, [r7, #0]
 81050ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81050ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81050f0:	4313      	orrs	r3, r2
 81050f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	681b      	ldr	r3, [r3, #0]
 81050f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81050fa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 81050fe:	4013      	ands	r3, r2
 8105100:	687a      	ldr	r2, [r7, #4]
 8105102:	6812      	ldr	r2, [r2, #0]
 8105104:	68f9      	ldr	r1, [r7, #12]
 8105106:	430b      	orrs	r3, r1
 8105108:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810510a:	683b      	ldr	r3, [r7, #0]
 810510c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8105110:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8105112:	683b      	ldr	r3, [r7, #0]
 8105114:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8105118:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810511a:	4313      	orrs	r3, r2
 810511c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	681b      	ldr	r3, [r3, #0]
 8105122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105126:	f023 0103 	bic.w	r1, r3, #3
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	68fa      	ldr	r2, [r7, #12]
 8105130:	430a      	orrs	r2, r1
 8105132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810513e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8105142:	683b      	ldr	r3, [r7, #0]
 8105144:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	430a      	orrs	r2, r1
 810514c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8105150:	683b      	ldr	r3, [r7, #0]
 8105152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8105154:	683a      	ldr	r2, [r7, #0]
 8105156:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810515a:	2a00      	cmp	r2, #0
 810515c:	d101      	bne.n	8105162 <ETH_SetMACConfig+0x1f2>
 810515e:	2240      	movs	r2, #64	@ 0x40
 8105160:	e000      	b.n	8105164 <ETH_SetMACConfig+0x1f4>
 8105162:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8105164:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8105166:	683b      	ldr	r3, [r7, #0]
 8105168:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 810516c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810516e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8105170:	683b      	ldr	r3, [r7, #0]
 8105172:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8105176:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8105178:	4313      	orrs	r3, r2
 810517a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105184:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	681b      	ldr	r3, [r3, #0]
 810518c:	68fa      	ldr	r2, [r7, #12]
 810518e:	430a      	orrs	r2, r1
 8105190:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8105194:	bf00      	nop
 8105196:	3714      	adds	r7, #20
 8105198:	46bd      	mov	sp, r7
 810519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810519e:	4770      	bx	lr
 81051a0:	00048083 	.word	0x00048083
 81051a4:	c0f88000 	.word	0xc0f88000

081051a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81051a8:	b480      	push	{r7}
 81051aa:	b085      	sub	sp, #20
 81051ac:	af00      	add	r7, sp, #0
 81051ae:	6078      	str	r0, [r7, #4]
 81051b0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 81051c0:	f023 0302 	bic.w	r3, r3, #2
 81051c4:	683a      	ldr	r2, [r7, #0]
 81051c6:	6811      	ldr	r1, [r2, #0]
 81051c8:	687a      	ldr	r2, [r7, #4]
 81051ca:	6812      	ldr	r2, [r2, #0]
 81051cc:	430b      	orrs	r3, r1
 81051ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81051d2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81051d4:	683b      	ldr	r3, [r7, #0]
 81051d6:	791b      	ldrb	r3, [r3, #4]
 81051d8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81051da:	683b      	ldr	r3, [r7, #0]
 81051dc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81051de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 81051e0:	683b      	ldr	r3, [r7, #0]
 81051e2:	7b1b      	ldrb	r3, [r3, #12]
 81051e4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81051e6:	4313      	orrs	r3, r2
 81051e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81051f2:	685b      	ldr	r3, [r3, #4]
 81051f4:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 81051f8:	f023 0301 	bic.w	r3, r3, #1
 81051fc:	687a      	ldr	r2, [r7, #4]
 81051fe:	6812      	ldr	r2, [r2, #0]
 8105200:	68f9      	ldr	r1, [r7, #12]
 8105202:	430b      	orrs	r3, r1
 8105204:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105208:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810520a:	683b      	ldr	r3, [r7, #0]
 810520c:	7b5b      	ldrb	r3, [r3, #13]
 810520e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8105210:	683b      	ldr	r3, [r7, #0]
 8105212:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105214:	4313      	orrs	r3, r2
 8105216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105220:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8105224:	4b21      	ldr	r3, [pc, #132]	@ (81052ac <ETH_SetDMAConfig+0x104>)
 8105226:	4013      	ands	r3, r2
 8105228:	687a      	ldr	r2, [r7, #4]
 810522a:	6812      	ldr	r2, [r2, #0]
 810522c:	68f9      	ldr	r1, [r7, #12]
 810522e:	430b      	orrs	r3, r1
 8105230:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105234:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8105238:	683b      	ldr	r3, [r7, #0]
 810523a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810523c:	683b      	ldr	r3, [r7, #0]
 810523e:	7d1b      	ldrb	r3, [r3, #20]
 8105240:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8105242:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8105244:	683b      	ldr	r3, [r7, #0]
 8105246:	7f5b      	ldrb	r3, [r3, #29]
 8105248:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810524a:	4313      	orrs	r3, r2
 810524c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105256:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810525a:	4b15      	ldr	r3, [pc, #84]	@ (81052b0 <ETH_SetDMAConfig+0x108>)
 810525c:	4013      	ands	r3, r2
 810525e:	687a      	ldr	r2, [r7, #4]
 8105260:	6812      	ldr	r2, [r2, #0]
 8105262:	68f9      	ldr	r1, [r7, #12]
 8105264:	430b      	orrs	r3, r1
 8105266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810526a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810526e:	683b      	ldr	r3, [r7, #0]
 8105270:	7f1b      	ldrb	r3, [r3, #28]
 8105272:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8105274:	683b      	ldr	r3, [r7, #0]
 8105276:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8105278:	4313      	orrs	r3, r2
 810527a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105284:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8105288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810528c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105290:	687a      	ldr	r2, [r7, #4]
 8105292:	6812      	ldr	r2, [r2, #0]
 8105294:	68f9      	ldr	r1, [r7, #12]
 8105296:	430b      	orrs	r3, r1
 8105298:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810529c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81052a0:	bf00      	nop
 81052a2:	3714      	adds	r7, #20
 81052a4:	46bd      	mov	sp, r7
 81052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052aa:	4770      	bx	lr
 81052ac:	fffec000 	.word	0xfffec000
 81052b0:	ffc0efef 	.word	0xffc0efef

081052b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81052b4:	b580      	push	{r7, lr}
 81052b6:	b0a4      	sub	sp, #144	@ 0x90
 81052b8:	af00      	add	r7, sp, #0
 81052ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81052bc:	2301      	movs	r3, #1
 81052be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 81052c2:	2300      	movs	r3, #0
 81052c4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 81052c6:	2300      	movs	r3, #0
 81052c8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 81052cc:	2300      	movs	r3, #0
 81052ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 81052d2:	2301      	movs	r3, #1
 81052d4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81052d8:	2301      	movs	r3, #1
 81052da:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 81052de:	2301      	movs	r3, #1
 81052e0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 81052e4:	2300      	movs	r3, #0
 81052e6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 81052ea:	2301      	movs	r3, #1
 81052ec:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 81052f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81052f4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 81052f6:	2300      	movs	r3, #0
 81052f8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 81052fc:	2300      	movs	r3, #0
 81052fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8105300:	2300      	movs	r3, #0
 8105302:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8105306:	2300      	movs	r3, #0
 8105308:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810530c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8105310:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8105312:	2300      	movs	r3, #0
 8105314:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8105318:	2300      	movs	r3, #0
 810531a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810531c:	2301      	movs	r3, #1
 810531e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8105322:	2300      	movs	r3, #0
 8105324:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8105328:	2300      	movs	r3, #0
 810532a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810532e:	2300      	movs	r3, #0
 8105330:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8105332:	2300      	movs	r3, #0
 8105334:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8105336:	2300      	movs	r3, #0
 8105338:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810533a:	2300      	movs	r3, #0
 810533c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8105340:	2300      	movs	r3, #0
 8105342:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8105346:	2301      	movs	r3, #1
 8105348:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810534c:	2320      	movs	r3, #32
 810534e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8105352:	2301      	movs	r3, #1
 8105354:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8105358:	2300      	movs	r3, #0
 810535a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810535e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8105362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8105364:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105368:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810536a:	2300      	movs	r3, #0
 810536c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8105370:	2302      	movs	r3, #2
 8105372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8105376:	2300      	movs	r3, #0
 8105378:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810537c:	2300      	movs	r3, #0
 810537e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8105382:	2300      	movs	r3, #0
 8105384:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8105388:	2301      	movs	r3, #1
 810538a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810538e:	2300      	movs	r3, #0
 8105390:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8105392:	2301      	movs	r3, #1
 8105394:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8105398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810539c:	4619      	mov	r1, r3
 810539e:	6878      	ldr	r0, [r7, #4]
 81053a0:	f7ff fde6 	bl	8104f70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81053a4:	2301      	movs	r3, #1
 81053a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81053a8:	2301      	movs	r3, #1
 81053aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81053ac:	2300      	movs	r3, #0
 81053ae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81053b0:	2300      	movs	r3, #0
 81053b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81053b6:	2300      	movs	r3, #0
 81053b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81053ba:	2300      	movs	r3, #0
 81053bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81053be:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81053c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81053c4:	2300      	movs	r3, #0
 81053c6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81053c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81053cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81053ce:	2300      	movs	r3, #0
 81053d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 81053d4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 81053d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81053da:	f107 0308 	add.w	r3, r7, #8
 81053de:	4619      	mov	r1, r3
 81053e0:	6878      	ldr	r0, [r7, #4]
 81053e2:	f7ff fee1 	bl	81051a8 <ETH_SetDMAConfig>
}
 81053e6:	bf00      	nop
 81053e8:	3790      	adds	r7, #144	@ 0x90
 81053ea:	46bd      	mov	sp, r7
 81053ec:	bd80      	pop	{r7, pc}

081053ee <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 81053ee:	b480      	push	{r7}
 81053f0:	b085      	sub	sp, #20
 81053f2:	af00      	add	r7, sp, #0
 81053f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81053f6:	2300      	movs	r3, #0
 81053f8:	60fb      	str	r3, [r7, #12]
 81053fa:	e01d      	b.n	8105438 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	68d9      	ldr	r1, [r3, #12]
 8105400:	68fa      	ldr	r2, [r7, #12]
 8105402:	4613      	mov	r3, r2
 8105404:	005b      	lsls	r3, r3, #1
 8105406:	4413      	add	r3, r2
 8105408:	00db      	lsls	r3, r3, #3
 810540a:	440b      	add	r3, r1
 810540c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810540e:	68bb      	ldr	r3, [r7, #8]
 8105410:	2200      	movs	r2, #0
 8105412:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105414:	68bb      	ldr	r3, [r7, #8]
 8105416:	2200      	movs	r2, #0
 8105418:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810541a:	68bb      	ldr	r3, [r7, #8]
 810541c:	2200      	movs	r2, #0
 810541e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8105420:	68bb      	ldr	r3, [r7, #8]
 8105422:	2200      	movs	r2, #0
 8105424:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8105426:	68b9      	ldr	r1, [r7, #8]
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	68fa      	ldr	r2, [r7, #12]
 810542c:	3206      	adds	r2, #6
 810542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105432:	68fb      	ldr	r3, [r7, #12]
 8105434:	3301      	adds	r3, #1
 8105436:	60fb      	str	r3, [r7, #12]
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	2b03      	cmp	r3, #3
 810543c:	d9de      	bls.n	81053fc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	2200      	movs	r2, #0
 8105442:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810544c:	461a      	mov	r2, r3
 810544e:	2303      	movs	r3, #3
 8105450:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	68da      	ldr	r2, [r3, #12]
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105460:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	68da      	ldr	r2, [r3, #12]
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105470:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8105474:	bf00      	nop
 8105476:	3714      	adds	r7, #20
 8105478:	46bd      	mov	sp, r7
 810547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810547e:	4770      	bx	lr

08105480 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8105480:	b480      	push	{r7}
 8105482:	b085      	sub	sp, #20
 8105484:	af00      	add	r7, sp, #0
 8105486:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105488:	2300      	movs	r3, #0
 810548a:	60fb      	str	r3, [r7, #12]
 810548c:	e023      	b.n	81054d6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	6919      	ldr	r1, [r3, #16]
 8105492:	68fa      	ldr	r2, [r7, #12]
 8105494:	4613      	mov	r3, r2
 8105496:	005b      	lsls	r3, r3, #1
 8105498:	4413      	add	r3, r2
 810549a:	00db      	lsls	r3, r3, #3
 810549c:	440b      	add	r3, r1
 810549e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 81054a0:	68bb      	ldr	r3, [r7, #8]
 81054a2:	2200      	movs	r2, #0
 81054a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 81054a6:	68bb      	ldr	r3, [r7, #8]
 81054a8:	2200      	movs	r2, #0
 81054aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 81054ac:	68bb      	ldr	r3, [r7, #8]
 81054ae:	2200      	movs	r2, #0
 81054b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 81054b2:	68bb      	ldr	r3, [r7, #8]
 81054b4:	2200      	movs	r2, #0
 81054b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 81054b8:	68bb      	ldr	r3, [r7, #8]
 81054ba:	2200      	movs	r2, #0
 81054bc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 81054be:	68bb      	ldr	r3, [r7, #8]
 81054c0:	2200      	movs	r2, #0
 81054c2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81054c4:	68b9      	ldr	r1, [r7, #8]
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	68fa      	ldr	r2, [r7, #12]
 81054ca:	3212      	adds	r2, #18
 81054cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	3301      	adds	r3, #1
 81054d4:	60fb      	str	r3, [r7, #12]
 81054d6:	68fb      	ldr	r3, [r7, #12]
 81054d8:	2b03      	cmp	r3, #3
 81054da:	d9d8      	bls.n	810548e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2200      	movs	r2, #0
 81054e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	2200      	movs	r2, #0
 81054e6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	2200      	movs	r2, #0
 81054ec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	2200      	movs	r2, #0
 81054f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	2200      	movs	r2, #0
 81054f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105502:	461a      	mov	r2, r3
 8105504:	2303      	movs	r3, #3
 8105506:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	691a      	ldr	r2, [r3, #16]
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105516:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	691b      	ldr	r3, [r3, #16]
 810551e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	681b      	ldr	r3, [r3, #0]
 8105526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810552a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810552e:	bf00      	nop
 8105530:	3714      	adds	r7, #20
 8105532:	46bd      	mov	sp, r7
 8105534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105538:	4770      	bx	lr
	...

0810553c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810553c:	b480      	push	{r7}
 810553e:	b089      	sub	sp, #36	@ 0x24
 8105540:	af00      	add	r7, sp, #0
 8105542:	6078      	str	r0, [r7, #4]
 8105544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8105546:	2300      	movs	r3, #0
 8105548:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810554a:	4b89      	ldr	r3, [pc, #548]	@ (8105770 <HAL_GPIO_Init+0x234>)
 810554c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810554e:	e194      	b.n	810587a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105550:	683b      	ldr	r3, [r7, #0]
 8105552:	681a      	ldr	r2, [r3, #0]
 8105554:	2101      	movs	r1, #1
 8105556:	69fb      	ldr	r3, [r7, #28]
 8105558:	fa01 f303 	lsl.w	r3, r1, r3
 810555c:	4013      	ands	r3, r2
 810555e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105560:	693b      	ldr	r3, [r7, #16]
 8105562:	2b00      	cmp	r3, #0
 8105564:	f000 8186 	beq.w	8105874 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105568:	683b      	ldr	r3, [r7, #0]
 810556a:	685b      	ldr	r3, [r3, #4]
 810556c:	f003 0303 	and.w	r3, r3, #3
 8105570:	2b01      	cmp	r3, #1
 8105572:	d005      	beq.n	8105580 <HAL_GPIO_Init+0x44>
 8105574:	683b      	ldr	r3, [r7, #0]
 8105576:	685b      	ldr	r3, [r3, #4]
 8105578:	f003 0303 	and.w	r3, r3, #3
 810557c:	2b02      	cmp	r3, #2
 810557e:	d130      	bne.n	81055e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	689b      	ldr	r3, [r3, #8]
 8105584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105586:	69fb      	ldr	r3, [r7, #28]
 8105588:	005b      	lsls	r3, r3, #1
 810558a:	2203      	movs	r2, #3
 810558c:	fa02 f303 	lsl.w	r3, r2, r3
 8105590:	43db      	mvns	r3, r3
 8105592:	69ba      	ldr	r2, [r7, #24]
 8105594:	4013      	ands	r3, r2
 8105596:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105598:	683b      	ldr	r3, [r7, #0]
 810559a:	68da      	ldr	r2, [r3, #12]
 810559c:	69fb      	ldr	r3, [r7, #28]
 810559e:	005b      	lsls	r3, r3, #1
 81055a0:	fa02 f303 	lsl.w	r3, r2, r3
 81055a4:	69ba      	ldr	r2, [r7, #24]
 81055a6:	4313      	orrs	r3, r2
 81055a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	69ba      	ldr	r2, [r7, #24]
 81055ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	685b      	ldr	r3, [r3, #4]
 81055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81055b6:	2201      	movs	r2, #1
 81055b8:	69fb      	ldr	r3, [r7, #28]
 81055ba:	fa02 f303 	lsl.w	r3, r2, r3
 81055be:	43db      	mvns	r3, r3
 81055c0:	69ba      	ldr	r2, [r7, #24]
 81055c2:	4013      	ands	r3, r2
 81055c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81055c6:	683b      	ldr	r3, [r7, #0]
 81055c8:	685b      	ldr	r3, [r3, #4]
 81055ca:	091b      	lsrs	r3, r3, #4
 81055cc:	f003 0201 	and.w	r2, r3, #1
 81055d0:	69fb      	ldr	r3, [r7, #28]
 81055d2:	fa02 f303 	lsl.w	r3, r2, r3
 81055d6:	69ba      	ldr	r2, [r7, #24]
 81055d8:	4313      	orrs	r3, r2
 81055da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	69ba      	ldr	r2, [r7, #24]
 81055e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81055e2:	683b      	ldr	r3, [r7, #0]
 81055e4:	685b      	ldr	r3, [r3, #4]
 81055e6:	f003 0303 	and.w	r3, r3, #3
 81055ea:	2b03      	cmp	r3, #3
 81055ec:	d017      	beq.n	810561e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	68db      	ldr	r3, [r3, #12]
 81055f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81055f4:	69fb      	ldr	r3, [r7, #28]
 81055f6:	005b      	lsls	r3, r3, #1
 81055f8:	2203      	movs	r2, #3
 81055fa:	fa02 f303 	lsl.w	r3, r2, r3
 81055fe:	43db      	mvns	r3, r3
 8105600:	69ba      	ldr	r2, [r7, #24]
 8105602:	4013      	ands	r3, r2
 8105604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105606:	683b      	ldr	r3, [r7, #0]
 8105608:	689a      	ldr	r2, [r3, #8]
 810560a:	69fb      	ldr	r3, [r7, #28]
 810560c:	005b      	lsls	r3, r3, #1
 810560e:	fa02 f303 	lsl.w	r3, r2, r3
 8105612:	69ba      	ldr	r2, [r7, #24]
 8105614:	4313      	orrs	r3, r2
 8105616:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	69ba      	ldr	r2, [r7, #24]
 810561c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810561e:	683b      	ldr	r3, [r7, #0]
 8105620:	685b      	ldr	r3, [r3, #4]
 8105622:	f003 0303 	and.w	r3, r3, #3
 8105626:	2b02      	cmp	r3, #2
 8105628:	d123      	bne.n	8105672 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810562a:	69fb      	ldr	r3, [r7, #28]
 810562c:	08da      	lsrs	r2, r3, #3
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	3208      	adds	r2, #8
 8105632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105638:	69fb      	ldr	r3, [r7, #28]
 810563a:	f003 0307 	and.w	r3, r3, #7
 810563e:	009b      	lsls	r3, r3, #2
 8105640:	220f      	movs	r2, #15
 8105642:	fa02 f303 	lsl.w	r3, r2, r3
 8105646:	43db      	mvns	r3, r3
 8105648:	69ba      	ldr	r2, [r7, #24]
 810564a:	4013      	ands	r3, r2
 810564c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810564e:	683b      	ldr	r3, [r7, #0]
 8105650:	691a      	ldr	r2, [r3, #16]
 8105652:	69fb      	ldr	r3, [r7, #28]
 8105654:	f003 0307 	and.w	r3, r3, #7
 8105658:	009b      	lsls	r3, r3, #2
 810565a:	fa02 f303 	lsl.w	r3, r2, r3
 810565e:	69ba      	ldr	r2, [r7, #24]
 8105660:	4313      	orrs	r3, r2
 8105662:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105664:	69fb      	ldr	r3, [r7, #28]
 8105666:	08da      	lsrs	r2, r3, #3
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	3208      	adds	r2, #8
 810566c:	69b9      	ldr	r1, [r7, #24]
 810566e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	681b      	ldr	r3, [r3, #0]
 8105676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105678:	69fb      	ldr	r3, [r7, #28]
 810567a:	005b      	lsls	r3, r3, #1
 810567c:	2203      	movs	r2, #3
 810567e:	fa02 f303 	lsl.w	r3, r2, r3
 8105682:	43db      	mvns	r3, r3
 8105684:	69ba      	ldr	r2, [r7, #24]
 8105686:	4013      	ands	r3, r2
 8105688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810568a:	683b      	ldr	r3, [r7, #0]
 810568c:	685b      	ldr	r3, [r3, #4]
 810568e:	f003 0203 	and.w	r2, r3, #3
 8105692:	69fb      	ldr	r3, [r7, #28]
 8105694:	005b      	lsls	r3, r3, #1
 8105696:	fa02 f303 	lsl.w	r3, r2, r3
 810569a:	69ba      	ldr	r2, [r7, #24]
 810569c:	4313      	orrs	r3, r2
 810569e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	69ba      	ldr	r2, [r7, #24]
 81056a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81056a6:	683b      	ldr	r3, [r7, #0]
 81056a8:	685b      	ldr	r3, [r3, #4]
 81056aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	f000 80e0 	beq.w	8105874 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81056b4:	4b2f      	ldr	r3, [pc, #188]	@ (8105774 <HAL_GPIO_Init+0x238>)
 81056b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81056ba:	4a2e      	ldr	r2, [pc, #184]	@ (8105774 <HAL_GPIO_Init+0x238>)
 81056bc:	f043 0302 	orr.w	r3, r3, #2
 81056c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81056c4:	4b2b      	ldr	r3, [pc, #172]	@ (8105774 <HAL_GPIO_Init+0x238>)
 81056c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81056ca:	f003 0302 	and.w	r3, r3, #2
 81056ce:	60fb      	str	r3, [r7, #12]
 81056d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81056d2:	4a29      	ldr	r2, [pc, #164]	@ (8105778 <HAL_GPIO_Init+0x23c>)
 81056d4:	69fb      	ldr	r3, [r7, #28]
 81056d6:	089b      	lsrs	r3, r3, #2
 81056d8:	3302      	adds	r3, #2
 81056da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81056de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81056e0:	69fb      	ldr	r3, [r7, #28]
 81056e2:	f003 0303 	and.w	r3, r3, #3
 81056e6:	009b      	lsls	r3, r3, #2
 81056e8:	220f      	movs	r2, #15
 81056ea:	fa02 f303 	lsl.w	r3, r2, r3
 81056ee:	43db      	mvns	r3, r3
 81056f0:	69ba      	ldr	r2, [r7, #24]
 81056f2:	4013      	ands	r3, r2
 81056f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	4a20      	ldr	r2, [pc, #128]	@ (810577c <HAL_GPIO_Init+0x240>)
 81056fa:	4293      	cmp	r3, r2
 81056fc:	d052      	beq.n	81057a4 <HAL_GPIO_Init+0x268>
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	4a1f      	ldr	r2, [pc, #124]	@ (8105780 <HAL_GPIO_Init+0x244>)
 8105702:	4293      	cmp	r3, r2
 8105704:	d031      	beq.n	810576a <HAL_GPIO_Init+0x22e>
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	4a1e      	ldr	r2, [pc, #120]	@ (8105784 <HAL_GPIO_Init+0x248>)
 810570a:	4293      	cmp	r3, r2
 810570c:	d02b      	beq.n	8105766 <HAL_GPIO_Init+0x22a>
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	4a1d      	ldr	r2, [pc, #116]	@ (8105788 <HAL_GPIO_Init+0x24c>)
 8105712:	4293      	cmp	r3, r2
 8105714:	d025      	beq.n	8105762 <HAL_GPIO_Init+0x226>
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	4a1c      	ldr	r2, [pc, #112]	@ (810578c <HAL_GPIO_Init+0x250>)
 810571a:	4293      	cmp	r3, r2
 810571c:	d01f      	beq.n	810575e <HAL_GPIO_Init+0x222>
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	4a1b      	ldr	r2, [pc, #108]	@ (8105790 <HAL_GPIO_Init+0x254>)
 8105722:	4293      	cmp	r3, r2
 8105724:	d019      	beq.n	810575a <HAL_GPIO_Init+0x21e>
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	4a1a      	ldr	r2, [pc, #104]	@ (8105794 <HAL_GPIO_Init+0x258>)
 810572a:	4293      	cmp	r3, r2
 810572c:	d013      	beq.n	8105756 <HAL_GPIO_Init+0x21a>
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	4a19      	ldr	r2, [pc, #100]	@ (8105798 <HAL_GPIO_Init+0x25c>)
 8105732:	4293      	cmp	r3, r2
 8105734:	d00d      	beq.n	8105752 <HAL_GPIO_Init+0x216>
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	4a18      	ldr	r2, [pc, #96]	@ (810579c <HAL_GPIO_Init+0x260>)
 810573a:	4293      	cmp	r3, r2
 810573c:	d007      	beq.n	810574e <HAL_GPIO_Init+0x212>
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	4a17      	ldr	r2, [pc, #92]	@ (81057a0 <HAL_GPIO_Init+0x264>)
 8105742:	4293      	cmp	r3, r2
 8105744:	d101      	bne.n	810574a <HAL_GPIO_Init+0x20e>
 8105746:	2309      	movs	r3, #9
 8105748:	e02d      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810574a:	230a      	movs	r3, #10
 810574c:	e02b      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810574e:	2308      	movs	r3, #8
 8105750:	e029      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 8105752:	2307      	movs	r3, #7
 8105754:	e027      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 8105756:	2306      	movs	r3, #6
 8105758:	e025      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810575a:	2305      	movs	r3, #5
 810575c:	e023      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810575e:	2304      	movs	r3, #4
 8105760:	e021      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 8105762:	2303      	movs	r3, #3
 8105764:	e01f      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 8105766:	2302      	movs	r3, #2
 8105768:	e01d      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810576a:	2301      	movs	r3, #1
 810576c:	e01b      	b.n	81057a6 <HAL_GPIO_Init+0x26a>
 810576e:	bf00      	nop
 8105770:	580000c0 	.word	0x580000c0
 8105774:	58024400 	.word	0x58024400
 8105778:	58000400 	.word	0x58000400
 810577c:	58020000 	.word	0x58020000
 8105780:	58020400 	.word	0x58020400
 8105784:	58020800 	.word	0x58020800
 8105788:	58020c00 	.word	0x58020c00
 810578c:	58021000 	.word	0x58021000
 8105790:	58021400 	.word	0x58021400
 8105794:	58021800 	.word	0x58021800
 8105798:	58021c00 	.word	0x58021c00
 810579c:	58022000 	.word	0x58022000
 81057a0:	58022400 	.word	0x58022400
 81057a4:	2300      	movs	r3, #0
 81057a6:	69fa      	ldr	r2, [r7, #28]
 81057a8:	f002 0203 	and.w	r2, r2, #3
 81057ac:	0092      	lsls	r2, r2, #2
 81057ae:	4093      	lsls	r3, r2
 81057b0:	69ba      	ldr	r2, [r7, #24]
 81057b2:	4313      	orrs	r3, r2
 81057b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81057b6:	4938      	ldr	r1, [pc, #224]	@ (8105898 <HAL_GPIO_Init+0x35c>)
 81057b8:	69fb      	ldr	r3, [r7, #28]
 81057ba:	089b      	lsrs	r3, r3, #2
 81057bc:	3302      	adds	r3, #2
 81057be:	69ba      	ldr	r2, [r7, #24]
 81057c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81057c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81057c8:	681b      	ldr	r3, [r3, #0]
 81057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81057cc:	693b      	ldr	r3, [r7, #16]
 81057ce:	43db      	mvns	r3, r3
 81057d0:	69ba      	ldr	r2, [r7, #24]
 81057d2:	4013      	ands	r3, r2
 81057d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81057d6:	683b      	ldr	r3, [r7, #0]
 81057d8:	685b      	ldr	r3, [r3, #4]
 81057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81057de:	2b00      	cmp	r3, #0
 81057e0:	d003      	beq.n	81057ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81057e2:	69ba      	ldr	r2, [r7, #24]
 81057e4:	693b      	ldr	r3, [r7, #16]
 81057e6:	4313      	orrs	r3, r2
 81057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81057ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81057ee:	69bb      	ldr	r3, [r7, #24]
 81057f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81057f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81057f6:	685b      	ldr	r3, [r3, #4]
 81057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81057fa:	693b      	ldr	r3, [r7, #16]
 81057fc:	43db      	mvns	r3, r3
 81057fe:	69ba      	ldr	r2, [r7, #24]
 8105800:	4013      	ands	r3, r2
 8105802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105804:	683b      	ldr	r3, [r7, #0]
 8105806:	685b      	ldr	r3, [r3, #4]
 8105808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810580c:	2b00      	cmp	r3, #0
 810580e:	d003      	beq.n	8105818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105810:	69ba      	ldr	r2, [r7, #24]
 8105812:	693b      	ldr	r3, [r7, #16]
 8105814:	4313      	orrs	r3, r2
 8105816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810581c:	69bb      	ldr	r3, [r7, #24]
 810581e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105820:	697b      	ldr	r3, [r7, #20]
 8105822:	685b      	ldr	r3, [r3, #4]
 8105824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105826:	693b      	ldr	r3, [r7, #16]
 8105828:	43db      	mvns	r3, r3
 810582a:	69ba      	ldr	r2, [r7, #24]
 810582c:	4013      	ands	r3, r2
 810582e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105830:	683b      	ldr	r3, [r7, #0]
 8105832:	685b      	ldr	r3, [r3, #4]
 8105834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105838:	2b00      	cmp	r3, #0
 810583a:	d003      	beq.n	8105844 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810583c:	69ba      	ldr	r2, [r7, #24]
 810583e:	693b      	ldr	r3, [r7, #16]
 8105840:	4313      	orrs	r3, r2
 8105842:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105844:	697b      	ldr	r3, [r7, #20]
 8105846:	69ba      	ldr	r2, [r7, #24]
 8105848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810584a:	697b      	ldr	r3, [r7, #20]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105850:	693b      	ldr	r3, [r7, #16]
 8105852:	43db      	mvns	r3, r3
 8105854:	69ba      	ldr	r2, [r7, #24]
 8105856:	4013      	ands	r3, r2
 8105858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810585a:	683b      	ldr	r3, [r7, #0]
 810585c:	685b      	ldr	r3, [r3, #4]
 810585e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105862:	2b00      	cmp	r3, #0
 8105864:	d003      	beq.n	810586e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105866:	69ba      	ldr	r2, [r7, #24]
 8105868:	693b      	ldr	r3, [r7, #16]
 810586a:	4313      	orrs	r3, r2
 810586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810586e:	697b      	ldr	r3, [r7, #20]
 8105870:	69ba      	ldr	r2, [r7, #24]
 8105872:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105874:	69fb      	ldr	r3, [r7, #28]
 8105876:	3301      	adds	r3, #1
 8105878:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810587a:	683b      	ldr	r3, [r7, #0]
 810587c:	681a      	ldr	r2, [r3, #0]
 810587e:	69fb      	ldr	r3, [r7, #28]
 8105880:	fa22 f303 	lsr.w	r3, r2, r3
 8105884:	2b00      	cmp	r3, #0
 8105886:	f47f ae63 	bne.w	8105550 <HAL_GPIO_Init+0x14>
  }
}
 810588a:	bf00      	nop
 810588c:	bf00      	nop
 810588e:	3724      	adds	r7, #36	@ 0x24
 8105890:	46bd      	mov	sp, r7
 8105892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105896:	4770      	bx	lr
 8105898:	58000400 	.word	0x58000400

0810589c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810589c:	b480      	push	{r7}
 810589e:	b083      	sub	sp, #12
 81058a0:	af00      	add	r7, sp, #0
 81058a2:	6078      	str	r0, [r7, #4]
 81058a4:	460b      	mov	r3, r1
 81058a6:	807b      	strh	r3, [r7, #2]
 81058a8:	4613      	mov	r3, r2
 81058aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81058ac:	787b      	ldrb	r3, [r7, #1]
 81058ae:	2b00      	cmp	r3, #0
 81058b0:	d003      	beq.n	81058ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81058b2:	887a      	ldrh	r2, [r7, #2]
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81058b8:	e003      	b.n	81058c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81058ba:	887b      	ldrh	r3, [r7, #2]
 81058bc:	041a      	lsls	r2, r3, #16
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	619a      	str	r2, [r3, #24]
}
 81058c2:	bf00      	nop
 81058c4:	370c      	adds	r7, #12
 81058c6:	46bd      	mov	sp, r7
 81058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058cc:	4770      	bx	lr

081058ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81058ce:	b480      	push	{r7}
 81058d0:	b085      	sub	sp, #20
 81058d2:	af00      	add	r7, sp, #0
 81058d4:	6078      	str	r0, [r7, #4]
 81058d6:	460b      	mov	r3, r1
 81058d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	695b      	ldr	r3, [r3, #20]
 81058de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81058e0:	887a      	ldrh	r2, [r7, #2]
 81058e2:	68fb      	ldr	r3, [r7, #12]
 81058e4:	4013      	ands	r3, r2
 81058e6:	041a      	lsls	r2, r3, #16
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	43d9      	mvns	r1, r3
 81058ec:	887b      	ldrh	r3, [r7, #2]
 81058ee:	400b      	ands	r3, r1
 81058f0:	431a      	orrs	r2, r3
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	619a      	str	r2, [r3, #24]
}
 81058f6:	bf00      	nop
 81058f8:	3714      	adds	r7, #20
 81058fa:	46bd      	mov	sp, r7
 81058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105900:	4770      	bx	lr
	...

08105904 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105904:	b480      	push	{r7}
 8105906:	b083      	sub	sp, #12
 8105908:	af00      	add	r7, sp, #0
 810590a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810590c:	4b05      	ldr	r3, [pc, #20]	@ (8105924 <HAL_HSEM_ActivateNotification+0x20>)
 810590e:	681a      	ldr	r2, [r3, #0]
 8105910:	4904      	ldr	r1, [pc, #16]	@ (8105924 <HAL_HSEM_ActivateNotification+0x20>)
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	4313      	orrs	r3, r2
 8105916:	600b      	str	r3, [r1, #0]
#endif
}
 8105918:	bf00      	nop
 810591a:	370c      	adds	r7, #12
 810591c:	46bd      	mov	sp, r7
 810591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105922:	4770      	bx	lr
 8105924:	58026510 	.word	0x58026510

08105928 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8105928:	b580      	push	{r7, lr}
 810592a:	b082      	sub	sp, #8
 810592c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810592e:	4b0a      	ldr	r3, [pc, #40]	@ (8105958 <HAL_HSEM_IRQHandler+0x30>)
 8105930:	68db      	ldr	r3, [r3, #12]
 8105932:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8105934:	4b08      	ldr	r3, [pc, #32]	@ (8105958 <HAL_HSEM_IRQHandler+0x30>)
 8105936:	681a      	ldr	r2, [r3, #0]
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	43db      	mvns	r3, r3
 810593c:	4906      	ldr	r1, [pc, #24]	@ (8105958 <HAL_HSEM_IRQHandler+0x30>)
 810593e:	4013      	ands	r3, r2
 8105940:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8105942:	4a05      	ldr	r2, [pc, #20]	@ (8105958 <HAL_HSEM_IRQHandler+0x30>)
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8105948:	6878      	ldr	r0, [r7, #4]
 810594a:	f000 f807 	bl	810595c <HAL_HSEM_FreeCallback>
}
 810594e:	bf00      	nop
 8105950:	3708      	adds	r7, #8
 8105952:	46bd      	mov	sp, r7
 8105954:	bd80      	pop	{r7, pc}
 8105956:	bf00      	nop
 8105958:	58026510 	.word	0x58026510

0810595c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810595c:	b480      	push	{r7}
 810595e:	b083      	sub	sp, #12
 8105960:	af00      	add	r7, sp, #0
 8105962:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8105964:	bf00      	nop
 8105966:	370c      	adds	r7, #12
 8105968:	46bd      	mov	sp, r7
 810596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810596e:	4770      	bx	lr

08105970 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8105970:	b580      	push	{r7, lr}
 8105972:	b086      	sub	sp, #24
 8105974:	af02      	add	r7, sp, #8
 8105976:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	2b00      	cmp	r3, #0
 810597c:	d101      	bne.n	8105982 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810597e:	2301      	movs	r3, #1
 8105980:	e0fe      	b.n	8105b80 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8105988:	b2db      	uxtb	r3, r3
 810598a:	2b00      	cmp	r3, #0
 810598c:	d106      	bne.n	810599c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	2200      	movs	r2, #0
 8105992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8105996:	6878      	ldr	r0, [r7, #4]
 8105998:	f7fc fc50 	bl	810223c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	2203      	movs	r2, #3
 81059a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	681b      	ldr	r3, [r3, #0]
 81059a8:	4618      	mov	r0, r3
 81059aa:	f008 f80a 	bl	810d9c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	6818      	ldr	r0, [r3, #0]
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	7c1a      	ldrb	r2, [r3, #16]
 81059b6:	f88d 2000 	strb.w	r2, [sp]
 81059ba:	3304      	adds	r3, #4
 81059bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81059be:	f007 ff8f 	bl	810d8e0 <USB_CoreInit>
 81059c2:	4603      	mov	r3, r0
 81059c4:	2b00      	cmp	r3, #0
 81059c6:	d005      	beq.n	81059d4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	2202      	movs	r2, #2
 81059cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81059d0:	2301      	movs	r3, #1
 81059d2:	e0d5      	b.n	8105b80 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	681b      	ldr	r3, [r3, #0]
 81059d8:	2100      	movs	r1, #0
 81059da:	4618      	mov	r0, r3
 81059dc:	f008 f802 	bl	810d9e4 <USB_SetCurrentMode>
 81059e0:	4603      	mov	r3, r0
 81059e2:	2b00      	cmp	r3, #0
 81059e4:	d005      	beq.n	81059f2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	2202      	movs	r2, #2
 81059ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81059ee:	2301      	movs	r3, #1
 81059f0:	e0c6      	b.n	8105b80 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81059f2:	2300      	movs	r3, #0
 81059f4:	73fb      	strb	r3, [r7, #15]
 81059f6:	e04a      	b.n	8105a8e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81059f8:	7bfa      	ldrb	r2, [r7, #15]
 81059fa:	6879      	ldr	r1, [r7, #4]
 81059fc:	4613      	mov	r3, r2
 81059fe:	00db      	lsls	r3, r3, #3
 8105a00:	4413      	add	r3, r2
 8105a02:	009b      	lsls	r3, r3, #2
 8105a04:	440b      	add	r3, r1
 8105a06:	3315      	adds	r3, #21
 8105a08:	2201      	movs	r2, #1
 8105a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8105a0c:	7bfa      	ldrb	r2, [r7, #15]
 8105a0e:	6879      	ldr	r1, [r7, #4]
 8105a10:	4613      	mov	r3, r2
 8105a12:	00db      	lsls	r3, r3, #3
 8105a14:	4413      	add	r3, r2
 8105a16:	009b      	lsls	r3, r3, #2
 8105a18:	440b      	add	r3, r1
 8105a1a:	3314      	adds	r3, #20
 8105a1c:	7bfa      	ldrb	r2, [r7, #15]
 8105a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8105a20:	7bfa      	ldrb	r2, [r7, #15]
 8105a22:	7bfb      	ldrb	r3, [r7, #15]
 8105a24:	b298      	uxth	r0, r3
 8105a26:	6879      	ldr	r1, [r7, #4]
 8105a28:	4613      	mov	r3, r2
 8105a2a:	00db      	lsls	r3, r3, #3
 8105a2c:	4413      	add	r3, r2
 8105a2e:	009b      	lsls	r3, r3, #2
 8105a30:	440b      	add	r3, r1
 8105a32:	332e      	adds	r3, #46	@ 0x2e
 8105a34:	4602      	mov	r2, r0
 8105a36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8105a38:	7bfa      	ldrb	r2, [r7, #15]
 8105a3a:	6879      	ldr	r1, [r7, #4]
 8105a3c:	4613      	mov	r3, r2
 8105a3e:	00db      	lsls	r3, r3, #3
 8105a40:	4413      	add	r3, r2
 8105a42:	009b      	lsls	r3, r3, #2
 8105a44:	440b      	add	r3, r1
 8105a46:	3318      	adds	r3, #24
 8105a48:	2200      	movs	r2, #0
 8105a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8105a4c:	7bfa      	ldrb	r2, [r7, #15]
 8105a4e:	6879      	ldr	r1, [r7, #4]
 8105a50:	4613      	mov	r3, r2
 8105a52:	00db      	lsls	r3, r3, #3
 8105a54:	4413      	add	r3, r2
 8105a56:	009b      	lsls	r3, r3, #2
 8105a58:	440b      	add	r3, r1
 8105a5a:	331c      	adds	r3, #28
 8105a5c:	2200      	movs	r2, #0
 8105a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8105a60:	7bfa      	ldrb	r2, [r7, #15]
 8105a62:	6879      	ldr	r1, [r7, #4]
 8105a64:	4613      	mov	r3, r2
 8105a66:	00db      	lsls	r3, r3, #3
 8105a68:	4413      	add	r3, r2
 8105a6a:	009b      	lsls	r3, r3, #2
 8105a6c:	440b      	add	r3, r1
 8105a6e:	3320      	adds	r3, #32
 8105a70:	2200      	movs	r2, #0
 8105a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8105a74:	7bfa      	ldrb	r2, [r7, #15]
 8105a76:	6879      	ldr	r1, [r7, #4]
 8105a78:	4613      	mov	r3, r2
 8105a7a:	00db      	lsls	r3, r3, #3
 8105a7c:	4413      	add	r3, r2
 8105a7e:	009b      	lsls	r3, r3, #2
 8105a80:	440b      	add	r3, r1
 8105a82:	3324      	adds	r3, #36	@ 0x24
 8105a84:	2200      	movs	r2, #0
 8105a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105a88:	7bfb      	ldrb	r3, [r7, #15]
 8105a8a:	3301      	adds	r3, #1
 8105a8c:	73fb      	strb	r3, [r7, #15]
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	791b      	ldrb	r3, [r3, #4]
 8105a92:	7bfa      	ldrb	r2, [r7, #15]
 8105a94:	429a      	cmp	r2, r3
 8105a96:	d3af      	bcc.n	81059f8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105a98:	2300      	movs	r3, #0
 8105a9a:	73fb      	strb	r3, [r7, #15]
 8105a9c:	e044      	b.n	8105b28 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8105a9e:	7bfa      	ldrb	r2, [r7, #15]
 8105aa0:	6879      	ldr	r1, [r7, #4]
 8105aa2:	4613      	mov	r3, r2
 8105aa4:	00db      	lsls	r3, r3, #3
 8105aa6:	4413      	add	r3, r2
 8105aa8:	009b      	lsls	r3, r3, #2
 8105aaa:	440b      	add	r3, r1
 8105aac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8105ab0:	2200      	movs	r2, #0
 8105ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8105ab4:	7bfa      	ldrb	r2, [r7, #15]
 8105ab6:	6879      	ldr	r1, [r7, #4]
 8105ab8:	4613      	mov	r3, r2
 8105aba:	00db      	lsls	r3, r3, #3
 8105abc:	4413      	add	r3, r2
 8105abe:	009b      	lsls	r3, r3, #2
 8105ac0:	440b      	add	r3, r1
 8105ac2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8105ac6:	7bfa      	ldrb	r2, [r7, #15]
 8105ac8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8105aca:	7bfa      	ldrb	r2, [r7, #15]
 8105acc:	6879      	ldr	r1, [r7, #4]
 8105ace:	4613      	mov	r3, r2
 8105ad0:	00db      	lsls	r3, r3, #3
 8105ad2:	4413      	add	r3, r2
 8105ad4:	009b      	lsls	r3, r3, #2
 8105ad6:	440b      	add	r3, r1
 8105ad8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8105adc:	2200      	movs	r2, #0
 8105ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8105ae0:	7bfa      	ldrb	r2, [r7, #15]
 8105ae2:	6879      	ldr	r1, [r7, #4]
 8105ae4:	4613      	mov	r3, r2
 8105ae6:	00db      	lsls	r3, r3, #3
 8105ae8:	4413      	add	r3, r2
 8105aea:	009b      	lsls	r3, r3, #2
 8105aec:	440b      	add	r3, r1
 8105aee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8105af2:	2200      	movs	r2, #0
 8105af4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8105af6:	7bfa      	ldrb	r2, [r7, #15]
 8105af8:	6879      	ldr	r1, [r7, #4]
 8105afa:	4613      	mov	r3, r2
 8105afc:	00db      	lsls	r3, r3, #3
 8105afe:	4413      	add	r3, r2
 8105b00:	009b      	lsls	r3, r3, #2
 8105b02:	440b      	add	r3, r1
 8105b04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8105b08:	2200      	movs	r2, #0
 8105b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8105b0c:	7bfa      	ldrb	r2, [r7, #15]
 8105b0e:	6879      	ldr	r1, [r7, #4]
 8105b10:	4613      	mov	r3, r2
 8105b12:	00db      	lsls	r3, r3, #3
 8105b14:	4413      	add	r3, r2
 8105b16:	009b      	lsls	r3, r3, #2
 8105b18:	440b      	add	r3, r1
 8105b1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8105b1e:	2200      	movs	r2, #0
 8105b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105b22:	7bfb      	ldrb	r3, [r7, #15]
 8105b24:	3301      	adds	r3, #1
 8105b26:	73fb      	strb	r3, [r7, #15]
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	791b      	ldrb	r3, [r3, #4]
 8105b2c:	7bfa      	ldrb	r2, [r7, #15]
 8105b2e:	429a      	cmp	r2, r3
 8105b30:	d3b5      	bcc.n	8105a9e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	6818      	ldr	r0, [r3, #0]
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	7c1a      	ldrb	r2, [r3, #16]
 8105b3a:	f88d 2000 	strb.w	r2, [sp]
 8105b3e:	3304      	adds	r3, #4
 8105b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8105b42:	f007 ff9b 	bl	810da7c <USB_DevInit>
 8105b46:	4603      	mov	r3, r0
 8105b48:	2b00      	cmp	r3, #0
 8105b4a:	d005      	beq.n	8105b58 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	2202      	movs	r2, #2
 8105b50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8105b54:	2301      	movs	r3, #1
 8105b56:	e013      	b.n	8105b80 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	2200      	movs	r2, #0
 8105b5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	2201      	movs	r2, #1
 8105b62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	7b1b      	ldrb	r3, [r3, #12]
 8105b6a:	2b01      	cmp	r3, #1
 8105b6c:	d102      	bne.n	8105b74 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8105b6e:	6878      	ldr	r0, [r7, #4]
 8105b70:	f000 f80a 	bl	8105b88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	4618      	mov	r0, r3
 8105b7a:	f008 f956 	bl	810de2a <USB_DevDisconnect>

  return HAL_OK;
 8105b7e:	2300      	movs	r3, #0
}
 8105b80:	4618      	mov	r0, r3
 8105b82:	3710      	adds	r7, #16
 8105b84:	46bd      	mov	sp, r7
 8105b86:	bd80      	pop	{r7, pc}

08105b88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8105b88:	b480      	push	{r7}
 8105b8a:	b085      	sub	sp, #20
 8105b8c:	af00      	add	r7, sp, #0
 8105b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	2201      	movs	r2, #1
 8105b9a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	2200      	movs	r2, #0
 8105ba2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8105ba6:	68fb      	ldr	r3, [r7, #12]
 8105ba8:	699b      	ldr	r3, [r3, #24]
 8105baa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8105bae:	68fb      	ldr	r3, [r7, #12]
 8105bb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8105bb2:	68fb      	ldr	r3, [r7, #12]
 8105bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105bba:	f043 0303 	orr.w	r3, r3, #3
 8105bbe:	68fa      	ldr	r2, [r7, #12]
 8105bc0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8105bc2:	2300      	movs	r3, #0
}
 8105bc4:	4618      	mov	r0, r3
 8105bc6:	3714      	adds	r7, #20
 8105bc8:	46bd      	mov	sp, r7
 8105bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bce:	4770      	bx	lr

08105bd0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105bd0:	b580      	push	{r7, lr}
 8105bd2:	b084      	sub	sp, #16
 8105bd4:	af00      	add	r7, sp, #0
 8105bd6:	60f8      	str	r0, [r7, #12]
 8105bd8:	460b      	mov	r3, r1
 8105bda:	607a      	str	r2, [r7, #4]
 8105bdc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105bde:	4b37      	ldr	r3, [pc, #220]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105be0:	681b      	ldr	r3, [r3, #0]
 8105be2:	f023 0201 	bic.w	r2, r3, #1
 8105be6:	4935      	ldr	r1, [pc, #212]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105be8:	68fb      	ldr	r3, [r7, #12]
 8105bea:	4313      	orrs	r3, r2
 8105bec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d123      	bne.n	8105c3c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105bf4:	f7fe fac6 	bl	8104184 <HAL_GetCurrentCPUID>
 8105bf8:	4603      	mov	r3, r0
 8105bfa:	2b03      	cmp	r3, #3
 8105bfc:	d158      	bne.n	8105cb0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c00:	691b      	ldr	r3, [r3, #16]
 8105c02:	4a2e      	ldr	r2, [pc, #184]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c04:	f023 0301 	bic.w	r3, r3, #1
 8105c08:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c0c:	691b      	ldr	r3, [r3, #16]
 8105c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c10:	f043 0304 	orr.w	r3, r3, #4
 8105c14:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105c16:	f3bf 8f4f 	dsb	sy
}
 8105c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105c1c:	f3bf 8f6f 	isb	sy
}
 8105c20:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105c22:	7afb      	ldrb	r3, [r7, #11]
 8105c24:	2b01      	cmp	r3, #1
 8105c26:	d101      	bne.n	8105c2c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105c28:	bf30      	wfi
 8105c2a:	e000      	b.n	8105c2e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105c2c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105c2e:	4b24      	ldr	r3, [pc, #144]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c30:	691b      	ldr	r3, [r3, #16]
 8105c32:	4a23      	ldr	r2, [pc, #140]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c34:	f023 0304 	bic.w	r3, r3, #4
 8105c38:	6113      	str	r3, [r2, #16]
 8105c3a:	e03c      	b.n	8105cb6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	2b01      	cmp	r3, #1
 8105c40:	d123      	bne.n	8105c8a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105c42:	f7fe fa9f 	bl	8104184 <HAL_GetCurrentCPUID>
 8105c46:	4603      	mov	r3, r0
 8105c48:	2b01      	cmp	r3, #1
 8105c4a:	d133      	bne.n	8105cb4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c4e:	695b      	ldr	r3, [r3, #20]
 8105c50:	4a1a      	ldr	r2, [pc, #104]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c52:	f023 0302 	bic.w	r3, r3, #2
 8105c56:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105c58:	4b19      	ldr	r3, [pc, #100]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c5a:	691b      	ldr	r3, [r3, #16]
 8105c5c:	4a18      	ldr	r2, [pc, #96]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c5e:	f043 0304 	orr.w	r3, r3, #4
 8105c62:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105c64:	f3bf 8f4f 	dsb	sy
}
 8105c68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105c6a:	f3bf 8f6f 	isb	sy
}
 8105c6e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105c70:	7afb      	ldrb	r3, [r7, #11]
 8105c72:	2b01      	cmp	r3, #1
 8105c74:	d101      	bne.n	8105c7a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105c76:	bf30      	wfi
 8105c78:	e000      	b.n	8105c7c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105c7a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105c7c:	4b10      	ldr	r3, [pc, #64]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c7e:	691b      	ldr	r3, [r3, #16]
 8105c80:	4a0f      	ldr	r2, [pc, #60]	@ (8105cc0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c82:	f023 0304 	bic.w	r3, r3, #4
 8105c86:	6113      	str	r3, [r2, #16]
 8105c88:	e015      	b.n	8105cb6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105c8a:	f7fe fa7b 	bl	8104184 <HAL_GetCurrentCPUID>
 8105c8e:	4603      	mov	r3, r0
 8105c90:	2b03      	cmp	r3, #3
 8105c92:	d106      	bne.n	8105ca2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105c94:	4b09      	ldr	r3, [pc, #36]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c96:	691b      	ldr	r3, [r3, #16]
 8105c98:	4a08      	ldr	r2, [pc, #32]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c9a:	f023 0304 	bic.w	r3, r3, #4
 8105c9e:	6113      	str	r3, [r2, #16]
 8105ca0:	e009      	b.n	8105cb6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105ca2:	4b06      	ldr	r3, [pc, #24]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ca4:	695b      	ldr	r3, [r3, #20]
 8105ca6:	4a05      	ldr	r2, [pc, #20]	@ (8105cbc <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ca8:	f023 0304 	bic.w	r3, r3, #4
 8105cac:	6153      	str	r3, [r2, #20]
 8105cae:	e002      	b.n	8105cb6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105cb0:	bf00      	nop
 8105cb2:	e000      	b.n	8105cb6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105cb4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105cb6:	3710      	adds	r7, #16
 8105cb8:	46bd      	mov	sp, r7
 8105cba:	bd80      	pop	{r7, pc}
 8105cbc:	58024800 	.word	0x58024800
 8105cc0:	e000ed00 	.word	0xe000ed00

08105cc4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105cc4:	b580      	push	{r7, lr}
 8105cc6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105cc8:	f7fe fa5c 	bl	8104184 <HAL_GetCurrentCPUID>
 8105ccc:	4603      	mov	r3, r0
 8105cce:	2b03      	cmp	r3, #3
 8105cd0:	d101      	bne.n	8105cd6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105cd2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105cd4:	e001      	b.n	8105cda <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105cd6:	bf40      	sev
    __WFE ();
 8105cd8:	bf20      	wfe
}
 8105cda:	bf00      	nop
 8105cdc:	bd80      	pop	{r7, pc}
	...

08105ce0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8105ce0:	b480      	push	{r7}
 8105ce2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8105ce4:	4b05      	ldr	r3, [pc, #20]	@ (8105cfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105ce6:	68db      	ldr	r3, [r3, #12]
 8105ce8:	4a04      	ldr	r2, [pc, #16]	@ (8105cfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105cee:	60d3      	str	r3, [r2, #12]
}
 8105cf0:	bf00      	nop
 8105cf2:	46bd      	mov	sp, r7
 8105cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cf8:	4770      	bx	lr
 8105cfa:	bf00      	nop
 8105cfc:	58024800 	.word	0x58024800

08105d00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8105d00:	b580      	push	{r7, lr}
 8105d02:	b086      	sub	sp, #24
 8105d04:	af02      	add	r7, sp, #8
 8105d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8105d08:	f7fc ff04 	bl	8102b14 <HAL_GetTick>
 8105d0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	2b00      	cmp	r3, #0
 8105d12:	d101      	bne.n	8105d18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8105d14:	2301      	movs	r3, #1
 8105d16:	e061      	b.n	8105ddc <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105d1e:	b2db      	uxtb	r3, r3
 8105d20:	2b00      	cmp	r3, #0
 8105d22:	d107      	bne.n	8105d34 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8105d24:	6878      	ldr	r0, [r7, #4]
 8105d26:	f7fb fd91 	bl	810184c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8105d2a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8105d2e:	6878      	ldr	r0, [r7, #4]
 8105d30:	f000 f85a 	bl	8105de8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	689b      	ldr	r3, [r3, #8]
 8105d42:	3b01      	subs	r3, #1
 8105d44:	021a      	lsls	r2, r3, #8
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	430a      	orrs	r2, r1
 8105d4c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105d52:	9300      	str	r3, [sp, #0]
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	2200      	movs	r2, #0
 8105d58:	2120      	movs	r1, #32
 8105d5a:	6878      	ldr	r0, [r7, #4]
 8105d5c:	f000 f852 	bl	8105e04 <QSPI_WaitFlagStateUntilTimeout>
 8105d60:	4603      	mov	r3, r0
 8105d62:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8105d64:	7afb      	ldrb	r3, [r7, #11]
 8105d66:	2b00      	cmp	r3, #0
 8105d68:	d137      	bne.n	8105dda <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105d74:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8105d78:	687a      	ldr	r2, [r7, #4]
 8105d7a:	6852      	ldr	r2, [r2, #4]
 8105d7c:	0611      	lsls	r1, r2, #24
 8105d7e:	687a      	ldr	r2, [r7, #4]
 8105d80:	68d2      	ldr	r2, [r2, #12]
 8105d82:	4311      	orrs	r1, r2
 8105d84:	687a      	ldr	r2, [r7, #4]
 8105d86:	69d2      	ldr	r2, [r2, #28]
 8105d88:	4311      	orrs	r1, r2
 8105d8a:	687a      	ldr	r2, [r7, #4]
 8105d8c:	6a12      	ldr	r2, [r2, #32]
 8105d8e:	4311      	orrs	r1, r2
 8105d90:	687a      	ldr	r2, [r7, #4]
 8105d92:	6812      	ldr	r2, [r2, #0]
 8105d94:	430b      	orrs	r3, r1
 8105d96:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	685a      	ldr	r2, [r3, #4]
 8105d9e:	4b11      	ldr	r3, [pc, #68]	@ (8105de4 <HAL_QSPI_Init+0xe4>)
 8105da0:	4013      	ands	r3, r2
 8105da2:	687a      	ldr	r2, [r7, #4]
 8105da4:	6912      	ldr	r2, [r2, #16]
 8105da6:	0411      	lsls	r1, r2, #16
 8105da8:	687a      	ldr	r2, [r7, #4]
 8105daa:	6952      	ldr	r2, [r2, #20]
 8105dac:	4311      	orrs	r1, r2
 8105dae:	687a      	ldr	r2, [r7, #4]
 8105db0:	6992      	ldr	r2, [r2, #24]
 8105db2:	4311      	orrs	r1, r2
 8105db4:	687a      	ldr	r2, [r7, #4]
 8105db6:	6812      	ldr	r2, [r2, #0]
 8105db8:	430b      	orrs	r3, r1
 8105dba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	681a      	ldr	r2, [r3, #0]
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	f042 0201 	orr.w	r2, r2, #1
 8105dca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	2200      	movs	r2, #0
 8105dd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	2201      	movs	r2, #1
 8105dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8105dda:	7afb      	ldrb	r3, [r7, #11]
}
 8105ddc:	4618      	mov	r0, r3
 8105dde:	3710      	adds	r7, #16
 8105de0:	46bd      	mov	sp, r7
 8105de2:	bd80      	pop	{r7, pc}
 8105de4:	ffe0f8fe 	.word	0xffe0f8fe

08105de8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8105de8:	b480      	push	{r7}
 8105dea:	b083      	sub	sp, #12
 8105dec:	af00      	add	r7, sp, #0
 8105dee:	6078      	str	r0, [r7, #4]
 8105df0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	683a      	ldr	r2, [r7, #0]
 8105df6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8105df8:	bf00      	nop
 8105dfa:	370c      	adds	r7, #12
 8105dfc:	46bd      	mov	sp, r7
 8105dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e02:	4770      	bx	lr

08105e04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8105e04:	b580      	push	{r7, lr}
 8105e06:	b084      	sub	sp, #16
 8105e08:	af00      	add	r7, sp, #0
 8105e0a:	60f8      	str	r0, [r7, #12]
 8105e0c:	60b9      	str	r1, [r7, #8]
 8105e0e:	603b      	str	r3, [r7, #0]
 8105e10:	4613      	mov	r3, r2
 8105e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105e14:	e01a      	b.n	8105e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105e16:	69bb      	ldr	r3, [r7, #24]
 8105e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e1c:	d016      	beq.n	8105e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105e1e:	f7fc fe79 	bl	8102b14 <HAL_GetTick>
 8105e22:	4602      	mov	r2, r0
 8105e24:	683b      	ldr	r3, [r7, #0]
 8105e26:	1ad3      	subs	r3, r2, r3
 8105e28:	69ba      	ldr	r2, [r7, #24]
 8105e2a:	429a      	cmp	r2, r3
 8105e2c:	d302      	bcc.n	8105e34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8105e2e:	69bb      	ldr	r3, [r7, #24]
 8105e30:	2b00      	cmp	r3, #0
 8105e32:	d10b      	bne.n	8105e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	2204      	movs	r2, #4
 8105e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8105e3c:	68fb      	ldr	r3, [r7, #12]
 8105e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e40:	f043 0201 	orr.w	r2, r3, #1
 8105e44:	68fb      	ldr	r3, [r7, #12]
 8105e46:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8105e48:	2301      	movs	r3, #1
 8105e4a:	e00e      	b.n	8105e6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	689a      	ldr	r2, [r3, #8]
 8105e52:	68bb      	ldr	r3, [r7, #8]
 8105e54:	4013      	ands	r3, r2
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	bf14      	ite	ne
 8105e5a:	2301      	movne	r3, #1
 8105e5c:	2300      	moveq	r3, #0
 8105e5e:	b2db      	uxtb	r3, r3
 8105e60:	461a      	mov	r2, r3
 8105e62:	79fb      	ldrb	r3, [r7, #7]
 8105e64:	429a      	cmp	r2, r3
 8105e66:	d1d6      	bne.n	8105e16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105e68:	2300      	movs	r3, #0
}
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	3710      	adds	r7, #16
 8105e6e:	46bd      	mov	sp, r7
 8105e70:	bd80      	pop	{r7, pc}
	...

08105e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105e74:	b480      	push	{r7}
 8105e76:	b089      	sub	sp, #36	@ 0x24
 8105e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105e7a:	4bb3      	ldr	r3, [pc, #716]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e7c:	691b      	ldr	r3, [r3, #16]
 8105e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105e82:	2b18      	cmp	r3, #24
 8105e84:	f200 8155 	bhi.w	8106132 <HAL_RCC_GetSysClockFreq+0x2be>
 8105e88:	a201      	add	r2, pc, #4	@ (adr r2, 8105e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e8e:	bf00      	nop
 8105e90:	08105ef5 	.word	0x08105ef5
 8105e94:	08106133 	.word	0x08106133
 8105e98:	08106133 	.word	0x08106133
 8105e9c:	08106133 	.word	0x08106133
 8105ea0:	08106133 	.word	0x08106133
 8105ea4:	08106133 	.word	0x08106133
 8105ea8:	08106133 	.word	0x08106133
 8105eac:	08106133 	.word	0x08106133
 8105eb0:	08105f1b 	.word	0x08105f1b
 8105eb4:	08106133 	.word	0x08106133
 8105eb8:	08106133 	.word	0x08106133
 8105ebc:	08106133 	.word	0x08106133
 8105ec0:	08106133 	.word	0x08106133
 8105ec4:	08106133 	.word	0x08106133
 8105ec8:	08106133 	.word	0x08106133
 8105ecc:	08106133 	.word	0x08106133
 8105ed0:	08105f21 	.word	0x08105f21
 8105ed4:	08106133 	.word	0x08106133
 8105ed8:	08106133 	.word	0x08106133
 8105edc:	08106133 	.word	0x08106133
 8105ee0:	08106133 	.word	0x08106133
 8105ee4:	08106133 	.word	0x08106133
 8105ee8:	08106133 	.word	0x08106133
 8105eec:	08106133 	.word	0x08106133
 8105ef0:	08105f27 	.word	0x08105f27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ef4:	4b94      	ldr	r3, [pc, #592]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	f003 0320 	and.w	r3, r3, #32
 8105efc:	2b00      	cmp	r3, #0
 8105efe:	d009      	beq.n	8105f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f00:	4b91      	ldr	r3, [pc, #580]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	08db      	lsrs	r3, r3, #3
 8105f06:	f003 0303 	and.w	r3, r3, #3
 8105f0a:	4a90      	ldr	r2, [pc, #576]	@ (810614c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8105f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105f12:	e111      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105f14:	4b8d      	ldr	r3, [pc, #564]	@ (810614c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105f16:	61bb      	str	r3, [r7, #24]
      break;
 8105f18:	e10e      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8106150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105f1c:	61bb      	str	r3, [r7, #24]
      break;
 8105f1e:	e10b      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105f20:	4b8c      	ldr	r3, [pc, #560]	@ (8106154 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105f22:	61bb      	str	r3, [r7, #24]
      break;
 8105f24:	e108      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105f26:	4b88      	ldr	r3, [pc, #544]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f2a:	f003 0303 	and.w	r3, r3, #3
 8105f2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105f30:	4b85      	ldr	r3, [pc, #532]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f34:	091b      	lsrs	r3, r3, #4
 8105f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105f3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105f3c:	4b82      	ldr	r3, [pc, #520]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f40:	f003 0301 	and.w	r3, r3, #1
 8105f44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105f46:	4b80      	ldr	r3, [pc, #512]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105f4a:	08db      	lsrs	r3, r3, #3
 8105f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105f50:	68fa      	ldr	r2, [r7, #12]
 8105f52:	fb02 f303 	mul.w	r3, r2, r3
 8105f56:	ee07 3a90 	vmov	s15, r3
 8105f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105f62:	693b      	ldr	r3, [r7, #16]
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	f000 80e1 	beq.w	810612c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8105f6a:	697b      	ldr	r3, [r7, #20]
 8105f6c:	2b02      	cmp	r3, #2
 8105f6e:	f000 8083 	beq.w	8106078 <HAL_RCC_GetSysClockFreq+0x204>
 8105f72:	697b      	ldr	r3, [r7, #20]
 8105f74:	2b02      	cmp	r3, #2
 8105f76:	f200 80a1 	bhi.w	81060bc <HAL_RCC_GetSysClockFreq+0x248>
 8105f7a:	697b      	ldr	r3, [r7, #20]
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d003      	beq.n	8105f88 <HAL_RCC_GetSysClockFreq+0x114>
 8105f80:	697b      	ldr	r3, [r7, #20]
 8105f82:	2b01      	cmp	r3, #1
 8105f84:	d056      	beq.n	8106034 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105f86:	e099      	b.n	81060bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f88:	4b6f      	ldr	r3, [pc, #444]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	f003 0320 	and.w	r3, r3, #32
 8105f90:	2b00      	cmp	r3, #0
 8105f92:	d02d      	beq.n	8105ff0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f94:	4b6c      	ldr	r3, [pc, #432]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	08db      	lsrs	r3, r3, #3
 8105f9a:	f003 0303 	and.w	r3, r3, #3
 8105f9e:	4a6b      	ldr	r2, [pc, #428]	@ (810614c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8105fa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	ee07 3a90 	vmov	s15, r3
 8105fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fb0:	693b      	ldr	r3, [r7, #16]
 8105fb2:	ee07 3a90 	vmov	s15, r3
 8105fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fbe:	4b62      	ldr	r3, [pc, #392]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fc6:	ee07 3a90 	vmov	s15, r3
 8105fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8105fd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106158 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105fee:	e087      	b.n	8106100 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105ff0:	693b      	ldr	r3, [r7, #16]
 8105ff2:	ee07 3a90 	vmov	s15, r3
 8105ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ffa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810615c <HAL_RCC_GetSysClockFreq+0x2e8>
 8105ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106002:	4b51      	ldr	r3, [pc, #324]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810600a:	ee07 3a90 	vmov	s15, r3
 810600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106012:	ed97 6a02 	vldr	s12, [r7, #8]
 8106016:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106158 <HAL_RCC_GetSysClockFreq+0x2e4>
 810601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810602e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106032:	e065      	b.n	8106100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106034:	693b      	ldr	r3, [r7, #16]
 8106036:	ee07 3a90 	vmov	s15, r3
 810603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810603e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106160 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106046:	4b40      	ldr	r3, [pc, #256]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810604e:	ee07 3a90 	vmov	s15, r3
 8106052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106056:	ed97 6a02 	vldr	s12, [r7, #8]
 810605a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106158 <HAL_RCC_GetSysClockFreq+0x2e4>
 810605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106076:	e043      	b.n	8106100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106078:	693b      	ldr	r3, [r7, #16]
 810607a:	ee07 3a90 	vmov	s15, r3
 810607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106082:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106164 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810608a:	4b2f      	ldr	r3, [pc, #188]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810608e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106092:	ee07 3a90 	vmov	s15, r3
 8106096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810609a:	ed97 6a02 	vldr	s12, [r7, #8]
 810609e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106158 <HAL_RCC_GetSysClockFreq+0x2e4>
 81060a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81060ba:	e021      	b.n	8106100 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060bc:	693b      	ldr	r3, [r7, #16]
 81060be:	ee07 3a90 	vmov	s15, r3
 81060c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106160 <HAL_RCC_GetSysClockFreq+0x2ec>
 81060ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060ce:	4b1e      	ldr	r3, [pc, #120]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81060d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060d6:	ee07 3a90 	vmov	s15, r3
 81060da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060de:	ed97 6a02 	vldr	s12, [r7, #8]
 81060e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106158 <HAL_RCC_GetSysClockFreq+0x2e4>
 81060e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81060fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106100:	4b11      	ldr	r3, [pc, #68]	@ (8106148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106104:	0a5b      	lsrs	r3, r3, #9
 8106106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810610a:	3301      	adds	r3, #1
 810610c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810610e:	683b      	ldr	r3, [r7, #0]
 8106110:	ee07 3a90 	vmov	s15, r3
 8106114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106118:	edd7 6a07 	vldr	s13, [r7, #28]
 810611c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106124:	ee17 3a90 	vmov	r3, s15
 8106128:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810612a:	e005      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810612c:	2300      	movs	r3, #0
 810612e:	61bb      	str	r3, [r7, #24]
      break;
 8106130:	e002      	b.n	8106138 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106132:	4b07      	ldr	r3, [pc, #28]	@ (8106150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106134:	61bb      	str	r3, [r7, #24]
      break;
 8106136:	bf00      	nop
  }

  return sysclockfreq;
 8106138:	69bb      	ldr	r3, [r7, #24]
}
 810613a:	4618      	mov	r0, r3
 810613c:	3724      	adds	r7, #36	@ 0x24
 810613e:	46bd      	mov	sp, r7
 8106140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106144:	4770      	bx	lr
 8106146:	bf00      	nop
 8106148:	58024400 	.word	0x58024400
 810614c:	03d09000 	.word	0x03d09000
 8106150:	003d0900 	.word	0x003d0900
 8106154:	017d7840 	.word	0x017d7840
 8106158:	46000000 	.word	0x46000000
 810615c:	4c742400 	.word	0x4c742400
 8106160:	4a742400 	.word	0x4a742400
 8106164:	4bbebc20 	.word	0x4bbebc20

08106168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106168:	b580      	push	{r7, lr}
 810616a:	b082      	sub	sp, #8
 810616c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810616e:	f7ff fe81 	bl	8105e74 <HAL_RCC_GetSysClockFreq>
 8106172:	4602      	mov	r2, r0
 8106174:	4b11      	ldr	r3, [pc, #68]	@ (81061bc <HAL_RCC_GetHCLKFreq+0x54>)
 8106176:	699b      	ldr	r3, [r3, #24]
 8106178:	0a1b      	lsrs	r3, r3, #8
 810617a:	f003 030f 	and.w	r3, r3, #15
 810617e:	4910      	ldr	r1, [pc, #64]	@ (81061c0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106180:	5ccb      	ldrb	r3, [r1, r3]
 8106182:	f003 031f 	and.w	r3, r3, #31
 8106186:	fa22 f303 	lsr.w	r3, r2, r3
 810618a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810618c:	4b0b      	ldr	r3, [pc, #44]	@ (81061bc <HAL_RCC_GetHCLKFreq+0x54>)
 810618e:	699b      	ldr	r3, [r3, #24]
 8106190:	f003 030f 	and.w	r3, r3, #15
 8106194:	4a0a      	ldr	r2, [pc, #40]	@ (81061c0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106196:	5cd3      	ldrb	r3, [r2, r3]
 8106198:	f003 031f 	and.w	r3, r3, #31
 810619c:	687a      	ldr	r2, [r7, #4]
 810619e:	fa22 f303 	lsr.w	r3, r2, r3
 81061a2:	4a08      	ldr	r2, [pc, #32]	@ (81061c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81061a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81061a6:	4b07      	ldr	r3, [pc, #28]	@ (81061c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a07      	ldr	r2, [pc, #28]	@ (81061c8 <HAL_RCC_GetHCLKFreq+0x60>)
 81061ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81061ae:	4b05      	ldr	r3, [pc, #20]	@ (81061c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81061b0:	681b      	ldr	r3, [r3, #0]
}
 81061b2:	4618      	mov	r0, r3
 81061b4:	3708      	adds	r7, #8
 81061b6:	46bd      	mov	sp, r7
 81061b8:	bd80      	pop	{r7, pc}
 81061ba:	bf00      	nop
 81061bc:	58024400 	.word	0x58024400
 81061c0:	0810e86c 	.word	0x0810e86c
 81061c4:	10000004 	.word	0x10000004
 81061c8:	10000000 	.word	0x10000000

081061cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81061cc:	b580      	push	{r7, lr}
 81061ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81061d0:	f7ff ffca 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 81061d4:	4602      	mov	r2, r0
 81061d6:	4b06      	ldr	r3, [pc, #24]	@ (81061f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 81061d8:	69db      	ldr	r3, [r3, #28]
 81061da:	091b      	lsrs	r3, r3, #4
 81061dc:	f003 0307 	and.w	r3, r3, #7
 81061e0:	4904      	ldr	r1, [pc, #16]	@ (81061f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 81061e2:	5ccb      	ldrb	r3, [r1, r3]
 81061e4:	f003 031f 	and.w	r3, r3, #31
 81061e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81061ec:	4618      	mov	r0, r3
 81061ee:	bd80      	pop	{r7, pc}
 81061f0:	58024400 	.word	0x58024400
 81061f4:	0810e86c 	.word	0x0810e86c

081061f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81061f8:	b580      	push	{r7, lr}
 81061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81061fc:	f7ff ffb4 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 8106200:	4602      	mov	r2, r0
 8106202:	4b06      	ldr	r3, [pc, #24]	@ (810621c <HAL_RCC_GetPCLK2Freq+0x24>)
 8106204:	69db      	ldr	r3, [r3, #28]
 8106206:	0a1b      	lsrs	r3, r3, #8
 8106208:	f003 0307 	and.w	r3, r3, #7
 810620c:	4904      	ldr	r1, [pc, #16]	@ (8106220 <HAL_RCC_GetPCLK2Freq+0x28>)
 810620e:	5ccb      	ldrb	r3, [r1, r3]
 8106210:	f003 031f 	and.w	r3, r3, #31
 8106214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106218:	4618      	mov	r0, r3
 810621a:	bd80      	pop	{r7, pc}
 810621c:	58024400 	.word	0x58024400
 8106220:	0810e86c 	.word	0x0810e86c

08106224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106228:	b0cc      	sub	sp, #304	@ 0x130
 810622a:	af00      	add	r7, sp, #0
 810622c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106230:	2300      	movs	r3, #0
 8106232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106236:	2300      	movs	r3, #0
 8106238:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810623c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106244:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106248:	2500      	movs	r5, #0
 810624a:	ea54 0305 	orrs.w	r3, r4, r5
 810624e:	d049      	beq.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106256:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810625a:	d02f      	beq.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 810625c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106260:	d828      	bhi.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106266:	d01a      	beq.n	810629e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810626c:	d822      	bhi.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810626e:	2b00      	cmp	r3, #0
 8106270:	d003      	beq.n	810627a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106276:	d007      	beq.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106278:	e01c      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810627a:	4bb8      	ldr	r3, [pc, #736]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810627e:	4ab7      	ldr	r2, [pc, #732]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106286:	e01a      	b.n	81062be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810628c:	3308      	adds	r3, #8
 810628e:	2102      	movs	r1, #2
 8106290:	4618      	mov	r0, r3
 8106292:	f002 fba1 	bl	81089d8 <RCCEx_PLL2_Config>
 8106296:	4603      	mov	r3, r0
 8106298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810629c:	e00f      	b.n	81062be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810629e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062a2:	3328      	adds	r3, #40	@ 0x28
 81062a4:	2102      	movs	r1, #2
 81062a6:	4618      	mov	r0, r3
 81062a8:	f002 fc48 	bl	8108b3c <RCCEx_PLL3_Config>
 81062ac:	4603      	mov	r3, r0
 81062ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81062b2:	e004      	b.n	81062be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81062b4:	2301      	movs	r3, #1
 81062b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81062ba:	e000      	b.n	81062be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d10a      	bne.n	81062dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81062c6:	4ba5      	ldr	r3, [pc, #660]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81062ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81062ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81062d4:	4aa1      	ldr	r2, [pc, #644]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062d6:	430b      	orrs	r3, r1
 81062d8:	6513      	str	r3, [r2, #80]	@ 0x50
 81062da:	e003      	b.n	81062e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81062e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81062f0:	f04f 0900 	mov.w	r9, #0
 81062f4:	ea58 0309 	orrs.w	r3, r8, r9
 81062f8:	d047      	beq.n	810638a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81062fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106300:	2b04      	cmp	r3, #4
 8106302:	d82a      	bhi.n	810635a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106304:	a201      	add	r2, pc, #4	@ (adr r2, 810630c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810630a:	bf00      	nop
 810630c:	08106321 	.word	0x08106321
 8106310:	0810632f 	.word	0x0810632f
 8106314:	08106345 	.word	0x08106345
 8106318:	08106363 	.word	0x08106363
 810631c:	08106363 	.word	0x08106363
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106320:	4b8e      	ldr	r3, [pc, #568]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106324:	4a8d      	ldr	r2, [pc, #564]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810632a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810632c:	e01a      	b.n	8106364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106332:	3308      	adds	r3, #8
 8106334:	2100      	movs	r1, #0
 8106336:	4618      	mov	r0, r3
 8106338:	f002 fb4e 	bl	81089d8 <RCCEx_PLL2_Config>
 810633c:	4603      	mov	r3, r0
 810633e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106342:	e00f      	b.n	8106364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106348:	3328      	adds	r3, #40	@ 0x28
 810634a:	2100      	movs	r1, #0
 810634c:	4618      	mov	r0, r3
 810634e:	f002 fbf5 	bl	8108b3c <RCCEx_PLL3_Config>
 8106352:	4603      	mov	r3, r0
 8106354:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106358:	e004      	b.n	8106364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810635a:	2301      	movs	r3, #1
 810635c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106360:	e000      	b.n	8106364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8106362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106368:	2b00      	cmp	r3, #0
 810636a:	d10a      	bne.n	8106382 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810636c:	4b7b      	ldr	r3, [pc, #492]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106370:	f023 0107 	bic.w	r1, r3, #7
 8106374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810637a:	4a78      	ldr	r2, [pc, #480]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810637c:	430b      	orrs	r3, r1
 810637e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106380:	e003      	b.n	810638a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106386:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810638a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106392:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106396:	f04f 0b00 	mov.w	fp, #0
 810639a:	ea5a 030b 	orrs.w	r3, sl, fp
 810639e:	d04c      	beq.n	810643a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81063a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81063a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81063aa:	d030      	beq.n	810640e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81063ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81063b0:	d829      	bhi.n	8106406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81063b2:	2bc0      	cmp	r3, #192	@ 0xc0
 81063b4:	d02d      	beq.n	8106412 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81063b6:	2bc0      	cmp	r3, #192	@ 0xc0
 81063b8:	d825      	bhi.n	8106406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81063ba:	2b80      	cmp	r3, #128	@ 0x80
 81063bc:	d018      	beq.n	81063f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81063be:	2b80      	cmp	r3, #128	@ 0x80
 81063c0:	d821      	bhi.n	8106406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d002      	beq.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81063c6:	2b40      	cmp	r3, #64	@ 0x40
 81063c8:	d007      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81063ca:	e01c      	b.n	8106406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81063cc:	4b63      	ldr	r3, [pc, #396]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063d0:	4a62      	ldr	r2, [pc, #392]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81063d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063d8:	e01c      	b.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063de:	3308      	adds	r3, #8
 81063e0:	2100      	movs	r1, #0
 81063e2:	4618      	mov	r0, r3
 81063e4:	f002 faf8 	bl	81089d8 <RCCEx_PLL2_Config>
 81063e8:	4603      	mov	r3, r0
 81063ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81063ee:	e011      	b.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063f4:	3328      	adds	r3, #40	@ 0x28
 81063f6:	2100      	movs	r1, #0
 81063f8:	4618      	mov	r0, r3
 81063fa:	f002 fb9f 	bl	8108b3c <RCCEx_PLL3_Config>
 81063fe:	4603      	mov	r3, r0
 8106400:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106404:	e006      	b.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106406:	2301      	movs	r3, #1
 8106408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810640c:	e002      	b.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810640e:	bf00      	nop
 8106410:	e000      	b.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8106412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106414:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106418:	2b00      	cmp	r3, #0
 810641a:	d10a      	bne.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810641c:	4b4f      	ldr	r3, [pc, #316]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810641e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106420:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8106424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810642a:	4a4c      	ldr	r2, [pc, #304]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810642c:	430b      	orrs	r3, r1
 810642e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106430:	e003      	b.n	810643a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106432:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106436:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810643a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106442:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8106446:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810644a:	2300      	movs	r3, #0
 810644c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8106450:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8106454:	460b      	mov	r3, r1
 8106456:	4313      	orrs	r3, r2
 8106458:	d053      	beq.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810645a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810645e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106466:	d035      	beq.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810646c:	d82e      	bhi.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810646e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106472:	d031      	beq.n	81064d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106478:	d828      	bhi.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810647a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810647e:	d01a      	beq.n	81064b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106484:	d822      	bhi.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106486:	2b00      	cmp	r3, #0
 8106488:	d003      	beq.n	8106492 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810648a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810648e:	d007      	beq.n	81064a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106490:	e01c      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106492:	4b32      	ldr	r3, [pc, #200]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106496:	4a31      	ldr	r2, [pc, #196]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810649c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810649e:	e01c      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81064a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064a4:	3308      	adds	r3, #8
 81064a6:	2100      	movs	r1, #0
 81064a8:	4618      	mov	r0, r3
 81064aa:	f002 fa95 	bl	81089d8 <RCCEx_PLL2_Config>
 81064ae:	4603      	mov	r3, r0
 81064b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81064b4:	e011      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81064b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064ba:	3328      	adds	r3, #40	@ 0x28
 81064bc:	2100      	movs	r1, #0
 81064be:	4618      	mov	r0, r3
 81064c0:	f002 fb3c 	bl	8108b3c <RCCEx_PLL3_Config>
 81064c4:	4603      	mov	r3, r0
 81064c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81064ca:	e006      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81064cc:	2301      	movs	r3, #1
 81064ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81064d2:	e002      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81064d4:	bf00      	nop
 81064d6:	e000      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81064d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81064de:	2b00      	cmp	r3, #0
 81064e0:	d10b      	bne.n	81064fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81064e2:	4b1e      	ldr	r3, [pc, #120]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81064e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81064ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81064f2:	4a1a      	ldr	r2, [pc, #104]	@ (810655c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064f4:	430b      	orrs	r3, r1
 81064f6:	6593      	str	r3, [r2, #88]	@ 0x58
 81064f8:	e003      	b.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81064fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106506:	e9d3 2300 	ldrd	r2, r3, [r3]
 810650a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810650e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8106512:	2300      	movs	r3, #0
 8106514:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8106518:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810651c:	460b      	mov	r3, r1
 810651e:	4313      	orrs	r3, r2
 8106520:	d056      	beq.n	81065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8106522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810652a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810652e:	d038      	beq.n	81065a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106534:	d831      	bhi.n	810659a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106536:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810653a:	d034      	beq.n	81065a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810653c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106540:	d82b      	bhi.n	810659a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106546:	d01d      	beq.n	8106584 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810654c:	d825      	bhi.n	810659a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810654e:	2b00      	cmp	r3, #0
 8106550:	d006      	beq.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8106552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106556:	d00a      	beq.n	810656e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106558:	e01f      	b.n	810659a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810655a:	bf00      	nop
 810655c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106560:	4ba2      	ldr	r3, [pc, #648]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106564:	4aa1      	ldr	r2, [pc, #644]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810656a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810656c:	e01c      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810656e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106572:	3308      	adds	r3, #8
 8106574:	2100      	movs	r1, #0
 8106576:	4618      	mov	r0, r3
 8106578:	f002 fa2e 	bl	81089d8 <RCCEx_PLL2_Config>
 810657c:	4603      	mov	r3, r0
 810657e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106582:	e011      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106588:	3328      	adds	r3, #40	@ 0x28
 810658a:	2100      	movs	r1, #0
 810658c:	4618      	mov	r0, r3
 810658e:	f002 fad5 	bl	8108b3c <RCCEx_PLL3_Config>
 8106592:	4603      	mov	r3, r0
 8106594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106598:	e006      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810659a:	2301      	movs	r3, #1
 810659c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81065a0:	e002      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81065a2:	bf00      	nop
 81065a4:	e000      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81065a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065ac:	2b00      	cmp	r3, #0
 81065ae:	d10b      	bne.n	81065c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81065b0:	4b8e      	ldr	r3, [pc, #568]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81065b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81065b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81065c0:	4a8a      	ldr	r2, [pc, #552]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065c2:	430b      	orrs	r3, r1
 81065c4:	6593      	str	r3, [r2, #88]	@ 0x58
 81065c6:	e003      	b.n	81065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81065d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81065dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81065e0:	2300      	movs	r3, #0
 81065e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81065e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81065ea:	460b      	mov	r3, r1
 81065ec:	4313      	orrs	r3, r2
 81065ee:	d03a      	beq.n	8106666 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81065f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065f6:	2b30      	cmp	r3, #48	@ 0x30
 81065f8:	d01f      	beq.n	810663a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81065fa:	2b30      	cmp	r3, #48	@ 0x30
 81065fc:	d819      	bhi.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81065fe:	2b20      	cmp	r3, #32
 8106600:	d00c      	beq.n	810661c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106602:	2b20      	cmp	r3, #32
 8106604:	d815      	bhi.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106606:	2b00      	cmp	r3, #0
 8106608:	d019      	beq.n	810663e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810660a:	2b10      	cmp	r3, #16
 810660c:	d111      	bne.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810660e:	4b77      	ldr	r3, [pc, #476]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106612:	4a76      	ldr	r2, [pc, #472]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810661a:	e011      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810661c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106620:	3308      	adds	r3, #8
 8106622:	2102      	movs	r1, #2
 8106624:	4618      	mov	r0, r3
 8106626:	f002 f9d7 	bl	81089d8 <RCCEx_PLL2_Config>
 810662a:	4603      	mov	r3, r0
 810662c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106630:	e006      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106632:	2301      	movs	r3, #1
 8106634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106638:	e002      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810663a:	bf00      	nop
 810663c:	e000      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810663e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106644:	2b00      	cmp	r3, #0
 8106646:	d10a      	bne.n	810665e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106648:	4b68      	ldr	r3, [pc, #416]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810664a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810664c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106656:	4a65      	ldr	r2, [pc, #404]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106658:	430b      	orrs	r3, r1
 810665a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810665c:	e003      	b.n	8106666 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810665e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106662:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810666e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8106672:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106676:	2300      	movs	r3, #0
 8106678:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810667c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106680:	460b      	mov	r3, r1
 8106682:	4313      	orrs	r3, r2
 8106684:	d051      	beq.n	810672a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810668a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810668c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106690:	d035      	beq.n	81066fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8106692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106696:	d82e      	bhi.n	81066f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106698:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810669c:	d031      	beq.n	8106702 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810669e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81066a2:	d828      	bhi.n	81066f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81066a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81066a8:	d01a      	beq.n	81066e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81066aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81066ae:	d822      	bhi.n	81066f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81066b0:	2b00      	cmp	r3, #0
 81066b2:	d003      	beq.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81066b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81066b8:	d007      	beq.n	81066ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81066ba:	e01c      	b.n	81066f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066bc:	4b4b      	ldr	r3, [pc, #300]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066c0:	4a4a      	ldr	r2, [pc, #296]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81066c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066c8:	e01c      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81066ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066ce:	3308      	adds	r3, #8
 81066d0:	2100      	movs	r1, #0
 81066d2:	4618      	mov	r0, r3
 81066d4:	f002 f980 	bl	81089d8 <RCCEx_PLL2_Config>
 81066d8:	4603      	mov	r3, r0
 81066da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066de:	e011      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81066e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066e4:	3328      	adds	r3, #40	@ 0x28
 81066e6:	2100      	movs	r1, #0
 81066e8:	4618      	mov	r0, r3
 81066ea:	f002 fa27 	bl	8108b3c <RCCEx_PLL3_Config>
 81066ee:	4603      	mov	r3, r0
 81066f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81066f4:	e006      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066f6:	2301      	movs	r3, #1
 81066f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81066fc:	e002      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81066fe:	bf00      	nop
 8106700:	e000      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106708:	2b00      	cmp	r3, #0
 810670a:	d10a      	bne.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810670c:	4b37      	ldr	r3, [pc, #220]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810670e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106710:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810671a:	4a34      	ldr	r2, [pc, #208]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810671c:	430b      	orrs	r3, r1
 810671e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106720:	e003      	b.n	810672a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106726:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810672a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106732:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810673a:	2300      	movs	r3, #0
 810673c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8106740:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8106744:	460b      	mov	r3, r1
 8106746:	4313      	orrs	r3, r2
 8106748:	d056      	beq.n	81067f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810674a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810674e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106754:	d033      	beq.n	81067be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106756:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810675a:	d82c      	bhi.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810675c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106760:	d02f      	beq.n	81067c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106766:	d826      	bhi.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106768:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810676c:	d02b      	beq.n	81067c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810676e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106772:	d820      	bhi.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106778:	d012      	beq.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810677a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810677e:	d81a      	bhi.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106780:	2b00      	cmp	r3, #0
 8106782:	d022      	beq.n	81067ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106788:	d115      	bne.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810678a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810678e:	3308      	adds	r3, #8
 8106790:	2101      	movs	r1, #1
 8106792:	4618      	mov	r0, r3
 8106794:	f002 f920 	bl	81089d8 <RCCEx_PLL2_Config>
 8106798:	4603      	mov	r3, r0
 810679a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810679e:	e015      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81067a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067a4:	3328      	adds	r3, #40	@ 0x28
 81067a6:	2101      	movs	r1, #1
 81067a8:	4618      	mov	r0, r3
 81067aa:	f002 f9c7 	bl	8108b3c <RCCEx_PLL3_Config>
 81067ae:	4603      	mov	r3, r0
 81067b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81067b4:	e00a      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81067b6:	2301      	movs	r3, #1
 81067b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81067bc:	e006      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81067be:	bf00      	nop
 81067c0:	e004      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81067c2:	bf00      	nop
 81067c4:	e002      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81067c6:	bf00      	nop
 81067c8:	e000      	b.n	81067cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81067ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067d0:	2b00      	cmp	r3, #0
 81067d2:	d10d      	bne.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81067d4:	4b05      	ldr	r3, [pc, #20]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81067d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81067d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81067dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81067e2:	4a02      	ldr	r2, [pc, #8]	@ (81067ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81067e4:	430b      	orrs	r3, r1
 81067e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81067e8:	e006      	b.n	81067f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81067ea:	bf00      	nop
 81067ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81067f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106800:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106804:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106808:	2300      	movs	r3, #0
 810680a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810680e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106812:	460b      	mov	r3, r1
 8106814:	4313      	orrs	r3, r2
 8106816:	d055      	beq.n	81068c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810681c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106824:	d033      	beq.n	810688e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810682a:	d82c      	bhi.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810682c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106830:	d02f      	beq.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106836:	d826      	bhi.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810683c:	d02b      	beq.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810683e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106842:	d820      	bhi.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106848:	d012      	beq.n	8106870 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810684a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810684e:	d81a      	bhi.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106850:	2b00      	cmp	r3, #0
 8106852:	d022      	beq.n	810689a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106858:	d115      	bne.n	8106886 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810685a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810685e:	3308      	adds	r3, #8
 8106860:	2101      	movs	r1, #1
 8106862:	4618      	mov	r0, r3
 8106864:	f002 f8b8 	bl	81089d8 <RCCEx_PLL2_Config>
 8106868:	4603      	mov	r3, r0
 810686a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810686e:	e015      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106874:	3328      	adds	r3, #40	@ 0x28
 8106876:	2101      	movs	r1, #1
 8106878:	4618      	mov	r0, r3
 810687a:	f002 f95f 	bl	8108b3c <RCCEx_PLL3_Config>
 810687e:	4603      	mov	r3, r0
 8106880:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106884:	e00a      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106886:	2301      	movs	r3, #1
 8106888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810688c:	e006      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810688e:	bf00      	nop
 8106890:	e004      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106892:	bf00      	nop
 8106894:	e002      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106896:	bf00      	nop
 8106898:	e000      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810689a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810689c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068a0:	2b00      	cmp	r3, #0
 81068a2:	d10b      	bne.n	81068bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81068a4:	4bb7      	ldr	r3, [pc, #732]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81068b4:	4ab3      	ldr	r2, [pc, #716]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81068b6:	430b      	orrs	r3, r1
 81068b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81068ba:	e003      	b.n	81068c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81068c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068cc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81068d4:	2300      	movs	r3, #0
 81068d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81068da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81068de:	460b      	mov	r3, r1
 81068e0:	4313      	orrs	r3, r2
 81068e2:	d02a      	beq.n	810693a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81068e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068ea:	2b00      	cmp	r3, #0
 81068ec:	d011      	beq.n	8106912 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81068ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81068f2:	d10a      	bne.n	810690a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81068f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068f8:	3308      	adds	r3, #8
 81068fa:	2101      	movs	r1, #1
 81068fc:	4618      	mov	r0, r3
 81068fe:	f002 f86b 	bl	81089d8 <RCCEx_PLL2_Config>
 8106902:	4603      	mov	r3, r0
 8106904:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8106908:	e004      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810690a:	2301      	movs	r3, #1
 810690c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106910:	e000      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8106912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106914:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106918:	2b00      	cmp	r3, #0
 810691a:	d10a      	bne.n	8106932 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810691c:	4b99      	ldr	r3, [pc, #612]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810691e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106920:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810692a:	4a96      	ldr	r2, [pc, #600]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810692c:	430b      	orrs	r3, r1
 810692e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106930:	e003      	b.n	810693a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106936:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810693a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106942:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106946:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810694a:	2300      	movs	r3, #0
 810694c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106950:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106954:	460b      	mov	r3, r1
 8106956:	4313      	orrs	r3, r2
 8106958:	d037      	beq.n	81069ca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810695a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810695e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106964:	d00e      	beq.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8106966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810696a:	d816      	bhi.n	810699a <HAL_RCCEx_PeriphCLKConfig+0x776>
 810696c:	2b00      	cmp	r3, #0
 810696e:	d018      	beq.n	81069a2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8106970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106974:	d111      	bne.n	810699a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106976:	4b83      	ldr	r3, [pc, #524]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810697a:	4a82      	ldr	r2, [pc, #520]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810697c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106982:	e00f      	b.n	81069a4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106988:	3308      	adds	r3, #8
 810698a:	2101      	movs	r1, #1
 810698c:	4618      	mov	r0, r3
 810698e:	f002 f823 	bl	81089d8 <RCCEx_PLL2_Config>
 8106992:	4603      	mov	r3, r0
 8106994:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106998:	e004      	b.n	81069a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810699a:	2301      	movs	r3, #1
 810699c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81069a0:	e000      	b.n	81069a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81069a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069a8:	2b00      	cmp	r3, #0
 81069aa:	d10a      	bne.n	81069c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81069ac:	4b75      	ldr	r3, [pc, #468]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81069b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81069b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81069ba:	4a72      	ldr	r2, [pc, #456]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069bc:	430b      	orrs	r3, r1
 81069be:	6513      	str	r3, [r2, #80]	@ 0x50
 81069c0:	e003      	b.n	81069ca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81069ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069d2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81069d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81069da:	2300      	movs	r3, #0
 81069dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81069e0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81069e4:	460b      	mov	r3, r1
 81069e6:	4313      	orrs	r3, r2
 81069e8:	d03a      	beq.n	8106a60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81069ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81069f0:	2b03      	cmp	r3, #3
 81069f2:	d81d      	bhi.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81069f4:	a201      	add	r2, pc, #4	@ (adr r2, 81069fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069fa:	bf00      	nop
 81069fc:	08106a39 	.word	0x08106a39
 8106a00:	08106a0d 	.word	0x08106a0d
 8106a04:	08106a1b 	.word	0x08106a1b
 8106a08:	08106a39 	.word	0x08106a39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a10:	4a5c      	ldr	r2, [pc, #368]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106a18:	e00f      	b.n	8106a3a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a1e:	3308      	adds	r3, #8
 8106a20:	2102      	movs	r1, #2
 8106a22:	4618      	mov	r0, r3
 8106a24:	f001 ffd8 	bl	81089d8 <RCCEx_PLL2_Config>
 8106a28:	4603      	mov	r3, r0
 8106a2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106a2e:	e004      	b.n	8106a3a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106a30:	2301      	movs	r3, #1
 8106a32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a36:	e000      	b.n	8106a3a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8106a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a3e:	2b00      	cmp	r3, #0
 8106a40:	d10a      	bne.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106a42:	4b50      	ldr	r3, [pc, #320]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a46:	f023 0103 	bic.w	r1, r3, #3
 8106a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106a50:	4a4c      	ldr	r2, [pc, #304]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a52:	430b      	orrs	r3, r1
 8106a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106a56:	e003      	b.n	8106a60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106a70:	2300      	movs	r3, #0
 8106a72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106a76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106a7a:	460b      	mov	r3, r1
 8106a7c:	4313      	orrs	r3, r2
 8106a7e:	f000 80a0 	beq.w	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106a82:	4b41      	ldr	r3, [pc, #260]	@ (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106a84:	681b      	ldr	r3, [r3, #0]
 8106a86:	4a40      	ldr	r2, [pc, #256]	@ (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106a8e:	f7fc f841 	bl	8102b14 <HAL_GetTick>
 8106a92:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106a96:	e00b      	b.n	8106ab0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106a98:	f7fc f83c 	bl	8102b14 <HAL_GetTick>
 8106a9c:	4602      	mov	r2, r0
 8106a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106aa2:	1ad3      	subs	r3, r2, r3
 8106aa4:	2b64      	cmp	r3, #100	@ 0x64
 8106aa6:	d903      	bls.n	8106ab0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8106aa8:	2303      	movs	r3, #3
 8106aaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106aae:	e005      	b.n	8106abc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106ab0:	4b35      	ldr	r3, [pc, #212]	@ (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106ab8:	2b00      	cmp	r3, #0
 8106aba:	d0ed      	beq.n	8106a98 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8106abc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	d17a      	bne.n	8106bba <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ac6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106acc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106ad0:	4053      	eors	r3, r2
 8106ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106ad6:	2b00      	cmp	r3, #0
 8106ad8:	d015      	beq.n	8106b06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106ada:	4b2a      	ldr	r3, [pc, #168]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106ae2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106ae6:	4b27      	ldr	r3, [pc, #156]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106aea:	4a26      	ldr	r2, [pc, #152]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106af0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106af2:	4b24      	ldr	r3, [pc, #144]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106af6:	4a23      	ldr	r2, [pc, #140]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106afc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106afe:	4a21      	ldr	r2, [pc, #132]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b00:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8106b04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106b12:	d118      	bne.n	8106b46 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106b14:	f7fb fffe 	bl	8102b14 <HAL_GetTick>
 8106b18:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106b1c:	e00d      	b.n	8106b3a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106b1e:	f7fb fff9 	bl	8102b14 <HAL_GetTick>
 8106b22:	4602      	mov	r2, r0
 8106b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106b28:	1ad2      	subs	r2, r2, r3
 8106b2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106b2e:	429a      	cmp	r2, r3
 8106b30:	d903      	bls.n	8106b3a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8106b32:	2303      	movs	r3, #3
 8106b34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8106b38:	e005      	b.n	8106b46 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106b3a:	4b12      	ldr	r3, [pc, #72]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106b3e:	f003 0302 	and.w	r3, r3, #2
 8106b42:	2b00      	cmp	r3, #0
 8106b44:	d0eb      	beq.n	8106b1e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8106b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b4a:	2b00      	cmp	r3, #0
 8106b4c:	d130      	bne.n	8106bb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106b5e:	d115      	bne.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8106b60:	4b08      	ldr	r3, [pc, #32]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b62:	691b      	ldr	r3, [r3, #16]
 8106b64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b70:	091b      	lsrs	r3, r3, #4
 8106b72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106b76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106b7a:	4a02      	ldr	r2, [pc, #8]	@ (8106b84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b7c:	430b      	orrs	r3, r1
 8106b7e:	6113      	str	r3, [r2, #16]
 8106b80:	e00a      	b.n	8106b98 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8106b82:	bf00      	nop
 8106b84:	58024400 	.word	0x58024400
 8106b88:	58024800 	.word	0x58024800
 8106b8c:	4bd4      	ldr	r3, [pc, #848]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b8e:	691b      	ldr	r3, [r3, #16]
 8106b90:	4ad3      	ldr	r2, [pc, #844]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106b96:	6113      	str	r3, [r2, #16]
 8106b98:	4bd1      	ldr	r3, [pc, #836]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106b9a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106ba8:	4acd      	ldr	r2, [pc, #820]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106baa:	430b      	orrs	r3, r1
 8106bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8106bae:	e008      	b.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106bb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106bb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8106bb8:	e003      	b.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106bbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bca:	f002 0301 	and.w	r3, r2, #1
 8106bce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106bd2:	2300      	movs	r3, #0
 8106bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106bdc:	460b      	mov	r3, r1
 8106bde:	4313      	orrs	r3, r2
 8106be0:	f000 808b 	beq.w	8106cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106bec:	2b28      	cmp	r3, #40	@ 0x28
 8106bee:	d86b      	bhi.n	8106cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8106bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8106bf8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8106bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106bf6:	bf00      	nop
 8106bf8:	08106cd1 	.word	0x08106cd1
 8106bfc:	08106cc9 	.word	0x08106cc9
 8106c00:	08106cc9 	.word	0x08106cc9
 8106c04:	08106cc9 	.word	0x08106cc9
 8106c08:	08106cc9 	.word	0x08106cc9
 8106c0c:	08106cc9 	.word	0x08106cc9
 8106c10:	08106cc9 	.word	0x08106cc9
 8106c14:	08106cc9 	.word	0x08106cc9
 8106c18:	08106c9d 	.word	0x08106c9d
 8106c1c:	08106cc9 	.word	0x08106cc9
 8106c20:	08106cc9 	.word	0x08106cc9
 8106c24:	08106cc9 	.word	0x08106cc9
 8106c28:	08106cc9 	.word	0x08106cc9
 8106c2c:	08106cc9 	.word	0x08106cc9
 8106c30:	08106cc9 	.word	0x08106cc9
 8106c34:	08106cc9 	.word	0x08106cc9
 8106c38:	08106cb3 	.word	0x08106cb3
 8106c3c:	08106cc9 	.word	0x08106cc9
 8106c40:	08106cc9 	.word	0x08106cc9
 8106c44:	08106cc9 	.word	0x08106cc9
 8106c48:	08106cc9 	.word	0x08106cc9
 8106c4c:	08106cc9 	.word	0x08106cc9
 8106c50:	08106cc9 	.word	0x08106cc9
 8106c54:	08106cc9 	.word	0x08106cc9
 8106c58:	08106cd1 	.word	0x08106cd1
 8106c5c:	08106cc9 	.word	0x08106cc9
 8106c60:	08106cc9 	.word	0x08106cc9
 8106c64:	08106cc9 	.word	0x08106cc9
 8106c68:	08106cc9 	.word	0x08106cc9
 8106c6c:	08106cc9 	.word	0x08106cc9
 8106c70:	08106cc9 	.word	0x08106cc9
 8106c74:	08106cc9 	.word	0x08106cc9
 8106c78:	08106cd1 	.word	0x08106cd1
 8106c7c:	08106cc9 	.word	0x08106cc9
 8106c80:	08106cc9 	.word	0x08106cc9
 8106c84:	08106cc9 	.word	0x08106cc9
 8106c88:	08106cc9 	.word	0x08106cc9
 8106c8c:	08106cc9 	.word	0x08106cc9
 8106c90:	08106cc9 	.word	0x08106cc9
 8106c94:	08106cc9 	.word	0x08106cc9
 8106c98:	08106cd1 	.word	0x08106cd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ca0:	3308      	adds	r3, #8
 8106ca2:	2101      	movs	r1, #1
 8106ca4:	4618      	mov	r0, r3
 8106ca6:	f001 fe97 	bl	81089d8 <RCCEx_PLL2_Config>
 8106caa:	4603      	mov	r3, r0
 8106cac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106cb0:	e00f      	b.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cb6:	3328      	adds	r3, #40	@ 0x28
 8106cb8:	2101      	movs	r1, #1
 8106cba:	4618      	mov	r0, r3
 8106cbc:	f001 ff3e 	bl	8108b3c <RCCEx_PLL3_Config>
 8106cc0:	4603      	mov	r3, r0
 8106cc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106cc6:	e004      	b.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106cc8:	2301      	movs	r3, #1
 8106cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106cce:	e000      	b.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8106cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cd6:	2b00      	cmp	r3, #0
 8106cd8:	d10b      	bne.n	8106cf2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106cda:	4b81      	ldr	r3, [pc, #516]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106cde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106cea:	4a7d      	ldr	r2, [pc, #500]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106cec:	430b      	orrs	r3, r1
 8106cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8106cf0:	e003      	b.n	8106cfa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d02:	f002 0302 	and.w	r3, r2, #2
 8106d06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106d0a:	2300      	movs	r3, #0
 8106d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106d10:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106d14:	460b      	mov	r3, r1
 8106d16:	4313      	orrs	r3, r2
 8106d18:	d042      	beq.n	8106da0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106d20:	2b05      	cmp	r3, #5
 8106d22:	d825      	bhi.n	8106d70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8106d24:	a201      	add	r2, pc, #4	@ (adr r2, 8106d2c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8106d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d2a:	bf00      	nop
 8106d2c:	08106d79 	.word	0x08106d79
 8106d30:	08106d45 	.word	0x08106d45
 8106d34:	08106d5b 	.word	0x08106d5b
 8106d38:	08106d79 	.word	0x08106d79
 8106d3c:	08106d79 	.word	0x08106d79
 8106d40:	08106d79 	.word	0x08106d79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d48:	3308      	adds	r3, #8
 8106d4a:	2101      	movs	r1, #1
 8106d4c:	4618      	mov	r0, r3
 8106d4e:	f001 fe43 	bl	81089d8 <RCCEx_PLL2_Config>
 8106d52:	4603      	mov	r3, r0
 8106d54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106d58:	e00f      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d5e:	3328      	adds	r3, #40	@ 0x28
 8106d60:	2101      	movs	r1, #1
 8106d62:	4618      	mov	r0, r3
 8106d64:	f001 feea 	bl	8108b3c <RCCEx_PLL3_Config>
 8106d68:	4603      	mov	r3, r0
 8106d6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106d6e:	e004      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d70:	2301      	movs	r3, #1
 8106d72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106d76:	e000      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8106d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d7e:	2b00      	cmp	r3, #0
 8106d80:	d10a      	bne.n	8106d98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106d82:	4b57      	ldr	r3, [pc, #348]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106d86:	f023 0107 	bic.w	r1, r3, #7
 8106d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106d90:	4a53      	ldr	r2, [pc, #332]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106d92:	430b      	orrs	r3, r1
 8106d94:	6553      	str	r3, [r2, #84]	@ 0x54
 8106d96:	e003      	b.n	8106da0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106da8:	f002 0304 	and.w	r3, r2, #4
 8106dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106db0:	2300      	movs	r3, #0
 8106db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106db6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106dba:	460b      	mov	r3, r1
 8106dbc:	4313      	orrs	r3, r2
 8106dbe:	d044      	beq.n	8106e4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106dc8:	2b05      	cmp	r3, #5
 8106dca:	d825      	bhi.n	8106e18 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8106dd4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8106dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106dd2:	bf00      	nop
 8106dd4:	08106e21 	.word	0x08106e21
 8106dd8:	08106ded 	.word	0x08106ded
 8106ddc:	08106e03 	.word	0x08106e03
 8106de0:	08106e21 	.word	0x08106e21
 8106de4:	08106e21 	.word	0x08106e21
 8106de8:	08106e21 	.word	0x08106e21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106df0:	3308      	adds	r3, #8
 8106df2:	2101      	movs	r1, #1
 8106df4:	4618      	mov	r0, r3
 8106df6:	f001 fdef 	bl	81089d8 <RCCEx_PLL2_Config>
 8106dfa:	4603      	mov	r3, r0
 8106dfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106e00:	e00f      	b.n	8106e22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e06:	3328      	adds	r3, #40	@ 0x28
 8106e08:	2101      	movs	r1, #1
 8106e0a:	4618      	mov	r0, r3
 8106e0c:	f001 fe96 	bl	8108b3c <RCCEx_PLL3_Config>
 8106e10:	4603      	mov	r3, r0
 8106e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106e16:	e004      	b.n	8106e22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e18:	2301      	movs	r3, #1
 8106e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106e1e:	e000      	b.n	8106e22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8106e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e26:	2b00      	cmp	r3, #0
 8106e28:	d10b      	bne.n	8106e42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106e2e:	f023 0107 	bic.w	r1, r3, #7
 8106e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106e3a:	4a29      	ldr	r2, [pc, #164]	@ (8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106e3c:	430b      	orrs	r3, r1
 8106e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8106e40:	e003      	b.n	8106e4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e52:	f002 0320 	and.w	r3, r2, #32
 8106e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8106e5a:	2300      	movs	r3, #0
 8106e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106e64:	460b      	mov	r3, r1
 8106e66:	4313      	orrs	r3, r2
 8106e68:	d057      	beq.n	8106f1a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106e76:	d035      	beq.n	8106ee4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8106e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106e7c:	d82c      	bhi.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e82:	d031      	beq.n	8106ee8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8106e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e88:	d826      	bhi.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106e8e:	d02d      	beq.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8106e90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106e94:	d820      	bhi.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e9a:	d012      	beq.n	8106ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8106e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ea0:	d81a      	bhi.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106ea2:	2b00      	cmp	r3, #0
 8106ea4:	d024      	beq.n	8106ef0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8106ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106eaa:	d115      	bne.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106eb0:	3308      	adds	r3, #8
 8106eb2:	2100      	movs	r1, #0
 8106eb4:	4618      	mov	r0, r3
 8106eb6:	f001 fd8f 	bl	81089d8 <RCCEx_PLL2_Config>
 8106eba:	4603      	mov	r3, r0
 8106ebc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106ec0:	e017      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ec6:	3328      	adds	r3, #40	@ 0x28
 8106ec8:	2102      	movs	r1, #2
 8106eca:	4618      	mov	r0, r3
 8106ecc:	f001 fe36 	bl	8108b3c <RCCEx_PLL3_Config>
 8106ed0:	4603      	mov	r3, r0
 8106ed2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106ed6:	e00c      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ed8:	2301      	movs	r3, #1
 8106eda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106ede:	e008      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8106ee0:	58024400 	.word	0x58024400
        break;
 8106ee4:	bf00      	nop
 8106ee6:	e004      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106ee8:	bf00      	nop
 8106eea:	e002      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106eec:	bf00      	nop
 8106eee:	e000      	b.n	8106ef2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	d10b      	bne.n	8106f12 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106efa:	4bc2      	ldr	r3, [pc, #776]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106efe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106f0a:	4abe      	ldr	r2, [pc, #760]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106f0c:	430b      	orrs	r3, r1
 8106f0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8106f10:	e003      	b.n	8106f1a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8106f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8106f2a:	2300      	movs	r3, #0
 8106f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106f30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106f34:	460b      	mov	r3, r1
 8106f36:	4313      	orrs	r3, r2
 8106f38:	d055      	beq.n	8106fe6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106f42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106f46:	d033      	beq.n	8106fb0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8106f48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106f4c:	d82c      	bhi.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106f52:	d02f      	beq.n	8106fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8106f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106f58:	d826      	bhi.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106f5e:	d02b      	beq.n	8106fb8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8106f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106f64:	d820      	bhi.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106f6a:	d012      	beq.n	8106f92 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8106f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106f70:	d81a      	bhi.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106f72:	2b00      	cmp	r3, #0
 8106f74:	d022      	beq.n	8106fbc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8106f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106f7a:	d115      	bne.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f80:	3308      	adds	r3, #8
 8106f82:	2100      	movs	r1, #0
 8106f84:	4618      	mov	r0, r3
 8106f86:	f001 fd27 	bl	81089d8 <RCCEx_PLL2_Config>
 8106f8a:	4603      	mov	r3, r0
 8106f8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106f90:	e015      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f96:	3328      	adds	r3, #40	@ 0x28
 8106f98:	2102      	movs	r1, #2
 8106f9a:	4618      	mov	r0, r3
 8106f9c:	f001 fdce 	bl	8108b3c <RCCEx_PLL3_Config>
 8106fa0:	4603      	mov	r3, r0
 8106fa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106fa6:	e00a      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106fa8:	2301      	movs	r3, #1
 8106faa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106fae:	e006      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106fb0:	bf00      	nop
 8106fb2:	e004      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106fb4:	bf00      	nop
 8106fb6:	e002      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106fb8:	bf00      	nop
 8106fba:	e000      	b.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	d10b      	bne.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106fc6:	4b8f      	ldr	r3, [pc, #572]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106fca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106fd6:	4a8b      	ldr	r2, [pc, #556]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106fd8:	430b      	orrs	r3, r1
 8106fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8106fdc:	e003      	b.n	8106fe6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106fe2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fee:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106ff2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106ff6:	2300      	movs	r3, #0
 8106ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106ffc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107000:	460b      	mov	r3, r1
 8107002:	4313      	orrs	r3, r2
 8107004:	d055      	beq.n	81070b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810700a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810700e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107012:	d033      	beq.n	810707c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8107014:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107018:	d82c      	bhi.n	8107074 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810701a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810701e:	d02f      	beq.n	8107080 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8107020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107024:	d826      	bhi.n	8107074 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107026:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810702a:	d02b      	beq.n	8107084 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810702c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107030:	d820      	bhi.n	8107074 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107036:	d012      	beq.n	810705e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8107038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810703c:	d81a      	bhi.n	8107074 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810703e:	2b00      	cmp	r3, #0
 8107040:	d022      	beq.n	8107088 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8107042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107046:	d115      	bne.n	8107074 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810704c:	3308      	adds	r3, #8
 810704e:	2100      	movs	r1, #0
 8107050:	4618      	mov	r0, r3
 8107052:	f001 fcc1 	bl	81089d8 <RCCEx_PLL2_Config>
 8107056:	4603      	mov	r3, r0
 8107058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810705c:	e015      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810705e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107062:	3328      	adds	r3, #40	@ 0x28
 8107064:	2102      	movs	r1, #2
 8107066:	4618      	mov	r0, r3
 8107068:	f001 fd68 	bl	8108b3c <RCCEx_PLL3_Config>
 810706c:	4603      	mov	r3, r0
 810706e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107072:	e00a      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107074:	2301      	movs	r3, #1
 8107076:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810707a:	e006      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810707c:	bf00      	nop
 810707e:	e004      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107080:	bf00      	nop
 8107082:	e002      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107084:	bf00      	nop
 8107086:	e000      	b.n	810708a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107088:	bf00      	nop
    }

    if (ret == HAL_OK)
 810708a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810708e:	2b00      	cmp	r3, #0
 8107090:	d10b      	bne.n	81070aa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107092:	4b5c      	ldr	r3, [pc, #368]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107096:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810709a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810709e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81070a2:	4a58      	ldr	r2, [pc, #352]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070a4:	430b      	orrs	r3, r1
 81070a6:	6593      	str	r3, [r2, #88]	@ 0x58
 81070a8:	e003      	b.n	81070b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81070ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81070b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070ba:	f002 0308 	and.w	r3, r2, #8
 81070be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81070c2:	2300      	movs	r3, #0
 81070c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81070c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81070cc:	460b      	mov	r3, r1
 81070ce:	4313      	orrs	r3, r2
 81070d0:	d01e      	beq.n	8107110 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81070d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81070da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81070de:	d10c      	bne.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81070e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070e4:	3328      	adds	r3, #40	@ 0x28
 81070e6:	2102      	movs	r1, #2
 81070e8:	4618      	mov	r0, r3
 81070ea:	f001 fd27 	bl	8108b3c <RCCEx_PLL3_Config>
 81070ee:	4603      	mov	r3, r0
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d002      	beq.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81070f4:	2301      	movs	r3, #1
 81070f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81070fa:	4b42      	ldr	r3, [pc, #264]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81070fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810710a:	4a3e      	ldr	r2, [pc, #248]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810710c:	430b      	orrs	r3, r1
 810710e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107118:	f002 0310 	and.w	r3, r2, #16
 810711c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107120:	2300      	movs	r3, #0
 8107122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107126:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810712a:	460b      	mov	r3, r1
 810712c:	4313      	orrs	r3, r2
 810712e:	d01e      	beq.n	810716e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107134:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810713c:	d10c      	bne.n	8107158 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810713e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107142:	3328      	adds	r3, #40	@ 0x28
 8107144:	2102      	movs	r1, #2
 8107146:	4618      	mov	r0, r3
 8107148:	f001 fcf8 	bl	8108b3c <RCCEx_PLL3_Config>
 810714c:	4603      	mov	r3, r0
 810714e:	2b00      	cmp	r3, #0
 8107150:	d002      	beq.n	8107158 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8107152:	2301      	movs	r3, #1
 8107154:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107158:	4b2a      	ldr	r3, [pc, #168]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810715a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810715c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107168:	4a26      	ldr	r2, [pc, #152]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810716a:	430b      	orrs	r3, r1
 810716c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810716e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107176:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810717a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810717e:	2300      	movs	r3, #0
 8107180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107184:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107188:	460b      	mov	r3, r1
 810718a:	4313      	orrs	r3, r2
 810718c:	d040      	beq.n	8107210 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810718e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810719a:	d022      	beq.n	81071e2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810719c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81071a0:	d81b      	bhi.n	81071da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81071a2:	2b00      	cmp	r3, #0
 81071a4:	d003      	beq.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81071a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81071aa:	d00b      	beq.n	81071c4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81071ac:	e015      	b.n	81071da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81071ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071b2:	3308      	adds	r3, #8
 81071b4:	2100      	movs	r1, #0
 81071b6:	4618      	mov	r0, r3
 81071b8:	f001 fc0e 	bl	81089d8 <RCCEx_PLL2_Config>
 81071bc:	4603      	mov	r3, r0
 81071be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81071c2:	e00f      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81071c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071c8:	3328      	adds	r3, #40	@ 0x28
 81071ca:	2102      	movs	r1, #2
 81071cc:	4618      	mov	r0, r3
 81071ce:	f001 fcb5 	bl	8108b3c <RCCEx_PLL3_Config>
 81071d2:	4603      	mov	r3, r0
 81071d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81071d8:	e004      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81071da:	2301      	movs	r3, #1
 81071dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81071e0:	e000      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071e8:	2b00      	cmp	r3, #0
 81071ea:	d10d      	bne.n	8107208 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81071ec:	4b05      	ldr	r3, [pc, #20]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81071f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81071fc:	4a01      	ldr	r2, [pc, #4]	@ (8107204 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071fe:	430b      	orrs	r3, r1
 8107200:	6593      	str	r3, [r2, #88]	@ 0x58
 8107202:	e005      	b.n	8107210 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8107204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107208:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810720c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107210:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107218:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810721c:	67bb      	str	r3, [r7, #120]	@ 0x78
 810721e:	2300      	movs	r3, #0
 8107220:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107222:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107226:	460b      	mov	r3, r1
 8107228:	4313      	orrs	r3, r2
 810722a:	d03b      	beq.n	81072a4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810722c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107238:	d01f      	beq.n	810727a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810723a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810723e:	d818      	bhi.n	8107272 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8107240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107244:	d003      	beq.n	810724e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8107246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810724a:	d007      	beq.n	810725c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810724c:	e011      	b.n	8107272 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810724e:	4b64      	ldr	r3, [pc, #400]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107252:	4a63      	ldr	r2, [pc, #396]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810725a:	e00f      	b.n	810727c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810725c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107260:	3328      	adds	r3, #40	@ 0x28
 8107262:	2101      	movs	r1, #1
 8107264:	4618      	mov	r0, r3
 8107266:	f001 fc69 	bl	8108b3c <RCCEx_PLL3_Config>
 810726a:	4603      	mov	r3, r0
 810726c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8107270:	e004      	b.n	810727c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107272:	2301      	movs	r3, #1
 8107274:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107278:	e000      	b.n	810727c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810727a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810727c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107280:	2b00      	cmp	r3, #0
 8107282:	d10b      	bne.n	810729c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107284:	4b56      	ldr	r3, [pc, #344]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107288:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810728c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107294:	4a52      	ldr	r2, [pc, #328]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107296:	430b      	orrs	r3, r1
 8107298:	6553      	str	r3, [r2, #84]	@ 0x54
 810729a:	e003      	b.n	81072a4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810729c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81072a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81072a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072ac:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81072b0:	673b      	str	r3, [r7, #112]	@ 0x70
 81072b2:	2300      	movs	r3, #0
 81072b4:	677b      	str	r3, [r7, #116]	@ 0x74
 81072b6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81072ba:	460b      	mov	r3, r1
 81072bc:	4313      	orrs	r3, r2
 81072be:	d031      	beq.n	8107324 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81072c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d003      	beq.n	81072d2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81072ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81072ce:	d007      	beq.n	81072e0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81072d0:	e011      	b.n	81072f6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81072d2:	4b43      	ldr	r3, [pc, #268]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072d6:	4a42      	ldr	r2, [pc, #264]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81072d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81072dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81072de:	e00e      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81072e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072e4:	3308      	adds	r3, #8
 81072e6:	2102      	movs	r1, #2
 81072e8:	4618      	mov	r0, r3
 81072ea:	f001 fb75 	bl	81089d8 <RCCEx_PLL2_Config>
 81072ee:	4603      	mov	r3, r0
 81072f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81072f4:	e003      	b.n	81072fe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81072f6:	2301      	movs	r3, #1
 81072f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81072fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107302:	2b00      	cmp	r3, #0
 8107304:	d10a      	bne.n	810731c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107306:	4b36      	ldr	r3, [pc, #216]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810730a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810730e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107314:	4a32      	ldr	r2, [pc, #200]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107316:	430b      	orrs	r3, r1
 8107318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810731a:	e003      	b.n	8107324 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810731c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107320:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107328:	e9d3 2300 	ldrd	r2, r3, [r3]
 810732c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107332:	2300      	movs	r3, #0
 8107334:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107336:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810733a:	460b      	mov	r3, r1
 810733c:	4313      	orrs	r3, r2
 810733e:	d00c      	beq.n	810735a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107344:	3328      	adds	r3, #40	@ 0x28
 8107346:	2102      	movs	r1, #2
 8107348:	4618      	mov	r0, r3
 810734a:	f001 fbf7 	bl	8108b3c <RCCEx_PLL3_Config>
 810734e:	4603      	mov	r3, r0
 8107350:	2b00      	cmp	r3, #0
 8107352:	d002      	beq.n	810735a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8107354:	2301      	movs	r3, #1
 8107356:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810735a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107362:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107366:	663b      	str	r3, [r7, #96]	@ 0x60
 8107368:	2300      	movs	r3, #0
 810736a:	667b      	str	r3, [r7, #100]	@ 0x64
 810736c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107370:	460b      	mov	r3, r1
 8107372:	4313      	orrs	r3, r2
 8107374:	d03a      	beq.n	81073ec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810737a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810737e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107382:	d018      	beq.n	81073b6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8107384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107388:	d811      	bhi.n	81073ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810738a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810738e:	d014      	beq.n	81073ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8107390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107394:	d80b      	bhi.n	81073ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8107396:	2b00      	cmp	r3, #0
 8107398:	d011      	beq.n	81073be <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810739a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810739e:	d106      	bne.n	81073ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81073a0:	4b0f      	ldr	r3, [pc, #60]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81073a4:	4a0e      	ldr	r2, [pc, #56]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81073aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81073ac:	e008      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81073ae:	2301      	movs	r3, #1
 81073b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81073b4:	e004      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81073b6:	bf00      	nop
 81073b8:	e002      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81073ba:	bf00      	nop
 81073bc:	e000      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81073be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	d10d      	bne.n	81073e4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81073c8:	4b05      	ldr	r3, [pc, #20]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81073cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81073d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81073d8:	4a01      	ldr	r2, [pc, #4]	@ (81073e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073da:	430b      	orrs	r3, r1
 81073dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81073de:	e005      	b.n	81073ec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81073e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81073ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81073f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81073fa:	2300      	movs	r3, #0
 81073fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81073fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8107402:	460b      	mov	r3, r1
 8107404:	4313      	orrs	r3, r2
 8107406:	d009      	beq.n	810741c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107408:	4baa      	ldr	r3, [pc, #680]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810740a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810740c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107410:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107416:	4aa7      	ldr	r2, [pc, #668]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107418:	430b      	orrs	r3, r1
 810741a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810741c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107424:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107428:	653b      	str	r3, [r7, #80]	@ 0x50
 810742a:	2300      	movs	r3, #0
 810742c:	657b      	str	r3, [r7, #84]	@ 0x54
 810742e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8107432:	460b      	mov	r3, r1
 8107434:	4313      	orrs	r3, r2
 8107436:	d00a      	beq.n	810744e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107438:	4b9e      	ldr	r3, [pc, #632]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810743a:	691b      	ldr	r3, [r3, #16]
 810743c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107444:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8107448:	4a9a      	ldr	r2, [pc, #616]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810744a:	430b      	orrs	r3, r1
 810744c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810744e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107456:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810745a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810745c:	2300      	movs	r3, #0
 810745e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107460:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107464:	460b      	mov	r3, r1
 8107466:	4313      	orrs	r3, r2
 8107468:	d009      	beq.n	810747e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810746a:	4b92      	ldr	r3, [pc, #584]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810746c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810746e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8107472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107478:	4a8e      	ldr	r2, [pc, #568]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810747a:	430b      	orrs	r3, r1
 810747c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810747e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107486:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810748a:	643b      	str	r3, [r7, #64]	@ 0x40
 810748c:	2300      	movs	r3, #0
 810748e:	647b      	str	r3, [r7, #68]	@ 0x44
 8107490:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8107494:	460b      	mov	r3, r1
 8107496:	4313      	orrs	r3, r2
 8107498:	d00e      	beq.n	81074b8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810749a:	4b86      	ldr	r3, [pc, #536]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810749c:	691b      	ldr	r3, [r3, #16]
 810749e:	4a85      	ldr	r2, [pc, #532]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81074a4:	6113      	str	r3, [r2, #16]
 81074a6:	4b83      	ldr	r3, [pc, #524]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074a8:	6919      	ldr	r1, [r3, #16]
 81074aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81074b2:	4a80      	ldr	r2, [pc, #512]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074b4:	430b      	orrs	r3, r1
 81074b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81074b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81074c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 81074c6:	2300      	movs	r3, #0
 81074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81074ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81074ce:	460b      	mov	r3, r1
 81074d0:	4313      	orrs	r3, r2
 81074d2:	d009      	beq.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81074d4:	4b77      	ldr	r3, [pc, #476]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81074d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81074dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074e2:	4a74      	ldr	r2, [pc, #464]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81074e4:	430b      	orrs	r3, r1
 81074e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81074e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81074f4:	633b      	str	r3, [r7, #48]	@ 0x30
 81074f6:	2300      	movs	r3, #0
 81074f8:	637b      	str	r3, [r7, #52]	@ 0x34
 81074fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81074fe:	460b      	mov	r3, r1
 8107500:	4313      	orrs	r3, r2
 8107502:	d00a      	beq.n	810751a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107504:	4b6b      	ldr	r3, [pc, #428]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107508:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810750c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107514:	4a67      	ldr	r2, [pc, #412]	@ (81076b4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107516:	430b      	orrs	r3, r1
 8107518:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810751a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107522:	2100      	movs	r1, #0
 8107524:	62b9      	str	r1, [r7, #40]	@ 0x28
 8107526:	f003 0301 	and.w	r3, r3, #1
 810752a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810752c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107530:	460b      	mov	r3, r1
 8107532:	4313      	orrs	r3, r2
 8107534:	d011      	beq.n	810755a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810753a:	3308      	adds	r3, #8
 810753c:	2100      	movs	r1, #0
 810753e:	4618      	mov	r0, r3
 8107540:	f001 fa4a 	bl	81089d8 <RCCEx_PLL2_Config>
 8107544:	4603      	mov	r3, r0
 8107546:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810754a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810754e:	2b00      	cmp	r3, #0
 8107550:	d003      	beq.n	810755a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107552:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107556:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810755a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107562:	2100      	movs	r1, #0
 8107564:	6239      	str	r1, [r7, #32]
 8107566:	f003 0302 	and.w	r3, r3, #2
 810756a:	627b      	str	r3, [r7, #36]	@ 0x24
 810756c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107570:	460b      	mov	r3, r1
 8107572:	4313      	orrs	r3, r2
 8107574:	d011      	beq.n	810759a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810757a:	3308      	adds	r3, #8
 810757c:	2101      	movs	r1, #1
 810757e:	4618      	mov	r0, r3
 8107580:	f001 fa2a 	bl	81089d8 <RCCEx_PLL2_Config>
 8107584:	4603      	mov	r3, r0
 8107586:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810758a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810758e:	2b00      	cmp	r3, #0
 8107590:	d003      	beq.n	810759a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107592:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107596:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810759a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075a2:	2100      	movs	r1, #0
 81075a4:	61b9      	str	r1, [r7, #24]
 81075a6:	f003 0304 	and.w	r3, r3, #4
 81075aa:	61fb      	str	r3, [r7, #28]
 81075ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81075b0:	460b      	mov	r3, r1
 81075b2:	4313      	orrs	r3, r2
 81075b4:	d011      	beq.n	81075da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81075b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075ba:	3308      	adds	r3, #8
 81075bc:	2102      	movs	r1, #2
 81075be:	4618      	mov	r0, r3
 81075c0:	f001 fa0a 	bl	81089d8 <RCCEx_PLL2_Config>
 81075c4:	4603      	mov	r3, r0
 81075c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81075ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81075ce:	2b00      	cmp	r3, #0
 81075d0:	d003      	beq.n	81075da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81075d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81075da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075e2:	2100      	movs	r1, #0
 81075e4:	6139      	str	r1, [r7, #16]
 81075e6:	f003 0308 	and.w	r3, r3, #8
 81075ea:	617b      	str	r3, [r7, #20]
 81075ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81075f0:	460b      	mov	r3, r1
 81075f2:	4313      	orrs	r3, r2
 81075f4:	d011      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81075f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075fa:	3328      	adds	r3, #40	@ 0x28
 81075fc:	2100      	movs	r1, #0
 81075fe:	4618      	mov	r0, r3
 8107600:	f001 fa9c 	bl	8108b3c <RCCEx_PLL3_Config>
 8107604:	4603      	mov	r3, r0
 8107606:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810760a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810760e:	2b00      	cmp	r3, #0
 8107610:	d003      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810761a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107622:	2100      	movs	r1, #0
 8107624:	60b9      	str	r1, [r7, #8]
 8107626:	f003 0310 	and.w	r3, r3, #16
 810762a:	60fb      	str	r3, [r7, #12]
 810762c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107630:	460b      	mov	r3, r1
 8107632:	4313      	orrs	r3, r2
 8107634:	d011      	beq.n	810765a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810763a:	3328      	adds	r3, #40	@ 0x28
 810763c:	2101      	movs	r1, #1
 810763e:	4618      	mov	r0, r3
 8107640:	f001 fa7c 	bl	8108b3c <RCCEx_PLL3_Config>
 8107644:	4603      	mov	r3, r0
 8107646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810764a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810764e:	2b00      	cmp	r3, #0
 8107650:	d003      	beq.n	810765a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107652:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107656:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810765a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107662:	2100      	movs	r1, #0
 8107664:	6039      	str	r1, [r7, #0]
 8107666:	f003 0320 	and.w	r3, r3, #32
 810766a:	607b      	str	r3, [r7, #4]
 810766c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107670:	460b      	mov	r3, r1
 8107672:	4313      	orrs	r3, r2
 8107674:	d011      	beq.n	810769a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810767a:	3328      	adds	r3, #40	@ 0x28
 810767c:	2102      	movs	r1, #2
 810767e:	4618      	mov	r0, r3
 8107680:	f001 fa5c 	bl	8108b3c <RCCEx_PLL3_Config>
 8107684:	4603      	mov	r3, r0
 8107686:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810768a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810768e:	2b00      	cmp	r3, #0
 8107690:	d003      	beq.n	810769a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107692:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107696:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810769a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810769e:	2b00      	cmp	r3, #0
 81076a0:	d101      	bne.n	81076a6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81076a2:	2300      	movs	r3, #0
 81076a4:	e000      	b.n	81076a8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81076a6:	2301      	movs	r3, #1
}
 81076a8:	4618      	mov	r0, r3
 81076aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81076ae:	46bd      	mov	sp, r7
 81076b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81076b4:	58024400 	.word	0x58024400

081076b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81076b8:	b580      	push	{r7, lr}
 81076ba:	b090      	sub	sp, #64	@ 0x40
 81076bc:	af00      	add	r7, sp, #0
 81076be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81076c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81076ca:	430b      	orrs	r3, r1
 81076cc:	f040 8094 	bne.w	81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81076d0:	4b9e      	ldr	r3, [pc, #632]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076d4:	f003 0307 	and.w	r3, r3, #7
 81076d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81076dc:	2b04      	cmp	r3, #4
 81076de:	f200 8087 	bhi.w	81077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81076e2:	a201      	add	r2, pc, #4	@ (adr r2, 81076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076e8:	081076fd 	.word	0x081076fd
 81076ec:	08107725 	.word	0x08107725
 81076f0:	0810774d 	.word	0x0810774d
 81076f4:	081077e9 	.word	0x081077e9
 81076f8:	08107775 	.word	0x08107775
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81076fc:	4b93      	ldr	r3, [pc, #588]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107708:	d108      	bne.n	810771c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810770a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810770e:	4618      	mov	r0, r3
 8107710:	f001 f810 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107718:	f000 bd45 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810771c:	2300      	movs	r3, #0
 810771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107720:	f000 bd41 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107724:	4b89      	ldr	r3, [pc, #548]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107726:	681b      	ldr	r3, [r3, #0]
 8107728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810772c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107730:	d108      	bne.n	8107744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107732:	f107 0318 	add.w	r3, r7, #24
 8107736:	4618      	mov	r0, r3
 8107738:	f000 fd54 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810773c:	69bb      	ldr	r3, [r7, #24]
 810773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107740:	f000 bd31 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107744:	2300      	movs	r3, #0
 8107746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107748:	f000 bd2d 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810774c:	4b7f      	ldr	r3, [pc, #508]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107758:	d108      	bne.n	810776c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810775a:	f107 030c 	add.w	r3, r7, #12
 810775e:	4618      	mov	r0, r3
 8107760:	f000 fe94 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107768:	f000 bd1d 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810776c:	2300      	movs	r3, #0
 810776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107770:	f000 bd19 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107774:	4b75      	ldr	r3, [pc, #468]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107778:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810777c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810777e:	4b73      	ldr	r3, [pc, #460]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	f003 0304 	and.w	r3, r3, #4
 8107786:	2b04      	cmp	r3, #4
 8107788:	d10c      	bne.n	81077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810778c:	2b00      	cmp	r3, #0
 810778e:	d109      	bne.n	81077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107790:	4b6e      	ldr	r3, [pc, #440]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107792:	681b      	ldr	r3, [r3, #0]
 8107794:	08db      	lsrs	r3, r3, #3
 8107796:	f003 0303 	and.w	r3, r3, #3
 810779a:	4a6d      	ldr	r2, [pc, #436]	@ (8107950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810779c:	fa22 f303 	lsr.w	r3, r2, r3
 81077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077a2:	e01f      	b.n	81077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81077a4:	4b69      	ldr	r3, [pc, #420]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81077a6:	681b      	ldr	r3, [r3, #0]
 81077a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81077ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077b0:	d106      	bne.n	81077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81077b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81077b8:	d102      	bne.n	81077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81077ba:	4b66      	ldr	r3, [pc, #408]	@ (8107954 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077be:	e011      	b.n	81077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81077c0:	4b62      	ldr	r3, [pc, #392]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81077c2:	681b      	ldr	r3, [r3, #0]
 81077c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81077c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81077cc:	d106      	bne.n	81077dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81077ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077d4:	d102      	bne.n	81077dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81077d6:	4b60      	ldr	r3, [pc, #384]	@ (8107958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077da:	e003      	b.n	81077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81077dc:	2300      	movs	r3, #0
 81077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81077e0:	f000 bce1 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81077e4:	f000 bcdf 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81077e8:	4b5c      	ldr	r3, [pc, #368]	@ (810795c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077ec:	f000 bcdb 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81077f0:	2300      	movs	r3, #0
 81077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077f4:	f000 bcd7 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81077f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107800:	430b      	orrs	r3, r1
 8107802:	f040 80ad 	bne.w	8107960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8107806:	4b51      	ldr	r3, [pc, #324]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810780a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810780e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107816:	d056      	beq.n	81078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810781a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810781e:	f200 8090 	bhi.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107824:	2bc0      	cmp	r3, #192	@ 0xc0
 8107826:	f000 8088 	beq.w	810793a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810782c:	2bc0      	cmp	r3, #192	@ 0xc0
 810782e:	f200 8088 	bhi.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107834:	2b80      	cmp	r3, #128	@ 0x80
 8107836:	d032      	beq.n	810789e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810783a:	2b80      	cmp	r3, #128	@ 0x80
 810783c:	f200 8081 	bhi.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107842:	2b00      	cmp	r3, #0
 8107844:	d003      	beq.n	810784e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107848:	2b40      	cmp	r3, #64	@ 0x40
 810784a:	d014      	beq.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810784c:	e079      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810784e:	4b3f      	ldr	r3, [pc, #252]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810785a:	d108      	bne.n	810786e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810785c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107860:	4618      	mov	r0, r3
 8107862:	f000 ff67 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810786a:	f000 bc9c 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810786e:	2300      	movs	r3, #0
 8107870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107872:	f000 bc98 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107876:	4b35      	ldr	r3, [pc, #212]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810787e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107882:	d108      	bne.n	8107896 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107884:	f107 0318 	add.w	r3, r7, #24
 8107888:	4618      	mov	r0, r3
 810788a:	f000 fcab 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810788e:	69bb      	ldr	r3, [r7, #24]
 8107890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107892:	f000 bc88 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107896:	2300      	movs	r3, #0
 8107898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810789a:	f000 bc84 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810789e:	4b2b      	ldr	r3, [pc, #172]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078a0:	681b      	ldr	r3, [r3, #0]
 81078a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81078a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078aa:	d108      	bne.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81078ac:	f107 030c 	add.w	r3, r7, #12
 81078b0:	4618      	mov	r0, r3
 81078b2:	f000 fdeb 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81078b6:	68fb      	ldr	r3, [r7, #12]
 81078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078ba:	f000 bc74 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078be:	2300      	movs	r3, #0
 81078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078c2:	f000 bc70 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81078c6:	4b21      	ldr	r3, [pc, #132]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81078ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81078ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81078d0:	4b1e      	ldr	r3, [pc, #120]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078d2:	681b      	ldr	r3, [r3, #0]
 81078d4:	f003 0304 	and.w	r3, r3, #4
 81078d8:	2b04      	cmp	r3, #4
 81078da:	d10c      	bne.n	81078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81078dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81078de:	2b00      	cmp	r3, #0
 81078e0:	d109      	bne.n	81078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81078e2:	4b1a      	ldr	r3, [pc, #104]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078e4:	681b      	ldr	r3, [r3, #0]
 81078e6:	08db      	lsrs	r3, r3, #3
 81078e8:	f003 0303 	and.w	r3, r3, #3
 81078ec:	4a18      	ldr	r2, [pc, #96]	@ (8107950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81078ee:	fa22 f303 	lsr.w	r3, r2, r3
 81078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078f4:	e01f      	b.n	8107936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81078f6:	4b15      	ldr	r3, [pc, #84]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81078fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107902:	d106      	bne.n	8107912 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810790a:	d102      	bne.n	8107912 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810790c:	4b11      	ldr	r3, [pc, #68]	@ (8107954 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107910:	e011      	b.n	8107936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107912:	4b0e      	ldr	r3, [pc, #56]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107914:	681b      	ldr	r3, [r3, #0]
 8107916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810791a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810791e:	d106      	bne.n	810792e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107926:	d102      	bne.n	810792e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107928:	4b0b      	ldr	r3, [pc, #44]	@ (8107958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810792c:	e003      	b.n	8107936 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810792e:	2300      	movs	r3, #0
 8107930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107932:	f000 bc38 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107936:	f000 bc36 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810793a:	4b08      	ldr	r3, [pc, #32]	@ (810795c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810793c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810793e:	f000 bc32 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107942:	2300      	movs	r3, #0
 8107944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107946:	f000 bc2e 	b.w	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810794a:	bf00      	nop
 810794c:	58024400 	.word	0x58024400
 8107950:	03d09000 	.word	0x03d09000
 8107954:	003d0900 	.word	0x003d0900
 8107958:	017d7840 	.word	0x017d7840
 810795c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107964:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107968:	430b      	orrs	r3, r1
 810796a:	f040 809c 	bne.w	8107aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810796e:	4b9e      	ldr	r3, [pc, #632]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107972:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107976:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810797a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810797e:	d054      	beq.n	8107a2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107986:	f200 808b 	bhi.w	8107aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810798c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107990:	f000 8083 	beq.w	8107a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107996:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810799a:	f200 8081 	bhi.w	8107aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81079a4:	d02f      	beq.n	8107a06 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81079ac:	d878      	bhi.n	8107aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079b0:	2b00      	cmp	r3, #0
 81079b2:	d004      	beq.n	81079be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81079ba:	d012      	beq.n	81079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81079bc:	e070      	b.n	8107aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81079be:	4b8a      	ldr	r3, [pc, #552]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81079c0:	681b      	ldr	r3, [r3, #0]
 81079c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81079c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81079ca:	d107      	bne.n	81079dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81079cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81079d0:	4618      	mov	r0, r3
 81079d2:	f000 feaf 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079da:	e3e4      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81079dc:	2300      	movs	r3, #0
 81079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079e0:	e3e1      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81079e2:	4b81      	ldr	r3, [pc, #516]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81079ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81079ee:	d107      	bne.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079f0:	f107 0318 	add.w	r3, r7, #24
 81079f4:	4618      	mov	r0, r3
 81079f6:	f000 fbf5 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81079fa:	69bb      	ldr	r3, [r7, #24]
 81079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079fe:	e3d2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a00:	2300      	movs	r3, #0
 8107a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a04:	e3cf      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107a06:	4b78      	ldr	r3, [pc, #480]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a08:	681b      	ldr	r3, [r3, #0]
 8107a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a12:	d107      	bne.n	8107a24 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a14:	f107 030c 	add.w	r3, r7, #12
 8107a18:	4618      	mov	r0, r3
 8107a1a:	f000 fd37 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107a1e:	68fb      	ldr	r3, [r7, #12]
 8107a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a22:	e3c0      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a24:	2300      	movs	r3, #0
 8107a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a28:	e3bd      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107a32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107a34:	4b6c      	ldr	r3, [pc, #432]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a36:	681b      	ldr	r3, [r3, #0]
 8107a38:	f003 0304 	and.w	r3, r3, #4
 8107a3c:	2b04      	cmp	r3, #4
 8107a3e:	d10c      	bne.n	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a42:	2b00      	cmp	r3, #0
 8107a44:	d109      	bne.n	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a46:	4b68      	ldr	r3, [pc, #416]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a48:	681b      	ldr	r3, [r3, #0]
 8107a4a:	08db      	lsrs	r3, r3, #3
 8107a4c:	f003 0303 	and.w	r3, r3, #3
 8107a50:	4a66      	ldr	r2, [pc, #408]	@ (8107bec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107a52:	fa22 f303 	lsr.w	r3, r2, r3
 8107a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a58:	e01e      	b.n	8107a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107a5a:	4b63      	ldr	r3, [pc, #396]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a5c:	681b      	ldr	r3, [r3, #0]
 8107a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107a66:	d106      	bne.n	8107a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a6e:	d102      	bne.n	8107a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107a70:	4b5f      	ldr	r3, [pc, #380]	@ (8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a74:	e010      	b.n	8107a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107a76:	4b5c      	ldr	r3, [pc, #368]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107a82:	d106      	bne.n	8107a92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a8a:	d102      	bne.n	8107a92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107a8c:	4b59      	ldr	r3, [pc, #356]	@ (8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a90:	e002      	b.n	8107a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107a92:	2300      	movs	r3, #0
 8107a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107a96:	e386      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107a98:	e385      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107a9a:	4b57      	ldr	r3, [pc, #348]	@ (8107bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a9e:	e382      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107aa0:	2300      	movs	r3, #0
 8107aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107aa4:	e37f      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107aaa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8107aae:	430b      	orrs	r3, r1
 8107ab0:	f040 80a7 	bne.w	8107c02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ab8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107abc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107ac4:	d055      	beq.n	8107b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ac8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107acc:	f200 8096 	bhi.w	8107bfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ad2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107ad6:	f000 8084 	beq.w	8107be2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107adc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107ae0:	f200 808c 	bhi.w	8107bfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107aea:	d030      	beq.n	8107b4e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107af2:	f200 8083 	bhi.w	8107bfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d004      	beq.n	8107b06 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107b02:	d012      	beq.n	8107b2a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107b04:	e07a      	b.n	8107bfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107b06:	4b38      	ldr	r3, [pc, #224]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107b12:	d107      	bne.n	8107b24 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107b18:	4618      	mov	r0, r3
 8107b1a:	f000 fe0b 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b22:	e340      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b24:	2300      	movs	r3, #0
 8107b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b28:	e33d      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b36:	d107      	bne.n	8107b48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b38:	f107 0318 	add.w	r3, r7, #24
 8107b3c:	4618      	mov	r0, r3
 8107b3e:	f000 fb51 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b42:	69bb      	ldr	r3, [r7, #24]
 8107b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b46:	e32e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b48:	2300      	movs	r3, #0
 8107b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b4c:	e32b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b4e:	4b26      	ldr	r3, [pc, #152]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b5a:	d107      	bne.n	8107b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b5c:	f107 030c 	add.w	r3, r7, #12
 8107b60:	4618      	mov	r0, r3
 8107b62:	f000 fc93 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b66:	68fb      	ldr	r3, [r7, #12]
 8107b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b6a:	e31c      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b6c:	2300      	movs	r3, #0
 8107b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b70:	e319      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107b72:	4b1d      	ldr	r3, [pc, #116]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107b7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b7e:	681b      	ldr	r3, [r3, #0]
 8107b80:	f003 0304 	and.w	r3, r3, #4
 8107b84:	2b04      	cmp	r3, #4
 8107b86:	d10c      	bne.n	8107ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b8a:	2b00      	cmp	r3, #0
 8107b8c:	d109      	bne.n	8107ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107b8e:	4b16      	ldr	r3, [pc, #88]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	08db      	lsrs	r3, r3, #3
 8107b94:	f003 0303 	and.w	r3, r3, #3
 8107b98:	4a14      	ldr	r2, [pc, #80]	@ (8107bec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8107b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ba0:	e01e      	b.n	8107be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107ba2:	4b11      	ldr	r3, [pc, #68]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107bae:	d106      	bne.n	8107bbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107bb6:	d102      	bne.n	8107bbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bbc:	e010      	b.n	8107be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107bc0:	681b      	ldr	r3, [r3, #0]
 8107bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107bca:	d106      	bne.n	8107bda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107bd2:	d102      	bne.n	8107bda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107bd4:	4b07      	ldr	r3, [pc, #28]	@ (8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bd8:	e002      	b.n	8107be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107bda:	2300      	movs	r3, #0
 8107bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107bde:	e2e2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107be0:	e2e1      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107be2:	4b05      	ldr	r3, [pc, #20]	@ (8107bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107be6:	e2de      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107be8:	58024400 	.word	0x58024400
 8107bec:	03d09000 	.word	0x03d09000
 8107bf0:	003d0900 	.word	0x003d0900
 8107bf4:	017d7840 	.word	0x017d7840
 8107bf8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107bfc:	2300      	movs	r3, #0
 8107bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c00:	e2d1      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107c06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8107c0a:	430b      	orrs	r3, r1
 8107c0c:	f040 809c 	bne.w	8107d48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8107c10:	4b93      	ldr	r3, [pc, #588]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107c14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8107c18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107c20:	d054      	beq.n	8107ccc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8107c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107c28:	f200 808b 	bhi.w	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107c32:	f000 8083 	beq.w	8107d3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8107c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107c3c:	f200 8081 	bhi.w	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107c46:	d02f      	beq.n	8107ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107c4e:	d878      	bhi.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c52:	2b00      	cmp	r3, #0
 8107c54:	d004      	beq.n	8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107c5c:	d012      	beq.n	8107c84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107c5e:	e070      	b.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c60:	4b7f      	ldr	r3, [pc, #508]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c6c:	d107      	bne.n	8107c7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c72:	4618      	mov	r0, r3
 8107c74:	f000 fd5e 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c7c:	e293      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c7e:	2300      	movs	r3, #0
 8107c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c82:	e290      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c84:	4b76      	ldr	r3, [pc, #472]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107c86:	681b      	ldr	r3, [r3, #0]
 8107c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c90:	d107      	bne.n	8107ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c92:	f107 0318 	add.w	r3, r7, #24
 8107c96:	4618      	mov	r0, r3
 8107c98:	f000 faa4 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c9c:	69bb      	ldr	r3, [r7, #24]
 8107c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ca0:	e281      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ca2:	2300      	movs	r3, #0
 8107ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ca6:	e27e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107ca8:	4b6d      	ldr	r3, [pc, #436]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107caa:	681b      	ldr	r3, [r3, #0]
 8107cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107cb4:	d107      	bne.n	8107cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cb6:	f107 030c 	add.w	r3, r7, #12
 8107cba:	4618      	mov	r0, r3
 8107cbc:	f000 fbe6 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107cc0:	68fb      	ldr	r3, [r7, #12]
 8107cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cc4:	e26f      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cc6:	2300      	movs	r3, #0
 8107cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cca:	e26c      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107ccc:	4b64      	ldr	r3, [pc, #400]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107cd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107cd4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107cd6:	4b62      	ldr	r3, [pc, #392]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	f003 0304 	and.w	r3, r3, #4
 8107cde:	2b04      	cmp	r3, #4
 8107ce0:	d10c      	bne.n	8107cfc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107ce4:	2b00      	cmp	r3, #0
 8107ce6:	d109      	bne.n	8107cfc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	08db      	lsrs	r3, r3, #3
 8107cee:	f003 0303 	and.w	r3, r3, #3
 8107cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8107e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8107cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107cfa:	e01e      	b.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107cfc:	4b58      	ldr	r3, [pc, #352]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107d08:	d106      	bne.n	8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8107d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107d10:	d102      	bne.n	8107d18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107d12:	4b55      	ldr	r3, [pc, #340]	@ (8107e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d16:	e010      	b.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107d18:	4b51      	ldr	r3, [pc, #324]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d1a:	681b      	ldr	r3, [r3, #0]
 8107d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d24:	d106      	bne.n	8107d34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8107d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d2c:	d102      	bne.n	8107d34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8107e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d32:	e002      	b.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107d34:	2300      	movs	r3, #0
 8107d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107d38:	e235      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d3a:	e234      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8107e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8107d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d40:	e231      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107d42:	2300      	movs	r3, #0
 8107d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d46:	e22e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d4c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8107d50:	430b      	orrs	r3, r1
 8107d52:	f040 808f 	bne.w	8107e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8107d56:	4b42      	ldr	r3, [pc, #264]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d5a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8107d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107d66:	d06b      	beq.n	8107e40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107d6e:	d874      	bhi.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107d76:	d056      	beq.n	8107e26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107d7e:	d86c      	bhi.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107d86:	d03b      	beq.n	8107e00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107d8e:	d864      	bhi.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d96:	d021      	beq.n	8107ddc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d9e:	d85c      	bhi.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107da2:	2b00      	cmp	r3, #0
 8107da4:	d004      	beq.n	8107db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107dac:	d004      	beq.n	8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8107dae:	e054      	b.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107db0:	f7fe fa0c 	bl	81061cc <HAL_RCC_GetPCLK1Freq>
 8107db4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107db6:	e1f6      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107db8:	4b29      	ldr	r3, [pc, #164]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107dba:	681b      	ldr	r3, [r3, #0]
 8107dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107dc4:	d107      	bne.n	8107dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107dc6:	f107 0318 	add.w	r3, r7, #24
 8107dca:	4618      	mov	r0, r3
 8107dcc:	f000 fa0a 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107dd0:	69fb      	ldr	r3, [r7, #28]
 8107dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107dd4:	e1e7      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dd6:	2300      	movs	r3, #0
 8107dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107dda:	e1e4      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107ddc:	4b20      	ldr	r3, [pc, #128]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107dde:	681b      	ldr	r3, [r3, #0]
 8107de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107de8:	d107      	bne.n	8107dfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107dea:	f107 030c 	add.w	r3, r7, #12
 8107dee:	4618      	mov	r0, r3
 8107df0:	f000 fb4c 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107df4:	693b      	ldr	r3, [r7, #16]
 8107df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107df8:	e1d5      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dfa:	2300      	movs	r3, #0
 8107dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107dfe:	e1d2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107e00:	4b17      	ldr	r3, [pc, #92]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	f003 0304 	and.w	r3, r3, #4
 8107e08:	2b04      	cmp	r3, #4
 8107e0a:	d109      	bne.n	8107e20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e0c:	4b14      	ldr	r3, [pc, #80]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e0e:	681b      	ldr	r3, [r3, #0]
 8107e10:	08db      	lsrs	r3, r3, #3
 8107e12:	f003 0303 	and.w	r3, r3, #3
 8107e16:	4a13      	ldr	r2, [pc, #76]	@ (8107e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107e18:	fa22 f303 	lsr.w	r3, r2, r3
 8107e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e1e:	e1c2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e20:	2300      	movs	r3, #0
 8107e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e24:	e1bf      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107e26:	4b0e      	ldr	r3, [pc, #56]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e32:	d102      	bne.n	8107e3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8107e34:	4b0c      	ldr	r3, [pc, #48]	@ (8107e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e38:	e1b5      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e3a:	2300      	movs	r3, #0
 8107e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e3e:	e1b2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107e40:	4b07      	ldr	r3, [pc, #28]	@ (8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e4c:	d102      	bne.n	8107e54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107e4e:	4b07      	ldr	r3, [pc, #28]	@ (8107e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e52:	e1a8      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e54:	2300      	movs	r3, #0
 8107e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e58:	e1a5      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107e5a:	2300      	movs	r3, #0
 8107e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e5e:	e1a2      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107e60:	58024400 	.word	0x58024400
 8107e64:	03d09000 	.word	0x03d09000
 8107e68:	003d0900 	.word	0x003d0900
 8107e6c:	017d7840 	.word	0x017d7840
 8107e70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107e78:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8107e7c:	430b      	orrs	r3, r1
 8107e7e:	d173      	bne.n	8107f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107e80:	4b9c      	ldr	r3, [pc, #624]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107e88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e90:	d02f      	beq.n	8107ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e98:	d863      	bhi.n	8107f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8107e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e9c:	2b00      	cmp	r3, #0
 8107e9e:	d004      	beq.n	8107eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107ea6:	d012      	beq.n	8107ece <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107ea8:	e05b      	b.n	8107f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107eaa:	4b92      	ldr	r3, [pc, #584]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107eb6:	d107      	bne.n	8107ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107eb8:	f107 0318 	add.w	r3, r7, #24
 8107ebc:	4618      	mov	r0, r3
 8107ebe:	f000 f991 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107ec2:	69bb      	ldr	r3, [r7, #24]
 8107ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ec6:	e16e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ec8:	2300      	movs	r3, #0
 8107eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ecc:	e16b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107ece:	4b89      	ldr	r3, [pc, #548]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107ed0:	681b      	ldr	r3, [r3, #0]
 8107ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107eda:	d107      	bne.n	8107eec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107edc:	f107 030c 	add.w	r3, r7, #12
 8107ee0:	4618      	mov	r0, r3
 8107ee2:	f000 fad3 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107ee6:	697b      	ldr	r3, [r7, #20]
 8107ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107eea:	e15c      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107eec:	2300      	movs	r3, #0
 8107eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ef0:	e159      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107ef2:	4b80      	ldr	r3, [pc, #512]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107ef6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107efa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107efc:	4b7d      	ldr	r3, [pc, #500]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107efe:	681b      	ldr	r3, [r3, #0]
 8107f00:	f003 0304 	and.w	r3, r3, #4
 8107f04:	2b04      	cmp	r3, #4
 8107f06:	d10c      	bne.n	8107f22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8107f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107f0a:	2b00      	cmp	r3, #0
 8107f0c:	d109      	bne.n	8107f22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f0e:	4b79      	ldr	r3, [pc, #484]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	08db      	lsrs	r3, r3, #3
 8107f14:	f003 0303 	and.w	r3, r3, #3
 8107f18:	4a77      	ldr	r2, [pc, #476]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8107f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107f20:	e01e      	b.n	8107f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107f22:	4b74      	ldr	r3, [pc, #464]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107f2e:	d106      	bne.n	8107f3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107f36:	d102      	bne.n	8107f3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107f38:	4b70      	ldr	r3, [pc, #448]	@ (81080fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107f3c:	e010      	b.n	8107f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107f3e:	4b6d      	ldr	r3, [pc, #436]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f40:	681b      	ldr	r3, [r3, #0]
 8107f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f4a:	d106      	bne.n	8107f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f52:	d102      	bne.n	8107f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107f54:	4b6a      	ldr	r3, [pc, #424]	@ (8108100 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107f58:	e002      	b.n	8107f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107f5a:	2300      	movs	r3, #0
 8107f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107f5e:	e122      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107f60:	e121      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107f62:	2300      	movs	r3, #0
 8107f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f66:	e11e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107f6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8107f70:	430b      	orrs	r3, r1
 8107f72:	d133      	bne.n	8107fdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107f74:	4b5f      	ldr	r3, [pc, #380]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107f7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f80:	2b00      	cmp	r3, #0
 8107f82:	d004      	beq.n	8107f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107f8a:	d012      	beq.n	8107fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107f8c:	e023      	b.n	8107fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107f8e:	4b59      	ldr	r3, [pc, #356]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107f96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107f9a:	d107      	bne.n	8107fac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107fa0:	4618      	mov	r0, r3
 8107fa2:	f000 fbc7 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107faa:	e0fc      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107fac:	2300      	movs	r3, #0
 8107fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fb0:	e0f9      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107fb2:	4b50      	ldr	r3, [pc, #320]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107fbe:	d107      	bne.n	8107fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107fc0:	f107 0318 	add.w	r3, r7, #24
 8107fc4:	4618      	mov	r0, r3
 8107fc6:	f000 f90d 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107fca:	6a3b      	ldr	r3, [r7, #32]
 8107fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107fce:	e0ea      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107fd0:	2300      	movs	r3, #0
 8107fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fd4:	e0e7      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107fd6:	2300      	movs	r3, #0
 8107fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fda:	e0e4      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107fe0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8107fe4:	430b      	orrs	r3, r1
 8107fe6:	f040 808d 	bne.w	8108104 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107fea:	4b42      	ldr	r3, [pc, #264]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107fee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8107ff2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107ffa:	d06b      	beq.n	81080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108002:	d874      	bhi.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810800a:	d056      	beq.n	81080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810800e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108012:	d86c      	bhi.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810801a:	d03b      	beq.n	8108094 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810801e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108022:	d864      	bhi.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810802a:	d021      	beq.n	8108070 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810802e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108032:	d85c      	bhi.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108036:	2b00      	cmp	r3, #0
 8108038:	d004      	beq.n	8108044 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810803c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108040:	d004      	beq.n	810804c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8108042:	e054      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108044:	f000 f8b8 	bl	81081b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8108048:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810804a:	e0ac      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810804c:	4b29      	ldr	r3, [pc, #164]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810804e:	681b      	ldr	r3, [r3, #0]
 8108050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108058:	d107      	bne.n	810806a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810805a:	f107 0318 	add.w	r3, r7, #24
 810805e:	4618      	mov	r0, r3
 8108060:	f000 f8c0 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108064:	69fb      	ldr	r3, [r7, #28]
 8108066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108068:	e09d      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810806a:	2300      	movs	r3, #0
 810806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810806e:	e09a      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108070:	4b20      	ldr	r3, [pc, #128]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810807c:	d107      	bne.n	810808e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810807e:	f107 030c 	add.w	r3, r7, #12
 8108082:	4618      	mov	r0, r3
 8108084:	f000 fa02 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108088:	693b      	ldr	r3, [r7, #16]
 810808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810808c:	e08b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810808e:	2300      	movs	r3, #0
 8108090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108092:	e088      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108094:	4b17      	ldr	r3, [pc, #92]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108096:	681b      	ldr	r3, [r3, #0]
 8108098:	f003 0304 	and.w	r3, r3, #4
 810809c:	2b04      	cmp	r3, #4
 810809e:	d109      	bne.n	81080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81080a0:	4b14      	ldr	r3, [pc, #80]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81080a2:	681b      	ldr	r3, [r3, #0]
 81080a4:	08db      	lsrs	r3, r3, #3
 81080a6:	f003 0303 	and.w	r3, r3, #3
 81080aa:	4a13      	ldr	r2, [pc, #76]	@ (81080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81080ac:	fa22 f303 	lsr.w	r3, r2, r3
 81080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080b2:	e078      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080b4:	2300      	movs	r3, #0
 81080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080b8:	e075      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81080ba:	4b0e      	ldr	r3, [pc, #56]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81080bc:	681b      	ldr	r3, [r3, #0]
 81080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81080c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81080c6:	d102      	bne.n	81080ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81080c8:	4b0c      	ldr	r3, [pc, #48]	@ (81080fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080cc:	e06b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080ce:	2300      	movs	r3, #0
 81080d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080d2:	e068      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81080d4:	4b07      	ldr	r3, [pc, #28]	@ (81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81080d6:	681b      	ldr	r3, [r3, #0]
 81080d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81080dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81080e0:	d102      	bne.n	81080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81080e2:	4b07      	ldr	r3, [pc, #28]	@ (8108100 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080e6:	e05e      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080e8:	2300      	movs	r3, #0
 81080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080ec:	e05b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81080ee:	2300      	movs	r3, #0
 81080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080f2:	e058      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81080f4:	58024400 	.word	0x58024400
 81080f8:	03d09000 	.word	0x03d09000
 81080fc:	003d0900 	.word	0x003d0900
 8108100:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108108:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810810c:	430b      	orrs	r3, r1
 810810e:	d148      	bne.n	81081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108110:	4b27      	ldr	r3, [pc, #156]	@ (81081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108114:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108118:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810811c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108120:	d02a      	beq.n	8108178 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8108122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108128:	d838      	bhi.n	810819c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810812a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810812c:	2b00      	cmp	r3, #0
 810812e:	d004      	beq.n	810813a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108136:	d00d      	beq.n	8108154 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108138:	e030      	b.n	810819c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810813a:	4b1d      	ldr	r3, [pc, #116]	@ (81081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810813c:	681b      	ldr	r3, [r3, #0]
 810813e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108146:	d102      	bne.n	810814e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108148:	4b1a      	ldr	r3, [pc, #104]	@ (81081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810814c:	e02b      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810814e:	2300      	movs	r3, #0
 8108150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108152:	e028      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108154:	4b16      	ldr	r3, [pc, #88]	@ (81081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810815c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108160:	d107      	bne.n	8108172 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108166:	4618      	mov	r0, r3
 8108168:	f000 fae4 	bl	8108734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108170:	e019      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108172:	2300      	movs	r3, #0
 8108174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108176:	e016      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108178:	4b0d      	ldr	r3, [pc, #52]	@ (81081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810817a:	681b      	ldr	r3, [r3, #0]
 810817c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108184:	d107      	bne.n	8108196 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108186:	f107 0318 	add.w	r3, r7, #24
 810818a:	4618      	mov	r0, r3
 810818c:	f000 f82a 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108190:	69fb      	ldr	r3, [r7, #28]
 8108192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108194:	e007      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108196:	2300      	movs	r3, #0
 8108198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810819a:	e004      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810819c:	2300      	movs	r3, #0
 810819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081a0:	e001      	b.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81081a2:	2300      	movs	r3, #0
 81081a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81081a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81081a8:	4618      	mov	r0, r3
 81081aa:	3740      	adds	r7, #64	@ 0x40
 81081ac:	46bd      	mov	sp, r7
 81081ae:	bd80      	pop	{r7, pc}
 81081b0:	58024400 	.word	0x58024400
 81081b4:	017d7840 	.word	0x017d7840

081081b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81081b8:	b580      	push	{r7, lr}
 81081ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81081bc:	f7fd ffd4 	bl	8106168 <HAL_RCC_GetHCLKFreq>
 81081c0:	4602      	mov	r2, r0
 81081c2:	4b06      	ldr	r3, [pc, #24]	@ (81081dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81081c4:	6a1b      	ldr	r3, [r3, #32]
 81081c6:	091b      	lsrs	r3, r3, #4
 81081c8:	f003 0307 	and.w	r3, r3, #7
 81081cc:	4904      	ldr	r1, [pc, #16]	@ (81081e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81081ce:	5ccb      	ldrb	r3, [r1, r3]
 81081d0:	f003 031f 	and.w	r3, r3, #31
 81081d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81081d8:	4618      	mov	r0, r3
 81081da:	bd80      	pop	{r7, pc}
 81081dc:	58024400 	.word	0x58024400
 81081e0:	0810e86c 	.word	0x0810e86c

081081e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81081e4:	b480      	push	{r7}
 81081e6:	b089      	sub	sp, #36	@ 0x24
 81081e8:	af00      	add	r7, sp, #0
 81081ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81081ec:	4ba1      	ldr	r3, [pc, #644]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081f0:	f003 0303 	and.w	r3, r3, #3
 81081f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81081f6:	4b9f      	ldr	r3, [pc, #636]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81081f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081fa:	0b1b      	lsrs	r3, r3, #12
 81081fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108202:	4b9c      	ldr	r3, [pc, #624]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108206:	091b      	lsrs	r3, r3, #4
 8108208:	f003 0301 	and.w	r3, r3, #1
 810820c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810820e:	4b99      	ldr	r3, [pc, #612]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108212:	08db      	lsrs	r3, r3, #3
 8108214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108218:	693a      	ldr	r2, [r7, #16]
 810821a:	fb02 f303 	mul.w	r3, r2, r3
 810821e:	ee07 3a90 	vmov	s15, r3
 8108222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810822a:	697b      	ldr	r3, [r7, #20]
 810822c:	2b00      	cmp	r3, #0
 810822e:	f000 8111 	beq.w	8108454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108232:	69bb      	ldr	r3, [r7, #24]
 8108234:	2b02      	cmp	r3, #2
 8108236:	f000 8083 	beq.w	8108340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810823a:	69bb      	ldr	r3, [r7, #24]
 810823c:	2b02      	cmp	r3, #2
 810823e:	f200 80a1 	bhi.w	8108384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108242:	69bb      	ldr	r3, [r7, #24]
 8108244:	2b00      	cmp	r3, #0
 8108246:	d003      	beq.n	8108250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108248:	69bb      	ldr	r3, [r7, #24]
 810824a:	2b01      	cmp	r3, #1
 810824c:	d056      	beq.n	81082fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810824e:	e099      	b.n	8108384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108250:	4b88      	ldr	r3, [pc, #544]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	f003 0320 	and.w	r3, r3, #32
 8108258:	2b00      	cmp	r3, #0
 810825a:	d02d      	beq.n	81082b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810825c:	4b85      	ldr	r3, [pc, #532]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810825e:	681b      	ldr	r3, [r3, #0]
 8108260:	08db      	lsrs	r3, r3, #3
 8108262:	f003 0303 	and.w	r3, r3, #3
 8108266:	4a84      	ldr	r2, [pc, #528]	@ (8108478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108268:	fa22 f303 	lsr.w	r3, r2, r3
 810826c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810826e:	68bb      	ldr	r3, [r7, #8]
 8108270:	ee07 3a90 	vmov	s15, r3
 8108274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108278:	697b      	ldr	r3, [r7, #20]
 810827a:	ee07 3a90 	vmov	s15, r3
 810827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108286:	4b7b      	ldr	r3, [pc, #492]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810828a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810828e:	ee07 3a90 	vmov	s15, r3
 8108292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108296:	ed97 6a03 	vldr	s12, [r7, #12]
 810829a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810847c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810829e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81082b6:	e087      	b.n	81083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81082b8:	697b      	ldr	r3, [r7, #20]
 81082ba:	ee07 3a90 	vmov	s15, r3
 81082be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082ca:	4b6a      	ldr	r3, [pc, #424]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082d2:	ee07 3a90 	vmov	s15, r3
 81082d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082da:	ed97 6a03 	vldr	s12, [r7, #12]
 81082de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810847c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81082e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81082fa:	e065      	b.n	81083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81082fc:	697b      	ldr	r3, [r7, #20]
 81082fe:	ee07 3a90 	vmov	s15, r3
 8108302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108306:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810830a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810830e:	4b59      	ldr	r3, [pc, #356]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108316:	ee07 3a90 	vmov	s15, r3
 810831a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810831e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108322:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810847c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810832e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108336:	ee67 7a27 	vmul.f32	s15, s14, s15
 810833a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810833e:	e043      	b.n	81083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108340:	697b      	ldr	r3, [r7, #20]
 8108342:	ee07 3a90 	vmov	s15, r3
 8108346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810834a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810834e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108352:	4b48      	ldr	r3, [pc, #288]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810835a:	ee07 3a90 	vmov	s15, r3
 810835e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108362:	ed97 6a03 	vldr	s12, [r7, #12]
 8108366:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810847c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810836a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810836e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810837a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810837e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108382:	e021      	b.n	81083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108384:	697b      	ldr	r3, [r7, #20]
 8108386:	ee07 3a90 	vmov	s15, r3
 810838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810838e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108396:	4b37      	ldr	r3, [pc, #220]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810839e:	ee07 3a90 	vmov	s15, r3
 81083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81083aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810847c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81083c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81083c8:	4b2a      	ldr	r3, [pc, #168]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083cc:	0a5b      	lsrs	r3, r3, #9
 81083ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81083d2:	ee07 3a90 	vmov	s15, r3
 81083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81083de:	ee37 7a87 	vadd.f32	s14, s15, s14
 81083e2:	edd7 6a07 	vldr	s13, [r7, #28]
 81083e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81083ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81083ee:	ee17 2a90 	vmov	r2, s15
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81083f6:	4b1f      	ldr	r3, [pc, #124]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083fa:	0c1b      	lsrs	r3, r3, #16
 81083fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108400:	ee07 3a90 	vmov	s15, r3
 8108404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108408:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810840c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108410:	edd7 6a07 	vldr	s13, [r7, #28]
 8108414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810841c:	ee17 2a90 	vmov	r2, s15
 8108420:	687b      	ldr	r3, [r7, #4]
 8108422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108424:	4b13      	ldr	r3, [pc, #76]	@ (8108474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108428:	0e1b      	lsrs	r3, r3, #24
 810842a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810842e:	ee07 3a90 	vmov	s15, r3
 8108432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810843a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810843e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810844a:	ee17 2a90 	vmov	r2, s15
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108452:	e008      	b.n	8108466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	2200      	movs	r2, #0
 8108458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810845a:	687b      	ldr	r3, [r7, #4]
 810845c:	2200      	movs	r2, #0
 810845e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	2200      	movs	r2, #0
 8108464:	609a      	str	r2, [r3, #8]
}
 8108466:	bf00      	nop
 8108468:	3724      	adds	r7, #36	@ 0x24
 810846a:	46bd      	mov	sp, r7
 810846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108470:	4770      	bx	lr
 8108472:	bf00      	nop
 8108474:	58024400 	.word	0x58024400
 8108478:	03d09000 	.word	0x03d09000
 810847c:	46000000 	.word	0x46000000
 8108480:	4c742400 	.word	0x4c742400
 8108484:	4a742400 	.word	0x4a742400
 8108488:	4bbebc20 	.word	0x4bbebc20

0810848c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810848c:	b480      	push	{r7}
 810848e:	b089      	sub	sp, #36	@ 0x24
 8108490:	af00      	add	r7, sp, #0
 8108492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108494:	4ba1      	ldr	r3, [pc, #644]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108498:	f003 0303 	and.w	r3, r3, #3
 810849c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810849e:	4b9f      	ldr	r3, [pc, #636]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81084a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084a2:	0d1b      	lsrs	r3, r3, #20
 81084a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81084a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81084aa:	4b9c      	ldr	r3, [pc, #624]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81084ae:	0a1b      	lsrs	r3, r3, #8
 81084b0:	f003 0301 	and.w	r3, r3, #1
 81084b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81084b6:	4b99      	ldr	r3, [pc, #612]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81084b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81084ba:	08db      	lsrs	r3, r3, #3
 81084bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81084c0:	693a      	ldr	r2, [r7, #16]
 81084c2:	fb02 f303 	mul.w	r3, r2, r3
 81084c6:	ee07 3a90 	vmov	s15, r3
 81084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81084d2:	697b      	ldr	r3, [r7, #20]
 81084d4:	2b00      	cmp	r3, #0
 81084d6:	f000 8111 	beq.w	81086fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81084da:	69bb      	ldr	r3, [r7, #24]
 81084dc:	2b02      	cmp	r3, #2
 81084de:	f000 8083 	beq.w	81085e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81084e2:	69bb      	ldr	r3, [r7, #24]
 81084e4:	2b02      	cmp	r3, #2
 81084e6:	f200 80a1 	bhi.w	810862c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81084ea:	69bb      	ldr	r3, [r7, #24]
 81084ec:	2b00      	cmp	r3, #0
 81084ee:	d003      	beq.n	81084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81084f0:	69bb      	ldr	r3, [r7, #24]
 81084f2:	2b01      	cmp	r3, #1
 81084f4:	d056      	beq.n	81085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81084f6:	e099      	b.n	810862c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81084f8:	4b88      	ldr	r3, [pc, #544]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	f003 0320 	and.w	r3, r3, #32
 8108500:	2b00      	cmp	r3, #0
 8108502:	d02d      	beq.n	8108560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108504:	4b85      	ldr	r3, [pc, #532]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108506:	681b      	ldr	r3, [r3, #0]
 8108508:	08db      	lsrs	r3, r3, #3
 810850a:	f003 0303 	and.w	r3, r3, #3
 810850e:	4a84      	ldr	r2, [pc, #528]	@ (8108720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108510:	fa22 f303 	lsr.w	r3, r2, r3
 8108514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108516:	68bb      	ldr	r3, [r7, #8]
 8108518:	ee07 3a90 	vmov	s15, r3
 810851c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108520:	697b      	ldr	r3, [r7, #20]
 8108522:	ee07 3a90 	vmov	s15, r3
 8108526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810852a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810852e:	4b7b      	ldr	r3, [pc, #492]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108536:	ee07 3a90 	vmov	s15, r3
 810853a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810853e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810854a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810854e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108556:	ee67 7a27 	vmul.f32	s15, s14, s15
 810855a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810855e:	e087      	b.n	8108670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108560:	697b      	ldr	r3, [r7, #20]
 8108562:	ee07 3a90 	vmov	s15, r3
 8108566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810856a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108572:	4b6a      	ldr	r3, [pc, #424]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810857a:	ee07 3a90 	vmov	s15, r3
 810857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108582:	ed97 6a03 	vldr	s12, [r7, #12]
 8108586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810858a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810858e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810859e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085a2:	e065      	b.n	8108670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81085a4:	697b      	ldr	r3, [r7, #20]
 81085a6:	ee07 3a90 	vmov	s15, r3
 81085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810872c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81085b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085b6:	4b59      	ldr	r3, [pc, #356]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085be:	ee07 3a90 	vmov	s15, r3
 81085c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81085ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81085ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81085da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085e6:	e043      	b.n	8108670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81085e8:	697b      	ldr	r3, [r7, #20]
 81085ea:	ee07 3a90 	vmov	s15, r3
 81085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81085f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085fa:	4b48      	ldr	r3, [pc, #288]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81085fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108602:	ee07 3a90 	vmov	s15, r3
 8108606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810860a:	ed97 6a03 	vldr	s12, [r7, #12]
 810860e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810861a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810861e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810862a:	e021      	b.n	8108670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810862c:	697b      	ldr	r3, [r7, #20]
 810862e:	ee07 3a90 	vmov	s15, r3
 8108632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810872c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810863e:	4b37      	ldr	r3, [pc, #220]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108646:	ee07 3a90 	vmov	s15, r3
 810864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810865e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108666:	ee67 7a27 	vmul.f32	s15, s14, s15
 810866a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810866e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108670:	4b2a      	ldr	r3, [pc, #168]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108674:	0a5b      	lsrs	r3, r3, #9
 8108676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810867a:	ee07 3a90 	vmov	s15, r3
 810867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108686:	ee37 7a87 	vadd.f32	s14, s15, s14
 810868a:	edd7 6a07 	vldr	s13, [r7, #28]
 810868e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108696:	ee17 2a90 	vmov	r2, s15
 810869a:	687b      	ldr	r3, [r7, #4]
 810869c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810869e:	4b1f      	ldr	r3, [pc, #124]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81086a2:	0c1b      	lsrs	r3, r3, #16
 81086a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086a8:	ee07 3a90 	vmov	s15, r3
 81086ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81086b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81086bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086c4:	ee17 2a90 	vmov	r2, s15
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81086cc:	4b13      	ldr	r3, [pc, #76]	@ (810871c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81086ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81086d0:	0e1b      	lsrs	r3, r3, #24
 81086d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086d6:	ee07 3a90 	vmov	s15, r3
 81086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81086e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81086ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086f2:	ee17 2a90 	vmov	r2, s15
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81086fa:	e008      	b.n	810870e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	2200      	movs	r2, #0
 8108700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	2200      	movs	r2, #0
 8108706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108708:	687b      	ldr	r3, [r7, #4]
 810870a:	2200      	movs	r2, #0
 810870c:	609a      	str	r2, [r3, #8]
}
 810870e:	bf00      	nop
 8108710:	3724      	adds	r7, #36	@ 0x24
 8108712:	46bd      	mov	sp, r7
 8108714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108718:	4770      	bx	lr
 810871a:	bf00      	nop
 810871c:	58024400 	.word	0x58024400
 8108720:	03d09000 	.word	0x03d09000
 8108724:	46000000 	.word	0x46000000
 8108728:	4c742400 	.word	0x4c742400
 810872c:	4a742400 	.word	0x4a742400
 8108730:	4bbebc20 	.word	0x4bbebc20

08108734 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8108734:	b480      	push	{r7}
 8108736:	b089      	sub	sp, #36	@ 0x24
 8108738:	af00      	add	r7, sp, #0
 810873a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810873c:	4ba0      	ldr	r3, [pc, #640]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108740:	f003 0303 	and.w	r3, r3, #3
 8108744:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108746:	4b9e      	ldr	r3, [pc, #632]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810874a:	091b      	lsrs	r3, r3, #4
 810874c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108750:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108752:	4b9b      	ldr	r3, [pc, #620]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108756:	f003 0301 	and.w	r3, r3, #1
 810875a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810875c:	4b98      	ldr	r3, [pc, #608]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810875e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108760:	08db      	lsrs	r3, r3, #3
 8108762:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108766:	693a      	ldr	r2, [r7, #16]
 8108768:	fb02 f303 	mul.w	r3, r2, r3
 810876c:	ee07 3a90 	vmov	s15, r3
 8108770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108774:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108778:	697b      	ldr	r3, [r7, #20]
 810877a:	2b00      	cmp	r3, #0
 810877c:	f000 8111 	beq.w	81089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108780:	69bb      	ldr	r3, [r7, #24]
 8108782:	2b02      	cmp	r3, #2
 8108784:	f000 8083 	beq.w	810888e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108788:	69bb      	ldr	r3, [r7, #24]
 810878a:	2b02      	cmp	r3, #2
 810878c:	f200 80a1 	bhi.w	81088d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108790:	69bb      	ldr	r3, [r7, #24]
 8108792:	2b00      	cmp	r3, #0
 8108794:	d003      	beq.n	810879e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108796:	69bb      	ldr	r3, [r7, #24]
 8108798:	2b01      	cmp	r3, #1
 810879a:	d056      	beq.n	810884a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810879c:	e099      	b.n	81088d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810879e:	4b88      	ldr	r3, [pc, #544]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81087a0:	681b      	ldr	r3, [r3, #0]
 81087a2:	f003 0320 	and.w	r3, r3, #32
 81087a6:	2b00      	cmp	r3, #0
 81087a8:	d02d      	beq.n	8108806 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81087aa:	4b85      	ldr	r3, [pc, #532]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81087ac:	681b      	ldr	r3, [r3, #0]
 81087ae:	08db      	lsrs	r3, r3, #3
 81087b0:	f003 0303 	and.w	r3, r3, #3
 81087b4:	4a83      	ldr	r2, [pc, #524]	@ (81089c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81087b6:	fa22 f303 	lsr.w	r3, r2, r3
 81087ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81087bc:	68bb      	ldr	r3, [r7, #8]
 81087be:	ee07 3a90 	vmov	s15, r3
 81087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087c6:	697b      	ldr	r3, [r7, #20]
 81087c8:	ee07 3a90 	vmov	s15, r3
 81087cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087d4:	4b7a      	ldr	r3, [pc, #488]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81087d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81087d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087dc:	ee07 3a90 	vmov	s15, r3
 81087e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81087e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81087ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108800:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108804:	e087      	b.n	8108916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108806:	697b      	ldr	r3, [r7, #20]
 8108808:	ee07 3a90 	vmov	s15, r3
 810880c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108810:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81089cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108818:	4b69      	ldr	r3, [pc, #420]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810881c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108820:	ee07 3a90 	vmov	s15, r3
 8108824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108828:	ed97 6a03 	vldr	s12, [r7, #12]
 810882c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810883c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108844:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108848:	e065      	b.n	8108916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810884a:	697b      	ldr	r3, [r7, #20]
 810884c:	ee07 3a90 	vmov	s15, r3
 8108850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108854:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81089d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810885c:	4b58      	ldr	r3, [pc, #352]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108864:	ee07 3a90 	vmov	s15, r3
 8108868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810886c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108870:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810887c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810888c:	e043      	b.n	8108916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810888e:	697b      	ldr	r3, [r7, #20]
 8108890:	ee07 3a90 	vmov	s15, r3
 8108894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108898:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81089d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810889c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088a0:	4b47      	ldr	r3, [pc, #284]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81088a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088a8:	ee07 3a90 	vmov	s15, r3
 81088ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81088b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81088b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81088c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088d0:	e021      	b.n	8108916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81088d2:	697b      	ldr	r3, [r7, #20]
 81088d4:	ee07 3a90 	vmov	s15, r3
 81088d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81089cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81088e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088e4:	4b36      	ldr	r3, [pc, #216]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81088e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088ec:	ee07 3a90 	vmov	s15, r3
 81088f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81088f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81088fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810890c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108914:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108916:	4b2a      	ldr	r3, [pc, #168]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810891a:	0a5b      	lsrs	r3, r3, #9
 810891c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108920:	ee07 3a90 	vmov	s15, r3
 8108924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810892c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108930:	edd7 6a07 	vldr	s13, [r7, #28]
 8108934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810893c:	ee17 2a90 	vmov	r2, s15
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108944:	4b1e      	ldr	r3, [pc, #120]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108948:	0c1b      	lsrs	r3, r3, #16
 810894a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810894e:	ee07 3a90 	vmov	s15, r3
 8108952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810895a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810895e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810896a:	ee17 2a90 	vmov	r2, s15
 810896e:	687b      	ldr	r3, [r7, #4]
 8108970:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108972:	4b13      	ldr	r3, [pc, #76]	@ (81089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108976:	0e1b      	lsrs	r3, r3, #24
 8108978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810897c:	ee07 3a90 	vmov	s15, r3
 8108980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108988:	ee37 7a87 	vadd.f32	s14, s15, s14
 810898c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108998:	ee17 2a90 	vmov	r2, s15
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81089a0:	e008      	b.n	81089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81089a2:	687b      	ldr	r3, [r7, #4]
 81089a4:	2200      	movs	r2, #0
 81089a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81089a8:	687b      	ldr	r3, [r7, #4]
 81089aa:	2200      	movs	r2, #0
 81089ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	2200      	movs	r2, #0
 81089b2:	609a      	str	r2, [r3, #8]
}
 81089b4:	bf00      	nop
 81089b6:	3724      	adds	r7, #36	@ 0x24
 81089b8:	46bd      	mov	sp, r7
 81089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089be:	4770      	bx	lr
 81089c0:	58024400 	.word	0x58024400
 81089c4:	03d09000 	.word	0x03d09000
 81089c8:	46000000 	.word	0x46000000
 81089cc:	4c742400 	.word	0x4c742400
 81089d0:	4a742400 	.word	0x4a742400
 81089d4:	4bbebc20 	.word	0x4bbebc20

081089d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81089d8:	b580      	push	{r7, lr}
 81089da:	b084      	sub	sp, #16
 81089dc:	af00      	add	r7, sp, #0
 81089de:	6078      	str	r0, [r7, #4]
 81089e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81089e2:	2300      	movs	r3, #0
 81089e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81089e6:	4b54      	ldr	r3, [pc, #336]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 81089e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81089ea:	f003 0303 	and.w	r3, r3, #3
 81089ee:	2b03      	cmp	r3, #3
 81089f0:	d101      	bne.n	81089f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81089f2:	2301      	movs	r3, #1
 81089f4:	e09b      	b.n	8108b2e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81089f6:	4b50      	ldr	r3, [pc, #320]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 81089f8:	681b      	ldr	r3, [r3, #0]
 81089fa:	4a4f      	ldr	r2, [pc, #316]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 81089fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108a02:	f7fa f887 	bl	8102b14 <HAL_GetTick>
 8108a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108a08:	e008      	b.n	8108a1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108a0a:	f7fa f883 	bl	8102b14 <HAL_GetTick>
 8108a0e:	4602      	mov	r2, r0
 8108a10:	68bb      	ldr	r3, [r7, #8]
 8108a12:	1ad3      	subs	r3, r2, r3
 8108a14:	2b02      	cmp	r3, #2
 8108a16:	d901      	bls.n	8108a1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108a18:	2303      	movs	r3, #3
 8108a1a:	e088      	b.n	8108b2e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108a1c:	4b46      	ldr	r3, [pc, #280]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a1e:	681b      	ldr	r3, [r3, #0]
 8108a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a24:	2b00      	cmp	r3, #0
 8108a26:	d1f0      	bne.n	8108a0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108a28:	4b43      	ldr	r3, [pc, #268]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	031b      	lsls	r3, r3, #12
 8108a36:	4940      	ldr	r1, [pc, #256]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a38:	4313      	orrs	r3, r2
 8108a3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	685b      	ldr	r3, [r3, #4]
 8108a40:	3b01      	subs	r3, #1
 8108a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	689b      	ldr	r3, [r3, #8]
 8108a4a:	3b01      	subs	r3, #1
 8108a4c:	025b      	lsls	r3, r3, #9
 8108a4e:	b29b      	uxth	r3, r3
 8108a50:	431a      	orrs	r2, r3
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	68db      	ldr	r3, [r3, #12]
 8108a56:	3b01      	subs	r3, #1
 8108a58:	041b      	lsls	r3, r3, #16
 8108a5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108a5e:	431a      	orrs	r2, r3
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	691b      	ldr	r3, [r3, #16]
 8108a64:	3b01      	subs	r3, #1
 8108a66:	061b      	lsls	r3, r3, #24
 8108a68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108a6c:	4932      	ldr	r1, [pc, #200]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a6e:	4313      	orrs	r3, r2
 8108a70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108a72:	4b31      	ldr	r3, [pc, #196]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	695b      	ldr	r3, [r3, #20]
 8108a7e:	492e      	ldr	r1, [pc, #184]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a80:	4313      	orrs	r3, r2
 8108a82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108a84:	4b2c      	ldr	r3, [pc, #176]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a88:	f023 0220 	bic.w	r2, r3, #32
 8108a8c:	687b      	ldr	r3, [r7, #4]
 8108a8e:	699b      	ldr	r3, [r3, #24]
 8108a90:	4929      	ldr	r1, [pc, #164]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a92:	4313      	orrs	r3, r2
 8108a94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108a96:	4b28      	ldr	r3, [pc, #160]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a9a:	4a27      	ldr	r2, [pc, #156]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108a9c:	f023 0310 	bic.w	r3, r3, #16
 8108aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108aa2:	4b25      	ldr	r3, [pc, #148]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108aaa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108aae:	687a      	ldr	r2, [r7, #4]
 8108ab0:	69d2      	ldr	r2, [r2, #28]
 8108ab2:	00d2      	lsls	r2, r2, #3
 8108ab4:	4920      	ldr	r1, [pc, #128]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ab6:	4313      	orrs	r3, r2
 8108ab8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108aba:	4b1f      	ldr	r3, [pc, #124]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108abe:	4a1e      	ldr	r2, [pc, #120]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ac0:	f043 0310 	orr.w	r3, r3, #16
 8108ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108ac6:	683b      	ldr	r3, [r7, #0]
 8108ac8:	2b00      	cmp	r3, #0
 8108aca:	d106      	bne.n	8108ada <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108acc:	4b1a      	ldr	r3, [pc, #104]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ad0:	4a19      	ldr	r2, [pc, #100]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ad8:	e00f      	b.n	8108afa <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108ada:	683b      	ldr	r3, [r7, #0]
 8108adc:	2b01      	cmp	r3, #1
 8108ade:	d106      	bne.n	8108aee <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108ae0:	4b15      	ldr	r3, [pc, #84]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ae4:	4a14      	ldr	r2, [pc, #80]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108aec:	e005      	b.n	8108afa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108aee:	4b12      	ldr	r3, [pc, #72]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108af2:	4a11      	ldr	r2, [pc, #68]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108afa:	4b0f      	ldr	r3, [pc, #60]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	4a0e      	ldr	r2, [pc, #56]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108b06:	f7fa f805 	bl	8102b14 <HAL_GetTick>
 8108b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108b0c:	e008      	b.n	8108b20 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108b0e:	f7fa f801 	bl	8102b14 <HAL_GetTick>
 8108b12:	4602      	mov	r2, r0
 8108b14:	68bb      	ldr	r3, [r7, #8]
 8108b16:	1ad3      	subs	r3, r2, r3
 8108b18:	2b02      	cmp	r3, #2
 8108b1a:	d901      	bls.n	8108b20 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108b1c:	2303      	movs	r3, #3
 8108b1e:	e006      	b.n	8108b2e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108b20:	4b05      	ldr	r3, [pc, #20]	@ (8108b38 <RCCEx_PLL2_Config+0x160>)
 8108b22:	681b      	ldr	r3, [r3, #0]
 8108b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108b28:	2b00      	cmp	r3, #0
 8108b2a:	d0f0      	beq.n	8108b0e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8108b2e:	4618      	mov	r0, r3
 8108b30:	3710      	adds	r7, #16
 8108b32:	46bd      	mov	sp, r7
 8108b34:	bd80      	pop	{r7, pc}
 8108b36:	bf00      	nop
 8108b38:	58024400 	.word	0x58024400

08108b3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108b3c:	b580      	push	{r7, lr}
 8108b3e:	b084      	sub	sp, #16
 8108b40:	af00      	add	r7, sp, #0
 8108b42:	6078      	str	r0, [r7, #4]
 8108b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108b46:	2300      	movs	r3, #0
 8108b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108b4a:	4b54      	ldr	r3, [pc, #336]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b4e:	f003 0303 	and.w	r3, r3, #3
 8108b52:	2b03      	cmp	r3, #3
 8108b54:	d101      	bne.n	8108b5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108b56:	2301      	movs	r3, #1
 8108b58:	e09b      	b.n	8108c92 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108b5a:	4b50      	ldr	r3, [pc, #320]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b5c:	681b      	ldr	r3, [r3, #0]
 8108b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108b66:	f7f9 ffd5 	bl	8102b14 <HAL_GetTick>
 8108b6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108b6c:	e008      	b.n	8108b80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108b6e:	f7f9 ffd1 	bl	8102b14 <HAL_GetTick>
 8108b72:	4602      	mov	r2, r0
 8108b74:	68bb      	ldr	r3, [r7, #8]
 8108b76:	1ad3      	subs	r3, r2, r3
 8108b78:	2b02      	cmp	r3, #2
 8108b7a:	d901      	bls.n	8108b80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108b7c:	2303      	movs	r3, #3
 8108b7e:	e088      	b.n	8108c92 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108b80:	4b46      	ldr	r3, [pc, #280]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b82:	681b      	ldr	r3, [r3, #0]
 8108b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d1f0      	bne.n	8108b6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108b8c:	4b43      	ldr	r3, [pc, #268]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	051b      	lsls	r3, r3, #20
 8108b9a:	4940      	ldr	r1, [pc, #256]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108b9c:	4313      	orrs	r3, r2
 8108b9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	685b      	ldr	r3, [r3, #4]
 8108ba4:	3b01      	subs	r3, #1
 8108ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108baa:	687b      	ldr	r3, [r7, #4]
 8108bac:	689b      	ldr	r3, [r3, #8]
 8108bae:	3b01      	subs	r3, #1
 8108bb0:	025b      	lsls	r3, r3, #9
 8108bb2:	b29b      	uxth	r3, r3
 8108bb4:	431a      	orrs	r2, r3
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	68db      	ldr	r3, [r3, #12]
 8108bba:	3b01      	subs	r3, #1
 8108bbc:	041b      	lsls	r3, r3, #16
 8108bbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108bc2:	431a      	orrs	r2, r3
 8108bc4:	687b      	ldr	r3, [r7, #4]
 8108bc6:	691b      	ldr	r3, [r3, #16]
 8108bc8:	3b01      	subs	r3, #1
 8108bca:	061b      	lsls	r3, r3, #24
 8108bcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108bd0:	4932      	ldr	r1, [pc, #200]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108bd2:	4313      	orrs	r3, r2
 8108bd4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108bd6:	4b31      	ldr	r3, [pc, #196]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	695b      	ldr	r3, [r3, #20]
 8108be2:	492e      	ldr	r1, [pc, #184]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108be4:	4313      	orrs	r3, r2
 8108be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108be8:	4b2c      	ldr	r3, [pc, #176]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	699b      	ldr	r3, [r3, #24]
 8108bf4:	4929      	ldr	r1, [pc, #164]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108bf6:	4313      	orrs	r3, r2
 8108bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108bfa:	4b28      	ldr	r3, [pc, #160]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bfe:	4a27      	ldr	r2, [pc, #156]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108c06:	4b25      	ldr	r3, [pc, #148]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108c0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108c12:	687a      	ldr	r2, [r7, #4]
 8108c14:	69d2      	ldr	r2, [r2, #28]
 8108c16:	00d2      	lsls	r2, r2, #3
 8108c18:	4920      	ldr	r1, [pc, #128]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c1a:	4313      	orrs	r3, r2
 8108c1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c22:	4a1e      	ldr	r2, [pc, #120]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108c2a:	683b      	ldr	r3, [r7, #0]
 8108c2c:	2b00      	cmp	r3, #0
 8108c2e:	d106      	bne.n	8108c3e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108c30:	4b1a      	ldr	r3, [pc, #104]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c34:	4a19      	ldr	r2, [pc, #100]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108c3c:	e00f      	b.n	8108c5e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108c3e:	683b      	ldr	r3, [r7, #0]
 8108c40:	2b01      	cmp	r3, #1
 8108c42:	d106      	bne.n	8108c52 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108c44:	4b15      	ldr	r3, [pc, #84]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c48:	4a14      	ldr	r2, [pc, #80]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108c50:	e005      	b.n	8108c5e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108c52:	4b12      	ldr	r3, [pc, #72]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c56:	4a11      	ldr	r2, [pc, #68]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c60:	681b      	ldr	r3, [r3, #0]
 8108c62:	4a0e      	ldr	r2, [pc, #56]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108c6a:	f7f9 ff53 	bl	8102b14 <HAL_GetTick>
 8108c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108c70:	e008      	b.n	8108c84 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108c72:	f7f9 ff4f 	bl	8102b14 <HAL_GetTick>
 8108c76:	4602      	mov	r2, r0
 8108c78:	68bb      	ldr	r3, [r7, #8]
 8108c7a:	1ad3      	subs	r3, r2, r3
 8108c7c:	2b02      	cmp	r3, #2
 8108c7e:	d901      	bls.n	8108c84 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108c80:	2303      	movs	r3, #3
 8108c82:	e006      	b.n	8108c92 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108c84:	4b05      	ldr	r3, [pc, #20]	@ (8108c9c <RCCEx_PLL3_Config+0x160>)
 8108c86:	681b      	ldr	r3, [r3, #0]
 8108c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108c8c:	2b00      	cmp	r3, #0
 8108c8e:	d0f0      	beq.n	8108c72 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8108c92:	4618      	mov	r0, r3
 8108c94:	3710      	adds	r7, #16
 8108c96:	46bd      	mov	sp, r7
 8108c98:	bd80      	pop	{r7, pc}
 8108c9a:	bf00      	nop
 8108c9c:	58024400 	.word	0x58024400

08108ca0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8108ca0:	b580      	push	{r7, lr}
 8108ca2:	b084      	sub	sp, #16
 8108ca4:	af00      	add	r7, sp, #0
 8108ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8108ca8:	2301      	movs	r3, #1
 8108caa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	2b00      	cmp	r3, #0
 8108cb0:	d073      	beq.n	8108d9a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8108cb8:	b2db      	uxtb	r3, r3
 8108cba:	2b00      	cmp	r3, #0
 8108cbc:	d106      	bne.n	8108ccc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8108cbe:	687b      	ldr	r3, [r7, #4]
 8108cc0:	2200      	movs	r2, #0
 8108cc2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8108cc6:	6878      	ldr	r0, [r7, #4]
 8108cc8:	f7f8 feee 	bl	8101aa8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	2202      	movs	r2, #2
 8108cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	68db      	ldr	r3, [r3, #12]
 8108cda:	f003 0310 	and.w	r3, r3, #16
 8108cde:	2b10      	cmp	r3, #16
 8108ce0:	d052      	beq.n	8108d88 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8108ce2:	687b      	ldr	r3, [r7, #4]
 8108ce4:	681b      	ldr	r3, [r3, #0]
 8108ce6:	22ca      	movs	r2, #202	@ 0xca
 8108ce8:	625a      	str	r2, [r3, #36]	@ 0x24
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	681b      	ldr	r3, [r3, #0]
 8108cee:	2253      	movs	r2, #83	@ 0x53
 8108cf0:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8108cf2:	6878      	ldr	r0, [r7, #4]
 8108cf4:	f000 f87a 	bl	8108dec <RTC_EnterInitMode>
 8108cf8:	4603      	mov	r3, r0
 8108cfa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8108cfc:	7bfb      	ldrb	r3, [r7, #15]
 8108cfe:	2b00      	cmp	r3, #0
 8108d00:	d126      	bne.n	8108d50 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8108d02:	687b      	ldr	r3, [r7, #4]
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	689b      	ldr	r3, [r3, #8]
 8108d08:	687a      	ldr	r2, [r7, #4]
 8108d0a:	6812      	ldr	r2, [r2, #0]
 8108d0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8108d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8108d14:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	681b      	ldr	r3, [r3, #0]
 8108d1a:	6899      	ldr	r1, [r3, #8]
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	685a      	ldr	r2, [r3, #4]
 8108d20:	687b      	ldr	r3, [r7, #4]
 8108d22:	691b      	ldr	r3, [r3, #16]
 8108d24:	431a      	orrs	r2, r3
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	699b      	ldr	r3, [r3, #24]
 8108d2a:	431a      	orrs	r2, r3
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	681b      	ldr	r3, [r3, #0]
 8108d30:	430a      	orrs	r2, r1
 8108d32:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8108d34:	687b      	ldr	r3, [r7, #4]
 8108d36:	689b      	ldr	r3, [r3, #8]
 8108d38:	0419      	lsls	r1, r3, #16
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	68da      	ldr	r2, [r3, #12]
 8108d3e:	687b      	ldr	r3, [r7, #4]
 8108d40:	681b      	ldr	r3, [r3, #0]
 8108d42:	430a      	orrs	r2, r1
 8108d44:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8108d46:	6878      	ldr	r0, [r7, #4]
 8108d48:	f000 f884 	bl	8108e54 <RTC_ExitInitMode>
 8108d4c:	4603      	mov	r3, r0
 8108d4e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8108d50:	7bfb      	ldrb	r3, [r7, #15]
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d113      	bne.n	8108d7e <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	681b      	ldr	r3, [r3, #0]
 8108d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	f022 0203 	bic.w	r2, r2, #3
 8108d64:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8108d66:	687b      	ldr	r3, [r7, #4]
 8108d68:	681b      	ldr	r3, [r3, #0]
 8108d6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8108d6c:	687b      	ldr	r3, [r7, #4]
 8108d6e:	69da      	ldr	r2, [r3, #28]
 8108d70:	687b      	ldr	r3, [r7, #4]
 8108d72:	695b      	ldr	r3, [r3, #20]
 8108d74:	431a      	orrs	r2, r3
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	430a      	orrs	r2, r1
 8108d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	22ff      	movs	r2, #255	@ 0xff
 8108d84:	625a      	str	r2, [r3, #36]	@ 0x24
 8108d86:	e001      	b.n	8108d8c <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8108d88:	2300      	movs	r3, #0
 8108d8a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8108d8c:	7bfb      	ldrb	r3, [r7, #15]
 8108d8e:	2b00      	cmp	r3, #0
 8108d90:	d103      	bne.n	8108d9a <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	2201      	movs	r2, #1
 8108d96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8108d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8108d9c:	4618      	mov	r0, r3
 8108d9e:	3710      	adds	r7, #16
 8108da0:	46bd      	mov	sp, r7
 8108da2:	bd80      	pop	{r7, pc}

08108da4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8108da4:	b580      	push	{r7, lr}
 8108da6:	b084      	sub	sp, #16
 8108da8:	af00      	add	r7, sp, #0
 8108daa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	681b      	ldr	r3, [r3, #0]
 8108db0:	4a0d      	ldr	r2, [pc, #52]	@ (8108de8 <HAL_RTC_WaitForSynchro+0x44>)
 8108db2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8108db4:	f7f9 feae 	bl	8102b14 <HAL_GetTick>
 8108db8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108dba:	e009      	b.n	8108dd0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8108dbc:	f7f9 feaa 	bl	8102b14 <HAL_GetTick>
 8108dc0:	4602      	mov	r2, r0
 8108dc2:	68fb      	ldr	r3, [r7, #12]
 8108dc4:	1ad3      	subs	r3, r2, r3
 8108dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108dca:	d901      	bls.n	8108dd0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8108dcc:	2303      	movs	r3, #3
 8108dce:	e007      	b.n	8108de0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	68db      	ldr	r3, [r3, #12]
 8108dd6:	f003 0320 	and.w	r3, r3, #32
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d0ee      	beq.n	8108dbc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8108dde:	2300      	movs	r3, #0
}
 8108de0:	4618      	mov	r0, r3
 8108de2:	3710      	adds	r7, #16
 8108de4:	46bd      	mov	sp, r7
 8108de6:	bd80      	pop	{r7, pc}
 8108de8:	0003ff5f 	.word	0x0003ff5f

08108dec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8108dec:	b580      	push	{r7, lr}
 8108dee:	b084      	sub	sp, #16
 8108df0:	af00      	add	r7, sp, #0
 8108df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108df4:	2300      	movs	r3, #0
 8108df6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108df8:	687b      	ldr	r3, [r7, #4]
 8108dfa:	681b      	ldr	r3, [r3, #0]
 8108dfc:	68db      	ldr	r3, [r3, #12]
 8108dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108e02:	2b00      	cmp	r3, #0
 8108e04:	d120      	bne.n	8108e48 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	681b      	ldr	r3, [r3, #0]
 8108e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8108e0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8108e10:	f7f9 fe80 	bl	8102b14 <HAL_GetTick>
 8108e14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8108e16:	e00d      	b.n	8108e34 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8108e18:	f7f9 fe7c 	bl	8102b14 <HAL_GetTick>
 8108e1c:	4602      	mov	r2, r0
 8108e1e:	68bb      	ldr	r3, [r7, #8]
 8108e20:	1ad3      	subs	r3, r2, r3
 8108e22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108e26:	d905      	bls.n	8108e34 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8108e28:	2303      	movs	r3, #3
 8108e2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	2203      	movs	r2, #3
 8108e30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	68db      	ldr	r3, [r3, #12]
 8108e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108e3e:	2b00      	cmp	r3, #0
 8108e40:	d102      	bne.n	8108e48 <RTC_EnterInitMode+0x5c>
 8108e42:	7bfb      	ldrb	r3, [r7, #15]
 8108e44:	2b03      	cmp	r3, #3
 8108e46:	d1e7      	bne.n	8108e18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8108e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8108e4a:	4618      	mov	r0, r3
 8108e4c:	3710      	adds	r7, #16
 8108e4e:	46bd      	mov	sp, r7
 8108e50:	bd80      	pop	{r7, pc}
	...

08108e54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8108e54:	b580      	push	{r7, lr}
 8108e56:	b084      	sub	sp, #16
 8108e58:	af00      	add	r7, sp, #0
 8108e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108e5c:	2300      	movs	r3, #0
 8108e5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8108e60:	4b1a      	ldr	r3, [pc, #104]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108e62:	68db      	ldr	r3, [r3, #12]
 8108e64:	4a19      	ldr	r2, [pc, #100]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108e6a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8108e6c:	4b17      	ldr	r3, [pc, #92]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108e6e:	689b      	ldr	r3, [r3, #8]
 8108e70:	f003 0320 	and.w	r3, r3, #32
 8108e74:	2b00      	cmp	r3, #0
 8108e76:	d10c      	bne.n	8108e92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8108e78:	6878      	ldr	r0, [r7, #4]
 8108e7a:	f7ff ff93 	bl	8108da4 <HAL_RTC_WaitForSynchro>
 8108e7e:	4603      	mov	r3, r0
 8108e80:	2b00      	cmp	r3, #0
 8108e82:	d01e      	beq.n	8108ec2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	2203      	movs	r2, #3
 8108e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8108e8c:	2303      	movs	r3, #3
 8108e8e:	73fb      	strb	r3, [r7, #15]
 8108e90:	e017      	b.n	8108ec2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8108e92:	4b0e      	ldr	r3, [pc, #56]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108e94:	689b      	ldr	r3, [r3, #8]
 8108e96:	4a0d      	ldr	r2, [pc, #52]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108e98:	f023 0320 	bic.w	r3, r3, #32
 8108e9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8108e9e:	6878      	ldr	r0, [r7, #4]
 8108ea0:	f7ff ff80 	bl	8108da4 <HAL_RTC_WaitForSynchro>
 8108ea4:	4603      	mov	r3, r0
 8108ea6:	2b00      	cmp	r3, #0
 8108ea8:	d005      	beq.n	8108eb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	2203      	movs	r2, #3
 8108eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8108eb2:	2303      	movs	r3, #3
 8108eb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8108eb6:	4b05      	ldr	r3, [pc, #20]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108eb8:	689b      	ldr	r3, [r3, #8]
 8108eba:	4a04      	ldr	r2, [pc, #16]	@ (8108ecc <RTC_ExitInitMode+0x78>)
 8108ebc:	f043 0320 	orr.w	r3, r3, #32
 8108ec0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8108ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8108ec4:	4618      	mov	r0, r3
 8108ec6:	3710      	adds	r7, #16
 8108ec8:	46bd      	mov	sp, r7
 8108eca:	bd80      	pop	{r7, pc}
 8108ecc:	58004000 	.word	0x58004000

08108ed0 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8108ed0:	b480      	push	{r7}
 8108ed2:	b085      	sub	sp, #20
 8108ed4:	af00      	add	r7, sp, #0
 8108ed6:	6078      	str	r0, [r7, #4]
 8108ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8108ee0:	2b01      	cmp	r3, #1
 8108ee2:	d101      	bne.n	8108ee8 <HAL_RTCEx_SetTamper+0x18>
 8108ee4:	2302      	movs	r3, #2
 8108ee6:	e0cc      	b.n	8109082 <HAL_RTCEx_SetTamper+0x1b2>
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	2201      	movs	r2, #1
 8108eec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8108ef0:	687b      	ldr	r3, [r7, #4]
 8108ef2:	2202      	movs	r2, #2
 8108ef4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108efe:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8108f00:	683b      	ldr	r3, [r7, #0]
 8108f02:	681b      	ldr	r3, [r3, #0]
 8108f04:	68fa      	ldr	r2, [r7, #12]
 8108f06:	4313      	orrs	r3, r2
 8108f08:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8108f0a:	683b      	ldr	r3, [r7, #0]
 8108f0c:	689b      	ldr	r3, [r3, #8]
 8108f0e:	2b08      	cmp	r3, #8
 8108f10:	d003      	beq.n	8108f1a <HAL_RTCEx_SetTamper+0x4a>
 8108f12:	683b      	ldr	r3, [r7, #0]
 8108f14:	689b      	ldr	r3, [r3, #8]
 8108f16:	2b02      	cmp	r3, #2
 8108f18:	d106      	bne.n	8108f28 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8108f1a:	683b      	ldr	r3, [r7, #0]
 8108f1c:	681b      	ldr	r3, [r3, #0]
 8108f1e:	005b      	lsls	r3, r3, #1
 8108f20:	68fa      	ldr	r2, [r7, #12]
 8108f22:	4313      	orrs	r3, r2
 8108f24:	60fb      	str	r3, [r7, #12]
 8108f26:	e006      	b.n	8108f36 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8108f28:	683b      	ldr	r3, [r7, #0]
 8108f2a:	681b      	ldr	r3, [r3, #0]
 8108f2c:	005b      	lsls	r3, r3, #1
 8108f2e:	43db      	mvns	r3, r3
 8108f30:	68fa      	ldr	r2, [r7, #12]
 8108f32:	4013      	ands	r3, r2
 8108f34:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8108f36:	683b      	ldr	r3, [r7, #0]
 8108f38:	68db      	ldr	r3, [r3, #12]
 8108f3a:	2b00      	cmp	r3, #0
 8108f3c:	d01e      	beq.n	8108f7c <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108f3e:	683b      	ldr	r3, [r7, #0]
 8108f40:	681b      	ldr	r3, [r3, #0]
 8108f42:	f003 0301 	and.w	r3, r3, #1
 8108f46:	2b00      	cmp	r3, #0
 8108f48:	d003      	beq.n	8108f52 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8108f4a:	68fb      	ldr	r3, [r7, #12]
 8108f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108f50:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8108f52:	683b      	ldr	r3, [r7, #0]
 8108f54:	681b      	ldr	r3, [r3, #0]
 8108f56:	f003 0308 	and.w	r3, r3, #8
 8108f5a:	2b00      	cmp	r3, #0
 8108f5c:	d003      	beq.n	8108f66 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8108f5e:	68fb      	ldr	r3, [r7, #12]
 8108f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108f64:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108f66:	683b      	ldr	r3, [r7, #0]
 8108f68:	681b      	ldr	r3, [r3, #0]
 8108f6a:	f003 0320 	and.w	r3, r3, #32
 8108f6e:	2b00      	cmp	r3, #0
 8108f70:	d022      	beq.n	8108fb8 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8108f72:	68fb      	ldr	r3, [r7, #12]
 8108f74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108f78:	60fb      	str	r3, [r7, #12]
 8108f7a:	e01d      	b.n	8108fb8 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108f7c:	683b      	ldr	r3, [r7, #0]
 8108f7e:	681b      	ldr	r3, [r3, #0]
 8108f80:	f003 0301 	and.w	r3, r3, #1
 8108f84:	2b00      	cmp	r3, #0
 8108f86:	d003      	beq.n	8108f90 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8108f88:	68fb      	ldr	r3, [r7, #12]
 8108f8a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8108f8e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8108f90:	683b      	ldr	r3, [r7, #0]
 8108f92:	681b      	ldr	r3, [r3, #0]
 8108f94:	f003 0308 	and.w	r3, r3, #8
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d003      	beq.n	8108fa4 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8108f9c:	68fb      	ldr	r3, [r7, #12]
 8108f9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8108fa2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108fa4:	683b      	ldr	r3, [r7, #0]
 8108fa6:	681b      	ldr	r3, [r3, #0]
 8108fa8:	f003 0320 	and.w	r3, r3, #32
 8108fac:	2b00      	cmp	r3, #0
 8108fae:	d003      	beq.n	8108fb8 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8108fb0:	68fb      	ldr	r3, [r7, #12]
 8108fb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8108fb6:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8108fb8:	683b      	ldr	r3, [r7, #0]
 8108fba:	691b      	ldr	r3, [r3, #16]
 8108fbc:	2b00      	cmp	r3, #0
 8108fbe:	d01e      	beq.n	8108ffe <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108fc0:	683b      	ldr	r3, [r7, #0]
 8108fc2:	681b      	ldr	r3, [r3, #0]
 8108fc4:	f003 0301 	and.w	r3, r3, #1
 8108fc8:	2b00      	cmp	r3, #0
 8108fca:	d003      	beq.n	8108fd4 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8108fcc:	68fb      	ldr	r3, [r7, #12]
 8108fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8108fd2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8108fd4:	683b      	ldr	r3, [r7, #0]
 8108fd6:	681b      	ldr	r3, [r3, #0]
 8108fd8:	f003 0308 	and.w	r3, r3, #8
 8108fdc:	2b00      	cmp	r3, #0
 8108fde:	d003      	beq.n	8108fe8 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8108fe0:	68fb      	ldr	r3, [r7, #12]
 8108fe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108fe6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108fe8:	683b      	ldr	r3, [r7, #0]
 8108fea:	681b      	ldr	r3, [r3, #0]
 8108fec:	f003 0320 	and.w	r3, r3, #32
 8108ff0:	2b00      	cmp	r3, #0
 8108ff2:	d022      	beq.n	810903a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8108ff4:	68fb      	ldr	r3, [r7, #12]
 8108ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108ffa:	60fb      	str	r3, [r7, #12]
 8108ffc:	e01d      	b.n	810903a <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108ffe:	683b      	ldr	r3, [r7, #0]
 8109000:	681b      	ldr	r3, [r3, #0]
 8109002:	f003 0301 	and.w	r3, r3, #1
 8109006:	2b00      	cmp	r3, #0
 8109008:	d003      	beq.n	8109012 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 810900a:	68fb      	ldr	r3, [r7, #12]
 810900c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8109010:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8109012:	683b      	ldr	r3, [r7, #0]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	f003 0308 	and.w	r3, r3, #8
 810901a:	2b00      	cmp	r3, #0
 810901c:	d003      	beq.n	8109026 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 810901e:	68fb      	ldr	r3, [r7, #12]
 8109020:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8109024:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8109026:	683b      	ldr	r3, [r7, #0]
 8109028:	681b      	ldr	r3, [r3, #0]
 810902a:	f003 0320 	and.w	r3, r3, #32
 810902e:	2b00      	cmp	r3, #0
 8109030:	d003      	beq.n	810903a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8109032:	68fb      	ldr	r3, [r7, #12]
 8109034:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109038:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 810903a:	68fb      	ldr	r3, [r7, #12]
 810903c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8109040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109044:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8109046:	683b      	ldr	r3, [r7, #0]
 8109048:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 810904a:	683b      	ldr	r3, [r7, #0]
 810904c:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810904e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8109050:	683b      	ldr	r3, [r7, #0]
 8109052:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8109054:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8109056:	683b      	ldr	r3, [r7, #0]
 8109058:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810905a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 810905c:	683b      	ldr	r3, [r7, #0]
 810905e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8109060:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8109062:	68fa      	ldr	r2, [r7, #12]
 8109064:	4313      	orrs	r3, r2
 8109066:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8109068:	687b      	ldr	r3, [r7, #4]
 810906a:	681b      	ldr	r3, [r3, #0]
 810906c:	68fa      	ldr	r2, [r7, #12]
 810906e:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8109070:	687b      	ldr	r3, [r7, #4]
 8109072:	2201      	movs	r2, #1
 8109074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8109078:	687b      	ldr	r3, [r7, #4]
 810907a:	2200      	movs	r2, #0
 810907c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8109080:	2300      	movs	r3, #0
}
 8109082:	4618      	mov	r0, r3
 8109084:	3714      	adds	r7, #20
 8109086:	46bd      	mov	sp, r7
 8109088:	f85d 7b04 	ldr.w	r7, [sp], #4
 810908c:	4770      	bx	lr
	...

08109090 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8109090:	b580      	push	{r7, lr}
 8109092:	b08a      	sub	sp, #40	@ 0x28
 8109094:	af00      	add	r7, sp, #0
 8109096:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8109098:	687b      	ldr	r3, [r7, #4]
 810909a:	2b00      	cmp	r3, #0
 810909c:	d101      	bne.n	81090a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810909e:	2301      	movs	r3, #1
 81090a0:	e290      	b.n	81095c4 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81090a2:	f7f9 fd67 	bl	8102b74 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81090a6:	687b      	ldr	r3, [r7, #4]
 81090a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81090ac:	2b01      	cmp	r3, #1
 81090ae:	d113      	bne.n	81090d8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81090b0:	687b      	ldr	r3, [r7, #4]
 81090b2:	681b      	ldr	r3, [r3, #0]
 81090b4:	4a96      	ldr	r2, [pc, #600]	@ (8109310 <HAL_SAI_Init+0x280>)
 81090b6:	4293      	cmp	r3, r2
 81090b8:	d004      	beq.n	81090c4 <HAL_SAI_Init+0x34>
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	4a95      	ldr	r2, [pc, #596]	@ (8109314 <HAL_SAI_Init+0x284>)
 81090c0:	4293      	cmp	r3, r2
 81090c2:	d107      	bne.n	81090d4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81090c8:	2b01      	cmp	r3, #1
 81090ca:	d103      	bne.n	81090d4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81090cc:	687b      	ldr	r3, [r7, #4]
 81090ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81090d0:	2b00      	cmp	r3, #0
 81090d2:	d001      	beq.n	81090d8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81090d4:	2301      	movs	r3, #1
 81090d6:	e275      	b.n	81095c4 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	681b      	ldr	r3, [r3, #0]
 81090dc:	4a8c      	ldr	r2, [pc, #560]	@ (8109310 <HAL_SAI_Init+0x280>)
 81090de:	4293      	cmp	r3, r2
 81090e0:	d004      	beq.n	81090ec <HAL_SAI_Init+0x5c>
 81090e2:	687b      	ldr	r3, [r7, #4]
 81090e4:	681b      	ldr	r3, [r3, #0]
 81090e6:	4a8c      	ldr	r2, [pc, #560]	@ (8109318 <HAL_SAI_Init+0x288>)
 81090e8:	4293      	cmp	r3, r2
 81090ea:	d102      	bne.n	81090f2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81090ec:	4b8b      	ldr	r3, [pc, #556]	@ (810931c <HAL_SAI_Init+0x28c>)
 81090ee:	61bb      	str	r3, [r7, #24]
 81090f0:	e028      	b.n	8109144 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81090f2:	687b      	ldr	r3, [r7, #4]
 81090f4:	681b      	ldr	r3, [r3, #0]
 81090f6:	4a8a      	ldr	r2, [pc, #552]	@ (8109320 <HAL_SAI_Init+0x290>)
 81090f8:	4293      	cmp	r3, r2
 81090fa:	d004      	beq.n	8109106 <HAL_SAI_Init+0x76>
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	4a88      	ldr	r2, [pc, #544]	@ (8109324 <HAL_SAI_Init+0x294>)
 8109102:	4293      	cmp	r3, r2
 8109104:	d102      	bne.n	810910c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8109106:	4b88      	ldr	r3, [pc, #544]	@ (8109328 <HAL_SAI_Init+0x298>)
 8109108:	61bb      	str	r3, [r7, #24]
 810910a:	e01b      	b.n	8109144 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	681b      	ldr	r3, [r3, #0]
 8109110:	4a86      	ldr	r2, [pc, #536]	@ (810932c <HAL_SAI_Init+0x29c>)
 8109112:	4293      	cmp	r3, r2
 8109114:	d004      	beq.n	8109120 <HAL_SAI_Init+0x90>
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	681b      	ldr	r3, [r3, #0]
 810911a:	4a85      	ldr	r2, [pc, #532]	@ (8109330 <HAL_SAI_Init+0x2a0>)
 810911c:	4293      	cmp	r3, r2
 810911e:	d102      	bne.n	8109126 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8109120:	4b84      	ldr	r3, [pc, #528]	@ (8109334 <HAL_SAI_Init+0x2a4>)
 8109122:	61bb      	str	r3, [r7, #24]
 8109124:	e00e      	b.n	8109144 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	681b      	ldr	r3, [r3, #0]
 810912a:	4a7a      	ldr	r2, [pc, #488]	@ (8109314 <HAL_SAI_Init+0x284>)
 810912c:	4293      	cmp	r3, r2
 810912e:	d004      	beq.n	810913a <HAL_SAI_Init+0xaa>
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	4a80      	ldr	r2, [pc, #512]	@ (8109338 <HAL_SAI_Init+0x2a8>)
 8109136:	4293      	cmp	r3, r2
 8109138:	d102      	bne.n	8109140 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810913a:	4b80      	ldr	r3, [pc, #512]	@ (810933c <HAL_SAI_Init+0x2ac>)
 810913c:	61bb      	str	r3, [r7, #24]
 810913e:	e001      	b.n	8109144 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8109140:	2301      	movs	r3, #1
 8109142:	e23f      	b.n	81095c4 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 810914a:	b2db      	uxtb	r3, r3
 810914c:	2b00      	cmp	r3, #0
 810914e:	d106      	bne.n	810915e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	2200      	movs	r2, #0
 8109154:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8109158:	6878      	ldr	r0, [r7, #4]
 810915a:	f7f9 fa6b 	bl	8102634 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810915e:	6878      	ldr	r0, [r7, #4]
 8109160:	f000 fa40 	bl	81095e4 <SAI_Disable>
 8109164:	4603      	mov	r3, r0
 8109166:	2b00      	cmp	r3, #0
 8109168:	d001      	beq.n	810916e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810916a:	2301      	movs	r3, #1
 810916c:	e22a      	b.n	81095c4 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	2202      	movs	r2, #2
 8109172:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8109176:	687b      	ldr	r3, [r7, #4]
 8109178:	68db      	ldr	r3, [r3, #12]
 810917a:	2b02      	cmp	r3, #2
 810917c:	d00c      	beq.n	8109198 <HAL_SAI_Init+0x108>
 810917e:	2b02      	cmp	r3, #2
 8109180:	d80d      	bhi.n	810919e <HAL_SAI_Init+0x10e>
 8109182:	2b00      	cmp	r3, #0
 8109184:	d002      	beq.n	810918c <HAL_SAI_Init+0xfc>
 8109186:	2b01      	cmp	r3, #1
 8109188:	d003      	beq.n	8109192 <HAL_SAI_Init+0x102>
 810918a:	e008      	b.n	810919e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 810918c:	2300      	movs	r3, #0
 810918e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109190:	e008      	b.n	81091a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8109192:	2310      	movs	r3, #16
 8109194:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109196:	e005      	b.n	81091a4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8109198:	2320      	movs	r3, #32
 810919a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810919c:	e002      	b.n	81091a4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810919e:	2300      	movs	r3, #0
 81091a0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81091a2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	689b      	ldr	r3, [r3, #8]
 81091a8:	2b05      	cmp	r3, #5
 81091aa:	d832      	bhi.n	8109212 <HAL_SAI_Init+0x182>
 81091ac:	a201      	add	r2, pc, #4	@ (adr r2, 81091b4 <HAL_SAI_Init+0x124>)
 81091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81091b2:	bf00      	nop
 81091b4:	081091cd 	.word	0x081091cd
 81091b8:	081091d3 	.word	0x081091d3
 81091bc:	081091db 	.word	0x081091db
 81091c0:	081091e3 	.word	0x081091e3
 81091c4:	081091f3 	.word	0x081091f3
 81091c8:	08109203 	.word	0x08109203
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81091cc:	2300      	movs	r3, #0
 81091ce:	61fb      	str	r3, [r7, #28]
      break;
 81091d0:	e022      	b.n	8109218 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81091d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81091d6:	61fb      	str	r3, [r7, #28]
      break;
 81091d8:	e01e      	b.n	8109218 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81091da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81091de:	61fb      	str	r3, [r7, #28]
      break;
 81091e0:	e01a      	b.n	8109218 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81091e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81091e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 81091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81091ea:	f043 0301 	orr.w	r3, r3, #1
 81091ee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81091f0:	e012      	b.n	8109218 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81091f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81091f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81091fa:	f043 0302 	orr.w	r3, r3, #2
 81091fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109200:	e00a      	b.n	8109218 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8109202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109206:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8109208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810920a:	f043 0303 	orr.w	r3, r3, #3
 810920e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109210:	e002      	b.n	8109218 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8109212:	2300      	movs	r3, #0
 8109214:	61fb      	str	r3, [r7, #28]
      break;
 8109216:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8109218:	69bb      	ldr	r3, [r7, #24]
 810921a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810921c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 810921e:	687b      	ldr	r3, [r7, #4]
 8109220:	6a1b      	ldr	r3, [r3, #32]
 8109222:	2b00      	cmp	r3, #0
 8109224:	f000 80c5 	beq.w	81093b2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8109228:	2300      	movs	r3, #0
 810922a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	681b      	ldr	r3, [r3, #0]
 8109230:	4a37      	ldr	r2, [pc, #220]	@ (8109310 <HAL_SAI_Init+0x280>)
 8109232:	4293      	cmp	r3, r2
 8109234:	d004      	beq.n	8109240 <HAL_SAI_Init+0x1b0>
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	681b      	ldr	r3, [r3, #0]
 810923a:	4a37      	ldr	r2, [pc, #220]	@ (8109318 <HAL_SAI_Init+0x288>)
 810923c:	4293      	cmp	r3, r2
 810923e:	d106      	bne.n	810924e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8109240:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8109244:	f04f 0100 	mov.w	r1, #0
 8109248:	f7fe fa36 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 810924c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	681b      	ldr	r3, [r3, #0]
 8109252:	4a33      	ldr	r2, [pc, #204]	@ (8109320 <HAL_SAI_Init+0x290>)
 8109254:	4293      	cmp	r3, r2
 8109256:	d004      	beq.n	8109262 <HAL_SAI_Init+0x1d2>
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	4a31      	ldr	r2, [pc, #196]	@ (8109324 <HAL_SAI_Init+0x294>)
 810925e:	4293      	cmp	r3, r2
 8109260:	d106      	bne.n	8109270 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8109262:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8109266:	f04f 0100 	mov.w	r1, #0
 810926a:	f7fe fa25 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 810926e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	681b      	ldr	r3, [r3, #0]
 8109274:	4a2d      	ldr	r2, [pc, #180]	@ (810932c <HAL_SAI_Init+0x29c>)
 8109276:	4293      	cmp	r3, r2
 8109278:	d004      	beq.n	8109284 <HAL_SAI_Init+0x1f4>
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	681b      	ldr	r3, [r3, #0]
 810927e:	4a2c      	ldr	r2, [pc, #176]	@ (8109330 <HAL_SAI_Init+0x2a0>)
 8109280:	4293      	cmp	r3, r2
 8109282:	d106      	bne.n	8109292 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8109284:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8109288:	f04f 0100 	mov.w	r1, #0
 810928c:	f7fe fa14 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8109290:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	4a1f      	ldr	r2, [pc, #124]	@ (8109314 <HAL_SAI_Init+0x284>)
 8109298:	4293      	cmp	r3, r2
 810929a:	d106      	bne.n	81092aa <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 810929c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81092a0:	f04f 0100 	mov.w	r1, #0
 81092a4:	f7fe fa08 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 81092a8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	681b      	ldr	r3, [r3, #0]
 81092ae:	4a22      	ldr	r2, [pc, #136]	@ (8109338 <HAL_SAI_Init+0x2a8>)
 81092b0:	4293      	cmp	r3, r2
 81092b2:	d106      	bne.n	81092c2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81092b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 81092b8:	f04f 0100 	mov.w	r1, #0
 81092bc:	f7fe f9fc 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 81092c0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	699b      	ldr	r3, [r3, #24]
 81092c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81092ca:	d139      	bne.n	8109340 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81092d0:	2b04      	cmp	r3, #4
 81092d2:	d102      	bne.n	81092da <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81092d4:	2340      	movs	r3, #64	@ 0x40
 81092d6:	60fb      	str	r3, [r7, #12]
 81092d8:	e00a      	b.n	81092f0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81092de:	2b08      	cmp	r3, #8
 81092e0:	d103      	bne.n	81092ea <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 81092e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81092e6:	60fb      	str	r3, [r7, #12]
 81092e8:	e002      	b.n	81092f0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81092ee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81092f0:	697a      	ldr	r2, [r7, #20]
 81092f2:	4613      	mov	r3, r2
 81092f4:	009b      	lsls	r3, r3, #2
 81092f6:	4413      	add	r3, r2
 81092f8:	005b      	lsls	r3, r3, #1
 81092fa:	4619      	mov	r1, r3
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	6a1b      	ldr	r3, [r3, #32]
 8109300:	68fa      	ldr	r2, [r7, #12]
 8109302:	fb02 f303 	mul.w	r3, r2, r3
 8109306:	fbb1 f3f3 	udiv	r3, r1, r3
 810930a:	613b      	str	r3, [r7, #16]
 810930c:	e030      	b.n	8109370 <HAL_SAI_Init+0x2e0>
 810930e:	bf00      	nop
 8109310:	40015804 	.word	0x40015804
 8109314:	58005404 	.word	0x58005404
 8109318:	40015824 	.word	0x40015824
 810931c:	40015800 	.word	0x40015800
 8109320:	40015c04 	.word	0x40015c04
 8109324:	40015c24 	.word	0x40015c24
 8109328:	40015c00 	.word	0x40015c00
 810932c:	40016004 	.word	0x40016004
 8109330:	40016024 	.word	0x40016024
 8109334:	40016000 	.word	0x40016000
 8109338:	58005424 	.word	0x58005424
 810933c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8109340:	687b      	ldr	r3, [r7, #4]
 8109342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109348:	d101      	bne.n	810934e <HAL_SAI_Init+0x2be>
 810934a:	2302      	movs	r3, #2
 810934c:	e000      	b.n	8109350 <HAL_SAI_Init+0x2c0>
 810934e:	2301      	movs	r3, #1
 8109350:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8109352:	697a      	ldr	r2, [r7, #20]
 8109354:	4613      	mov	r3, r2
 8109356:	009b      	lsls	r3, r3, #2
 8109358:	4413      	add	r3, r2
 810935a:	005b      	lsls	r3, r3, #1
 810935c:	4619      	mov	r1, r3
 810935e:	687b      	ldr	r3, [r7, #4]
 8109360:	6a1b      	ldr	r3, [r3, #32]
 8109362:	68ba      	ldr	r2, [r7, #8]
 8109364:	fb02 f303 	mul.w	r3, r2, r3
 8109368:	021b      	lsls	r3, r3, #8
 810936a:	fbb1 f3f3 	udiv	r3, r1, r3
 810936e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8109370:	693b      	ldr	r3, [r7, #16]
 8109372:	4a96      	ldr	r2, [pc, #600]	@ (81095cc <HAL_SAI_Init+0x53c>)
 8109374:	fba2 2303 	umull	r2, r3, r2, r3
 8109378:	08da      	lsrs	r2, r3, #3
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 810937e:	6939      	ldr	r1, [r7, #16]
 8109380:	4b92      	ldr	r3, [pc, #584]	@ (81095cc <HAL_SAI_Init+0x53c>)
 8109382:	fba3 2301 	umull	r2, r3, r3, r1
 8109386:	08da      	lsrs	r2, r3, #3
 8109388:	4613      	mov	r3, r2
 810938a:	009b      	lsls	r3, r3, #2
 810938c:	4413      	add	r3, r2
 810938e:	005b      	lsls	r3, r3, #1
 8109390:	1aca      	subs	r2, r1, r3
 8109392:	2a08      	cmp	r2, #8
 8109394:	d904      	bls.n	81093a0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8109396:	687b      	ldr	r3, [r7, #4]
 8109398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810939a:	1c5a      	adds	r2, r3, #1
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81093a4:	2b04      	cmp	r3, #4
 81093a6:	d104      	bne.n	81093b2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81093a8:	687b      	ldr	r3, [r7, #4]
 81093aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093ac:	085a      	lsrs	r2, r3, #1
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	685b      	ldr	r3, [r3, #4]
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	d003      	beq.n	81093c2 <HAL_SAI_Init+0x332>
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	685b      	ldr	r3, [r3, #4]
 81093be:	2b02      	cmp	r3, #2
 81093c0:	d109      	bne.n	81093d6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81093c6:	2b01      	cmp	r3, #1
 81093c8:	d101      	bne.n	81093ce <HAL_SAI_Init+0x33e>
 81093ca:	2300      	movs	r3, #0
 81093cc:	e001      	b.n	81093d2 <HAL_SAI_Init+0x342>
 81093ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81093d2:	623b      	str	r3, [r7, #32]
 81093d4:	e008      	b.n	81093e8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81093d6:	687b      	ldr	r3, [r7, #4]
 81093d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81093da:	2b01      	cmp	r3, #1
 81093dc:	d102      	bne.n	81093e4 <HAL_SAI_Init+0x354>
 81093de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81093e2:	e000      	b.n	81093e6 <HAL_SAI_Init+0x356>
 81093e4:	2300      	movs	r3, #0
 81093e6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81093e8:	f7f9 fbc4 	bl	8102b74 <HAL_GetREVID>
 81093ec:	4603      	mov	r3, r0
 81093ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81093f2:	d331      	bcc.n	8109458 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	681b      	ldr	r3, [r3, #0]
 81093f8:	6819      	ldr	r1, [r3, #0]
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	681a      	ldr	r2, [r3, #0]
 81093fe:	4b74      	ldr	r3, [pc, #464]	@ (81095d0 <HAL_SAI_Init+0x540>)
 8109400:	400b      	ands	r3, r1
 8109402:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	681b      	ldr	r3, [r3, #0]
 8109408:	6819      	ldr	r1, [r3, #0]
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	685a      	ldr	r2, [r3, #4]
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109412:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109414:	687b      	ldr	r3, [r7, #4]
 8109416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109418:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810941e:	431a      	orrs	r2, r3
 8109420:	6a3b      	ldr	r3, [r7, #32]
 8109422:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8109424:	69fb      	ldr	r3, [r7, #28]
 8109426:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 810942c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	695b      	ldr	r3, [r3, #20]
 8109432:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109438:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810943e:	051b      	lsls	r3, r3, #20
 8109440:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109446:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	691b      	ldr	r3, [r3, #16]
 810944c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810944e:	687b      	ldr	r3, [r7, #4]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	430a      	orrs	r2, r1
 8109454:	601a      	str	r2, [r3, #0]
 8109456:	e02d      	b.n	81094b4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	6819      	ldr	r1, [r3, #0]
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	681a      	ldr	r2, [r3, #0]
 8109462:	4b5c      	ldr	r3, [pc, #368]	@ (81095d4 <HAL_SAI_Init+0x544>)
 8109464:	400b      	ands	r3, r1
 8109466:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	681b      	ldr	r3, [r3, #0]
 810946c:	6819      	ldr	r1, [r3, #0]
 810946e:	687b      	ldr	r3, [r7, #4]
 8109470:	685a      	ldr	r2, [r3, #4]
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109476:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810947c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109482:	431a      	orrs	r2, r3
 8109484:	6a3b      	ldr	r3, [r7, #32]
 8109486:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8109488:	69fb      	ldr	r3, [r7, #28]
 810948a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8109490:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109492:	687b      	ldr	r3, [r7, #4]
 8109494:	695b      	ldr	r3, [r3, #20]
 8109496:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810949c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81094a2:	051b      	lsls	r3, r3, #20
 81094a4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81094aa:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	430a      	orrs	r2, r1
 81094b2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	681b      	ldr	r3, [r3, #0]
 81094b8:	685b      	ldr	r3, [r3, #4]
 81094ba:	687a      	ldr	r2, [r7, #4]
 81094bc:	6812      	ldr	r2, [r2, #0]
 81094be:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 81094c2:	f023 030f 	bic.w	r3, r3, #15
 81094c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81094c8:	687b      	ldr	r3, [r7, #4]
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	6859      	ldr	r1, [r3, #4]
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	69da      	ldr	r2, [r3, #28]
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094d6:	431a      	orrs	r2, r3
 81094d8:	687b      	ldr	r3, [r7, #4]
 81094da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81094dc:	431a      	orrs	r2, r3
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	430a      	orrs	r2, r1
 81094e4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	681b      	ldr	r3, [r3, #0]
 81094ea:	6899      	ldr	r1, [r3, #8]
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	681a      	ldr	r2, [r3, #0]
 81094f0:	4b39      	ldr	r3, [pc, #228]	@ (81095d8 <HAL_SAI_Init+0x548>)
 81094f2:	400b      	ands	r3, r1
 81094f4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	681b      	ldr	r3, [r3, #0]
 81094fa:	6899      	ldr	r1, [r3, #8]
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109500:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8109506:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 810950c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8109512:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8109514:	687b      	ldr	r3, [r7, #4]
 8109516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109518:	3b01      	subs	r3, #1
 810951a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810951c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810951e:	687b      	ldr	r3, [r7, #4]
 8109520:	681b      	ldr	r3, [r3, #0]
 8109522:	430a      	orrs	r2, r1
 8109524:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	681b      	ldr	r3, [r3, #0]
 810952a:	68d9      	ldr	r1, [r3, #12]
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	681a      	ldr	r2, [r3, #0]
 8109530:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8109534:	400b      	ands	r3, r1
 8109536:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	681b      	ldr	r3, [r3, #0]
 810953c:	68d9      	ldr	r1, [r3, #12]
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8109542:	687b      	ldr	r3, [r7, #4]
 8109544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109546:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810954c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810954e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109554:	3b01      	subs	r3, #1
 8109556:	021b      	lsls	r3, r3, #8
 8109558:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	681b      	ldr	r3, [r3, #0]
 810955e:	430a      	orrs	r2, r1
 8109560:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	4a1d      	ldr	r2, [pc, #116]	@ (81095dc <HAL_SAI_Init+0x54c>)
 8109568:	4293      	cmp	r3, r2
 810956a:	d004      	beq.n	8109576 <HAL_SAI_Init+0x4e6>
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	681b      	ldr	r3, [r3, #0]
 8109570:	4a1b      	ldr	r2, [pc, #108]	@ (81095e0 <HAL_SAI_Init+0x550>)
 8109572:	4293      	cmp	r3, r2
 8109574:	d119      	bne.n	81095aa <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8109576:	69bb      	ldr	r3, [r7, #24]
 8109578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810957a:	f023 0201 	bic.w	r2, r3, #1
 810957e:	69bb      	ldr	r3, [r7, #24]
 8109580:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8109588:	2b01      	cmp	r3, #1
 810958a:	d10e      	bne.n	81095aa <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109594:	3b01      	subs	r3, #1
 8109596:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8109598:	431a      	orrs	r2, r3
 810959a:	69bb      	ldr	r3, [r7, #24]
 810959c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 810959e:	69bb      	ldr	r3, [r7, #24]
 81095a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81095a2:	f043 0201 	orr.w	r2, r3, #1
 81095a6:	69bb      	ldr	r3, [r7, #24]
 81095a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81095aa:	687b      	ldr	r3, [r7, #4]
 81095ac:	2200      	movs	r2, #0
 81095ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81095b2:	687b      	ldr	r3, [r7, #4]
 81095b4:	2201      	movs	r2, #1
 81095b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81095ba:	687b      	ldr	r3, [r7, #4]
 81095bc:	2200      	movs	r2, #0
 81095be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 81095c2:	2300      	movs	r3, #0
}
 81095c4:	4618      	mov	r0, r3
 81095c6:	3728      	adds	r7, #40	@ 0x28
 81095c8:	46bd      	mov	sp, r7
 81095ca:	bd80      	pop	{r7, pc}
 81095cc:	cccccccd 	.word	0xcccccccd
 81095d0:	f005c010 	.word	0xf005c010
 81095d4:	f805c010 	.word	0xf805c010
 81095d8:	fff88000 	.word	0xfff88000
 81095dc:	40015804 	.word	0x40015804
 81095e0:	58005404 	.word	0x58005404

081095e4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81095e4:	b480      	push	{r7}
 81095e6:	b085      	sub	sp, #20
 81095e8:	af00      	add	r7, sp, #0
 81095ea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81095ec:	4b18      	ldr	r3, [pc, #96]	@ (8109650 <SAI_Disable+0x6c>)
 81095ee:	681b      	ldr	r3, [r3, #0]
 81095f0:	4a18      	ldr	r2, [pc, #96]	@ (8109654 <SAI_Disable+0x70>)
 81095f2:	fba2 2303 	umull	r2, r3, r2, r3
 81095f6:	0b1b      	lsrs	r3, r3, #12
 81095f8:	009b      	lsls	r3, r3, #2
 81095fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 81095fc:	2300      	movs	r3, #0
 81095fe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	681a      	ldr	r2, [r3, #0]
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 810960e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8109610:	68fb      	ldr	r3, [r7, #12]
 8109612:	2b00      	cmp	r3, #0
 8109614:	d10a      	bne.n	810962c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8109616:	687b      	ldr	r3, [r7, #4]
 8109618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810961c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8109626:	2303      	movs	r3, #3
 8109628:	72fb      	strb	r3, [r7, #11]
      break;
 810962a:	e009      	b.n	8109640 <SAI_Disable+0x5c>
    }
    count--;
 810962c:	68fb      	ldr	r3, [r7, #12]
 810962e:	3b01      	subs	r3, #1
 8109630:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	681b      	ldr	r3, [r3, #0]
 8109636:	681b      	ldr	r3, [r3, #0]
 8109638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810963c:	2b00      	cmp	r3, #0
 810963e:	d1e7      	bne.n	8109610 <SAI_Disable+0x2c>

  return status;
 8109640:	7afb      	ldrb	r3, [r7, #11]
}
 8109642:	4618      	mov	r0, r3
 8109644:	3714      	adds	r7, #20
 8109646:	46bd      	mov	sp, r7
 8109648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810964c:	4770      	bx	lr
 810964e:	bf00      	nop
 8109650:	10000000 	.word	0x10000000
 8109654:	95cbec1b 	.word	0x95cbec1b

08109658 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8109658:	b580      	push	{r7, lr}
 810965a:	b08a      	sub	sp, #40	@ 0x28
 810965c:	af00      	add	r7, sp, #0
 810965e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	2b00      	cmp	r3, #0
 8109664:	d101      	bne.n	810966a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8109666:	2301      	movs	r3, #1
 8109668:	e075      	b.n	8109756 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109670:	b2db      	uxtb	r3, r3
 8109672:	2b00      	cmp	r3, #0
 8109674:	d105      	bne.n	8109682 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	2200      	movs	r2, #0
 810967a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810967c:	6878      	ldr	r0, [r7, #4]
 810967e:	f7f8 fa45 	bl	8101b0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	2204      	movs	r2, #4
 8109686:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810968a:	6878      	ldr	r0, [r7, #4]
 810968c:	f000 f868 	bl	8109760 <HAL_SD_InitCard>
 8109690:	4603      	mov	r3, r0
 8109692:	2b00      	cmp	r3, #0
 8109694:	d001      	beq.n	810969a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8109696:	2301      	movs	r3, #1
 8109698:	e05d      	b.n	8109756 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810969a:	f107 0308 	add.w	r3, r7, #8
 810969e:	4619      	mov	r1, r3
 81096a0:	6878      	ldr	r0, [r7, #4]
 81096a2:	f000 fa9d 	bl	8109be0 <HAL_SD_GetCardStatus>
 81096a6:	4603      	mov	r3, r0
 81096a8:	2b00      	cmp	r3, #0
 81096aa:	d001      	beq.n	81096b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81096ac:	2301      	movs	r3, #1
 81096ae:	e052      	b.n	8109756 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81096b0:	7e3b      	ldrb	r3, [r7, #24]
 81096b2:	b2db      	uxtb	r3, r3
 81096b4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81096b6:	7e7b      	ldrb	r3, [r7, #25]
 81096b8:	b2db      	uxtb	r3, r3
 81096ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81096c0:	2b01      	cmp	r3, #1
 81096c2:	d10a      	bne.n	81096da <HAL_SD_Init+0x82>
 81096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d102      	bne.n	81096d0 <HAL_SD_Init+0x78>
 81096ca:	6a3b      	ldr	r3, [r7, #32]
 81096cc:	2b00      	cmp	r3, #0
 81096ce:	d004      	beq.n	81096da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81096d6:	659a      	str	r2, [r3, #88]	@ 0x58
 81096d8:	e00b      	b.n	81096f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81096de:	2b01      	cmp	r3, #1
 81096e0:	d104      	bne.n	81096ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81096e2:	687b      	ldr	r3, [r7, #4]
 81096e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81096e8:	659a      	str	r2, [r3, #88]	@ 0x58
 81096ea:	e002      	b.n	81096f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	2200      	movs	r2, #0
 81096f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	68db      	ldr	r3, [r3, #12]
 81096f6:	4619      	mov	r1, r3
 81096f8:	6878      	ldr	r0, [r7, #4]
 81096fa:	f000 fb2f 	bl	8109d5c <HAL_SD_ConfigWideBusOperation>
 81096fe:	4603      	mov	r3, r0
 8109700:	2b00      	cmp	r3, #0
 8109702:	d001      	beq.n	8109708 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8109704:	2301      	movs	r3, #1
 8109706:	e026      	b.n	8109756 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8109708:	f7f9 fa04 	bl	8102b14 <HAL_GetTick>
 810970c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810970e:	e011      	b.n	8109734 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109710:	f7f9 fa00 	bl	8102b14 <HAL_GetTick>
 8109714:	4602      	mov	r2, r0
 8109716:	69fb      	ldr	r3, [r7, #28]
 8109718:	1ad3      	subs	r3, r2, r3
 810971a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810971e:	d109      	bne.n	8109734 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8109726:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	2201      	movs	r2, #1
 810972c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8109730:	2303      	movs	r3, #3
 8109732:	e010      	b.n	8109756 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8109734:	6878      	ldr	r0, [r7, #4]
 8109736:	f000 fc23 	bl	8109f80 <HAL_SD_GetCardState>
 810973a:	4603      	mov	r3, r0
 810973c:	2b04      	cmp	r3, #4
 810973e:	d1e7      	bne.n	8109710 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	2200      	movs	r2, #0
 8109744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	2200      	movs	r2, #0
 810974a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	2201      	movs	r2, #1
 8109750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8109754:	2300      	movs	r3, #0
}
 8109756:	4618      	mov	r0, r3
 8109758:	3728      	adds	r7, #40	@ 0x28
 810975a:	46bd      	mov	sp, r7
 810975c:	bd80      	pop	{r7, pc}
	...

08109760 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8109760:	b590      	push	{r4, r7, lr}
 8109762:	b08d      	sub	sp, #52	@ 0x34
 8109764:	af02      	add	r7, sp, #8
 8109766:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8109768:	2300      	movs	r3, #0
 810976a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810976c:	2300      	movs	r3, #0
 810976e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8109770:	2300      	movs	r3, #0
 8109772:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8109774:	2300      	movs	r3, #0
 8109776:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8109778:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810977c:	f04f 0100 	mov.w	r1, #0
 8109780:	f7fd ff9a 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8109784:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8109786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109788:	2b00      	cmp	r3, #0
 810978a:	d109      	bne.n	81097a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	2201      	movs	r2, #1
 8109790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810979a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810979c:	2301      	movs	r3, #1
 810979e:	e070      	b.n	8109882 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097a2:	0a1b      	lsrs	r3, r3, #8
 81097a4:	4a39      	ldr	r2, [pc, #228]	@ (810988c <HAL_SD_InitCard+0x12c>)
 81097a6:	fba2 2303 	umull	r2, r3, r2, r3
 81097aa:	091b      	lsrs	r3, r3, #4
 81097ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	681c      	ldr	r4, [r3, #0]
 81097b2:	466a      	mov	r2, sp
 81097b4:	f107 0318 	add.w	r3, r7, #24
 81097b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 81097bc:	e882 0003 	stmia.w	r2, {r0, r1}
 81097c0:	f107 030c 	add.w	r3, r7, #12
 81097c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81097c6:	4620      	mov	r0, r4
 81097c8:	f003 fb9c 	bl	810cf04 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	681b      	ldr	r3, [r3, #0]
 81097d0:	4618      	mov	r0, r3
 81097d2:	f003 fbce 	bl	810cf72 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81097d6:	69fb      	ldr	r3, [r7, #28]
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d005      	beq.n	81097e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81097dc:	69fb      	ldr	r3, [r7, #28]
 81097de:	005b      	lsls	r3, r3, #1
 81097e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81097e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097ea:	2b00      	cmp	r3, #0
 81097ec:	d007      	beq.n	81097fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81097ee:	4a28      	ldr	r2, [pc, #160]	@ (8109890 <HAL_SD_InitCard+0x130>)
 81097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81097f6:	3301      	adds	r3, #1
 81097f8:	4618      	mov	r0, r3
 81097fa:	f7f9 f997 	bl	8102b2c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 81097fe:	6878      	ldr	r0, [r7, #4]
 8109800:	f000 fcac 	bl	810a15c <SD_PowerON>
 8109804:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109806:	6a3b      	ldr	r3, [r7, #32]
 8109808:	2b00      	cmp	r3, #0
 810980a:	d00b      	beq.n	8109824 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	2201      	movs	r2, #1
 8109810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109818:	6a3b      	ldr	r3, [r7, #32]
 810981a:	431a      	orrs	r2, r3
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8109820:	2301      	movs	r3, #1
 8109822:	e02e      	b.n	8109882 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8109824:	6878      	ldr	r0, [r7, #4]
 8109826:	f000 fbcb 	bl	8109fc0 <SD_InitCard>
 810982a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810982c:	6a3b      	ldr	r3, [r7, #32]
 810982e:	2b00      	cmp	r3, #0
 8109830:	d00b      	beq.n	810984a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8109832:	687b      	ldr	r3, [r7, #4]
 8109834:	2201      	movs	r2, #1
 8109836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810983e:	6a3b      	ldr	r3, [r7, #32]
 8109840:	431a      	orrs	r2, r3
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8109846:	2301      	movs	r3, #1
 8109848:	e01b      	b.n	8109882 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	681b      	ldr	r3, [r3, #0]
 810984e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8109852:	4618      	mov	r0, r3
 8109854:	f003 fc22 	bl	810d09c <SDMMC_CmdBlockLength>
 8109858:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810985a:	6a3b      	ldr	r3, [r7, #32]
 810985c:	2b00      	cmp	r3, #0
 810985e:	d00f      	beq.n	8109880 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109860:	687b      	ldr	r3, [r7, #4]
 8109862:	681b      	ldr	r3, [r3, #0]
 8109864:	4a0b      	ldr	r2, [pc, #44]	@ (8109894 <HAL_SD_InitCard+0x134>)
 8109866:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810986c:	6a3b      	ldr	r3, [r7, #32]
 810986e:	431a      	orrs	r2, r3
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109874:	687b      	ldr	r3, [r7, #4]
 8109876:	2201      	movs	r2, #1
 8109878:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810987c:	2301      	movs	r3, #1
 810987e:	e000      	b.n	8109882 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8109880:	2300      	movs	r3, #0
}
 8109882:	4618      	mov	r0, r3
 8109884:	372c      	adds	r7, #44	@ 0x2c
 8109886:	46bd      	mov	sp, r7
 8109888:	bd90      	pop	{r4, r7, pc}
 810988a:	bf00      	nop
 810988c:	014f8b59 	.word	0x014f8b59
 8109890:	00012110 	.word	0x00012110
 8109894:	1fe00fff 	.word	0x1fe00fff

08109898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8109898:	b480      	push	{r7}
 810989a:	b083      	sub	sp, #12
 810989c:	af00      	add	r7, sp, #0
 810989e:	6078      	str	r0, [r7, #4]
 81098a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 81098a2:	687b      	ldr	r3, [r7, #4]
 81098a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098a6:	0f9b      	lsrs	r3, r3, #30
 81098a8:	b2da      	uxtb	r2, r3
 81098aa:	683b      	ldr	r3, [r7, #0]
 81098ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81098ae:	687b      	ldr	r3, [r7, #4]
 81098b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098b2:	0e9b      	lsrs	r3, r3, #26
 81098b4:	b2db      	uxtb	r3, r3
 81098b6:	f003 030f 	and.w	r3, r3, #15
 81098ba:	b2da      	uxtb	r2, r3
 81098bc:	683b      	ldr	r3, [r7, #0]
 81098be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098c4:	0e1b      	lsrs	r3, r3, #24
 81098c6:	b2db      	uxtb	r3, r3
 81098c8:	f003 0303 	and.w	r3, r3, #3
 81098cc:	b2da      	uxtb	r2, r3
 81098ce:	683b      	ldr	r3, [r7, #0]
 81098d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81098d2:	687b      	ldr	r3, [r7, #4]
 81098d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098d6:	0c1b      	lsrs	r3, r3, #16
 81098d8:	b2da      	uxtb	r2, r3
 81098da:	683b      	ldr	r3, [r7, #0]
 81098dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81098de:	687b      	ldr	r3, [r7, #4]
 81098e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098e2:	0a1b      	lsrs	r3, r3, #8
 81098e4:	b2da      	uxtb	r2, r3
 81098e6:	683b      	ldr	r3, [r7, #0]
 81098e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 81098ea:	687b      	ldr	r3, [r7, #4]
 81098ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098ee:	b2da      	uxtb	r2, r3
 81098f0:	683b      	ldr	r3, [r7, #0]
 81098f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81098f8:	0d1b      	lsrs	r3, r3, #20
 81098fa:	b29a      	uxth	r2, r3
 81098fc:	683b      	ldr	r3, [r7, #0]
 81098fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109904:	0c1b      	lsrs	r3, r3, #16
 8109906:	b2db      	uxtb	r3, r3
 8109908:	f003 030f 	and.w	r3, r3, #15
 810990c:	b2da      	uxtb	r2, r3
 810990e:	683b      	ldr	r3, [r7, #0]
 8109910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109916:	0bdb      	lsrs	r3, r3, #15
 8109918:	b2db      	uxtb	r3, r3
 810991a:	f003 0301 	and.w	r3, r3, #1
 810991e:	b2da      	uxtb	r2, r3
 8109920:	683b      	ldr	r3, [r7, #0]
 8109922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109928:	0b9b      	lsrs	r3, r3, #14
 810992a:	b2db      	uxtb	r3, r3
 810992c:	f003 0301 	and.w	r3, r3, #1
 8109930:	b2da      	uxtb	r2, r3
 8109932:	683b      	ldr	r3, [r7, #0]
 8109934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810993a:	0b5b      	lsrs	r3, r3, #13
 810993c:	b2db      	uxtb	r3, r3
 810993e:	f003 0301 	and.w	r3, r3, #1
 8109942:	b2da      	uxtb	r2, r3
 8109944:	683b      	ldr	r3, [r7, #0]
 8109946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810994c:	0b1b      	lsrs	r3, r3, #12
 810994e:	b2db      	uxtb	r3, r3
 8109950:	f003 0301 	and.w	r3, r3, #1
 8109954:	b2da      	uxtb	r2, r3
 8109956:	683b      	ldr	r3, [r7, #0]
 8109958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810995a:	683b      	ldr	r3, [r7, #0]
 810995c:	2200      	movs	r2, #0
 810995e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109964:	2b00      	cmp	r3, #0
 8109966:	d163      	bne.n	8109a30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8109968:	687b      	ldr	r3, [r7, #4]
 810996a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810996c:	009a      	lsls	r2, r3, #2
 810996e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8109972:	4013      	ands	r3, r2
 8109974:	687a      	ldr	r2, [r7, #4]
 8109976:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109978:	0f92      	lsrs	r2, r2, #30
 810997a:	431a      	orrs	r2, r3
 810997c:	683b      	ldr	r3, [r7, #0]
 810997e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109984:	0edb      	lsrs	r3, r3, #27
 8109986:	b2db      	uxtb	r3, r3
 8109988:	f003 0307 	and.w	r3, r3, #7
 810998c:	b2da      	uxtb	r2, r3
 810998e:	683b      	ldr	r3, [r7, #0]
 8109990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8109992:	687b      	ldr	r3, [r7, #4]
 8109994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109996:	0e1b      	lsrs	r3, r3, #24
 8109998:	b2db      	uxtb	r3, r3
 810999a:	f003 0307 	and.w	r3, r3, #7
 810999e:	b2da      	uxtb	r2, r3
 81099a0:	683b      	ldr	r3, [r7, #0]
 81099a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81099a8:	0d5b      	lsrs	r3, r3, #21
 81099aa:	b2db      	uxtb	r3, r3
 81099ac:	f003 0307 	and.w	r3, r3, #7
 81099b0:	b2da      	uxtb	r2, r3
 81099b2:	683b      	ldr	r3, [r7, #0]
 81099b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81099ba:	0c9b      	lsrs	r3, r3, #18
 81099bc:	b2db      	uxtb	r3, r3
 81099be:	f003 0307 	and.w	r3, r3, #7
 81099c2:	b2da      	uxtb	r2, r3
 81099c4:	683b      	ldr	r3, [r7, #0]
 81099c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 81099c8:	687b      	ldr	r3, [r7, #4]
 81099ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81099cc:	0bdb      	lsrs	r3, r3, #15
 81099ce:	b2db      	uxtb	r3, r3
 81099d0:	f003 0307 	and.w	r3, r3, #7
 81099d4:	b2da      	uxtb	r2, r3
 81099d6:	683b      	ldr	r3, [r7, #0]
 81099d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81099da:	683b      	ldr	r3, [r7, #0]
 81099dc:	691b      	ldr	r3, [r3, #16]
 81099de:	1c5a      	adds	r2, r3, #1
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 81099e4:	683b      	ldr	r3, [r7, #0]
 81099e6:	7e1b      	ldrb	r3, [r3, #24]
 81099e8:	b2db      	uxtb	r3, r3
 81099ea:	f003 0307 	and.w	r3, r3, #7
 81099ee:	3302      	adds	r3, #2
 81099f0:	2201      	movs	r2, #1
 81099f2:	fa02 f303 	lsl.w	r3, r2, r3
 81099f6:	687a      	ldr	r2, [r7, #4]
 81099f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81099fa:	fb03 f202 	mul.w	r2, r3, r2
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8109a02:	683b      	ldr	r3, [r7, #0]
 8109a04:	7a1b      	ldrb	r3, [r3, #8]
 8109a06:	b2db      	uxtb	r3, r3
 8109a08:	f003 030f 	and.w	r3, r3, #15
 8109a0c:	2201      	movs	r2, #1
 8109a0e:	409a      	lsls	r2, r3
 8109a10:	687b      	ldr	r3, [r7, #4]
 8109a12:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8109a14:	687b      	ldr	r3, [r7, #4]
 8109a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109a18:	687a      	ldr	r2, [r7, #4]
 8109a1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8109a1c:	0a52      	lsrs	r2, r2, #9
 8109a1e:	fb03 f202 	mul.w	r2, r3, r2
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8109a26:	687b      	ldr	r3, [r7, #4]
 8109a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109a2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8109a2e:	e031      	b.n	8109a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8109a30:	687b      	ldr	r3, [r7, #4]
 8109a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109a34:	2b01      	cmp	r3, #1
 8109a36:	d11d      	bne.n	8109a74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a3c:	041b      	lsls	r3, r3, #16
 8109a3e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8109a42:	687b      	ldr	r3, [r7, #4]
 8109a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109a46:	0c1b      	lsrs	r3, r3, #16
 8109a48:	431a      	orrs	r2, r3
 8109a4a:	683b      	ldr	r3, [r7, #0]
 8109a4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8109a4e:	683b      	ldr	r3, [r7, #0]
 8109a50:	691b      	ldr	r3, [r3, #16]
 8109a52:	3301      	adds	r3, #1
 8109a54:	029a      	lsls	r2, r3, #10
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	655a      	str	r2, [r3, #84]	@ 0x54
 8109a72:	e00f      	b.n	8109a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	681b      	ldr	r3, [r3, #0]
 8109a78:	4a58      	ldr	r2, [pc, #352]	@ (8109bdc <HAL_SD_GetCardCSD+0x344>)
 8109a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109a7c:	687b      	ldr	r3, [r7, #4]
 8109a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109a80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109a84:	687b      	ldr	r3, [r7, #4]
 8109a86:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	2201      	movs	r2, #1
 8109a8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8109a90:	2301      	movs	r3, #1
 8109a92:	e09d      	b.n	8109bd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8109a94:	687b      	ldr	r3, [r7, #4]
 8109a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109a98:	0b9b      	lsrs	r3, r3, #14
 8109a9a:	b2db      	uxtb	r3, r3
 8109a9c:	f003 0301 	and.w	r3, r3, #1
 8109aa0:	b2da      	uxtb	r2, r3
 8109aa2:	683b      	ldr	r3, [r7, #0]
 8109aa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8109aa6:	687b      	ldr	r3, [r7, #4]
 8109aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109aaa:	09db      	lsrs	r3, r3, #7
 8109aac:	b2db      	uxtb	r3, r3
 8109aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109ab2:	b2da      	uxtb	r2, r3
 8109ab4:	683b      	ldr	r3, [r7, #0]
 8109ab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109abc:	b2db      	uxtb	r3, r3
 8109abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109ac2:	b2da      	uxtb	r2, r3
 8109ac4:	683b      	ldr	r3, [r7, #0]
 8109ac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8109ac8:	687b      	ldr	r3, [r7, #4]
 8109aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109acc:	0fdb      	lsrs	r3, r3, #31
 8109ace:	b2da      	uxtb	r2, r3
 8109ad0:	683b      	ldr	r3, [r7, #0]
 8109ad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8109ad4:	687b      	ldr	r3, [r7, #4]
 8109ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109ad8:	0f5b      	lsrs	r3, r3, #29
 8109ada:	b2db      	uxtb	r3, r3
 8109adc:	f003 0303 	and.w	r3, r3, #3
 8109ae0:	b2da      	uxtb	r2, r3
 8109ae2:	683b      	ldr	r3, [r7, #0]
 8109ae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8109ae6:	687b      	ldr	r3, [r7, #4]
 8109ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109aea:	0e9b      	lsrs	r3, r3, #26
 8109aec:	b2db      	uxtb	r3, r3
 8109aee:	f003 0307 	and.w	r3, r3, #7
 8109af2:	b2da      	uxtb	r2, r3
 8109af4:	683b      	ldr	r3, [r7, #0]
 8109af6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109afc:	0d9b      	lsrs	r3, r3, #22
 8109afe:	b2db      	uxtb	r3, r3
 8109b00:	f003 030f 	and.w	r3, r3, #15
 8109b04:	b2da      	uxtb	r2, r3
 8109b06:	683b      	ldr	r3, [r7, #0]
 8109b08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b0e:	0d5b      	lsrs	r3, r3, #21
 8109b10:	b2db      	uxtb	r3, r3
 8109b12:	f003 0301 	and.w	r3, r3, #1
 8109b16:	b2da      	uxtb	r2, r3
 8109b18:	683b      	ldr	r3, [r7, #0]
 8109b1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8109b1e:	683b      	ldr	r3, [r7, #0]
 8109b20:	2200      	movs	r2, #0
 8109b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b2a:	0c1b      	lsrs	r3, r3, #16
 8109b2c:	b2db      	uxtb	r3, r3
 8109b2e:	f003 0301 	and.w	r3, r3, #1
 8109b32:	b2da      	uxtb	r2, r3
 8109b34:	683b      	ldr	r3, [r7, #0]
 8109b36:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b3e:	0bdb      	lsrs	r3, r3, #15
 8109b40:	b2db      	uxtb	r3, r3
 8109b42:	f003 0301 	and.w	r3, r3, #1
 8109b46:	b2da      	uxtb	r2, r3
 8109b48:	683b      	ldr	r3, [r7, #0]
 8109b4a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b52:	0b9b      	lsrs	r3, r3, #14
 8109b54:	b2db      	uxtb	r3, r3
 8109b56:	f003 0301 	and.w	r3, r3, #1
 8109b5a:	b2da      	uxtb	r2, r3
 8109b5c:	683b      	ldr	r3, [r7, #0]
 8109b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b66:	0b5b      	lsrs	r3, r3, #13
 8109b68:	b2db      	uxtb	r3, r3
 8109b6a:	f003 0301 	and.w	r3, r3, #1
 8109b6e:	b2da      	uxtb	r2, r3
 8109b70:	683b      	ldr	r3, [r7, #0]
 8109b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8109b76:	687b      	ldr	r3, [r7, #4]
 8109b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b7a:	0b1b      	lsrs	r3, r3, #12
 8109b7c:	b2db      	uxtb	r3, r3
 8109b7e:	f003 0301 	and.w	r3, r3, #1
 8109b82:	b2da      	uxtb	r2, r3
 8109b84:	683b      	ldr	r3, [r7, #0]
 8109b86:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8109b8a:	687b      	ldr	r3, [r7, #4]
 8109b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109b8e:	0a9b      	lsrs	r3, r3, #10
 8109b90:	b2db      	uxtb	r3, r3
 8109b92:	f003 0303 	and.w	r3, r3, #3
 8109b96:	b2da      	uxtb	r2, r3
 8109b98:	683b      	ldr	r3, [r7, #0]
 8109b9a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109ba2:	0a1b      	lsrs	r3, r3, #8
 8109ba4:	b2db      	uxtb	r3, r3
 8109ba6:	f003 0303 	and.w	r3, r3, #3
 8109baa:	b2da      	uxtb	r2, r3
 8109bac:	683b      	ldr	r3, [r7, #0]
 8109bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109bb6:	085b      	lsrs	r3, r3, #1
 8109bb8:	b2db      	uxtb	r3, r3
 8109bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109bbe:	b2da      	uxtb	r2, r3
 8109bc0:	683b      	ldr	r3, [r7, #0]
 8109bc2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8109bc6:	683b      	ldr	r3, [r7, #0]
 8109bc8:	2201      	movs	r2, #1
 8109bca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8109bce:	2300      	movs	r3, #0
}
 8109bd0:	4618      	mov	r0, r3
 8109bd2:	370c      	adds	r7, #12
 8109bd4:	46bd      	mov	sp, r7
 8109bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bda:	4770      	bx	lr
 8109bdc:	1fe00fff 	.word	0x1fe00fff

08109be0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8109be0:	b580      	push	{r7, lr}
 8109be2:	b094      	sub	sp, #80	@ 0x50
 8109be4:	af00      	add	r7, sp, #0
 8109be6:	6078      	str	r0, [r7, #4]
 8109be8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8109bea:	2300      	movs	r3, #0
 8109bec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109bf6:	b2db      	uxtb	r3, r3
 8109bf8:	2b03      	cmp	r3, #3
 8109bfa:	d101      	bne.n	8109c00 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8109bfc:	2301      	movs	r3, #1
 8109bfe:	e0a7      	b.n	8109d50 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8109c00:	f107 0308 	add.w	r3, r7, #8
 8109c04:	4619      	mov	r1, r3
 8109c06:	6878      	ldr	r0, [r7, #4]
 8109c08:	f000 fb36 	bl	810a278 <SD_SendSDStatus>
 8109c0c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8109c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109c10:	2b00      	cmp	r3, #0
 8109c12:	d011      	beq.n	8109c38 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	4a4f      	ldr	r2, [pc, #316]	@ (8109d58 <HAL_SD_GetCardStatus+0x178>)
 8109c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109c22:	431a      	orrs	r2, r3
 8109c24:	687b      	ldr	r3, [r7, #4]
 8109c26:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109c28:	687b      	ldr	r3, [r7, #4]
 8109c2a:	2201      	movs	r2, #1
 8109c2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8109c30:	2301      	movs	r3, #1
 8109c32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8109c36:	e070      	b.n	8109d1a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8109c38:	68bb      	ldr	r3, [r7, #8]
 8109c3a:	099b      	lsrs	r3, r3, #6
 8109c3c:	b2db      	uxtb	r3, r3
 8109c3e:	f003 0303 	and.w	r3, r3, #3
 8109c42:	b2da      	uxtb	r2, r3
 8109c44:	683b      	ldr	r3, [r7, #0]
 8109c46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8109c48:	68bb      	ldr	r3, [r7, #8]
 8109c4a:	095b      	lsrs	r3, r3, #5
 8109c4c:	b2db      	uxtb	r3, r3
 8109c4e:	f003 0301 	and.w	r3, r3, #1
 8109c52:	b2da      	uxtb	r2, r3
 8109c54:	683b      	ldr	r3, [r7, #0]
 8109c56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8109c58:	68bb      	ldr	r3, [r7, #8]
 8109c5a:	0a1b      	lsrs	r3, r3, #8
 8109c5c:	b29b      	uxth	r3, r3
 8109c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8109c62:	b29a      	uxth	r2, r3
 8109c64:	68bb      	ldr	r3, [r7, #8]
 8109c66:	0e1b      	lsrs	r3, r3, #24
 8109c68:	b29b      	uxth	r3, r3
 8109c6a:	4313      	orrs	r3, r2
 8109c6c:	b29a      	uxth	r2, r3
 8109c6e:	683b      	ldr	r3, [r7, #0]
 8109c70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109c72:	68fb      	ldr	r3, [r7, #12]
 8109c74:	061a      	lsls	r2, r3, #24
 8109c76:	68fb      	ldr	r3, [r7, #12]
 8109c78:	021b      	lsls	r3, r3, #8
 8109c7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109c7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109c80:	68fb      	ldr	r3, [r7, #12]
 8109c82:	0a1b      	lsrs	r3, r3, #8
 8109c84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109c88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109c8a:	68fb      	ldr	r3, [r7, #12]
 8109c8c:	0e1b      	lsrs	r3, r3, #24
 8109c8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109c90:	683b      	ldr	r3, [r7, #0]
 8109c92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8109c94:	693b      	ldr	r3, [r7, #16]
 8109c96:	b2da      	uxtb	r2, r3
 8109c98:	683b      	ldr	r3, [r7, #0]
 8109c9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8109c9c:	693b      	ldr	r3, [r7, #16]
 8109c9e:	0a1b      	lsrs	r3, r3, #8
 8109ca0:	b2da      	uxtb	r2, r3
 8109ca2:	683b      	ldr	r3, [r7, #0]
 8109ca4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8109ca6:	693b      	ldr	r3, [r7, #16]
 8109ca8:	0d1b      	lsrs	r3, r3, #20
 8109caa:	b2db      	uxtb	r3, r3
 8109cac:	f003 030f 	and.w	r3, r3, #15
 8109cb0:	b2da      	uxtb	r2, r3
 8109cb2:	683b      	ldr	r3, [r7, #0]
 8109cb4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8109cb6:	693b      	ldr	r3, [r7, #16]
 8109cb8:	0c1b      	lsrs	r3, r3, #16
 8109cba:	b29b      	uxth	r3, r3
 8109cbc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8109cc0:	b29a      	uxth	r2, r3
 8109cc2:	697b      	ldr	r3, [r7, #20]
 8109cc4:	b29b      	uxth	r3, r3
 8109cc6:	b2db      	uxtb	r3, r3
 8109cc8:	b29b      	uxth	r3, r3
 8109cca:	4313      	orrs	r3, r2
 8109ccc:	b29a      	uxth	r2, r3
 8109cce:	683b      	ldr	r3, [r7, #0]
 8109cd0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8109cd2:	697b      	ldr	r3, [r7, #20]
 8109cd4:	0a9b      	lsrs	r3, r3, #10
 8109cd6:	b2db      	uxtb	r3, r3
 8109cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109cdc:	b2da      	uxtb	r2, r3
 8109cde:	683b      	ldr	r3, [r7, #0]
 8109ce0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8109ce2:	697b      	ldr	r3, [r7, #20]
 8109ce4:	0a1b      	lsrs	r3, r3, #8
 8109ce6:	b2db      	uxtb	r3, r3
 8109ce8:	f003 0303 	and.w	r3, r3, #3
 8109cec:	b2da      	uxtb	r2, r3
 8109cee:	683b      	ldr	r3, [r7, #0]
 8109cf0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8109cf2:	697b      	ldr	r3, [r7, #20]
 8109cf4:	091b      	lsrs	r3, r3, #4
 8109cf6:	b2db      	uxtb	r3, r3
 8109cf8:	f003 030f 	and.w	r3, r3, #15
 8109cfc:	b2da      	uxtb	r2, r3
 8109cfe:	683b      	ldr	r3, [r7, #0]
 8109d00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8109d02:	697b      	ldr	r3, [r7, #20]
 8109d04:	b2db      	uxtb	r3, r3
 8109d06:	f003 030f 	and.w	r3, r3, #15
 8109d0a:	b2da      	uxtb	r2, r3
 8109d0c:	683b      	ldr	r3, [r7, #0]
 8109d0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8109d10:	69bb      	ldr	r3, [r7, #24]
 8109d12:	0e1b      	lsrs	r3, r3, #24
 8109d14:	b2da      	uxtb	r2, r3
 8109d16:	683b      	ldr	r3, [r7, #0]
 8109d18:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109d1a:	687b      	ldr	r3, [r7, #4]
 8109d1c:	681b      	ldr	r3, [r3, #0]
 8109d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8109d22:	4618      	mov	r0, r3
 8109d24:	f003 f9ba 	bl	810d09c <SDMMC_CmdBlockLength>
 8109d28:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8109d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109d2c:	2b00      	cmp	r3, #0
 8109d2e:	d00d      	beq.n	8109d4c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109d30:	687b      	ldr	r3, [r7, #4]
 8109d32:	681b      	ldr	r3, [r3, #0]
 8109d34:	4a08      	ldr	r2, [pc, #32]	@ (8109d58 <HAL_SD_GetCardStatus+0x178>)
 8109d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109d3c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	2201      	movs	r2, #1
 8109d42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8109d46:	2301      	movs	r3, #1
 8109d48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8109d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8109d50:	4618      	mov	r0, r3
 8109d52:	3750      	adds	r7, #80	@ 0x50
 8109d54:	46bd      	mov	sp, r7
 8109d56:	bd80      	pop	{r7, pc}
 8109d58:	1fe00fff 	.word	0x1fe00fff

08109d5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8109d5c:	b590      	push	{r4, r7, lr}
 8109d5e:	b08d      	sub	sp, #52	@ 0x34
 8109d60:	af02      	add	r7, sp, #8
 8109d62:	6078      	str	r0, [r7, #4]
 8109d64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8109d66:	2300      	movs	r3, #0
 8109d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	2203      	movs	r2, #3
 8109d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109d74:	687b      	ldr	r3, [r7, #4]
 8109d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109d78:	2b03      	cmp	r3, #3
 8109d7a:	d02e      	beq.n	8109dda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8109d7c:	683b      	ldr	r3, [r7, #0]
 8109d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109d82:	d106      	bne.n	8109d92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109d84:	687b      	ldr	r3, [r7, #4]
 8109d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109d88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109d8c:	687b      	ldr	r3, [r7, #4]
 8109d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8109d90:	e029      	b.n	8109de6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8109d92:	683b      	ldr	r3, [r7, #0]
 8109d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109d98:	d10a      	bne.n	8109db0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8109d9a:	6878      	ldr	r0, [r7, #4]
 8109d9c:	f000 fb64 	bl	810a468 <SD_WideBus_Enable>
 8109da0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8109da2:	687b      	ldr	r3, [r7, #4]
 8109da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109da6:	6a3b      	ldr	r3, [r7, #32]
 8109da8:	431a      	orrs	r2, r3
 8109daa:	687b      	ldr	r3, [r7, #4]
 8109dac:	635a      	str	r2, [r3, #52]	@ 0x34
 8109dae:	e01a      	b.n	8109de6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8109db0:	683b      	ldr	r3, [r7, #0]
 8109db2:	2b00      	cmp	r3, #0
 8109db4:	d10a      	bne.n	8109dcc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8109db6:	6878      	ldr	r0, [r7, #4]
 8109db8:	f000 fba1 	bl	810a4fe <SD_WideBus_Disable>
 8109dbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8109dbe:	687b      	ldr	r3, [r7, #4]
 8109dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109dc2:	6a3b      	ldr	r3, [r7, #32]
 8109dc4:	431a      	orrs	r2, r3
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8109dca:	e00c      	b.n	8109de6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109dd0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8109dd8:	e005      	b.n	8109de6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109dde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109de2:	687b      	ldr	r3, [r7, #4]
 8109de4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8109de6:	687b      	ldr	r3, [r7, #4]
 8109de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109dea:	2b00      	cmp	r3, #0
 8109dec:	d007      	beq.n	8109dfe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109dee:	687b      	ldr	r3, [r7, #4]
 8109df0:	681b      	ldr	r3, [r3, #0]
 8109df2:	4a5f      	ldr	r2, [pc, #380]	@ (8109f70 <HAL_SD_ConfigWideBusOperation+0x214>)
 8109df4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8109df6:	2301      	movs	r3, #1
 8109df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8109dfc:	e096      	b.n	8109f2c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8109dfe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8109e02:	f04f 0100 	mov.w	r1, #0
 8109e06:	f7fd fc57 	bl	81076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8109e0a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8109e0c:	69fb      	ldr	r3, [r7, #28]
 8109e0e:	2b00      	cmp	r3, #0
 8109e10:	f000 8083 	beq.w	8109f1a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8109e14:	687b      	ldr	r3, [r7, #4]
 8109e16:	685b      	ldr	r3, [r3, #4]
 8109e18:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8109e1a:	687b      	ldr	r3, [r7, #4]
 8109e1c:	689b      	ldr	r3, [r3, #8]
 8109e1e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8109e20:	683b      	ldr	r3, [r7, #0]
 8109e22:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8109e24:	687b      	ldr	r3, [r7, #4]
 8109e26:	691b      	ldr	r3, [r3, #16]
 8109e28:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	695a      	ldr	r2, [r3, #20]
 8109e2e:	69fb      	ldr	r3, [r7, #28]
 8109e30:	4950      	ldr	r1, [pc, #320]	@ (8109f74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109e32:	fba1 1303 	umull	r1, r3, r1, r3
 8109e36:	0e1b      	lsrs	r3, r3, #24
 8109e38:	429a      	cmp	r2, r3
 8109e3a:	d303      	bcc.n	8109e44 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	695b      	ldr	r3, [r3, #20]
 8109e40:	61bb      	str	r3, [r7, #24]
 8109e42:	e05a      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109e4c:	d103      	bne.n	8109e56 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	695b      	ldr	r3, [r3, #20]
 8109e52:	61bb      	str	r3, [r7, #24]
 8109e54:	e051      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8109e56:	687b      	ldr	r3, [r7, #4]
 8109e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109e5e:	d126      	bne.n	8109eae <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	695b      	ldr	r3, [r3, #20]
 8109e64:	2b00      	cmp	r3, #0
 8109e66:	d10e      	bne.n	8109e86 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8109e68:	69fb      	ldr	r3, [r7, #28]
 8109e6a:	4a43      	ldr	r2, [pc, #268]	@ (8109f78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109e6c:	4293      	cmp	r3, r2
 8109e6e:	d906      	bls.n	8109e7e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109e70:	69fb      	ldr	r3, [r7, #28]
 8109e72:	4a40      	ldr	r2, [pc, #256]	@ (8109f74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109e74:	fba2 2303 	umull	r2, r3, r2, r3
 8109e78:	0e5b      	lsrs	r3, r3, #25
 8109e7a:	61bb      	str	r3, [r7, #24]
 8109e7c:	e03d      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	695b      	ldr	r3, [r3, #20]
 8109e82:	61bb      	str	r3, [r7, #24]
 8109e84:	e039      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8109e86:	687b      	ldr	r3, [r7, #4]
 8109e88:	695b      	ldr	r3, [r3, #20]
 8109e8a:	005b      	lsls	r3, r3, #1
 8109e8c:	69fa      	ldr	r2, [r7, #28]
 8109e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109e92:	4a39      	ldr	r2, [pc, #228]	@ (8109f78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109e94:	4293      	cmp	r3, r2
 8109e96:	d906      	bls.n	8109ea6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109e98:	69fb      	ldr	r3, [r7, #28]
 8109e9a:	4a36      	ldr	r2, [pc, #216]	@ (8109f74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8109ea0:	0e5b      	lsrs	r3, r3, #25
 8109ea2:	61bb      	str	r3, [r7, #24]
 8109ea4:	e029      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109ea6:	687b      	ldr	r3, [r7, #4]
 8109ea8:	695b      	ldr	r3, [r3, #20]
 8109eaa:	61bb      	str	r3, [r7, #24]
 8109eac:	e025      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	695b      	ldr	r3, [r3, #20]
 8109eb2:	2b00      	cmp	r3, #0
 8109eb4:	d10e      	bne.n	8109ed4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8109eb6:	69fb      	ldr	r3, [r7, #28]
 8109eb8:	4a30      	ldr	r2, [pc, #192]	@ (8109f7c <HAL_SD_ConfigWideBusOperation+0x220>)
 8109eba:	4293      	cmp	r3, r2
 8109ebc:	d906      	bls.n	8109ecc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109ebe:	69fb      	ldr	r3, [r7, #28]
 8109ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8109f74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8109ec6:	0e1b      	lsrs	r3, r3, #24
 8109ec8:	61bb      	str	r3, [r7, #24]
 8109eca:	e016      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109ecc:	687b      	ldr	r3, [r7, #4]
 8109ece:	695b      	ldr	r3, [r3, #20]
 8109ed0:	61bb      	str	r3, [r7, #24]
 8109ed2:	e012      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	695b      	ldr	r3, [r3, #20]
 8109ed8:	005b      	lsls	r3, r3, #1
 8109eda:	69fa      	ldr	r2, [r7, #28]
 8109edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8109ee0:	4a26      	ldr	r2, [pc, #152]	@ (8109f7c <HAL_SD_ConfigWideBusOperation+0x220>)
 8109ee2:	4293      	cmp	r3, r2
 8109ee4:	d906      	bls.n	8109ef4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109ee6:	69fb      	ldr	r3, [r7, #28]
 8109ee8:	4a22      	ldr	r2, [pc, #136]	@ (8109f74 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109eea:	fba2 2303 	umull	r2, r3, r2, r3
 8109eee:	0e1b      	lsrs	r3, r3, #24
 8109ef0:	61bb      	str	r3, [r7, #24]
 8109ef2:	e002      	b.n	8109efa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	695b      	ldr	r3, [r3, #20]
 8109ef8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8109efa:	687b      	ldr	r3, [r7, #4]
 8109efc:	681c      	ldr	r4, [r3, #0]
 8109efe:	466a      	mov	r2, sp
 8109f00:	f107 0314 	add.w	r3, r7, #20
 8109f04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8109f08:	e882 0003 	stmia.w	r2, {r0, r1}
 8109f0c:	f107 0308 	add.w	r3, r7, #8
 8109f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109f12:	4620      	mov	r0, r4
 8109f14:	f002 fff6 	bl	810cf04 <SDMMC_Init>
 8109f18:	e008      	b.n	8109f2c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8109f1a:	687b      	ldr	r3, [r7, #4]
 8109f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109f1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8109f22:	687b      	ldr	r3, [r7, #4]
 8109f24:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8109f26:	2301      	movs	r3, #1
 8109f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	681b      	ldr	r3, [r3, #0]
 8109f30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8109f34:	4618      	mov	r0, r3
 8109f36:	f003 f8b1 	bl	810d09c <SDMMC_CmdBlockLength>
 8109f3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109f3c:	6a3b      	ldr	r3, [r7, #32]
 8109f3e:	2b00      	cmp	r3, #0
 8109f40:	d00c      	beq.n	8109f5c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109f42:	687b      	ldr	r3, [r7, #4]
 8109f44:	681b      	ldr	r3, [r3, #0]
 8109f46:	4a0a      	ldr	r2, [pc, #40]	@ (8109f70 <HAL_SD_ConfigWideBusOperation+0x214>)
 8109f48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109f4a:	687b      	ldr	r3, [r7, #4]
 8109f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109f4e:	6a3b      	ldr	r3, [r7, #32]
 8109f50:	431a      	orrs	r2, r3
 8109f52:	687b      	ldr	r3, [r7, #4]
 8109f54:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8109f56:	2301      	movs	r3, #1
 8109f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8109f5c:	687b      	ldr	r3, [r7, #4]
 8109f5e:	2201      	movs	r2, #1
 8109f60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8109f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109f68:	4618      	mov	r0, r3
 8109f6a:	372c      	adds	r7, #44	@ 0x2c
 8109f6c:	46bd      	mov	sp, r7
 8109f6e:	bd90      	pop	{r4, r7, pc}
 8109f70:	1fe00fff 	.word	0x1fe00fff
 8109f74:	55e63b89 	.word	0x55e63b89
 8109f78:	02faf080 	.word	0x02faf080
 8109f7c:	017d7840 	.word	0x017d7840

08109f80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8109f80:	b580      	push	{r7, lr}
 8109f82:	b086      	sub	sp, #24
 8109f84:	af00      	add	r7, sp, #0
 8109f86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8109f88:	2300      	movs	r3, #0
 8109f8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8109f8c:	f107 030c 	add.w	r3, r7, #12
 8109f90:	4619      	mov	r1, r3
 8109f92:	6878      	ldr	r0, [r7, #4]
 8109f94:	f000 fa40 	bl	810a418 <SD_SendStatus>
 8109f98:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109f9a:	697b      	ldr	r3, [r7, #20]
 8109f9c:	2b00      	cmp	r3, #0
 8109f9e:	d005      	beq.n	8109fac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109fa4:	697b      	ldr	r3, [r7, #20]
 8109fa6:	431a      	orrs	r2, r3
 8109fa8:	687b      	ldr	r3, [r7, #4]
 8109faa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8109fac:	68fb      	ldr	r3, [r7, #12]
 8109fae:	0a5b      	lsrs	r3, r3, #9
 8109fb0:	f003 030f 	and.w	r3, r3, #15
 8109fb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8109fb6:	693b      	ldr	r3, [r7, #16]
}
 8109fb8:	4618      	mov	r0, r3
 8109fba:	3718      	adds	r7, #24
 8109fbc:	46bd      	mov	sp, r7
 8109fbe:	bd80      	pop	{r7, pc}

08109fc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8109fc0:	b580      	push	{r7, lr}
 8109fc2:	b090      	sub	sp, #64	@ 0x40
 8109fc4:	af00      	add	r7, sp, #0
 8109fc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8109fc8:	2300      	movs	r3, #0
 8109fca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8109fcc:	f7f8 fda2 	bl	8102b14 <HAL_GetTick>
 8109fd0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8109fd2:	687b      	ldr	r3, [r7, #4]
 8109fd4:	681b      	ldr	r3, [r3, #0]
 8109fd6:	4618      	mov	r0, r3
 8109fd8:	f002 ffdc 	bl	810cf94 <SDMMC_GetPowerState>
 8109fdc:	4603      	mov	r3, r0
 8109fde:	2b00      	cmp	r3, #0
 8109fe0:	d102      	bne.n	8109fe8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109fe2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8109fe6:	e0b5      	b.n	810a154 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109fe8:	687b      	ldr	r3, [r7, #4]
 8109fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109fec:	2b03      	cmp	r3, #3
 8109fee:	d02e      	beq.n	810a04e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8109ff0:	687b      	ldr	r3, [r7, #4]
 8109ff2:	681b      	ldr	r3, [r3, #0]
 8109ff4:	4618      	mov	r0, r3
 8109ff6:	f003 f95d 	bl	810d2b4 <SDMMC_CmdSendCID>
 8109ffa:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8109ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ffe:	2b00      	cmp	r3, #0
 810a000:	d001      	beq.n	810a006 <SD_InitCard+0x46>
    {
      return errorstate;
 810a002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a004:	e0a6      	b.n	810a154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a006:	687b      	ldr	r3, [r7, #4]
 810a008:	681b      	ldr	r3, [r3, #0]
 810a00a:	2100      	movs	r1, #0
 810a00c:	4618      	mov	r0, r3
 810a00e:	f003 f806 	bl	810d01e <SDMMC_GetResponse>
 810a012:	4602      	mov	r2, r0
 810a014:	687b      	ldr	r3, [r7, #4]
 810a016:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	681b      	ldr	r3, [r3, #0]
 810a01c:	2104      	movs	r1, #4
 810a01e:	4618      	mov	r0, r3
 810a020:	f002 fffd 	bl	810d01e <SDMMC_GetResponse>
 810a024:	4602      	mov	r2, r0
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	2108      	movs	r1, #8
 810a030:	4618      	mov	r0, r3
 810a032:	f002 fff4 	bl	810d01e <SDMMC_GetResponse>
 810a036:	4602      	mov	r2, r0
 810a038:	687b      	ldr	r3, [r7, #4]
 810a03a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810a03c:	687b      	ldr	r3, [r7, #4]
 810a03e:	681b      	ldr	r3, [r3, #0]
 810a040:	210c      	movs	r1, #12
 810a042:	4618      	mov	r0, r3
 810a044:	f002 ffeb 	bl	810d01e <SDMMC_GetResponse>
 810a048:	4602      	mov	r2, r0
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810a04e:	687b      	ldr	r3, [r7, #4]
 810a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a052:	2b03      	cmp	r3, #3
 810a054:	d01d      	beq.n	810a092 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810a056:	e019      	b.n	810a08c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	681b      	ldr	r3, [r3, #0]
 810a05c:	f107 020a 	add.w	r2, r7, #10
 810a060:	4611      	mov	r1, r2
 810a062:	4618      	mov	r0, r3
 810a064:	f003 f965 	bl	810d332 <SDMMC_CmdSetRelAdd>
 810a068:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 810a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a06c:	2b00      	cmp	r3, #0
 810a06e:	d001      	beq.n	810a074 <SD_InitCard+0xb4>
      {
        return errorstate;
 810a070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a072:	e06f      	b.n	810a154 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 810a074:	f7f8 fd4e 	bl	8102b14 <HAL_GetTick>
 810a078:	4602      	mov	r2, r0
 810a07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a07c:	1ad3      	subs	r3, r2, r3
 810a07e:	f241 3287 	movw	r2, #4999	@ 0x1387
 810a082:	4293      	cmp	r3, r2
 810a084:	d902      	bls.n	810a08c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 810a086:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a08a:	e063      	b.n	810a154 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 810a08c:	897b      	ldrh	r3, [r7, #10]
 810a08e:	2b00      	cmp	r3, #0
 810a090:	d0e2      	beq.n	810a058 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810a092:	687b      	ldr	r3, [r7, #4]
 810a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a096:	2b03      	cmp	r3, #3
 810a098:	d036      	beq.n	810a108 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810a09a:	897b      	ldrh	r3, [r7, #10]
 810a09c:	461a      	mov	r2, r3
 810a09e:	687b      	ldr	r3, [r7, #4]
 810a0a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a0a2:	687b      	ldr	r3, [r7, #4]
 810a0a4:	681a      	ldr	r2, [r3, #0]
 810a0a6:	687b      	ldr	r3, [r7, #4]
 810a0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a0aa:	041b      	lsls	r3, r3, #16
 810a0ac:	4619      	mov	r1, r3
 810a0ae:	4610      	mov	r0, r2
 810a0b0:	f003 f91f 	bl	810d2f2 <SDMMC_CmdSendCSD>
 810a0b4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0b8:	2b00      	cmp	r3, #0
 810a0ba:	d001      	beq.n	810a0c0 <SD_InitCard+0x100>
    {
      return errorstate;
 810a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0be:	e049      	b.n	810a154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a0c0:	687b      	ldr	r3, [r7, #4]
 810a0c2:	681b      	ldr	r3, [r3, #0]
 810a0c4:	2100      	movs	r1, #0
 810a0c6:	4618      	mov	r0, r3
 810a0c8:	f002 ffa9 	bl	810d01e <SDMMC_GetResponse>
 810a0cc:	4602      	mov	r2, r0
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	2104      	movs	r1, #4
 810a0d8:	4618      	mov	r0, r3
 810a0da:	f002 ffa0 	bl	810d01e <SDMMC_GetResponse>
 810a0de:	4602      	mov	r2, r0
 810a0e0:	687b      	ldr	r3, [r7, #4]
 810a0e2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810a0e4:	687b      	ldr	r3, [r7, #4]
 810a0e6:	681b      	ldr	r3, [r3, #0]
 810a0e8:	2108      	movs	r1, #8
 810a0ea:	4618      	mov	r0, r3
 810a0ec:	f002 ff97 	bl	810d01e <SDMMC_GetResponse>
 810a0f0:	4602      	mov	r2, r0
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810a0f6:	687b      	ldr	r3, [r7, #4]
 810a0f8:	681b      	ldr	r3, [r3, #0]
 810a0fa:	210c      	movs	r1, #12
 810a0fc:	4618      	mov	r0, r3
 810a0fe:	f002 ff8e 	bl	810d01e <SDMMC_GetResponse>
 810a102:	4602      	mov	r2, r0
 810a104:	687b      	ldr	r3, [r7, #4]
 810a106:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810a108:	687b      	ldr	r3, [r7, #4]
 810a10a:	681b      	ldr	r3, [r3, #0]
 810a10c:	2104      	movs	r1, #4
 810a10e:	4618      	mov	r0, r3
 810a110:	f002 ff85 	bl	810d01e <SDMMC_GetResponse>
 810a114:	4603      	mov	r3, r0
 810a116:	0d1a      	lsrs	r2, r3, #20
 810a118:	687b      	ldr	r3, [r7, #4]
 810a11a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810a11c:	f107 030c 	add.w	r3, r7, #12
 810a120:	4619      	mov	r1, r3
 810a122:	6878      	ldr	r0, [r7, #4]
 810a124:	f7ff fbb8 	bl	8109898 <HAL_SD_GetCardCSD>
 810a128:	4603      	mov	r3, r0
 810a12a:	2b00      	cmp	r3, #0
 810a12c:	d002      	beq.n	810a134 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a12e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a132:	e00f      	b.n	810a154 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810a134:	687b      	ldr	r3, [r7, #4]
 810a136:	681a      	ldr	r2, [r3, #0]
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a13c:	041b      	lsls	r3, r3, #16
 810a13e:	4619      	mov	r1, r3
 810a140:	4610      	mov	r0, r2
 810a142:	f002 ffce 	bl	810d0e2 <SDMMC_CmdSelDesel>
 810a146:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 810a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a14a:	2b00      	cmp	r3, #0
 810a14c:	d001      	beq.n	810a152 <SD_InitCard+0x192>
  {
    return errorstate;
 810a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a150:	e000      	b.n	810a154 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810a152:	2300      	movs	r3, #0
}
 810a154:	4618      	mov	r0, r3
 810a156:	3740      	adds	r7, #64	@ 0x40
 810a158:	46bd      	mov	sp, r7
 810a15a:	bd80      	pop	{r7, pc}

0810a15c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810a15c:	b580      	push	{r7, lr}
 810a15e:	b086      	sub	sp, #24
 810a160:	af00      	add	r7, sp, #0
 810a162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810a164:	2300      	movs	r3, #0
 810a166:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 810a168:	2300      	movs	r3, #0
 810a16a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 810a16c:	2300      	movs	r3, #0
 810a16e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	681b      	ldr	r3, [r3, #0]
 810a174:	4618      	mov	r0, r3
 810a176:	f002 ffd7 	bl	810d128 <SDMMC_CmdGoIdleState>
 810a17a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a17c:	68fb      	ldr	r3, [r7, #12]
 810a17e:	2b00      	cmp	r3, #0
 810a180:	d001      	beq.n	810a186 <SD_PowerON+0x2a>
  {
    return errorstate;
 810a182:	68fb      	ldr	r3, [r7, #12]
 810a184:	e072      	b.n	810a26c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810a186:	687b      	ldr	r3, [r7, #4]
 810a188:	681b      	ldr	r3, [r3, #0]
 810a18a:	4618      	mov	r0, r3
 810a18c:	f002 ffea 	bl	810d164 <SDMMC_CmdOperCond>
 810a190:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810a192:	68fb      	ldr	r3, [r7, #12]
 810a194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810a198:	d10d      	bne.n	810a1b6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810a19a:	687b      	ldr	r3, [r7, #4]
 810a19c:	2200      	movs	r2, #0
 810a19e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810a1a0:	687b      	ldr	r3, [r7, #4]
 810a1a2:	681b      	ldr	r3, [r3, #0]
 810a1a4:	4618      	mov	r0, r3
 810a1a6:	f002 ffbf 	bl	810d128 <SDMMC_CmdGoIdleState>
 810a1aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	2b00      	cmp	r3, #0
 810a1b0:	d004      	beq.n	810a1bc <SD_PowerON+0x60>
    {
      return errorstate;
 810a1b2:	68fb      	ldr	r3, [r7, #12]
 810a1b4:	e05a      	b.n	810a26c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	2201      	movs	r2, #1
 810a1ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a1c0:	2b01      	cmp	r3, #1
 810a1c2:	d137      	bne.n	810a234 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810a1c4:	687b      	ldr	r3, [r7, #4]
 810a1c6:	681b      	ldr	r3, [r3, #0]
 810a1c8:	2100      	movs	r1, #0
 810a1ca:	4618      	mov	r0, r3
 810a1cc:	f002 ffea 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a1d0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a1d2:	68fb      	ldr	r3, [r7, #12]
 810a1d4:	2b00      	cmp	r3, #0
 810a1d6:	d02d      	beq.n	810a234 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a1d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a1dc:	e046      	b.n	810a26c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810a1de:	687b      	ldr	r3, [r7, #4]
 810a1e0:	681b      	ldr	r3, [r3, #0]
 810a1e2:	2100      	movs	r1, #0
 810a1e4:	4618      	mov	r0, r3
 810a1e6:	f002 ffdd 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a1ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a1ec:	68fb      	ldr	r3, [r7, #12]
 810a1ee:	2b00      	cmp	r3, #0
 810a1f0:	d001      	beq.n	810a1f6 <SD_PowerON+0x9a>
    {
      return errorstate;
 810a1f2:	68fb      	ldr	r3, [r7, #12]
 810a1f4:	e03a      	b.n	810a26c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810a1f6:	687b      	ldr	r3, [r7, #4]
 810a1f8:	681b      	ldr	r3, [r3, #0]
 810a1fa:	491e      	ldr	r1, [pc, #120]	@ (810a274 <SD_PowerON+0x118>)
 810a1fc:	4618      	mov	r0, r3
 810a1fe:	f002 fff4 	bl	810d1ea <SDMMC_CmdAppOperCommand>
 810a202:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810a204:	68fb      	ldr	r3, [r7, #12]
 810a206:	2b00      	cmp	r3, #0
 810a208:	d002      	beq.n	810a210 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a20a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a20e:	e02d      	b.n	810a26c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a210:	687b      	ldr	r3, [r7, #4]
 810a212:	681b      	ldr	r3, [r3, #0]
 810a214:	2100      	movs	r1, #0
 810a216:	4618      	mov	r0, r3
 810a218:	f002 ff01 	bl	810d01e <SDMMC_GetResponse>
 810a21c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810a21e:	697b      	ldr	r3, [r7, #20]
 810a220:	0fdb      	lsrs	r3, r3, #31
 810a222:	2b01      	cmp	r3, #1
 810a224:	d101      	bne.n	810a22a <SD_PowerON+0xce>
 810a226:	2301      	movs	r3, #1
 810a228:	e000      	b.n	810a22c <SD_PowerON+0xd0>
 810a22a:	2300      	movs	r3, #0
 810a22c:	613b      	str	r3, [r7, #16]

    count++;
 810a22e:	68bb      	ldr	r3, [r7, #8]
 810a230:	3301      	adds	r3, #1
 810a232:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810a234:	68bb      	ldr	r3, [r7, #8]
 810a236:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810a23a:	4293      	cmp	r3, r2
 810a23c:	d802      	bhi.n	810a244 <SD_PowerON+0xe8>
 810a23e:	693b      	ldr	r3, [r7, #16]
 810a240:	2b00      	cmp	r3, #0
 810a242:	d0cc      	beq.n	810a1de <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810a244:	68bb      	ldr	r3, [r7, #8]
 810a246:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810a24a:	4293      	cmp	r3, r2
 810a24c:	d902      	bls.n	810a254 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810a24e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810a252:	e00b      	b.n	810a26c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	2200      	movs	r2, #0
 810a258:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 810a25a:	697b      	ldr	r3, [r7, #20]
 810a25c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810a260:	2b00      	cmp	r3, #0
 810a262:	d002      	beq.n	810a26a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	2201      	movs	r2, #1
 810a268:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810a26a:	2300      	movs	r3, #0
}
 810a26c:	4618      	mov	r0, r3
 810a26e:	3718      	adds	r7, #24
 810a270:	46bd      	mov	sp, r7
 810a272:	bd80      	pop	{r7, pc}
 810a274:	c1100000 	.word	0xc1100000

0810a278 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810a278:	b580      	push	{r7, lr}
 810a27a:	b08c      	sub	sp, #48	@ 0x30
 810a27c:	af00      	add	r7, sp, #0
 810a27e:	6078      	str	r0, [r7, #4]
 810a280:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810a282:	f7f8 fc47 	bl	8102b14 <HAL_GetTick>
 810a286:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810a288:	683b      	ldr	r3, [r7, #0]
 810a28a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a28c:	687b      	ldr	r3, [r7, #4]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	2100      	movs	r1, #0
 810a292:	4618      	mov	r0, r3
 810a294:	f002 fec3 	bl	810d01e <SDMMC_GetResponse>
 810a298:	4603      	mov	r3, r0
 810a29a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a29e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a2a2:	d102      	bne.n	810a2aa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a2a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a2a8:	e0b0      	b.n	810a40c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	681b      	ldr	r3, [r3, #0]
 810a2ae:	2140      	movs	r1, #64	@ 0x40
 810a2b0:	4618      	mov	r0, r3
 810a2b2:	f002 fef3 	bl	810d09c <SDMMC_CmdBlockLength>
 810a2b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a2b8:	6a3b      	ldr	r3, [r7, #32]
 810a2ba:	2b00      	cmp	r3, #0
 810a2bc:	d005      	beq.n	810a2ca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a2be:	687b      	ldr	r3, [r7, #4]
 810a2c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a2c2:	687b      	ldr	r3, [r7, #4]
 810a2c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a2c6:	6a3b      	ldr	r3, [r7, #32]
 810a2c8:	e0a0      	b.n	810a40c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a2ca:	687b      	ldr	r3, [r7, #4]
 810a2cc:	681a      	ldr	r2, [r3, #0]
 810a2ce:	687b      	ldr	r3, [r7, #4]
 810a2d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a2d2:	041b      	lsls	r3, r3, #16
 810a2d4:	4619      	mov	r1, r3
 810a2d6:	4610      	mov	r0, r2
 810a2d8:	f002 ff64 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a2dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a2de:	6a3b      	ldr	r3, [r7, #32]
 810a2e0:	2b00      	cmp	r3, #0
 810a2e2:	d005      	beq.n	810a2f0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a2e8:	687b      	ldr	r3, [r7, #4]
 810a2ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a2ec:	6a3b      	ldr	r3, [r7, #32]
 810a2ee:	e08d      	b.n	810a40c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810a2f0:	f04f 33ff 	mov.w	r3, #4294967295
 810a2f4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810a2f6:	2340      	movs	r3, #64	@ 0x40
 810a2f8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810a2fa:	2360      	movs	r3, #96	@ 0x60
 810a2fc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810a2fe:	2302      	movs	r3, #2
 810a300:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810a302:	2300      	movs	r3, #0
 810a304:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810a306:	2301      	movs	r3, #1
 810a308:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810a30a:	687b      	ldr	r3, [r7, #4]
 810a30c:	681b      	ldr	r3, [r3, #0]
 810a30e:	f107 0208 	add.w	r2, r7, #8
 810a312:	4611      	mov	r1, r2
 810a314:	4618      	mov	r0, r3
 810a316:	f002 fe95 	bl	810d044 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810a31a:	687b      	ldr	r3, [r7, #4]
 810a31c:	681b      	ldr	r3, [r3, #0]
 810a31e:	4618      	mov	r0, r3
 810a320:	f003 f84c 	bl	810d3bc <SDMMC_CmdStatusRegister>
 810a324:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a326:	6a3b      	ldr	r3, [r7, #32]
 810a328:	2b00      	cmp	r3, #0
 810a32a:	d02b      	beq.n	810a384 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a334:	6a3b      	ldr	r3, [r7, #32]
 810a336:	e069      	b.n	810a40c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810a338:	687b      	ldr	r3, [r7, #4]
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a33e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810a342:	2b00      	cmp	r3, #0
 810a344:	d013      	beq.n	810a36e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810a346:	2300      	movs	r3, #0
 810a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a34a:	e00d      	b.n	810a368 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810a34c:	687b      	ldr	r3, [r7, #4]
 810a34e:	681b      	ldr	r3, [r3, #0]
 810a350:	4618      	mov	r0, r3
 810a352:	f002 fe01 	bl	810cf58 <SDMMC_ReadFIFO>
 810a356:	4602      	mov	r2, r0
 810a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a35a:	601a      	str	r2, [r3, #0]
        pData++;
 810a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a35e:	3304      	adds	r3, #4
 810a360:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 810a362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a364:	3301      	adds	r3, #1
 810a366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a36a:	2b07      	cmp	r3, #7
 810a36c:	d9ee      	bls.n	810a34c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a36e:	f7f8 fbd1 	bl	8102b14 <HAL_GetTick>
 810a372:	4602      	mov	r2, r0
 810a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a376:	1ad3      	subs	r3, r2, r3
 810a378:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a37c:	d102      	bne.n	810a384 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a37e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a382:	e043      	b.n	810a40c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a38a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 810a38e:	2b00      	cmp	r3, #0
 810a390:	d0d2      	beq.n	810a338 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810a392:	687b      	ldr	r3, [r7, #4]
 810a394:	681b      	ldr	r3, [r3, #0]
 810a396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a398:	f003 0308 	and.w	r3, r3, #8
 810a39c:	2b00      	cmp	r3, #0
 810a39e:	d001      	beq.n	810a3a4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810a3a0:	2308      	movs	r3, #8
 810a3a2:	e033      	b.n	810a40c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	681b      	ldr	r3, [r3, #0]
 810a3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3aa:	f003 0302 	and.w	r3, r3, #2
 810a3ae:	2b00      	cmp	r3, #0
 810a3b0:	d001      	beq.n	810a3b6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810a3b2:	2302      	movs	r3, #2
 810a3b4:	e02a      	b.n	810a40c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	681b      	ldr	r3, [r3, #0]
 810a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3bc:	f003 0320 	and.w	r3, r3, #32
 810a3c0:	2b00      	cmp	r3, #0
 810a3c2:	d017      	beq.n	810a3f4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810a3c4:	2320      	movs	r3, #32
 810a3c6:	e021      	b.n	810a40c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	681b      	ldr	r3, [r3, #0]
 810a3cc:	4618      	mov	r0, r3
 810a3ce:	f002 fdc3 	bl	810cf58 <SDMMC_ReadFIFO>
 810a3d2:	4602      	mov	r2, r0
 810a3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a3d6:	601a      	str	r2, [r3, #0]
    pData++;
 810a3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a3da:	3304      	adds	r3, #4
 810a3dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a3de:	f7f8 fb99 	bl	8102b14 <HAL_GetTick>
 810a3e2:	4602      	mov	r2, r0
 810a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a3e6:	1ad3      	subs	r3, r2, r3
 810a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a3ec:	d102      	bne.n	810a3f4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a3ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a3f2:	e00b      	b.n	810a40c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	681b      	ldr	r3, [r3, #0]
 810a3f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	d1e2      	bne.n	810a3c8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	681b      	ldr	r3, [r3, #0]
 810a406:	4a03      	ldr	r2, [pc, #12]	@ (810a414 <SD_SendSDStatus+0x19c>)
 810a408:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 810a40a:	2300      	movs	r3, #0
}
 810a40c:	4618      	mov	r0, r3
 810a40e:	3730      	adds	r7, #48	@ 0x30
 810a410:	46bd      	mov	sp, r7
 810a412:	bd80      	pop	{r7, pc}
 810a414:	18000f3a 	.word	0x18000f3a

0810a418 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810a418:	b580      	push	{r7, lr}
 810a41a:	b084      	sub	sp, #16
 810a41c:	af00      	add	r7, sp, #0
 810a41e:	6078      	str	r0, [r7, #4]
 810a420:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810a422:	683b      	ldr	r3, [r7, #0]
 810a424:	2b00      	cmp	r3, #0
 810a426:	d102      	bne.n	810a42e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810a428:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810a42c:	e018      	b.n	810a460 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a42e:	687b      	ldr	r3, [r7, #4]
 810a430:	681a      	ldr	r2, [r3, #0]
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a436:	041b      	lsls	r3, r3, #16
 810a438:	4619      	mov	r1, r3
 810a43a:	4610      	mov	r0, r2
 810a43c:	f002 ff9b 	bl	810d376 <SDMMC_CmdSendStatus>
 810a440:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a442:	68fb      	ldr	r3, [r7, #12]
 810a444:	2b00      	cmp	r3, #0
 810a446:	d001      	beq.n	810a44c <SD_SendStatus+0x34>
  {
    return errorstate;
 810a448:	68fb      	ldr	r3, [r7, #12]
 810a44a:	e009      	b.n	810a460 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a44c:	687b      	ldr	r3, [r7, #4]
 810a44e:	681b      	ldr	r3, [r3, #0]
 810a450:	2100      	movs	r1, #0
 810a452:	4618      	mov	r0, r3
 810a454:	f002 fde3 	bl	810d01e <SDMMC_GetResponse>
 810a458:	4602      	mov	r2, r0
 810a45a:	683b      	ldr	r3, [r7, #0]
 810a45c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810a45e:	2300      	movs	r3, #0
}
 810a460:	4618      	mov	r0, r3
 810a462:	3710      	adds	r7, #16
 810a464:	46bd      	mov	sp, r7
 810a466:	bd80      	pop	{r7, pc}

0810a468 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810a468:	b580      	push	{r7, lr}
 810a46a:	b086      	sub	sp, #24
 810a46c:	af00      	add	r7, sp, #0
 810a46e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810a470:	2300      	movs	r3, #0
 810a472:	60fb      	str	r3, [r7, #12]
 810a474:	2300      	movs	r3, #0
 810a476:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a478:	687b      	ldr	r3, [r7, #4]
 810a47a:	681b      	ldr	r3, [r3, #0]
 810a47c:	2100      	movs	r1, #0
 810a47e:	4618      	mov	r0, r3
 810a480:	f002 fdcd 	bl	810d01e <SDMMC_GetResponse>
 810a484:	4603      	mov	r3, r0
 810a486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a48a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a48e:	d102      	bne.n	810a496 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a490:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a494:	e02f      	b.n	810a4f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810a496:	f107 030c 	add.w	r3, r7, #12
 810a49a:	4619      	mov	r1, r3
 810a49c:	6878      	ldr	r0, [r7, #4]
 810a49e:	f000 f879 	bl	810a594 <SD_FindSCR>
 810a4a2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a4a4:	697b      	ldr	r3, [r7, #20]
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d001      	beq.n	810a4ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810a4aa:	697b      	ldr	r3, [r7, #20]
 810a4ac:	e023      	b.n	810a4f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810a4ae:	693b      	ldr	r3, [r7, #16]
 810a4b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810a4b4:	2b00      	cmp	r3, #0
 810a4b6:	d01c      	beq.n	810a4f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a4b8:	687b      	ldr	r3, [r7, #4]
 810a4ba:	681a      	ldr	r2, [r3, #0]
 810a4bc:	687b      	ldr	r3, [r7, #4]
 810a4be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a4c0:	041b      	lsls	r3, r3, #16
 810a4c2:	4619      	mov	r1, r3
 810a4c4:	4610      	mov	r0, r2
 810a4c6:	f002 fe6d 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a4ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a4cc:	697b      	ldr	r3, [r7, #20]
 810a4ce:	2b00      	cmp	r3, #0
 810a4d0:	d001      	beq.n	810a4d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810a4d2:	697b      	ldr	r3, [r7, #20]
 810a4d4:	e00f      	b.n	810a4f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810a4d6:	687b      	ldr	r3, [r7, #4]
 810a4d8:	681b      	ldr	r3, [r3, #0]
 810a4da:	2102      	movs	r1, #2
 810a4dc:	4618      	mov	r0, r3
 810a4de:	f002 fea4 	bl	810d22a <SDMMC_CmdBusWidth>
 810a4e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a4e4:	697b      	ldr	r3, [r7, #20]
 810a4e6:	2b00      	cmp	r3, #0
 810a4e8:	d001      	beq.n	810a4ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810a4ea:	697b      	ldr	r3, [r7, #20]
 810a4ec:	e003      	b.n	810a4f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810a4ee:	2300      	movs	r3, #0
 810a4f0:	e001      	b.n	810a4f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810a4f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810a4f6:	4618      	mov	r0, r3
 810a4f8:	3718      	adds	r7, #24
 810a4fa:	46bd      	mov	sp, r7
 810a4fc:	bd80      	pop	{r7, pc}

0810a4fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810a4fe:	b580      	push	{r7, lr}
 810a500:	b086      	sub	sp, #24
 810a502:	af00      	add	r7, sp, #0
 810a504:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810a506:	2300      	movs	r3, #0
 810a508:	60fb      	str	r3, [r7, #12]
 810a50a:	2300      	movs	r3, #0
 810a50c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a50e:	687b      	ldr	r3, [r7, #4]
 810a510:	681b      	ldr	r3, [r3, #0]
 810a512:	2100      	movs	r1, #0
 810a514:	4618      	mov	r0, r3
 810a516:	f002 fd82 	bl	810d01e <SDMMC_GetResponse>
 810a51a:	4603      	mov	r3, r0
 810a51c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a524:	d102      	bne.n	810a52c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a52a:	e02f      	b.n	810a58c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810a52c:	f107 030c 	add.w	r3, r7, #12
 810a530:	4619      	mov	r1, r3
 810a532:	6878      	ldr	r0, [r7, #4]
 810a534:	f000 f82e 	bl	810a594 <SD_FindSCR>
 810a538:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a53a:	697b      	ldr	r3, [r7, #20]
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	d001      	beq.n	810a544 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810a540:	697b      	ldr	r3, [r7, #20]
 810a542:	e023      	b.n	810a58c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810a544:	693b      	ldr	r3, [r7, #16]
 810a546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a54a:	2b00      	cmp	r3, #0
 810a54c:	d01c      	beq.n	810a588 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a54e:	687b      	ldr	r3, [r7, #4]
 810a550:	681a      	ldr	r2, [r3, #0]
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a556:	041b      	lsls	r3, r3, #16
 810a558:	4619      	mov	r1, r3
 810a55a:	4610      	mov	r0, r2
 810a55c:	f002 fe22 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a560:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a562:	697b      	ldr	r3, [r7, #20]
 810a564:	2b00      	cmp	r3, #0
 810a566:	d001      	beq.n	810a56c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810a568:	697b      	ldr	r3, [r7, #20]
 810a56a:	e00f      	b.n	810a58c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	681b      	ldr	r3, [r3, #0]
 810a570:	2100      	movs	r1, #0
 810a572:	4618      	mov	r0, r3
 810a574:	f002 fe59 	bl	810d22a <SDMMC_CmdBusWidth>
 810a578:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a57a:	697b      	ldr	r3, [r7, #20]
 810a57c:	2b00      	cmp	r3, #0
 810a57e:	d001      	beq.n	810a584 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810a580:	697b      	ldr	r3, [r7, #20]
 810a582:	e003      	b.n	810a58c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810a584:	2300      	movs	r3, #0
 810a586:	e001      	b.n	810a58c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810a588:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810a58c:	4618      	mov	r0, r3
 810a58e:	3718      	adds	r7, #24
 810a590:	46bd      	mov	sp, r7
 810a592:	bd80      	pop	{r7, pc}

0810a594 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810a594:	b580      	push	{r7, lr}
 810a596:	b08e      	sub	sp, #56	@ 0x38
 810a598:	af00      	add	r7, sp, #0
 810a59a:	6078      	str	r0, [r7, #4]
 810a59c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810a59e:	f7f8 fab9 	bl	8102b14 <HAL_GetTick>
 810a5a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 810a5a4:	2300      	movs	r3, #0
 810a5a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810a5a8:	2300      	movs	r3, #0
 810a5aa:	60bb      	str	r3, [r7, #8]
 810a5ac:	2300      	movs	r3, #0
 810a5ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810a5b0:	683b      	ldr	r3, [r7, #0]
 810a5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810a5b4:	687b      	ldr	r3, [r7, #4]
 810a5b6:	681b      	ldr	r3, [r3, #0]
 810a5b8:	2108      	movs	r1, #8
 810a5ba:	4618      	mov	r0, r3
 810a5bc:	f002 fd6e 	bl	810d09c <SDMMC_CmdBlockLength>
 810a5c0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a5c4:	2b00      	cmp	r3, #0
 810a5c6:	d001      	beq.n	810a5cc <SD_FindSCR+0x38>
  {
    return errorstate;
 810a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a5ca:	e0ad      	b.n	810a728 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810a5cc:	687b      	ldr	r3, [r7, #4]
 810a5ce:	681a      	ldr	r2, [r3, #0]
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a5d4:	041b      	lsls	r3, r3, #16
 810a5d6:	4619      	mov	r1, r3
 810a5d8:	4610      	mov	r0, r2
 810a5da:	f002 fde3 	bl	810d1a4 <SDMMC_CmdAppCommand>
 810a5de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a5e2:	2b00      	cmp	r3, #0
 810a5e4:	d001      	beq.n	810a5ea <SD_FindSCR+0x56>
  {
    return errorstate;
 810a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a5e8:	e09e      	b.n	810a728 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 810a5ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810a5f0:	2308      	movs	r3, #8
 810a5f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810a5f4:	2330      	movs	r3, #48	@ 0x30
 810a5f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810a5f8:	2302      	movs	r3, #2
 810a5fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810a5fc:	2300      	movs	r3, #0
 810a5fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810a600:	2301      	movs	r3, #1
 810a602:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810a604:	687b      	ldr	r3, [r7, #4]
 810a606:	681b      	ldr	r3, [r3, #0]
 810a608:	f107 0210 	add.w	r2, r7, #16
 810a60c:	4611      	mov	r1, r2
 810a60e:	4618      	mov	r0, r3
 810a610:	f002 fd18 	bl	810d044 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	681b      	ldr	r3, [r3, #0]
 810a618:	4618      	mov	r0, r3
 810a61a:	f002 fe29 	bl	810d270 <SDMMC_CmdSendSCR>
 810a61e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a622:	2b00      	cmp	r3, #0
 810a624:	d027      	beq.n	810a676 <SD_FindSCR+0xe2>
  {
    return errorstate;
 810a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a628:	e07e      	b.n	810a728 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810a634:	2b00      	cmp	r3, #0
 810a636:	d113      	bne.n	810a660 <SD_FindSCR+0xcc>
 810a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d110      	bne.n	810a660 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	681b      	ldr	r3, [r3, #0]
 810a642:	4618      	mov	r0, r3
 810a644:	f002 fc88 	bl	810cf58 <SDMMC_ReadFIFO>
 810a648:	4603      	mov	r3, r0
 810a64a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	681b      	ldr	r3, [r3, #0]
 810a650:	4618      	mov	r0, r3
 810a652:	f002 fc81 	bl	810cf58 <SDMMC_ReadFIFO>
 810a656:	4603      	mov	r3, r0
 810a658:	60fb      	str	r3, [r7, #12]
      index++;
 810a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a65c:	3301      	adds	r3, #1
 810a65e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a660:	f7f8 fa58 	bl	8102b14 <HAL_GetTick>
 810a664:	4602      	mov	r2, r0
 810a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a668:	1ad3      	subs	r3, r2, r3
 810a66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a66e:	d102      	bne.n	810a676 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a670:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a674:	e058      	b.n	810a728 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810a676:	687b      	ldr	r3, [r7, #4]
 810a678:	681b      	ldr	r3, [r3, #0]
 810a67a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a67c:	f240 532a 	movw	r3, #1322	@ 0x52a
 810a680:	4013      	ands	r3, r2
 810a682:	2b00      	cmp	r3, #0
 810a684:	d0d1      	beq.n	810a62a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	681b      	ldr	r3, [r3, #0]
 810a68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a68c:	f003 0308 	and.w	r3, r3, #8
 810a690:	2b00      	cmp	r3, #0
 810a692:	d005      	beq.n	810a6a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	681b      	ldr	r3, [r3, #0]
 810a698:	2208      	movs	r2, #8
 810a69a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810a69c:	2308      	movs	r3, #8
 810a69e:	e043      	b.n	810a728 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810a6a0:	687b      	ldr	r3, [r7, #4]
 810a6a2:	681b      	ldr	r3, [r3, #0]
 810a6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a6a6:	f003 0302 	and.w	r3, r3, #2
 810a6aa:	2b00      	cmp	r3, #0
 810a6ac:	d005      	beq.n	810a6ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810a6ae:	687b      	ldr	r3, [r7, #4]
 810a6b0:	681b      	ldr	r3, [r3, #0]
 810a6b2:	2202      	movs	r2, #2
 810a6b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810a6b6:	2302      	movs	r3, #2
 810a6b8:	e036      	b.n	810a728 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810a6ba:	687b      	ldr	r3, [r7, #4]
 810a6bc:	681b      	ldr	r3, [r3, #0]
 810a6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a6c0:	f003 0320 	and.w	r3, r3, #32
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	d005      	beq.n	810a6d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810a6c8:	687b      	ldr	r3, [r7, #4]
 810a6ca:	681b      	ldr	r3, [r3, #0]
 810a6cc:	2220      	movs	r2, #32
 810a6ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810a6d0:	2320      	movs	r3, #32
 810a6d2:	e029      	b.n	810a728 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810a6d4:	687b      	ldr	r3, [r7, #4]
 810a6d6:	681b      	ldr	r3, [r3, #0]
 810a6d8:	4a15      	ldr	r2, [pc, #84]	@ (810a730 <SD_FindSCR+0x19c>)
 810a6da:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a6dc:	68fb      	ldr	r3, [r7, #12]
 810a6de:	061a      	lsls	r2, r3, #24
 810a6e0:	68fb      	ldr	r3, [r7, #12]
 810a6e2:	021b      	lsls	r3, r3, #8
 810a6e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810a6e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 810a6ea:	68fb      	ldr	r3, [r7, #12]
 810a6ec:	0a1b      	lsrs	r3, r3, #8
 810a6ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a6f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 810a6f4:	68fb      	ldr	r3, [r7, #12]
 810a6f6:	0e1b      	lsrs	r3, r3, #24
 810a6f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a6fc:	601a      	str	r2, [r3, #0]
    scr++;
 810a6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a700:	3304      	adds	r3, #4
 810a702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a704:	68bb      	ldr	r3, [r7, #8]
 810a706:	061a      	lsls	r2, r3, #24
 810a708:	68bb      	ldr	r3, [r7, #8]
 810a70a:	021b      	lsls	r3, r3, #8
 810a70c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810a710:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810a712:	68bb      	ldr	r3, [r7, #8]
 810a714:	0a1b      	lsrs	r3, r3, #8
 810a716:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a71a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810a71c:	68bb      	ldr	r3, [r7, #8]
 810a71e:	0e1b      	lsrs	r3, r3, #24
 810a720:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a724:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810a726:	2300      	movs	r3, #0
}
 810a728:	4618      	mov	r0, r3
 810a72a:	3738      	adds	r7, #56	@ 0x38
 810a72c:	46bd      	mov	sp, r7
 810a72e:	bd80      	pop	{r7, pc}
 810a730:	18000f3a 	.word	0x18000f3a

0810a734 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 810a734:	b580      	push	{r7, lr}
 810a736:	b082      	sub	sp, #8
 810a738:	af00      	add	r7, sp, #0
 810a73a:	6078      	str	r0, [r7, #4]
 810a73c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 810a73e:	687b      	ldr	r3, [r7, #4]
 810a740:	2b00      	cmp	r3, #0
 810a742:	d101      	bne.n	810a748 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 810a744:	2301      	movs	r3, #1
 810a746:	e02b      	b.n	810a7a0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810a74e:	b2db      	uxtb	r3, r3
 810a750:	2b00      	cmp	r3, #0
 810a752:	d106      	bne.n	810a762 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 810a754:	687b      	ldr	r3, [r7, #4]
 810a756:	2200      	movs	r2, #0
 810a758:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810a75c:	6878      	ldr	r0, [r7, #4]
 810a75e:	f7f7 ff5f 	bl	8102620 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 810a762:	687b      	ldr	r3, [r7, #4]
 810a764:	2202      	movs	r2, #2
 810a766:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810a76a:	687b      	ldr	r3, [r7, #4]
 810a76c:	681a      	ldr	r2, [r3, #0]
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	3304      	adds	r3, #4
 810a772:	4619      	mov	r1, r3
 810a774:	4610      	mov	r0, r2
 810a776:	f002 faff 	bl	810cd78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810a77a:	687b      	ldr	r3, [r7, #4]
 810a77c:	6818      	ldr	r0, [r3, #0]
 810a77e:	687b      	ldr	r3, [r7, #4]
 810a780:	685b      	ldr	r3, [r3, #4]
 810a782:	461a      	mov	r2, r3
 810a784:	6839      	ldr	r1, [r7, #0]
 810a786:	f002 fb54 	bl	810ce32 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810a78a:	4b07      	ldr	r3, [pc, #28]	@ (810a7a8 <HAL_SDRAM_Init+0x74>)
 810a78c:	681b      	ldr	r3, [r3, #0]
 810a78e:	4a06      	ldr	r2, [pc, #24]	@ (810a7a8 <HAL_SDRAM_Init+0x74>)
 810a790:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810a794:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810a796:	687b      	ldr	r3, [r7, #4]
 810a798:	2201      	movs	r2, #1
 810a79a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810a79e:	2300      	movs	r3, #0
}
 810a7a0:	4618      	mov	r0, r3
 810a7a2:	3708      	adds	r7, #8
 810a7a4:	46bd      	mov	sp, r7
 810a7a6:	bd80      	pop	{r7, pc}
 810a7a8:	52004000 	.word	0x52004000

0810a7ac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810a7ac:	b580      	push	{r7, lr}
 810a7ae:	b084      	sub	sp, #16
 810a7b0:	af00      	add	r7, sp, #0
 810a7b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 810a7b4:	687b      	ldr	r3, [r7, #4]
 810a7b6:	2b00      	cmp	r3, #0
 810a7b8:	d101      	bne.n	810a7be <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810a7ba:	2301      	movs	r3, #1
 810a7bc:	e05e      	b.n	810a87c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810a7be:	687b      	ldr	r3, [r7, #4]
 810a7c0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 810a7c4:	b2db      	uxtb	r3, r3
 810a7c6:	2b00      	cmp	r3, #0
 810a7c8:	d106      	bne.n	810a7d8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	2200      	movs	r2, #0
 810a7ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810a7d2:	6878      	ldr	r0, [r7, #4]
 810a7d4:	f7f7 fa28 	bl	8101c28 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 810a7d8:	687b      	ldr	r3, [r7, #4]
 810a7da:	2202      	movs	r2, #2
 810a7dc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 810a7e0:	687b      	ldr	r3, [r7, #4]
 810a7e2:	681b      	ldr	r3, [r3, #0]
 810a7e4:	681a      	ldr	r2, [r3, #0]
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	681b      	ldr	r3, [r3, #0]
 810a7ea:	f022 0203 	bic.w	r2, r2, #3
 810a7ee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 810a7f0:	687b      	ldr	r3, [r7, #4]
 810a7f2:	681b      	ldr	r3, [r3, #0]
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 810a7f8:	68fa      	ldr	r2, [r7, #12]
 810a7fa:	4b22      	ldr	r3, [pc, #136]	@ (810a884 <HAL_SPDIFRX_Init+0xd8>)
 810a7fc:	4013      	ands	r3, r2
 810a7fe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 810a804:	687b      	ldr	r3, [r7, #4]
 810a806:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810a808:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810a80a:	687b      	ldr	r3, [r7, #4]
 810a80c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810a80e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810a810:	687b      	ldr	r3, [r7, #4]
 810a812:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 810a814:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810a816:	687b      	ldr	r3, [r7, #4]
 810a818:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810a81a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 810a820:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 810a822:	687b      	ldr	r3, [r7, #4]
 810a824:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810a826:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810a828:	687b      	ldr	r3, [r7, #4]
 810a82a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810a82c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810a82e:	687b      	ldr	r3, [r7, #4]
 810a830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 810a832:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 810a838:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810a83a:	68fa      	ldr	r2, [r7, #12]
 810a83c:	4313      	orrs	r3, r2
 810a83e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810a846:	2b01      	cmp	r3, #1
 810a848:	d103      	bne.n	810a852 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810a84a:	68fb      	ldr	r3, [r7, #12]
 810a84c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a850:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 810a852:	687b      	ldr	r3, [r7, #4]
 810a854:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810a858:	2b01      	cmp	r3, #1
 810a85a:	d103      	bne.n	810a864 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810a85c:	68fb      	ldr	r3, [r7, #12]
 810a85e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810a862:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 810a864:	687b      	ldr	r3, [r7, #4]
 810a866:	681b      	ldr	r3, [r3, #0]
 810a868:	68fa      	ldr	r2, [r7, #12]
 810a86a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810a86c:	687b      	ldr	r3, [r7, #4]
 810a86e:	2200      	movs	r2, #0
 810a870:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810a872:	687b      	ldr	r3, [r7, #4]
 810a874:	2201      	movs	r2, #1
 810a876:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810a87a:	2300      	movs	r3, #0
}
 810a87c:	4618      	mov	r0, r3
 810a87e:	3710      	adds	r7, #16
 810a880:	46bd      	mov	sp, r7
 810a882:	bd80      	pop	{r7, pc}
 810a884:	ffc88407 	.word	0xffc88407

0810a888 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a888:	b580      	push	{r7, lr}
 810a88a:	b084      	sub	sp, #16
 810a88c:	af00      	add	r7, sp, #0
 810a88e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	2b00      	cmp	r3, #0
 810a894:	d101      	bne.n	810a89a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810a896:	2301      	movs	r3, #1
 810a898:	e10f      	b.n	810aaba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a89a:	687b      	ldr	r3, [r7, #4]
 810a89c:	2200      	movs	r2, #0
 810a89e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	681b      	ldr	r3, [r3, #0]
 810a8a4:	4a87      	ldr	r2, [pc, #540]	@ (810aac4 <HAL_SPI_Init+0x23c>)
 810a8a6:	4293      	cmp	r3, r2
 810a8a8:	d00f      	beq.n	810a8ca <HAL_SPI_Init+0x42>
 810a8aa:	687b      	ldr	r3, [r7, #4]
 810a8ac:	681b      	ldr	r3, [r3, #0]
 810a8ae:	4a86      	ldr	r2, [pc, #536]	@ (810aac8 <HAL_SPI_Init+0x240>)
 810a8b0:	4293      	cmp	r3, r2
 810a8b2:	d00a      	beq.n	810a8ca <HAL_SPI_Init+0x42>
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	681b      	ldr	r3, [r3, #0]
 810a8b8:	4a84      	ldr	r2, [pc, #528]	@ (810aacc <HAL_SPI_Init+0x244>)
 810a8ba:	4293      	cmp	r3, r2
 810a8bc:	d005      	beq.n	810a8ca <HAL_SPI_Init+0x42>
 810a8be:	687b      	ldr	r3, [r7, #4]
 810a8c0:	68db      	ldr	r3, [r3, #12]
 810a8c2:	2b0f      	cmp	r3, #15
 810a8c4:	d901      	bls.n	810a8ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810a8c6:	2301      	movs	r3, #1
 810a8c8:	e0f7      	b.n	810aaba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a8ca:	6878      	ldr	r0, [r7, #4]
 810a8cc:	f000 f900 	bl	810aad0 <SPI_GetPacketSize>
 810a8d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a8d2:	687b      	ldr	r3, [r7, #4]
 810a8d4:	681b      	ldr	r3, [r3, #0]
 810a8d6:	4a7b      	ldr	r2, [pc, #492]	@ (810aac4 <HAL_SPI_Init+0x23c>)
 810a8d8:	4293      	cmp	r3, r2
 810a8da:	d00c      	beq.n	810a8f6 <HAL_SPI_Init+0x6e>
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	4a79      	ldr	r2, [pc, #484]	@ (810aac8 <HAL_SPI_Init+0x240>)
 810a8e2:	4293      	cmp	r3, r2
 810a8e4:	d007      	beq.n	810a8f6 <HAL_SPI_Init+0x6e>
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	4a78      	ldr	r2, [pc, #480]	@ (810aacc <HAL_SPI_Init+0x244>)
 810a8ec:	4293      	cmp	r3, r2
 810a8ee:	d002      	beq.n	810a8f6 <HAL_SPI_Init+0x6e>
 810a8f0:	68fb      	ldr	r3, [r7, #12]
 810a8f2:	2b08      	cmp	r3, #8
 810a8f4:	d811      	bhi.n	810a91a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a8f6:	687b      	ldr	r3, [r7, #4]
 810a8f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a8fa:	4a72      	ldr	r2, [pc, #456]	@ (810aac4 <HAL_SPI_Init+0x23c>)
 810a8fc:	4293      	cmp	r3, r2
 810a8fe:	d009      	beq.n	810a914 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a900:	687b      	ldr	r3, [r7, #4]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	4a70      	ldr	r2, [pc, #448]	@ (810aac8 <HAL_SPI_Init+0x240>)
 810a906:	4293      	cmp	r3, r2
 810a908:	d004      	beq.n	810a914 <HAL_SPI_Init+0x8c>
 810a90a:	687b      	ldr	r3, [r7, #4]
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	4a6f      	ldr	r2, [pc, #444]	@ (810aacc <HAL_SPI_Init+0x244>)
 810a910:	4293      	cmp	r3, r2
 810a912:	d104      	bne.n	810a91e <HAL_SPI_Init+0x96>
 810a914:	68fb      	ldr	r3, [r7, #12]
 810a916:	2b10      	cmp	r3, #16
 810a918:	d901      	bls.n	810a91e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810a91a:	2301      	movs	r3, #1
 810a91c:	e0cd      	b.n	810aaba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810a924:	b2db      	uxtb	r3, r3
 810a926:	2b00      	cmp	r3, #0
 810a928:	d106      	bne.n	810a938 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	2200      	movs	r2, #0
 810a92e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a932:	6878      	ldr	r0, [r7, #4]
 810a934:	f7f7 f9de 	bl	8101cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a938:	687b      	ldr	r3, [r7, #4]
 810a93a:	2202      	movs	r2, #2
 810a93c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a940:	687b      	ldr	r3, [r7, #4]
 810a942:	681b      	ldr	r3, [r3, #0]
 810a944:	681a      	ldr	r2, [r3, #0]
 810a946:	687b      	ldr	r3, [r7, #4]
 810a948:	681b      	ldr	r3, [r3, #0]
 810a94a:	f022 0201 	bic.w	r2, r2, #1
 810a94e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810a950:	687b      	ldr	r3, [r7, #4]
 810a952:	681b      	ldr	r3, [r3, #0]
 810a954:	689b      	ldr	r3, [r3, #8]
 810a956:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810a95a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	699b      	ldr	r3, [r3, #24]
 810a960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a964:	d119      	bne.n	810a99a <HAL_SPI_Init+0x112>
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	685b      	ldr	r3, [r3, #4]
 810a96a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a96e:	d103      	bne.n	810a978 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810a974:	2b00      	cmp	r3, #0
 810a976:	d008      	beq.n	810a98a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a97c:	2b00      	cmp	r3, #0
 810a97e:	d10c      	bne.n	810a99a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a980:	687b      	ldr	r3, [r7, #4]
 810a982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810a984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a988:	d107      	bne.n	810a99a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	681b      	ldr	r3, [r3, #0]
 810a98e:	681a      	ldr	r2, [r3, #0]
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	681b      	ldr	r3, [r3, #0]
 810a994:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810a998:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	685b      	ldr	r3, [r3, #4]
 810a99e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a9a2:	2b00      	cmp	r3, #0
 810a9a4:	d00f      	beq.n	810a9c6 <HAL_SPI_Init+0x13e>
 810a9a6:	687b      	ldr	r3, [r7, #4]
 810a9a8:	68db      	ldr	r3, [r3, #12]
 810a9aa:	2b06      	cmp	r3, #6
 810a9ac:	d90b      	bls.n	810a9c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810a9ae:	687b      	ldr	r3, [r7, #4]
 810a9b0:	681b      	ldr	r3, [r3, #0]
 810a9b2:	681b      	ldr	r3, [r3, #0]
 810a9b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	430a      	orrs	r2, r1
 810a9c2:	601a      	str	r2, [r3, #0]
 810a9c4:	e007      	b.n	810a9d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810a9c6:	687b      	ldr	r3, [r7, #4]
 810a9c8:	681b      	ldr	r3, [r3, #0]
 810a9ca:	681a      	ldr	r2, [r3, #0]
 810a9cc:	687b      	ldr	r3, [r7, #4]
 810a9ce:	681b      	ldr	r3, [r3, #0]
 810a9d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810a9d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	69da      	ldr	r2, [r3, #28]
 810a9da:	687b      	ldr	r3, [r7, #4]
 810a9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a9de:	431a      	orrs	r2, r3
 810a9e0:	68bb      	ldr	r3, [r7, #8]
 810a9e2:	431a      	orrs	r2, r3
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a9e8:	ea42 0103 	orr.w	r1, r2, r3
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	68da      	ldr	r2, [r3, #12]
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	430a      	orrs	r2, r1
 810a9f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810a9f8:	687b      	ldr	r3, [r7, #4]
 810a9fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa00:	431a      	orrs	r2, r3
 810aa02:	687b      	ldr	r3, [r7, #4]
 810aa04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810aa06:	431a      	orrs	r2, r3
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	699b      	ldr	r3, [r3, #24]
 810aa0c:	431a      	orrs	r2, r3
 810aa0e:	687b      	ldr	r3, [r7, #4]
 810aa10:	691b      	ldr	r3, [r3, #16]
 810aa12:	431a      	orrs	r2, r3
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	695b      	ldr	r3, [r3, #20]
 810aa18:	431a      	orrs	r2, r3
 810aa1a:	687b      	ldr	r3, [r7, #4]
 810aa1c:	6a1b      	ldr	r3, [r3, #32]
 810aa1e:	431a      	orrs	r2, r3
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	685b      	ldr	r3, [r3, #4]
 810aa24:	431a      	orrs	r2, r3
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aa2a:	431a      	orrs	r2, r3
 810aa2c:	687b      	ldr	r3, [r7, #4]
 810aa2e:	689b      	ldr	r3, [r3, #8]
 810aa30:	431a      	orrs	r2, r3
 810aa32:	687b      	ldr	r3, [r7, #4]
 810aa34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810aa36:	ea42 0103 	orr.w	r1, r2, r3
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810aa3e:	687b      	ldr	r3, [r7, #4]
 810aa40:	681b      	ldr	r3, [r3, #0]
 810aa42:	430a      	orrs	r2, r1
 810aa44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	685b      	ldr	r3, [r3, #4]
 810aa4a:	2b00      	cmp	r3, #0
 810aa4c:	d113      	bne.n	810aa76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810aa4e:	687b      	ldr	r3, [r7, #4]
 810aa50:	681b      	ldr	r3, [r3, #0]
 810aa52:	689b      	ldr	r3, [r3, #8]
 810aa54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	681b      	ldr	r3, [r3, #0]
 810aa5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810aa60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	681b      	ldr	r3, [r3, #0]
 810aa66:	689b      	ldr	r3, [r3, #8]
 810aa68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	681b      	ldr	r3, [r3, #0]
 810aa70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 810aa74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810aa76:	687b      	ldr	r3, [r7, #4]
 810aa78:	681b      	ldr	r3, [r3, #0]
 810aa7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	681b      	ldr	r3, [r3, #0]
 810aa80:	f022 0201 	bic.w	r2, r2, #1
 810aa84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	685b      	ldr	r3, [r3, #4]
 810aa8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810aa8e:	2b00      	cmp	r3, #0
 810aa90:	d00a      	beq.n	810aaa8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	681b      	ldr	r3, [r3, #0]
 810aa96:	68db      	ldr	r3, [r3, #12]
 810aa98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810aa9c:	687b      	ldr	r3, [r7, #4]
 810aa9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	681b      	ldr	r3, [r3, #0]
 810aaa4:	430a      	orrs	r2, r1
 810aaa6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810aaa8:	687b      	ldr	r3, [r7, #4]
 810aaaa:	2200      	movs	r2, #0
 810aaac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810aab0:	687b      	ldr	r3, [r7, #4]
 810aab2:	2201      	movs	r2, #1
 810aab4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 810aab8:	2300      	movs	r3, #0
}
 810aaba:	4618      	mov	r0, r3
 810aabc:	3710      	adds	r7, #16
 810aabe:	46bd      	mov	sp, r7
 810aac0:	bd80      	pop	{r7, pc}
 810aac2:	bf00      	nop
 810aac4:	40013000 	.word	0x40013000
 810aac8:	40003800 	.word	0x40003800
 810aacc:	40003c00 	.word	0x40003c00

0810aad0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810aad0:	b480      	push	{r7}
 810aad2:	b085      	sub	sp, #20
 810aad4:	af00      	add	r7, sp, #0
 810aad6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810aadc:	095b      	lsrs	r3, r3, #5
 810aade:	3301      	adds	r3, #1
 810aae0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	68db      	ldr	r3, [r3, #12]
 810aae6:	3301      	adds	r3, #1
 810aae8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810aaea:	68bb      	ldr	r3, [r7, #8]
 810aaec:	3307      	adds	r3, #7
 810aaee:	08db      	lsrs	r3, r3, #3
 810aaf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810aaf2:	68bb      	ldr	r3, [r7, #8]
 810aaf4:	68fa      	ldr	r2, [r7, #12]
 810aaf6:	fb02 f303 	mul.w	r3, r2, r3
}
 810aafa:	4618      	mov	r0, r3
 810aafc:	3714      	adds	r7, #20
 810aafe:	46bd      	mov	sp, r7
 810ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab04:	4770      	bx	lr

0810ab06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810ab06:	b580      	push	{r7, lr}
 810ab08:	b082      	sub	sp, #8
 810ab0a:	af00      	add	r7, sp, #0
 810ab0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	2b00      	cmp	r3, #0
 810ab12:	d101      	bne.n	810ab18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ab14:	2301      	movs	r3, #1
 810ab16:	e049      	b.n	810abac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ab1e:	b2db      	uxtb	r3, r3
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d106      	bne.n	810ab32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	2200      	movs	r2, #0
 810ab28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ab2c:	6878      	ldr	r0, [r7, #4]
 810ab2e:	f7f7 fa0b 	bl	8101f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ab32:	687b      	ldr	r3, [r7, #4]
 810ab34:	2202      	movs	r2, #2
 810ab36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	681a      	ldr	r2, [r3, #0]
 810ab3e:	687b      	ldr	r3, [r7, #4]
 810ab40:	3304      	adds	r3, #4
 810ab42:	4619      	mov	r1, r3
 810ab44:	4610      	mov	r0, r2
 810ab46:	f000 fa03 	bl	810af50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	2201      	movs	r2, #1
 810ab4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ab52:	687b      	ldr	r3, [r7, #4]
 810ab54:	2201      	movs	r2, #1
 810ab56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ab5a:	687b      	ldr	r3, [r7, #4]
 810ab5c:	2201      	movs	r2, #1
 810ab5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ab62:	687b      	ldr	r3, [r7, #4]
 810ab64:	2201      	movs	r2, #1
 810ab66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ab6a:	687b      	ldr	r3, [r7, #4]
 810ab6c:	2201      	movs	r2, #1
 810ab6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ab72:	687b      	ldr	r3, [r7, #4]
 810ab74:	2201      	movs	r2, #1
 810ab76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	2201      	movs	r2, #1
 810ab7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ab82:	687b      	ldr	r3, [r7, #4]
 810ab84:	2201      	movs	r2, #1
 810ab86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	2201      	movs	r2, #1
 810ab8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	2201      	movs	r2, #1
 810ab96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ab9a:	687b      	ldr	r3, [r7, #4]
 810ab9c:	2201      	movs	r2, #1
 810ab9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	2201      	movs	r2, #1
 810aba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810abaa:	2300      	movs	r3, #0
}
 810abac:	4618      	mov	r0, r3
 810abae:	3708      	adds	r7, #8
 810abb0:	46bd      	mov	sp, r7
 810abb2:	bd80      	pop	{r7, pc}

0810abb4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810abb4:	b580      	push	{r7, lr}
 810abb6:	b082      	sub	sp, #8
 810abb8:	af00      	add	r7, sp, #0
 810abba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810abbc:	687b      	ldr	r3, [r7, #4]
 810abbe:	2b00      	cmp	r3, #0
 810abc0:	d101      	bne.n	810abc6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810abc2:	2301      	movs	r3, #1
 810abc4:	e049      	b.n	810ac5a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810abcc:	b2db      	uxtb	r3, r3
 810abce:	2b00      	cmp	r3, #0
 810abd0:	d106      	bne.n	810abe0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	2200      	movs	r2, #0
 810abd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 810abda:	6878      	ldr	r0, [r7, #4]
 810abdc:	f7f7 f992 	bl	8101f04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	2202      	movs	r2, #2
 810abe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 810abe8:	687b      	ldr	r3, [r7, #4]
 810abea:	681a      	ldr	r2, [r3, #0]
 810abec:	687b      	ldr	r3, [r7, #4]
 810abee:	3304      	adds	r3, #4
 810abf0:	4619      	mov	r1, r3
 810abf2:	4610      	mov	r0, r2
 810abf4:	f000 f9ac 	bl	810af50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810abf8:	687b      	ldr	r3, [r7, #4]
 810abfa:	2201      	movs	r2, #1
 810abfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	2201      	movs	r2, #1
 810ac04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	2201      	movs	r2, #1
 810ac0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	2201      	movs	r2, #1
 810ac14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	2201      	movs	r2, #1
 810ac1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	2201      	movs	r2, #1
 810ac24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ac28:	687b      	ldr	r3, [r7, #4]
 810ac2a:	2201      	movs	r2, #1
 810ac2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac30:	687b      	ldr	r3, [r7, #4]
 810ac32:	2201      	movs	r2, #1
 810ac34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ac38:	687b      	ldr	r3, [r7, #4]
 810ac3a:	2201      	movs	r2, #1
 810ac3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	2201      	movs	r2, #1
 810ac44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	2201      	movs	r2, #1
 810ac4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ac50:	687b      	ldr	r3, [r7, #4]
 810ac52:	2201      	movs	r2, #1
 810ac54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ac58:	2300      	movs	r3, #0
}
 810ac5a:	4618      	mov	r0, r3
 810ac5c:	3708      	adds	r7, #8
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	bd80      	pop	{r7, pc}

0810ac62 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810ac62:	b580      	push	{r7, lr}
 810ac64:	b082      	sub	sp, #8
 810ac66:	af00      	add	r7, sp, #0
 810ac68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ac6a:	687b      	ldr	r3, [r7, #4]
 810ac6c:	2b00      	cmp	r3, #0
 810ac6e:	d101      	bne.n	810ac74 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810ac70:	2301      	movs	r3, #1
 810ac72:	e049      	b.n	810ad08 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ac74:	687b      	ldr	r3, [r7, #4]
 810ac76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ac7a:	b2db      	uxtb	r3, r3
 810ac7c:	2b00      	cmp	r3, #0
 810ac7e:	d106      	bne.n	810ac8e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	2200      	movs	r2, #0
 810ac84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810ac88:	6878      	ldr	r0, [r7, #4]
 810ac8a:	f000 f841 	bl	810ad10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	2202      	movs	r2, #2
 810ac92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ac96:	687b      	ldr	r3, [r7, #4]
 810ac98:	681a      	ldr	r2, [r3, #0]
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	3304      	adds	r3, #4
 810ac9e:	4619      	mov	r1, r3
 810aca0:	4610      	mov	r0, r2
 810aca2:	f000 f955 	bl	810af50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	2201      	movs	r2, #1
 810acaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	2201      	movs	r2, #1
 810acb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810acb6:	687b      	ldr	r3, [r7, #4]
 810acb8:	2201      	movs	r2, #1
 810acba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	2201      	movs	r2, #1
 810acc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	2201      	movs	r2, #1
 810acca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810acce:	687b      	ldr	r3, [r7, #4]
 810acd0:	2201      	movs	r2, #1
 810acd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810acd6:	687b      	ldr	r3, [r7, #4]
 810acd8:	2201      	movs	r2, #1
 810acda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	2201      	movs	r2, #1
 810ace2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	2201      	movs	r2, #1
 810acea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	2201      	movs	r2, #1
 810acf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810acf6:	687b      	ldr	r3, [r7, #4]
 810acf8:	2201      	movs	r2, #1
 810acfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810acfe:	687b      	ldr	r3, [r7, #4]
 810ad00:	2201      	movs	r2, #1
 810ad02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ad06:	2300      	movs	r3, #0
}
 810ad08:	4618      	mov	r0, r3
 810ad0a:	3708      	adds	r7, #8
 810ad0c:	46bd      	mov	sp, r7
 810ad0e:	bd80      	pop	{r7, pc}

0810ad10 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810ad10:	b480      	push	{r7}
 810ad12:	b083      	sub	sp, #12
 810ad14:	af00      	add	r7, sp, #0
 810ad16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 810ad18:	bf00      	nop
 810ad1a:	370c      	adds	r7, #12
 810ad1c:	46bd      	mov	sp, r7
 810ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad22:	4770      	bx	lr

0810ad24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810ad24:	b580      	push	{r7, lr}
 810ad26:	b086      	sub	sp, #24
 810ad28:	af00      	add	r7, sp, #0
 810ad2a:	60f8      	str	r0, [r7, #12]
 810ad2c:	60b9      	str	r1, [r7, #8]
 810ad2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810ad30:	2300      	movs	r3, #0
 810ad32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810ad34:	68fb      	ldr	r3, [r7, #12]
 810ad36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ad3a:	2b01      	cmp	r3, #1
 810ad3c:	d101      	bne.n	810ad42 <HAL_TIM_OC_ConfigChannel+0x1e>
 810ad3e:	2302      	movs	r3, #2
 810ad40:	e066      	b.n	810ae10 <HAL_TIM_OC_ConfigChannel+0xec>
 810ad42:	68fb      	ldr	r3, [r7, #12]
 810ad44:	2201      	movs	r2, #1
 810ad46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810ad4a:	687b      	ldr	r3, [r7, #4]
 810ad4c:	2b14      	cmp	r3, #20
 810ad4e:	d857      	bhi.n	810ae00 <HAL_TIM_OC_ConfigChannel+0xdc>
 810ad50:	a201      	add	r2, pc, #4	@ (adr r2, 810ad58 <HAL_TIM_OC_ConfigChannel+0x34>)
 810ad52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad56:	bf00      	nop
 810ad58:	0810adad 	.word	0x0810adad
 810ad5c:	0810ae01 	.word	0x0810ae01
 810ad60:	0810ae01 	.word	0x0810ae01
 810ad64:	0810ae01 	.word	0x0810ae01
 810ad68:	0810adbb 	.word	0x0810adbb
 810ad6c:	0810ae01 	.word	0x0810ae01
 810ad70:	0810ae01 	.word	0x0810ae01
 810ad74:	0810ae01 	.word	0x0810ae01
 810ad78:	0810adc9 	.word	0x0810adc9
 810ad7c:	0810ae01 	.word	0x0810ae01
 810ad80:	0810ae01 	.word	0x0810ae01
 810ad84:	0810ae01 	.word	0x0810ae01
 810ad88:	0810add7 	.word	0x0810add7
 810ad8c:	0810ae01 	.word	0x0810ae01
 810ad90:	0810ae01 	.word	0x0810ae01
 810ad94:	0810ae01 	.word	0x0810ae01
 810ad98:	0810ade5 	.word	0x0810ade5
 810ad9c:	0810ae01 	.word	0x0810ae01
 810ada0:	0810ae01 	.word	0x0810ae01
 810ada4:	0810ae01 	.word	0x0810ae01
 810ada8:	0810adf3 	.word	0x0810adf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810adac:	68fb      	ldr	r3, [r7, #12]
 810adae:	681b      	ldr	r3, [r3, #0]
 810adb0:	68b9      	ldr	r1, [r7, #8]
 810adb2:	4618      	mov	r0, r3
 810adb4:	f000 f96c 	bl	810b090 <TIM_OC1_SetConfig>
      break;
 810adb8:	e025      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810adba:	68fb      	ldr	r3, [r7, #12]
 810adbc:	681b      	ldr	r3, [r3, #0]
 810adbe:	68b9      	ldr	r1, [r7, #8]
 810adc0:	4618      	mov	r0, r3
 810adc2:	f000 f9f5 	bl	810b1b0 <TIM_OC2_SetConfig>
      break;
 810adc6:	e01e      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810adc8:	68fb      	ldr	r3, [r7, #12]
 810adca:	681b      	ldr	r3, [r3, #0]
 810adcc:	68b9      	ldr	r1, [r7, #8]
 810adce:	4618      	mov	r0, r3
 810add0:	f000 fa78 	bl	810b2c4 <TIM_OC3_SetConfig>
      break;
 810add4:	e017      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810add6:	68fb      	ldr	r3, [r7, #12]
 810add8:	681b      	ldr	r3, [r3, #0]
 810adda:	68b9      	ldr	r1, [r7, #8]
 810addc:	4618      	mov	r0, r3
 810adde:	f000 faf9 	bl	810b3d4 <TIM_OC4_SetConfig>
      break;
 810ade2:	e010      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810ade4:	68fb      	ldr	r3, [r7, #12]
 810ade6:	681b      	ldr	r3, [r3, #0]
 810ade8:	68b9      	ldr	r1, [r7, #8]
 810adea:	4618      	mov	r0, r3
 810adec:	f000 fb5c 	bl	810b4a8 <TIM_OC5_SetConfig>
      break;
 810adf0:	e009      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810adf2:	68fb      	ldr	r3, [r7, #12]
 810adf4:	681b      	ldr	r3, [r3, #0]
 810adf6:	68b9      	ldr	r1, [r7, #8]
 810adf8:	4618      	mov	r0, r3
 810adfa:	f000 fbb9 	bl	810b570 <TIM_OC6_SetConfig>
      break;
 810adfe:	e002      	b.n	810ae06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 810ae00:	2301      	movs	r3, #1
 810ae02:	75fb      	strb	r3, [r7, #23]
      break;
 810ae04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	2200      	movs	r2, #0
 810ae0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810ae0e:	7dfb      	ldrb	r3, [r7, #23]
}
 810ae10:	4618      	mov	r0, r3
 810ae12:	3718      	adds	r7, #24
 810ae14:	46bd      	mov	sp, r7
 810ae16:	bd80      	pop	{r7, pc}

0810ae18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 810ae18:	b580      	push	{r7, lr}
 810ae1a:	b086      	sub	sp, #24
 810ae1c:	af00      	add	r7, sp, #0
 810ae1e:	60f8      	str	r0, [r7, #12]
 810ae20:	60b9      	str	r1, [r7, #8]
 810ae22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810ae24:	2300      	movs	r3, #0
 810ae26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 810ae28:	68fb      	ldr	r3, [r7, #12]
 810ae2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ae2e:	2b01      	cmp	r3, #1
 810ae30:	d101      	bne.n	810ae36 <HAL_TIM_IC_ConfigChannel+0x1e>
 810ae32:	2302      	movs	r3, #2
 810ae34:	e088      	b.n	810af48 <HAL_TIM_IC_ConfigChannel+0x130>
 810ae36:	68fb      	ldr	r3, [r7, #12]
 810ae38:	2201      	movs	r2, #1
 810ae3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	2b00      	cmp	r3, #0
 810ae42:	d11b      	bne.n	810ae7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810ae44:	68fb      	ldr	r3, [r7, #12]
 810ae46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810ae48:	68bb      	ldr	r3, [r7, #8]
 810ae4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810ae4c:	68bb      	ldr	r3, [r7, #8]
 810ae4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810ae50:	68bb      	ldr	r3, [r7, #8]
 810ae52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810ae54:	f000 fbf2 	bl	810b63c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 810ae58:	68fb      	ldr	r3, [r7, #12]
 810ae5a:	681b      	ldr	r3, [r3, #0]
 810ae5c:	699a      	ldr	r2, [r3, #24]
 810ae5e:	68fb      	ldr	r3, [r7, #12]
 810ae60:	681b      	ldr	r3, [r3, #0]
 810ae62:	f022 020c 	bic.w	r2, r2, #12
 810ae66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	6999      	ldr	r1, [r3, #24]
 810ae6e:	68bb      	ldr	r3, [r7, #8]
 810ae70:	689a      	ldr	r2, [r3, #8]
 810ae72:	68fb      	ldr	r3, [r7, #12]
 810ae74:	681b      	ldr	r3, [r3, #0]
 810ae76:	430a      	orrs	r2, r1
 810ae78:	619a      	str	r2, [r3, #24]
 810ae7a:	e060      	b.n	810af3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810ae7c:	687b      	ldr	r3, [r7, #4]
 810ae7e:	2b04      	cmp	r3, #4
 810ae80:	d11c      	bne.n	810aebc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810ae82:	68fb      	ldr	r3, [r7, #12]
 810ae84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810ae86:	68bb      	ldr	r3, [r7, #8]
 810ae88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810ae8a:	68bb      	ldr	r3, [r7, #8]
 810ae8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810ae8e:	68bb      	ldr	r3, [r7, #8]
 810ae90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 810ae92:	f000 fc47 	bl	810b724 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810ae96:	68fb      	ldr	r3, [r7, #12]
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	699a      	ldr	r2, [r3, #24]
 810ae9c:	68fb      	ldr	r3, [r7, #12]
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810aea4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810aea6:	68fb      	ldr	r3, [r7, #12]
 810aea8:	681b      	ldr	r3, [r3, #0]
 810aeaa:	6999      	ldr	r1, [r3, #24]
 810aeac:	68bb      	ldr	r3, [r7, #8]
 810aeae:	689b      	ldr	r3, [r3, #8]
 810aeb0:	021a      	lsls	r2, r3, #8
 810aeb2:	68fb      	ldr	r3, [r7, #12]
 810aeb4:	681b      	ldr	r3, [r3, #0]
 810aeb6:	430a      	orrs	r2, r1
 810aeb8:	619a      	str	r2, [r3, #24]
 810aeba:	e040      	b.n	810af3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810aebc:	687b      	ldr	r3, [r7, #4]
 810aebe:	2b08      	cmp	r3, #8
 810aec0:	d11b      	bne.n	810aefa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810aec2:	68fb      	ldr	r3, [r7, #12]
 810aec4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810aec6:	68bb      	ldr	r3, [r7, #8]
 810aec8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810aeca:	68bb      	ldr	r3, [r7, #8]
 810aecc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810aece:	68bb      	ldr	r3, [r7, #8]
 810aed0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 810aed2:	f000 fc64 	bl	810b79e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 810aed6:	68fb      	ldr	r3, [r7, #12]
 810aed8:	681b      	ldr	r3, [r3, #0]
 810aeda:	69da      	ldr	r2, [r3, #28]
 810aedc:	68fb      	ldr	r3, [r7, #12]
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	f022 020c 	bic.w	r2, r2, #12
 810aee4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 810aee6:	68fb      	ldr	r3, [r7, #12]
 810aee8:	681b      	ldr	r3, [r3, #0]
 810aeea:	69d9      	ldr	r1, [r3, #28]
 810aeec:	68bb      	ldr	r3, [r7, #8]
 810aeee:	689a      	ldr	r2, [r3, #8]
 810aef0:	68fb      	ldr	r3, [r7, #12]
 810aef2:	681b      	ldr	r3, [r3, #0]
 810aef4:	430a      	orrs	r2, r1
 810aef6:	61da      	str	r2, [r3, #28]
 810aef8:	e021      	b.n	810af3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 810aefa:	687b      	ldr	r3, [r7, #4]
 810aefc:	2b0c      	cmp	r3, #12
 810aefe:	d11c      	bne.n	810af3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810af00:	68fb      	ldr	r3, [r7, #12]
 810af02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810af04:	68bb      	ldr	r3, [r7, #8]
 810af06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810af08:	68bb      	ldr	r3, [r7, #8]
 810af0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810af0c:	68bb      	ldr	r3, [r7, #8]
 810af0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810af10:	f000 fc81 	bl	810b816 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810af14:	68fb      	ldr	r3, [r7, #12]
 810af16:	681b      	ldr	r3, [r3, #0]
 810af18:	69da      	ldr	r2, [r3, #28]
 810af1a:	68fb      	ldr	r3, [r7, #12]
 810af1c:	681b      	ldr	r3, [r3, #0]
 810af1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810af22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810af24:	68fb      	ldr	r3, [r7, #12]
 810af26:	681b      	ldr	r3, [r3, #0]
 810af28:	69d9      	ldr	r1, [r3, #28]
 810af2a:	68bb      	ldr	r3, [r7, #8]
 810af2c:	689b      	ldr	r3, [r3, #8]
 810af2e:	021a      	lsls	r2, r3, #8
 810af30:	68fb      	ldr	r3, [r7, #12]
 810af32:	681b      	ldr	r3, [r3, #0]
 810af34:	430a      	orrs	r2, r1
 810af36:	61da      	str	r2, [r3, #28]
 810af38:	e001      	b.n	810af3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 810af3a:	2301      	movs	r3, #1
 810af3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810af3e:	68fb      	ldr	r3, [r7, #12]
 810af40:	2200      	movs	r2, #0
 810af42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810af46:	7dfb      	ldrb	r3, [r7, #23]
}
 810af48:	4618      	mov	r0, r3
 810af4a:	3718      	adds	r7, #24
 810af4c:	46bd      	mov	sp, r7
 810af4e:	bd80      	pop	{r7, pc}

0810af50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810af50:	b480      	push	{r7}
 810af52:	b085      	sub	sp, #20
 810af54:	af00      	add	r7, sp, #0
 810af56:	6078      	str	r0, [r7, #4]
 810af58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810af5a:	687b      	ldr	r3, [r7, #4]
 810af5c:	681b      	ldr	r3, [r3, #0]
 810af5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	4a43      	ldr	r2, [pc, #268]	@ (810b070 <TIM_Base_SetConfig+0x120>)
 810af64:	4293      	cmp	r3, r2
 810af66:	d013      	beq.n	810af90 <TIM_Base_SetConfig+0x40>
 810af68:	687b      	ldr	r3, [r7, #4]
 810af6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810af6e:	d00f      	beq.n	810af90 <TIM_Base_SetConfig+0x40>
 810af70:	687b      	ldr	r3, [r7, #4]
 810af72:	4a40      	ldr	r2, [pc, #256]	@ (810b074 <TIM_Base_SetConfig+0x124>)
 810af74:	4293      	cmp	r3, r2
 810af76:	d00b      	beq.n	810af90 <TIM_Base_SetConfig+0x40>
 810af78:	687b      	ldr	r3, [r7, #4]
 810af7a:	4a3f      	ldr	r2, [pc, #252]	@ (810b078 <TIM_Base_SetConfig+0x128>)
 810af7c:	4293      	cmp	r3, r2
 810af7e:	d007      	beq.n	810af90 <TIM_Base_SetConfig+0x40>
 810af80:	687b      	ldr	r3, [r7, #4]
 810af82:	4a3e      	ldr	r2, [pc, #248]	@ (810b07c <TIM_Base_SetConfig+0x12c>)
 810af84:	4293      	cmp	r3, r2
 810af86:	d003      	beq.n	810af90 <TIM_Base_SetConfig+0x40>
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	4a3d      	ldr	r2, [pc, #244]	@ (810b080 <TIM_Base_SetConfig+0x130>)
 810af8c:	4293      	cmp	r3, r2
 810af8e:	d108      	bne.n	810afa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810af90:	68fb      	ldr	r3, [r7, #12]
 810af92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810af96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810af98:	683b      	ldr	r3, [r7, #0]
 810af9a:	685b      	ldr	r3, [r3, #4]
 810af9c:	68fa      	ldr	r2, [r7, #12]
 810af9e:	4313      	orrs	r3, r2
 810afa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810afa2:	687b      	ldr	r3, [r7, #4]
 810afa4:	4a32      	ldr	r2, [pc, #200]	@ (810b070 <TIM_Base_SetConfig+0x120>)
 810afa6:	4293      	cmp	r3, r2
 810afa8:	d01f      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afaa:	687b      	ldr	r3, [r7, #4]
 810afac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810afb0:	d01b      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afb2:	687b      	ldr	r3, [r7, #4]
 810afb4:	4a2f      	ldr	r2, [pc, #188]	@ (810b074 <TIM_Base_SetConfig+0x124>)
 810afb6:	4293      	cmp	r3, r2
 810afb8:	d017      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	4a2e      	ldr	r2, [pc, #184]	@ (810b078 <TIM_Base_SetConfig+0x128>)
 810afbe:	4293      	cmp	r3, r2
 810afc0:	d013      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afc2:	687b      	ldr	r3, [r7, #4]
 810afc4:	4a2d      	ldr	r2, [pc, #180]	@ (810b07c <TIM_Base_SetConfig+0x12c>)
 810afc6:	4293      	cmp	r3, r2
 810afc8:	d00f      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afca:	687b      	ldr	r3, [r7, #4]
 810afcc:	4a2c      	ldr	r2, [pc, #176]	@ (810b080 <TIM_Base_SetConfig+0x130>)
 810afce:	4293      	cmp	r3, r2
 810afd0:	d00b      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afd2:	687b      	ldr	r3, [r7, #4]
 810afd4:	4a2b      	ldr	r2, [pc, #172]	@ (810b084 <TIM_Base_SetConfig+0x134>)
 810afd6:	4293      	cmp	r3, r2
 810afd8:	d007      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afda:	687b      	ldr	r3, [r7, #4]
 810afdc:	4a2a      	ldr	r2, [pc, #168]	@ (810b088 <TIM_Base_SetConfig+0x138>)
 810afde:	4293      	cmp	r3, r2
 810afe0:	d003      	beq.n	810afea <TIM_Base_SetConfig+0x9a>
 810afe2:	687b      	ldr	r3, [r7, #4]
 810afe4:	4a29      	ldr	r2, [pc, #164]	@ (810b08c <TIM_Base_SetConfig+0x13c>)
 810afe6:	4293      	cmp	r3, r2
 810afe8:	d108      	bne.n	810affc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810afea:	68fb      	ldr	r3, [r7, #12]
 810afec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810aff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810aff2:	683b      	ldr	r3, [r7, #0]
 810aff4:	68db      	ldr	r3, [r3, #12]
 810aff6:	68fa      	ldr	r2, [r7, #12]
 810aff8:	4313      	orrs	r3, r2
 810affa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810affc:	68fb      	ldr	r3, [r7, #12]
 810affe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810b002:	683b      	ldr	r3, [r7, #0]
 810b004:	695b      	ldr	r3, [r3, #20]
 810b006:	4313      	orrs	r3, r2
 810b008:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b00a:	683b      	ldr	r3, [r7, #0]
 810b00c:	689a      	ldr	r2, [r3, #8]
 810b00e:	687b      	ldr	r3, [r7, #4]
 810b010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b012:	683b      	ldr	r3, [r7, #0]
 810b014:	681a      	ldr	r2, [r3, #0]
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	4a14      	ldr	r2, [pc, #80]	@ (810b070 <TIM_Base_SetConfig+0x120>)
 810b01e:	4293      	cmp	r3, r2
 810b020:	d00f      	beq.n	810b042 <TIM_Base_SetConfig+0xf2>
 810b022:	687b      	ldr	r3, [r7, #4]
 810b024:	4a16      	ldr	r2, [pc, #88]	@ (810b080 <TIM_Base_SetConfig+0x130>)
 810b026:	4293      	cmp	r3, r2
 810b028:	d00b      	beq.n	810b042 <TIM_Base_SetConfig+0xf2>
 810b02a:	687b      	ldr	r3, [r7, #4]
 810b02c:	4a15      	ldr	r2, [pc, #84]	@ (810b084 <TIM_Base_SetConfig+0x134>)
 810b02e:	4293      	cmp	r3, r2
 810b030:	d007      	beq.n	810b042 <TIM_Base_SetConfig+0xf2>
 810b032:	687b      	ldr	r3, [r7, #4]
 810b034:	4a14      	ldr	r2, [pc, #80]	@ (810b088 <TIM_Base_SetConfig+0x138>)
 810b036:	4293      	cmp	r3, r2
 810b038:	d003      	beq.n	810b042 <TIM_Base_SetConfig+0xf2>
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	4a13      	ldr	r2, [pc, #76]	@ (810b08c <TIM_Base_SetConfig+0x13c>)
 810b03e:	4293      	cmp	r3, r2
 810b040:	d103      	bne.n	810b04a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b042:	683b      	ldr	r3, [r7, #0]
 810b044:	691a      	ldr	r2, [r3, #16]
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	681b      	ldr	r3, [r3, #0]
 810b04e:	f043 0204 	orr.w	r2, r3, #4
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b056:	687b      	ldr	r3, [r7, #4]
 810b058:	2201      	movs	r2, #1
 810b05a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810b05c:	687b      	ldr	r3, [r7, #4]
 810b05e:	68fa      	ldr	r2, [r7, #12]
 810b060:	601a      	str	r2, [r3, #0]
}
 810b062:	bf00      	nop
 810b064:	3714      	adds	r7, #20
 810b066:	46bd      	mov	sp, r7
 810b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b06c:	4770      	bx	lr
 810b06e:	bf00      	nop
 810b070:	40010000 	.word	0x40010000
 810b074:	40000400 	.word	0x40000400
 810b078:	40000800 	.word	0x40000800
 810b07c:	40000c00 	.word	0x40000c00
 810b080:	40010400 	.word	0x40010400
 810b084:	40014000 	.word	0x40014000
 810b088:	40014400 	.word	0x40014400
 810b08c:	40014800 	.word	0x40014800

0810b090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b090:	b480      	push	{r7}
 810b092:	b087      	sub	sp, #28
 810b094:	af00      	add	r7, sp, #0
 810b096:	6078      	str	r0, [r7, #4]
 810b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	6a1b      	ldr	r3, [r3, #32]
 810b09e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	6a1b      	ldr	r3, [r3, #32]
 810b0a4:	f023 0201 	bic.w	r2, r3, #1
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b0ac:	687b      	ldr	r3, [r7, #4]
 810b0ae:	685b      	ldr	r3, [r3, #4]
 810b0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	699b      	ldr	r3, [r3, #24]
 810b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810b0b8:	68fb      	ldr	r3, [r7, #12]
 810b0ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810b0c4:	68fb      	ldr	r3, [r7, #12]
 810b0c6:	f023 0303 	bic.w	r3, r3, #3
 810b0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b0cc:	683b      	ldr	r3, [r7, #0]
 810b0ce:	681b      	ldr	r3, [r3, #0]
 810b0d0:	68fa      	ldr	r2, [r7, #12]
 810b0d2:	4313      	orrs	r3, r2
 810b0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810b0d6:	697b      	ldr	r3, [r7, #20]
 810b0d8:	f023 0302 	bic.w	r3, r3, #2
 810b0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810b0de:	683b      	ldr	r3, [r7, #0]
 810b0e0:	689b      	ldr	r3, [r3, #8]
 810b0e2:	697a      	ldr	r2, [r7, #20]
 810b0e4:	4313      	orrs	r3, r2
 810b0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810b0e8:	687b      	ldr	r3, [r7, #4]
 810b0ea:	4a2c      	ldr	r2, [pc, #176]	@ (810b19c <TIM_OC1_SetConfig+0x10c>)
 810b0ec:	4293      	cmp	r3, r2
 810b0ee:	d00f      	beq.n	810b110 <TIM_OC1_SetConfig+0x80>
 810b0f0:	687b      	ldr	r3, [r7, #4]
 810b0f2:	4a2b      	ldr	r2, [pc, #172]	@ (810b1a0 <TIM_OC1_SetConfig+0x110>)
 810b0f4:	4293      	cmp	r3, r2
 810b0f6:	d00b      	beq.n	810b110 <TIM_OC1_SetConfig+0x80>
 810b0f8:	687b      	ldr	r3, [r7, #4]
 810b0fa:	4a2a      	ldr	r2, [pc, #168]	@ (810b1a4 <TIM_OC1_SetConfig+0x114>)
 810b0fc:	4293      	cmp	r3, r2
 810b0fe:	d007      	beq.n	810b110 <TIM_OC1_SetConfig+0x80>
 810b100:	687b      	ldr	r3, [r7, #4]
 810b102:	4a29      	ldr	r2, [pc, #164]	@ (810b1a8 <TIM_OC1_SetConfig+0x118>)
 810b104:	4293      	cmp	r3, r2
 810b106:	d003      	beq.n	810b110 <TIM_OC1_SetConfig+0x80>
 810b108:	687b      	ldr	r3, [r7, #4]
 810b10a:	4a28      	ldr	r2, [pc, #160]	@ (810b1ac <TIM_OC1_SetConfig+0x11c>)
 810b10c:	4293      	cmp	r3, r2
 810b10e:	d10c      	bne.n	810b12a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810b110:	697b      	ldr	r3, [r7, #20]
 810b112:	f023 0308 	bic.w	r3, r3, #8
 810b116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810b118:	683b      	ldr	r3, [r7, #0]
 810b11a:	68db      	ldr	r3, [r3, #12]
 810b11c:	697a      	ldr	r2, [r7, #20]
 810b11e:	4313      	orrs	r3, r2
 810b120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810b122:	697b      	ldr	r3, [r7, #20]
 810b124:	f023 0304 	bic.w	r3, r3, #4
 810b128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b12a:	687b      	ldr	r3, [r7, #4]
 810b12c:	4a1b      	ldr	r2, [pc, #108]	@ (810b19c <TIM_OC1_SetConfig+0x10c>)
 810b12e:	4293      	cmp	r3, r2
 810b130:	d00f      	beq.n	810b152 <TIM_OC1_SetConfig+0xc2>
 810b132:	687b      	ldr	r3, [r7, #4]
 810b134:	4a1a      	ldr	r2, [pc, #104]	@ (810b1a0 <TIM_OC1_SetConfig+0x110>)
 810b136:	4293      	cmp	r3, r2
 810b138:	d00b      	beq.n	810b152 <TIM_OC1_SetConfig+0xc2>
 810b13a:	687b      	ldr	r3, [r7, #4]
 810b13c:	4a19      	ldr	r2, [pc, #100]	@ (810b1a4 <TIM_OC1_SetConfig+0x114>)
 810b13e:	4293      	cmp	r3, r2
 810b140:	d007      	beq.n	810b152 <TIM_OC1_SetConfig+0xc2>
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	4a18      	ldr	r2, [pc, #96]	@ (810b1a8 <TIM_OC1_SetConfig+0x118>)
 810b146:	4293      	cmp	r3, r2
 810b148:	d003      	beq.n	810b152 <TIM_OC1_SetConfig+0xc2>
 810b14a:	687b      	ldr	r3, [r7, #4]
 810b14c:	4a17      	ldr	r2, [pc, #92]	@ (810b1ac <TIM_OC1_SetConfig+0x11c>)
 810b14e:	4293      	cmp	r3, r2
 810b150:	d111      	bne.n	810b176 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810b152:	693b      	ldr	r3, [r7, #16]
 810b154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810b15a:	693b      	ldr	r3, [r7, #16]
 810b15c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810b162:	683b      	ldr	r3, [r7, #0]
 810b164:	695b      	ldr	r3, [r3, #20]
 810b166:	693a      	ldr	r2, [r7, #16]
 810b168:	4313      	orrs	r3, r2
 810b16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810b16c:	683b      	ldr	r3, [r7, #0]
 810b16e:	699b      	ldr	r3, [r3, #24]
 810b170:	693a      	ldr	r2, [r7, #16]
 810b172:	4313      	orrs	r3, r2
 810b174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b176:	687b      	ldr	r3, [r7, #4]
 810b178:	693a      	ldr	r2, [r7, #16]
 810b17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	68fa      	ldr	r2, [r7, #12]
 810b180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810b182:	683b      	ldr	r3, [r7, #0]
 810b184:	685a      	ldr	r2, [r3, #4]
 810b186:	687b      	ldr	r3, [r7, #4]
 810b188:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b18a:	687b      	ldr	r3, [r7, #4]
 810b18c:	697a      	ldr	r2, [r7, #20]
 810b18e:	621a      	str	r2, [r3, #32]
}
 810b190:	bf00      	nop
 810b192:	371c      	adds	r7, #28
 810b194:	46bd      	mov	sp, r7
 810b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b19a:	4770      	bx	lr
 810b19c:	40010000 	.word	0x40010000
 810b1a0:	40010400 	.word	0x40010400
 810b1a4:	40014000 	.word	0x40014000
 810b1a8:	40014400 	.word	0x40014400
 810b1ac:	40014800 	.word	0x40014800

0810b1b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b1b0:	b480      	push	{r7}
 810b1b2:	b087      	sub	sp, #28
 810b1b4:	af00      	add	r7, sp, #0
 810b1b6:	6078      	str	r0, [r7, #4]
 810b1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b1ba:	687b      	ldr	r3, [r7, #4]
 810b1bc:	6a1b      	ldr	r3, [r3, #32]
 810b1be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b1c0:	687b      	ldr	r3, [r7, #4]
 810b1c2:	6a1b      	ldr	r3, [r3, #32]
 810b1c4:	f023 0210 	bic.w	r2, r3, #16
 810b1c8:	687b      	ldr	r3, [r7, #4]
 810b1ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b1cc:	687b      	ldr	r3, [r7, #4]
 810b1ce:	685b      	ldr	r3, [r3, #4]
 810b1d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b1d2:	687b      	ldr	r3, [r7, #4]
 810b1d4:	699b      	ldr	r3, [r3, #24]
 810b1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810b1d8:	68fb      	ldr	r3, [r7, #12]
 810b1da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b1de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810b1e4:	68fb      	ldr	r3, [r7, #12]
 810b1e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b1ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b1ec:	683b      	ldr	r3, [r7, #0]
 810b1ee:	681b      	ldr	r3, [r3, #0]
 810b1f0:	021b      	lsls	r3, r3, #8
 810b1f2:	68fa      	ldr	r2, [r7, #12]
 810b1f4:	4313      	orrs	r3, r2
 810b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810b1f8:	697b      	ldr	r3, [r7, #20]
 810b1fa:	f023 0320 	bic.w	r3, r3, #32
 810b1fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810b200:	683b      	ldr	r3, [r7, #0]
 810b202:	689b      	ldr	r3, [r3, #8]
 810b204:	011b      	lsls	r3, r3, #4
 810b206:	697a      	ldr	r2, [r7, #20]
 810b208:	4313      	orrs	r3, r2
 810b20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810b20c:	687b      	ldr	r3, [r7, #4]
 810b20e:	4a28      	ldr	r2, [pc, #160]	@ (810b2b0 <TIM_OC2_SetConfig+0x100>)
 810b210:	4293      	cmp	r3, r2
 810b212:	d003      	beq.n	810b21c <TIM_OC2_SetConfig+0x6c>
 810b214:	687b      	ldr	r3, [r7, #4]
 810b216:	4a27      	ldr	r2, [pc, #156]	@ (810b2b4 <TIM_OC2_SetConfig+0x104>)
 810b218:	4293      	cmp	r3, r2
 810b21a:	d10d      	bne.n	810b238 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810b21c:	697b      	ldr	r3, [r7, #20]
 810b21e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810b224:	683b      	ldr	r3, [r7, #0]
 810b226:	68db      	ldr	r3, [r3, #12]
 810b228:	011b      	lsls	r3, r3, #4
 810b22a:	697a      	ldr	r2, [r7, #20]
 810b22c:	4313      	orrs	r3, r2
 810b22e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810b230:	697b      	ldr	r3, [r7, #20]
 810b232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b238:	687b      	ldr	r3, [r7, #4]
 810b23a:	4a1d      	ldr	r2, [pc, #116]	@ (810b2b0 <TIM_OC2_SetConfig+0x100>)
 810b23c:	4293      	cmp	r3, r2
 810b23e:	d00f      	beq.n	810b260 <TIM_OC2_SetConfig+0xb0>
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	4a1c      	ldr	r2, [pc, #112]	@ (810b2b4 <TIM_OC2_SetConfig+0x104>)
 810b244:	4293      	cmp	r3, r2
 810b246:	d00b      	beq.n	810b260 <TIM_OC2_SetConfig+0xb0>
 810b248:	687b      	ldr	r3, [r7, #4]
 810b24a:	4a1b      	ldr	r2, [pc, #108]	@ (810b2b8 <TIM_OC2_SetConfig+0x108>)
 810b24c:	4293      	cmp	r3, r2
 810b24e:	d007      	beq.n	810b260 <TIM_OC2_SetConfig+0xb0>
 810b250:	687b      	ldr	r3, [r7, #4]
 810b252:	4a1a      	ldr	r2, [pc, #104]	@ (810b2bc <TIM_OC2_SetConfig+0x10c>)
 810b254:	4293      	cmp	r3, r2
 810b256:	d003      	beq.n	810b260 <TIM_OC2_SetConfig+0xb0>
 810b258:	687b      	ldr	r3, [r7, #4]
 810b25a:	4a19      	ldr	r2, [pc, #100]	@ (810b2c0 <TIM_OC2_SetConfig+0x110>)
 810b25c:	4293      	cmp	r3, r2
 810b25e:	d113      	bne.n	810b288 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810b260:	693b      	ldr	r3, [r7, #16]
 810b262:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810b266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810b268:	693b      	ldr	r3, [r7, #16]
 810b26a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810b26e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810b270:	683b      	ldr	r3, [r7, #0]
 810b272:	695b      	ldr	r3, [r3, #20]
 810b274:	009b      	lsls	r3, r3, #2
 810b276:	693a      	ldr	r2, [r7, #16]
 810b278:	4313      	orrs	r3, r2
 810b27a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810b27c:	683b      	ldr	r3, [r7, #0]
 810b27e:	699b      	ldr	r3, [r3, #24]
 810b280:	009b      	lsls	r3, r3, #2
 810b282:	693a      	ldr	r2, [r7, #16]
 810b284:	4313      	orrs	r3, r2
 810b286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b288:	687b      	ldr	r3, [r7, #4]
 810b28a:	693a      	ldr	r2, [r7, #16]
 810b28c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b28e:	687b      	ldr	r3, [r7, #4]
 810b290:	68fa      	ldr	r2, [r7, #12]
 810b292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810b294:	683b      	ldr	r3, [r7, #0]
 810b296:	685a      	ldr	r2, [r3, #4]
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b29c:	687b      	ldr	r3, [r7, #4]
 810b29e:	697a      	ldr	r2, [r7, #20]
 810b2a0:	621a      	str	r2, [r3, #32]
}
 810b2a2:	bf00      	nop
 810b2a4:	371c      	adds	r7, #28
 810b2a6:	46bd      	mov	sp, r7
 810b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2ac:	4770      	bx	lr
 810b2ae:	bf00      	nop
 810b2b0:	40010000 	.word	0x40010000
 810b2b4:	40010400 	.word	0x40010400
 810b2b8:	40014000 	.word	0x40014000
 810b2bc:	40014400 	.word	0x40014400
 810b2c0:	40014800 	.word	0x40014800

0810b2c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b2c4:	b480      	push	{r7}
 810b2c6:	b087      	sub	sp, #28
 810b2c8:	af00      	add	r7, sp, #0
 810b2ca:	6078      	str	r0, [r7, #4]
 810b2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b2ce:	687b      	ldr	r3, [r7, #4]
 810b2d0:	6a1b      	ldr	r3, [r3, #32]
 810b2d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b2d4:	687b      	ldr	r3, [r7, #4]
 810b2d6:	6a1b      	ldr	r3, [r3, #32]
 810b2d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810b2dc:	687b      	ldr	r3, [r7, #4]
 810b2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b2e0:	687b      	ldr	r3, [r7, #4]
 810b2e2:	685b      	ldr	r3, [r3, #4]
 810b2e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b2e6:	687b      	ldr	r3, [r7, #4]
 810b2e8:	69db      	ldr	r3, [r3, #28]
 810b2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810b2ec:	68fb      	ldr	r3, [r7, #12]
 810b2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810b2f8:	68fb      	ldr	r3, [r7, #12]
 810b2fa:	f023 0303 	bic.w	r3, r3, #3
 810b2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b300:	683b      	ldr	r3, [r7, #0]
 810b302:	681b      	ldr	r3, [r3, #0]
 810b304:	68fa      	ldr	r2, [r7, #12]
 810b306:	4313      	orrs	r3, r2
 810b308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810b30a:	697b      	ldr	r3, [r7, #20]
 810b30c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810b312:	683b      	ldr	r3, [r7, #0]
 810b314:	689b      	ldr	r3, [r3, #8]
 810b316:	021b      	lsls	r3, r3, #8
 810b318:	697a      	ldr	r2, [r7, #20]
 810b31a:	4313      	orrs	r3, r2
 810b31c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810b31e:	687b      	ldr	r3, [r7, #4]
 810b320:	4a27      	ldr	r2, [pc, #156]	@ (810b3c0 <TIM_OC3_SetConfig+0xfc>)
 810b322:	4293      	cmp	r3, r2
 810b324:	d003      	beq.n	810b32e <TIM_OC3_SetConfig+0x6a>
 810b326:	687b      	ldr	r3, [r7, #4]
 810b328:	4a26      	ldr	r2, [pc, #152]	@ (810b3c4 <TIM_OC3_SetConfig+0x100>)
 810b32a:	4293      	cmp	r3, r2
 810b32c:	d10d      	bne.n	810b34a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810b32e:	697b      	ldr	r3, [r7, #20]
 810b330:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810b334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810b336:	683b      	ldr	r3, [r7, #0]
 810b338:	68db      	ldr	r3, [r3, #12]
 810b33a:	021b      	lsls	r3, r3, #8
 810b33c:	697a      	ldr	r2, [r7, #20]
 810b33e:	4313      	orrs	r3, r2
 810b340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810b342:	697b      	ldr	r3, [r7, #20]
 810b344:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810b348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b34a:	687b      	ldr	r3, [r7, #4]
 810b34c:	4a1c      	ldr	r2, [pc, #112]	@ (810b3c0 <TIM_OC3_SetConfig+0xfc>)
 810b34e:	4293      	cmp	r3, r2
 810b350:	d00f      	beq.n	810b372 <TIM_OC3_SetConfig+0xae>
 810b352:	687b      	ldr	r3, [r7, #4]
 810b354:	4a1b      	ldr	r2, [pc, #108]	@ (810b3c4 <TIM_OC3_SetConfig+0x100>)
 810b356:	4293      	cmp	r3, r2
 810b358:	d00b      	beq.n	810b372 <TIM_OC3_SetConfig+0xae>
 810b35a:	687b      	ldr	r3, [r7, #4]
 810b35c:	4a1a      	ldr	r2, [pc, #104]	@ (810b3c8 <TIM_OC3_SetConfig+0x104>)
 810b35e:	4293      	cmp	r3, r2
 810b360:	d007      	beq.n	810b372 <TIM_OC3_SetConfig+0xae>
 810b362:	687b      	ldr	r3, [r7, #4]
 810b364:	4a19      	ldr	r2, [pc, #100]	@ (810b3cc <TIM_OC3_SetConfig+0x108>)
 810b366:	4293      	cmp	r3, r2
 810b368:	d003      	beq.n	810b372 <TIM_OC3_SetConfig+0xae>
 810b36a:	687b      	ldr	r3, [r7, #4]
 810b36c:	4a18      	ldr	r2, [pc, #96]	@ (810b3d0 <TIM_OC3_SetConfig+0x10c>)
 810b36e:	4293      	cmp	r3, r2
 810b370:	d113      	bne.n	810b39a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810b372:	693b      	ldr	r3, [r7, #16]
 810b374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810b378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810b37a:	693b      	ldr	r3, [r7, #16]
 810b37c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810b380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810b382:	683b      	ldr	r3, [r7, #0]
 810b384:	695b      	ldr	r3, [r3, #20]
 810b386:	011b      	lsls	r3, r3, #4
 810b388:	693a      	ldr	r2, [r7, #16]
 810b38a:	4313      	orrs	r3, r2
 810b38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810b38e:	683b      	ldr	r3, [r7, #0]
 810b390:	699b      	ldr	r3, [r3, #24]
 810b392:	011b      	lsls	r3, r3, #4
 810b394:	693a      	ldr	r2, [r7, #16]
 810b396:	4313      	orrs	r3, r2
 810b398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	693a      	ldr	r2, [r7, #16]
 810b39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b3a0:	687b      	ldr	r3, [r7, #4]
 810b3a2:	68fa      	ldr	r2, [r7, #12]
 810b3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810b3a6:	683b      	ldr	r3, [r7, #0]
 810b3a8:	685a      	ldr	r2, [r3, #4]
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	697a      	ldr	r2, [r7, #20]
 810b3b2:	621a      	str	r2, [r3, #32]
}
 810b3b4:	bf00      	nop
 810b3b6:	371c      	adds	r7, #28
 810b3b8:	46bd      	mov	sp, r7
 810b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3be:	4770      	bx	lr
 810b3c0:	40010000 	.word	0x40010000
 810b3c4:	40010400 	.word	0x40010400
 810b3c8:	40014000 	.word	0x40014000
 810b3cc:	40014400 	.word	0x40014400
 810b3d0:	40014800 	.word	0x40014800

0810b3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b3d4:	b480      	push	{r7}
 810b3d6:	b087      	sub	sp, #28
 810b3d8:	af00      	add	r7, sp, #0
 810b3da:	6078      	str	r0, [r7, #4]
 810b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b3de:	687b      	ldr	r3, [r7, #4]
 810b3e0:	6a1b      	ldr	r3, [r3, #32]
 810b3e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810b3e4:	687b      	ldr	r3, [r7, #4]
 810b3e6:	6a1b      	ldr	r3, [r3, #32]
 810b3e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b3f0:	687b      	ldr	r3, [r7, #4]
 810b3f2:	685b      	ldr	r3, [r3, #4]
 810b3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b3f6:	687b      	ldr	r3, [r7, #4]
 810b3f8:	69db      	ldr	r3, [r3, #28]
 810b3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810b3fc:	68fb      	ldr	r3, [r7, #12]
 810b3fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810b408:	68fb      	ldr	r3, [r7, #12]
 810b40a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b40e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b410:	683b      	ldr	r3, [r7, #0]
 810b412:	681b      	ldr	r3, [r3, #0]
 810b414:	021b      	lsls	r3, r3, #8
 810b416:	68fa      	ldr	r2, [r7, #12]
 810b418:	4313      	orrs	r3, r2
 810b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810b41c:	693b      	ldr	r3, [r7, #16]
 810b41e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810b422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810b424:	683b      	ldr	r3, [r7, #0]
 810b426:	689b      	ldr	r3, [r3, #8]
 810b428:	031b      	lsls	r3, r3, #12
 810b42a:	693a      	ldr	r2, [r7, #16]
 810b42c:	4313      	orrs	r3, r2
 810b42e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	4a18      	ldr	r2, [pc, #96]	@ (810b494 <TIM_OC4_SetConfig+0xc0>)
 810b434:	4293      	cmp	r3, r2
 810b436:	d00f      	beq.n	810b458 <TIM_OC4_SetConfig+0x84>
 810b438:	687b      	ldr	r3, [r7, #4]
 810b43a:	4a17      	ldr	r2, [pc, #92]	@ (810b498 <TIM_OC4_SetConfig+0xc4>)
 810b43c:	4293      	cmp	r3, r2
 810b43e:	d00b      	beq.n	810b458 <TIM_OC4_SetConfig+0x84>
 810b440:	687b      	ldr	r3, [r7, #4]
 810b442:	4a16      	ldr	r2, [pc, #88]	@ (810b49c <TIM_OC4_SetConfig+0xc8>)
 810b444:	4293      	cmp	r3, r2
 810b446:	d007      	beq.n	810b458 <TIM_OC4_SetConfig+0x84>
 810b448:	687b      	ldr	r3, [r7, #4]
 810b44a:	4a15      	ldr	r2, [pc, #84]	@ (810b4a0 <TIM_OC4_SetConfig+0xcc>)
 810b44c:	4293      	cmp	r3, r2
 810b44e:	d003      	beq.n	810b458 <TIM_OC4_SetConfig+0x84>
 810b450:	687b      	ldr	r3, [r7, #4]
 810b452:	4a14      	ldr	r2, [pc, #80]	@ (810b4a4 <TIM_OC4_SetConfig+0xd0>)
 810b454:	4293      	cmp	r3, r2
 810b456:	d109      	bne.n	810b46c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810b458:	697b      	ldr	r3, [r7, #20]
 810b45a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810b45e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810b460:	683b      	ldr	r3, [r7, #0]
 810b462:	695b      	ldr	r3, [r3, #20]
 810b464:	019b      	lsls	r3, r3, #6
 810b466:	697a      	ldr	r2, [r7, #20]
 810b468:	4313      	orrs	r3, r2
 810b46a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b46c:	687b      	ldr	r3, [r7, #4]
 810b46e:	697a      	ldr	r2, [r7, #20]
 810b470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b472:	687b      	ldr	r3, [r7, #4]
 810b474:	68fa      	ldr	r2, [r7, #12]
 810b476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810b478:	683b      	ldr	r3, [r7, #0]
 810b47a:	685a      	ldr	r2, [r3, #4]
 810b47c:	687b      	ldr	r3, [r7, #4]
 810b47e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b480:	687b      	ldr	r3, [r7, #4]
 810b482:	693a      	ldr	r2, [r7, #16]
 810b484:	621a      	str	r2, [r3, #32]
}
 810b486:	bf00      	nop
 810b488:	371c      	adds	r7, #28
 810b48a:	46bd      	mov	sp, r7
 810b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b490:	4770      	bx	lr
 810b492:	bf00      	nop
 810b494:	40010000 	.word	0x40010000
 810b498:	40010400 	.word	0x40010400
 810b49c:	40014000 	.word	0x40014000
 810b4a0:	40014400 	.word	0x40014400
 810b4a4:	40014800 	.word	0x40014800

0810b4a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810b4a8:	b480      	push	{r7}
 810b4aa:	b087      	sub	sp, #28
 810b4ac:	af00      	add	r7, sp, #0
 810b4ae:	6078      	str	r0, [r7, #4]
 810b4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b4b2:	687b      	ldr	r3, [r7, #4]
 810b4b4:	6a1b      	ldr	r3, [r3, #32]
 810b4b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810b4b8:	687b      	ldr	r3, [r7, #4]
 810b4ba:	6a1b      	ldr	r3, [r3, #32]
 810b4bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	685b      	ldr	r3, [r3, #4]
 810b4c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b4ca:	687b      	ldr	r3, [r7, #4]
 810b4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810b4d0:	68fb      	ldr	r3, [r7, #12]
 810b4d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b4dc:	683b      	ldr	r3, [r7, #0]
 810b4de:	681b      	ldr	r3, [r3, #0]
 810b4e0:	68fa      	ldr	r2, [r7, #12]
 810b4e2:	4313      	orrs	r3, r2
 810b4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810b4e6:	693b      	ldr	r3, [r7, #16]
 810b4e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810b4ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810b4ee:	683b      	ldr	r3, [r7, #0]
 810b4f0:	689b      	ldr	r3, [r3, #8]
 810b4f2:	041b      	lsls	r3, r3, #16
 810b4f4:	693a      	ldr	r2, [r7, #16]
 810b4f6:	4313      	orrs	r3, r2
 810b4f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b4fa:	687b      	ldr	r3, [r7, #4]
 810b4fc:	4a17      	ldr	r2, [pc, #92]	@ (810b55c <TIM_OC5_SetConfig+0xb4>)
 810b4fe:	4293      	cmp	r3, r2
 810b500:	d00f      	beq.n	810b522 <TIM_OC5_SetConfig+0x7a>
 810b502:	687b      	ldr	r3, [r7, #4]
 810b504:	4a16      	ldr	r2, [pc, #88]	@ (810b560 <TIM_OC5_SetConfig+0xb8>)
 810b506:	4293      	cmp	r3, r2
 810b508:	d00b      	beq.n	810b522 <TIM_OC5_SetConfig+0x7a>
 810b50a:	687b      	ldr	r3, [r7, #4]
 810b50c:	4a15      	ldr	r2, [pc, #84]	@ (810b564 <TIM_OC5_SetConfig+0xbc>)
 810b50e:	4293      	cmp	r3, r2
 810b510:	d007      	beq.n	810b522 <TIM_OC5_SetConfig+0x7a>
 810b512:	687b      	ldr	r3, [r7, #4]
 810b514:	4a14      	ldr	r2, [pc, #80]	@ (810b568 <TIM_OC5_SetConfig+0xc0>)
 810b516:	4293      	cmp	r3, r2
 810b518:	d003      	beq.n	810b522 <TIM_OC5_SetConfig+0x7a>
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	4a13      	ldr	r2, [pc, #76]	@ (810b56c <TIM_OC5_SetConfig+0xc4>)
 810b51e:	4293      	cmp	r3, r2
 810b520:	d109      	bne.n	810b536 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810b522:	697b      	ldr	r3, [r7, #20]
 810b524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810b52a:	683b      	ldr	r3, [r7, #0]
 810b52c:	695b      	ldr	r3, [r3, #20]
 810b52e:	021b      	lsls	r3, r3, #8
 810b530:	697a      	ldr	r2, [r7, #20]
 810b532:	4313      	orrs	r3, r2
 810b534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b536:	687b      	ldr	r3, [r7, #4]
 810b538:	697a      	ldr	r2, [r7, #20]
 810b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b53c:	687b      	ldr	r3, [r7, #4]
 810b53e:	68fa      	ldr	r2, [r7, #12]
 810b540:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810b542:	683b      	ldr	r3, [r7, #0]
 810b544:	685a      	ldr	r2, [r3, #4]
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b54a:	687b      	ldr	r3, [r7, #4]
 810b54c:	693a      	ldr	r2, [r7, #16]
 810b54e:	621a      	str	r2, [r3, #32]
}
 810b550:	bf00      	nop
 810b552:	371c      	adds	r7, #28
 810b554:	46bd      	mov	sp, r7
 810b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b55a:	4770      	bx	lr
 810b55c:	40010000 	.word	0x40010000
 810b560:	40010400 	.word	0x40010400
 810b564:	40014000 	.word	0x40014000
 810b568:	40014400 	.word	0x40014400
 810b56c:	40014800 	.word	0x40014800

0810b570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810b570:	b480      	push	{r7}
 810b572:	b087      	sub	sp, #28
 810b574:	af00      	add	r7, sp, #0
 810b576:	6078      	str	r0, [r7, #4]
 810b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b57a:	687b      	ldr	r3, [r7, #4]
 810b57c:	6a1b      	ldr	r3, [r3, #32]
 810b57e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810b580:	687b      	ldr	r3, [r7, #4]
 810b582:	6a1b      	ldr	r3, [r3, #32]
 810b584:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	685b      	ldr	r3, [r3, #4]
 810b590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b592:	687b      	ldr	r3, [r7, #4]
 810b594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810b598:	68fb      	ldr	r3, [r7, #12]
 810b59a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b59e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b5a4:	683b      	ldr	r3, [r7, #0]
 810b5a6:	681b      	ldr	r3, [r3, #0]
 810b5a8:	021b      	lsls	r3, r3, #8
 810b5aa:	68fa      	ldr	r2, [r7, #12]
 810b5ac:	4313      	orrs	r3, r2
 810b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810b5b0:	693b      	ldr	r3, [r7, #16]
 810b5b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810b5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810b5b8:	683b      	ldr	r3, [r7, #0]
 810b5ba:	689b      	ldr	r3, [r3, #8]
 810b5bc:	051b      	lsls	r3, r3, #20
 810b5be:	693a      	ldr	r2, [r7, #16]
 810b5c0:	4313      	orrs	r3, r2
 810b5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	4a18      	ldr	r2, [pc, #96]	@ (810b628 <TIM_OC6_SetConfig+0xb8>)
 810b5c8:	4293      	cmp	r3, r2
 810b5ca:	d00f      	beq.n	810b5ec <TIM_OC6_SetConfig+0x7c>
 810b5cc:	687b      	ldr	r3, [r7, #4]
 810b5ce:	4a17      	ldr	r2, [pc, #92]	@ (810b62c <TIM_OC6_SetConfig+0xbc>)
 810b5d0:	4293      	cmp	r3, r2
 810b5d2:	d00b      	beq.n	810b5ec <TIM_OC6_SetConfig+0x7c>
 810b5d4:	687b      	ldr	r3, [r7, #4]
 810b5d6:	4a16      	ldr	r2, [pc, #88]	@ (810b630 <TIM_OC6_SetConfig+0xc0>)
 810b5d8:	4293      	cmp	r3, r2
 810b5da:	d007      	beq.n	810b5ec <TIM_OC6_SetConfig+0x7c>
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	4a15      	ldr	r2, [pc, #84]	@ (810b634 <TIM_OC6_SetConfig+0xc4>)
 810b5e0:	4293      	cmp	r3, r2
 810b5e2:	d003      	beq.n	810b5ec <TIM_OC6_SetConfig+0x7c>
 810b5e4:	687b      	ldr	r3, [r7, #4]
 810b5e6:	4a14      	ldr	r2, [pc, #80]	@ (810b638 <TIM_OC6_SetConfig+0xc8>)
 810b5e8:	4293      	cmp	r3, r2
 810b5ea:	d109      	bne.n	810b600 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810b5ec:	697b      	ldr	r3, [r7, #20]
 810b5ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810b5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810b5f4:	683b      	ldr	r3, [r7, #0]
 810b5f6:	695b      	ldr	r3, [r3, #20]
 810b5f8:	029b      	lsls	r3, r3, #10
 810b5fa:	697a      	ldr	r2, [r7, #20]
 810b5fc:	4313      	orrs	r3, r2
 810b5fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b600:	687b      	ldr	r3, [r7, #4]
 810b602:	697a      	ldr	r2, [r7, #20]
 810b604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b606:	687b      	ldr	r3, [r7, #4]
 810b608:	68fa      	ldr	r2, [r7, #12]
 810b60a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810b60c:	683b      	ldr	r3, [r7, #0]
 810b60e:	685a      	ldr	r2, [r3, #4]
 810b610:	687b      	ldr	r3, [r7, #4]
 810b612:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	693a      	ldr	r2, [r7, #16]
 810b618:	621a      	str	r2, [r3, #32]
}
 810b61a:	bf00      	nop
 810b61c:	371c      	adds	r7, #28
 810b61e:	46bd      	mov	sp, r7
 810b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b624:	4770      	bx	lr
 810b626:	bf00      	nop
 810b628:	40010000 	.word	0x40010000
 810b62c:	40010400 	.word	0x40010400
 810b630:	40014000 	.word	0x40014000
 810b634:	40014400 	.word	0x40014400
 810b638:	40014800 	.word	0x40014800

0810b63c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810b63c:	b480      	push	{r7}
 810b63e:	b087      	sub	sp, #28
 810b640:	af00      	add	r7, sp, #0
 810b642:	60f8      	str	r0, [r7, #12]
 810b644:	60b9      	str	r1, [r7, #8]
 810b646:	607a      	str	r2, [r7, #4]
 810b648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810b64a:	68fb      	ldr	r3, [r7, #12]
 810b64c:	6a1b      	ldr	r3, [r3, #32]
 810b64e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b650:	68fb      	ldr	r3, [r7, #12]
 810b652:	6a1b      	ldr	r3, [r3, #32]
 810b654:	f023 0201 	bic.w	r2, r3, #1
 810b658:	68fb      	ldr	r3, [r7, #12]
 810b65a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810b65c:	68fb      	ldr	r3, [r7, #12]
 810b65e:	699b      	ldr	r3, [r3, #24]
 810b660:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810b662:	68fb      	ldr	r3, [r7, #12]
 810b664:	4a28      	ldr	r2, [pc, #160]	@ (810b708 <TIM_TI1_SetConfig+0xcc>)
 810b666:	4293      	cmp	r3, r2
 810b668:	d01b      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b66a:	68fb      	ldr	r3, [r7, #12]
 810b66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b670:	d017      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b672:	68fb      	ldr	r3, [r7, #12]
 810b674:	4a25      	ldr	r2, [pc, #148]	@ (810b70c <TIM_TI1_SetConfig+0xd0>)
 810b676:	4293      	cmp	r3, r2
 810b678:	d013      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b67a:	68fb      	ldr	r3, [r7, #12]
 810b67c:	4a24      	ldr	r2, [pc, #144]	@ (810b710 <TIM_TI1_SetConfig+0xd4>)
 810b67e:	4293      	cmp	r3, r2
 810b680:	d00f      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b682:	68fb      	ldr	r3, [r7, #12]
 810b684:	4a23      	ldr	r2, [pc, #140]	@ (810b714 <TIM_TI1_SetConfig+0xd8>)
 810b686:	4293      	cmp	r3, r2
 810b688:	d00b      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b68a:	68fb      	ldr	r3, [r7, #12]
 810b68c:	4a22      	ldr	r2, [pc, #136]	@ (810b718 <TIM_TI1_SetConfig+0xdc>)
 810b68e:	4293      	cmp	r3, r2
 810b690:	d007      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b692:	68fb      	ldr	r3, [r7, #12]
 810b694:	4a21      	ldr	r2, [pc, #132]	@ (810b71c <TIM_TI1_SetConfig+0xe0>)
 810b696:	4293      	cmp	r3, r2
 810b698:	d003      	beq.n	810b6a2 <TIM_TI1_SetConfig+0x66>
 810b69a:	68fb      	ldr	r3, [r7, #12]
 810b69c:	4a20      	ldr	r2, [pc, #128]	@ (810b720 <TIM_TI1_SetConfig+0xe4>)
 810b69e:	4293      	cmp	r3, r2
 810b6a0:	d101      	bne.n	810b6a6 <TIM_TI1_SetConfig+0x6a>
 810b6a2:	2301      	movs	r3, #1
 810b6a4:	e000      	b.n	810b6a8 <TIM_TI1_SetConfig+0x6c>
 810b6a6:	2300      	movs	r3, #0
 810b6a8:	2b00      	cmp	r3, #0
 810b6aa:	d008      	beq.n	810b6be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810b6ac:	697b      	ldr	r3, [r7, #20]
 810b6ae:	f023 0303 	bic.w	r3, r3, #3
 810b6b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810b6b4:	697a      	ldr	r2, [r7, #20]
 810b6b6:	687b      	ldr	r3, [r7, #4]
 810b6b8:	4313      	orrs	r3, r2
 810b6ba:	617b      	str	r3, [r7, #20]
 810b6bc:	e003      	b.n	810b6c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810b6be:	697b      	ldr	r3, [r7, #20]
 810b6c0:	f043 0301 	orr.w	r3, r3, #1
 810b6c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810b6c6:	697b      	ldr	r3, [r7, #20]
 810b6c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810b6cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810b6ce:	683b      	ldr	r3, [r7, #0]
 810b6d0:	011b      	lsls	r3, r3, #4
 810b6d2:	b2db      	uxtb	r3, r3
 810b6d4:	697a      	ldr	r2, [r7, #20]
 810b6d6:	4313      	orrs	r3, r2
 810b6d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810b6da:	693b      	ldr	r3, [r7, #16]
 810b6dc:	f023 030a 	bic.w	r3, r3, #10
 810b6e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810b6e2:	68bb      	ldr	r3, [r7, #8]
 810b6e4:	f003 030a 	and.w	r3, r3, #10
 810b6e8:	693a      	ldr	r2, [r7, #16]
 810b6ea:	4313      	orrs	r3, r2
 810b6ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810b6ee:	68fb      	ldr	r3, [r7, #12]
 810b6f0:	697a      	ldr	r2, [r7, #20]
 810b6f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810b6f4:	68fb      	ldr	r3, [r7, #12]
 810b6f6:	693a      	ldr	r2, [r7, #16]
 810b6f8:	621a      	str	r2, [r3, #32]
}
 810b6fa:	bf00      	nop
 810b6fc:	371c      	adds	r7, #28
 810b6fe:	46bd      	mov	sp, r7
 810b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b704:	4770      	bx	lr
 810b706:	bf00      	nop
 810b708:	40010000 	.word	0x40010000
 810b70c:	40000400 	.word	0x40000400
 810b710:	40000800 	.word	0x40000800
 810b714:	40000c00 	.word	0x40000c00
 810b718:	40010400 	.word	0x40010400
 810b71c:	40001800 	.word	0x40001800
 810b720:	40014000 	.word	0x40014000

0810b724 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b724:	b480      	push	{r7}
 810b726:	b087      	sub	sp, #28
 810b728:	af00      	add	r7, sp, #0
 810b72a:	60f8      	str	r0, [r7, #12]
 810b72c:	60b9      	str	r1, [r7, #8]
 810b72e:	607a      	str	r2, [r7, #4]
 810b730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810b732:	68fb      	ldr	r3, [r7, #12]
 810b734:	6a1b      	ldr	r3, [r3, #32]
 810b736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b738:	68fb      	ldr	r3, [r7, #12]
 810b73a:	6a1b      	ldr	r3, [r3, #32]
 810b73c:	f023 0210 	bic.w	r2, r3, #16
 810b740:	68fb      	ldr	r3, [r7, #12]
 810b742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810b744:	68fb      	ldr	r3, [r7, #12]
 810b746:	699b      	ldr	r3, [r3, #24]
 810b748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810b74a:	693b      	ldr	r3, [r7, #16]
 810b74c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810b752:	687b      	ldr	r3, [r7, #4]
 810b754:	021b      	lsls	r3, r3, #8
 810b756:	693a      	ldr	r2, [r7, #16]
 810b758:	4313      	orrs	r3, r2
 810b75a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810b75c:	693b      	ldr	r3, [r7, #16]
 810b75e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810b764:	683b      	ldr	r3, [r7, #0]
 810b766:	031b      	lsls	r3, r3, #12
 810b768:	b29b      	uxth	r3, r3
 810b76a:	693a      	ldr	r2, [r7, #16]
 810b76c:	4313      	orrs	r3, r2
 810b76e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810b770:	697b      	ldr	r3, [r7, #20]
 810b772:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810b776:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810b778:	68bb      	ldr	r3, [r7, #8]
 810b77a:	011b      	lsls	r3, r3, #4
 810b77c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 810b780:	697a      	ldr	r2, [r7, #20]
 810b782:	4313      	orrs	r3, r2
 810b784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810b786:	68fb      	ldr	r3, [r7, #12]
 810b788:	693a      	ldr	r2, [r7, #16]
 810b78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810b78c:	68fb      	ldr	r3, [r7, #12]
 810b78e:	697a      	ldr	r2, [r7, #20]
 810b790:	621a      	str	r2, [r3, #32]
}
 810b792:	bf00      	nop
 810b794:	371c      	adds	r7, #28
 810b796:	46bd      	mov	sp, r7
 810b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b79c:	4770      	bx	lr

0810b79e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b79e:	b480      	push	{r7}
 810b7a0:	b087      	sub	sp, #28
 810b7a2:	af00      	add	r7, sp, #0
 810b7a4:	60f8      	str	r0, [r7, #12]
 810b7a6:	60b9      	str	r1, [r7, #8]
 810b7a8:	607a      	str	r2, [r7, #4]
 810b7aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 810b7ac:	68fb      	ldr	r3, [r7, #12]
 810b7ae:	6a1b      	ldr	r3, [r3, #32]
 810b7b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b7b2:	68fb      	ldr	r3, [r7, #12]
 810b7b4:	6a1b      	ldr	r3, [r3, #32]
 810b7b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810b7ba:	68fb      	ldr	r3, [r7, #12]
 810b7bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810b7be:	68fb      	ldr	r3, [r7, #12]
 810b7c0:	69db      	ldr	r3, [r3, #28]
 810b7c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810b7c4:	693b      	ldr	r3, [r7, #16]
 810b7c6:	f023 0303 	bic.w	r3, r3, #3
 810b7ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 810b7cc:	693a      	ldr	r2, [r7, #16]
 810b7ce:	687b      	ldr	r3, [r7, #4]
 810b7d0:	4313      	orrs	r3, r2
 810b7d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810b7d4:	693b      	ldr	r3, [r7, #16]
 810b7d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810b7da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810b7dc:	683b      	ldr	r3, [r7, #0]
 810b7de:	011b      	lsls	r3, r3, #4
 810b7e0:	b2db      	uxtb	r3, r3
 810b7e2:	693a      	ldr	r2, [r7, #16]
 810b7e4:	4313      	orrs	r3, r2
 810b7e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810b7e8:	697b      	ldr	r3, [r7, #20]
 810b7ea:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 810b7ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810b7f0:	68bb      	ldr	r3, [r7, #8]
 810b7f2:	021b      	lsls	r3, r3, #8
 810b7f4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 810b7f8:	697a      	ldr	r2, [r7, #20]
 810b7fa:	4313      	orrs	r3, r2
 810b7fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810b7fe:	68fb      	ldr	r3, [r7, #12]
 810b800:	693a      	ldr	r2, [r7, #16]
 810b802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810b804:	68fb      	ldr	r3, [r7, #12]
 810b806:	697a      	ldr	r2, [r7, #20]
 810b808:	621a      	str	r2, [r3, #32]
}
 810b80a:	bf00      	nop
 810b80c:	371c      	adds	r7, #28
 810b80e:	46bd      	mov	sp, r7
 810b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b814:	4770      	bx	lr

0810b816 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b816:	b480      	push	{r7}
 810b818:	b087      	sub	sp, #28
 810b81a:	af00      	add	r7, sp, #0
 810b81c:	60f8      	str	r0, [r7, #12]
 810b81e:	60b9      	str	r1, [r7, #8]
 810b820:	607a      	str	r2, [r7, #4]
 810b822:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 810b824:	68fb      	ldr	r3, [r7, #12]
 810b826:	6a1b      	ldr	r3, [r3, #32]
 810b828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810b82a:	68fb      	ldr	r3, [r7, #12]
 810b82c:	6a1b      	ldr	r3, [r3, #32]
 810b82e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810b832:	68fb      	ldr	r3, [r7, #12]
 810b834:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810b836:	68fb      	ldr	r3, [r7, #12]
 810b838:	69db      	ldr	r3, [r3, #28]
 810b83a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810b83c:	693b      	ldr	r3, [r7, #16]
 810b83e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b842:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810b844:	687b      	ldr	r3, [r7, #4]
 810b846:	021b      	lsls	r3, r3, #8
 810b848:	693a      	ldr	r2, [r7, #16]
 810b84a:	4313      	orrs	r3, r2
 810b84c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810b84e:	693b      	ldr	r3, [r7, #16]
 810b850:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b854:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810b856:	683b      	ldr	r3, [r7, #0]
 810b858:	031b      	lsls	r3, r3, #12
 810b85a:	b29b      	uxth	r3, r3
 810b85c:	693a      	ldr	r2, [r7, #16]
 810b85e:	4313      	orrs	r3, r2
 810b860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810b862:	697b      	ldr	r3, [r7, #20]
 810b864:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 810b868:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810b86a:	68bb      	ldr	r3, [r7, #8]
 810b86c:	031b      	lsls	r3, r3, #12
 810b86e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 810b872:	697a      	ldr	r2, [r7, #20]
 810b874:	4313      	orrs	r3, r2
 810b876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810b878:	68fb      	ldr	r3, [r7, #12]
 810b87a:	693a      	ldr	r2, [r7, #16]
 810b87c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810b87e:	68fb      	ldr	r3, [r7, #12]
 810b880:	697a      	ldr	r2, [r7, #20]
 810b882:	621a      	str	r2, [r3, #32]
}
 810b884:	bf00      	nop
 810b886:	371c      	adds	r7, #28
 810b888:	46bd      	mov	sp, r7
 810b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b88e:	4770      	bx	lr

0810b890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810b890:	b480      	push	{r7}
 810b892:	b085      	sub	sp, #20
 810b894:	af00      	add	r7, sp, #0
 810b896:	6078      	str	r0, [r7, #4]
 810b898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810b89a:	687b      	ldr	r3, [r7, #4]
 810b89c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b8a0:	2b01      	cmp	r3, #1
 810b8a2:	d101      	bne.n	810b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810b8a4:	2302      	movs	r3, #2
 810b8a6:	e06d      	b.n	810b984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810b8a8:	687b      	ldr	r3, [r7, #4]
 810b8aa:	2201      	movs	r2, #1
 810b8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b8b0:	687b      	ldr	r3, [r7, #4]
 810b8b2:	2202      	movs	r2, #2
 810b8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810b8b8:	687b      	ldr	r3, [r7, #4]
 810b8ba:	681b      	ldr	r3, [r3, #0]
 810b8bc:	685b      	ldr	r3, [r3, #4]
 810b8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810b8c0:	687b      	ldr	r3, [r7, #4]
 810b8c2:	681b      	ldr	r3, [r3, #0]
 810b8c4:	689b      	ldr	r3, [r3, #8]
 810b8c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810b8c8:	687b      	ldr	r3, [r7, #4]
 810b8ca:	681b      	ldr	r3, [r3, #0]
 810b8cc:	4a30      	ldr	r2, [pc, #192]	@ (810b990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810b8ce:	4293      	cmp	r3, r2
 810b8d0:	d004      	beq.n	810b8dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810b8d2:	687b      	ldr	r3, [r7, #4]
 810b8d4:	681b      	ldr	r3, [r3, #0]
 810b8d6:	4a2f      	ldr	r2, [pc, #188]	@ (810b994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b8d8:	4293      	cmp	r3, r2
 810b8da:	d108      	bne.n	810b8ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810b8dc:	68fb      	ldr	r3, [r7, #12]
 810b8de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810b8e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810b8e4:	683b      	ldr	r3, [r7, #0]
 810b8e6:	685b      	ldr	r3, [r3, #4]
 810b8e8:	68fa      	ldr	r2, [r7, #12]
 810b8ea:	4313      	orrs	r3, r2
 810b8ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810b8ee:	68fb      	ldr	r3, [r7, #12]
 810b8f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b8f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810b8f6:	683b      	ldr	r3, [r7, #0]
 810b8f8:	681b      	ldr	r3, [r3, #0]
 810b8fa:	68fa      	ldr	r2, [r7, #12]
 810b8fc:	4313      	orrs	r3, r2
 810b8fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810b900:	687b      	ldr	r3, [r7, #4]
 810b902:	681b      	ldr	r3, [r3, #0]
 810b904:	68fa      	ldr	r2, [r7, #12]
 810b906:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810b908:	687b      	ldr	r3, [r7, #4]
 810b90a:	681b      	ldr	r3, [r3, #0]
 810b90c:	4a20      	ldr	r2, [pc, #128]	@ (810b990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810b90e:	4293      	cmp	r3, r2
 810b910:	d022      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b912:	687b      	ldr	r3, [r7, #4]
 810b914:	681b      	ldr	r3, [r3, #0]
 810b916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b91a:	d01d      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b91c:	687b      	ldr	r3, [r7, #4]
 810b91e:	681b      	ldr	r3, [r3, #0]
 810b920:	4a1d      	ldr	r2, [pc, #116]	@ (810b998 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810b922:	4293      	cmp	r3, r2
 810b924:	d018      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	681b      	ldr	r3, [r3, #0]
 810b92a:	4a1c      	ldr	r2, [pc, #112]	@ (810b99c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810b92c:	4293      	cmp	r3, r2
 810b92e:	d013      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b930:	687b      	ldr	r3, [r7, #4]
 810b932:	681b      	ldr	r3, [r3, #0]
 810b934:	4a1a      	ldr	r2, [pc, #104]	@ (810b9a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810b936:	4293      	cmp	r3, r2
 810b938:	d00e      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	681b      	ldr	r3, [r3, #0]
 810b93e:	4a15      	ldr	r2, [pc, #84]	@ (810b994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b940:	4293      	cmp	r3, r2
 810b942:	d009      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b944:	687b      	ldr	r3, [r7, #4]
 810b946:	681b      	ldr	r3, [r3, #0]
 810b948:	4a16      	ldr	r2, [pc, #88]	@ (810b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810b94a:	4293      	cmp	r3, r2
 810b94c:	d004      	beq.n	810b958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b94e:	687b      	ldr	r3, [r7, #4]
 810b950:	681b      	ldr	r3, [r3, #0]
 810b952:	4a15      	ldr	r2, [pc, #84]	@ (810b9a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810b954:	4293      	cmp	r3, r2
 810b956:	d10c      	bne.n	810b972 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810b958:	68bb      	ldr	r3, [r7, #8]
 810b95a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b95e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810b960:	683b      	ldr	r3, [r7, #0]
 810b962:	689b      	ldr	r3, [r3, #8]
 810b964:	68ba      	ldr	r2, [r7, #8]
 810b966:	4313      	orrs	r3, r2
 810b968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810b96a:	687b      	ldr	r3, [r7, #4]
 810b96c:	681b      	ldr	r3, [r3, #0]
 810b96e:	68ba      	ldr	r2, [r7, #8]
 810b970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810b972:	687b      	ldr	r3, [r7, #4]
 810b974:	2201      	movs	r2, #1
 810b976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810b97a:	687b      	ldr	r3, [r7, #4]
 810b97c:	2200      	movs	r2, #0
 810b97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810b982:	2300      	movs	r3, #0
}
 810b984:	4618      	mov	r0, r3
 810b986:	3714      	adds	r7, #20
 810b988:	46bd      	mov	sp, r7
 810b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b98e:	4770      	bx	lr
 810b990:	40010000 	.word	0x40010000
 810b994:	40010400 	.word	0x40010400
 810b998:	40000400 	.word	0x40000400
 810b99c:	40000800 	.word	0x40000800
 810b9a0:	40000c00 	.word	0x40000c00
 810b9a4:	40001800 	.word	0x40001800
 810b9a8:	40014000 	.word	0x40014000

0810b9ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810b9ac:	b480      	push	{r7}
 810b9ae:	b085      	sub	sp, #20
 810b9b0:	af00      	add	r7, sp, #0
 810b9b2:	6078      	str	r0, [r7, #4]
 810b9b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810b9b6:	2300      	movs	r3, #0
 810b9b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b9c0:	2b01      	cmp	r3, #1
 810b9c2:	d101      	bne.n	810b9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810b9c4:	2302      	movs	r3, #2
 810b9c6:	e065      	b.n	810ba94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	2201      	movs	r2, #1
 810b9cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810b9d0:	68fb      	ldr	r3, [r7, #12]
 810b9d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810b9d6:	683b      	ldr	r3, [r7, #0]
 810b9d8:	68db      	ldr	r3, [r3, #12]
 810b9da:	4313      	orrs	r3, r2
 810b9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810b9de:	68fb      	ldr	r3, [r7, #12]
 810b9e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810b9e4:	683b      	ldr	r3, [r7, #0]
 810b9e6:	689b      	ldr	r3, [r3, #8]
 810b9e8:	4313      	orrs	r3, r2
 810b9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810b9ec:	68fb      	ldr	r3, [r7, #12]
 810b9ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810b9f2:	683b      	ldr	r3, [r7, #0]
 810b9f4:	685b      	ldr	r3, [r3, #4]
 810b9f6:	4313      	orrs	r3, r2
 810b9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810b9fa:	68fb      	ldr	r3, [r7, #12]
 810b9fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810ba00:	683b      	ldr	r3, [r7, #0]
 810ba02:	681b      	ldr	r3, [r3, #0]
 810ba04:	4313      	orrs	r3, r2
 810ba06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810ba08:	68fb      	ldr	r3, [r7, #12]
 810ba0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810ba0e:	683b      	ldr	r3, [r7, #0]
 810ba10:	691b      	ldr	r3, [r3, #16]
 810ba12:	4313      	orrs	r3, r2
 810ba14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810ba16:	68fb      	ldr	r3, [r7, #12]
 810ba18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810ba1c:	683b      	ldr	r3, [r7, #0]
 810ba1e:	695b      	ldr	r3, [r3, #20]
 810ba20:	4313      	orrs	r3, r2
 810ba22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810ba24:	68fb      	ldr	r3, [r7, #12]
 810ba26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810ba2a:	683b      	ldr	r3, [r7, #0]
 810ba2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ba2e:	4313      	orrs	r3, r2
 810ba30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810ba32:	68fb      	ldr	r3, [r7, #12]
 810ba34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810ba38:	683b      	ldr	r3, [r7, #0]
 810ba3a:	699b      	ldr	r3, [r3, #24]
 810ba3c:	041b      	lsls	r3, r3, #16
 810ba3e:	4313      	orrs	r3, r2
 810ba40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810ba42:	687b      	ldr	r3, [r7, #4]
 810ba44:	681b      	ldr	r3, [r3, #0]
 810ba46:	4a16      	ldr	r2, [pc, #88]	@ (810baa0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810ba48:	4293      	cmp	r3, r2
 810ba4a:	d004      	beq.n	810ba56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	681b      	ldr	r3, [r3, #0]
 810ba50:	4a14      	ldr	r2, [pc, #80]	@ (810baa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810ba52:	4293      	cmp	r3, r2
 810ba54:	d115      	bne.n	810ba82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810ba56:	68fb      	ldr	r3, [r7, #12]
 810ba58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810ba5c:	683b      	ldr	r3, [r7, #0]
 810ba5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ba60:	051b      	lsls	r3, r3, #20
 810ba62:	4313      	orrs	r3, r2
 810ba64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810ba66:	68fb      	ldr	r3, [r7, #12]
 810ba68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810ba6c:	683b      	ldr	r3, [r7, #0]
 810ba6e:	69db      	ldr	r3, [r3, #28]
 810ba70:	4313      	orrs	r3, r2
 810ba72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810ba74:	68fb      	ldr	r3, [r7, #12]
 810ba76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810ba7a:	683b      	ldr	r3, [r7, #0]
 810ba7c:	6a1b      	ldr	r3, [r3, #32]
 810ba7e:	4313      	orrs	r3, r2
 810ba80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810ba82:	687b      	ldr	r3, [r7, #4]
 810ba84:	681b      	ldr	r3, [r3, #0]
 810ba86:	68fa      	ldr	r2, [r7, #12]
 810ba88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810ba8a:	687b      	ldr	r3, [r7, #4]
 810ba8c:	2200      	movs	r2, #0
 810ba8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810ba92:	2300      	movs	r3, #0
}
 810ba94:	4618      	mov	r0, r3
 810ba96:	3714      	adds	r7, #20
 810ba98:	46bd      	mov	sp, r7
 810ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba9e:	4770      	bx	lr
 810baa0:	40010000 	.word	0x40010000
 810baa4:	40010400 	.word	0x40010400

0810baa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810baa8:	b580      	push	{r7, lr}
 810baaa:	b082      	sub	sp, #8
 810baac:	af00      	add	r7, sp, #0
 810baae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	2b00      	cmp	r3, #0
 810bab4:	d101      	bne.n	810baba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810bab6:	2301      	movs	r3, #1
 810bab8:	e042      	b.n	810bb40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810baba:	687b      	ldr	r3, [r7, #4]
 810babc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810bac0:	2b00      	cmp	r3, #0
 810bac2:	d106      	bne.n	810bad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810bac4:	687b      	ldr	r3, [r7, #4]
 810bac6:	2200      	movs	r2, #0
 810bac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810bacc:	6878      	ldr	r0, [r7, #4]
 810bace:	f7f6 fabf 	bl	8102050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810bad2:	687b      	ldr	r3, [r7, #4]
 810bad4:	2224      	movs	r2, #36	@ 0x24
 810bad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810bada:	687b      	ldr	r3, [r7, #4]
 810badc:	681b      	ldr	r3, [r3, #0]
 810bade:	681a      	ldr	r2, [r3, #0]
 810bae0:	687b      	ldr	r3, [r7, #4]
 810bae2:	681b      	ldr	r3, [r3, #0]
 810bae4:	f022 0201 	bic.w	r2, r2, #1
 810bae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810baea:	687b      	ldr	r3, [r7, #4]
 810baec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810baee:	2b00      	cmp	r3, #0
 810baf0:	d002      	beq.n	810baf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810baf2:	6878      	ldr	r0, [r7, #4]
 810baf4:	f000 fe1e 	bl	810c734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810baf8:	6878      	ldr	r0, [r7, #4]
 810bafa:	f000 f8b3 	bl	810bc64 <UART_SetConfig>
 810bafe:	4603      	mov	r3, r0
 810bb00:	2b01      	cmp	r3, #1
 810bb02:	d101      	bne.n	810bb08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810bb04:	2301      	movs	r3, #1
 810bb06:	e01b      	b.n	810bb40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810bb08:	687b      	ldr	r3, [r7, #4]
 810bb0a:	681b      	ldr	r3, [r3, #0]
 810bb0c:	685a      	ldr	r2, [r3, #4]
 810bb0e:	687b      	ldr	r3, [r7, #4]
 810bb10:	681b      	ldr	r3, [r3, #0]
 810bb12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810bb16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810bb18:	687b      	ldr	r3, [r7, #4]
 810bb1a:	681b      	ldr	r3, [r3, #0]
 810bb1c:	689a      	ldr	r2, [r3, #8]
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	681b      	ldr	r3, [r3, #0]
 810bb22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810bb26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810bb28:	687b      	ldr	r3, [r7, #4]
 810bb2a:	681b      	ldr	r3, [r3, #0]
 810bb2c:	681a      	ldr	r2, [r3, #0]
 810bb2e:	687b      	ldr	r3, [r7, #4]
 810bb30:	681b      	ldr	r3, [r3, #0]
 810bb32:	f042 0201 	orr.w	r2, r2, #1
 810bb36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810bb38:	6878      	ldr	r0, [r7, #4]
 810bb3a:	f000 fe9d 	bl	810c878 <UART_CheckIdleState>
 810bb3e:	4603      	mov	r3, r0
}
 810bb40:	4618      	mov	r0, r3
 810bb42:	3708      	adds	r7, #8
 810bb44:	46bd      	mov	sp, r7
 810bb46:	bd80      	pop	{r7, pc}

0810bb48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810bb48:	b580      	push	{r7, lr}
 810bb4a:	b08a      	sub	sp, #40	@ 0x28
 810bb4c:	af02      	add	r7, sp, #8
 810bb4e:	60f8      	str	r0, [r7, #12]
 810bb50:	60b9      	str	r1, [r7, #8]
 810bb52:	603b      	str	r3, [r7, #0]
 810bb54:	4613      	mov	r3, r2
 810bb56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810bb58:	68fb      	ldr	r3, [r7, #12]
 810bb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810bb5e:	2b20      	cmp	r3, #32
 810bb60:	d17b      	bne.n	810bc5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810bb62:	68bb      	ldr	r3, [r7, #8]
 810bb64:	2b00      	cmp	r3, #0
 810bb66:	d002      	beq.n	810bb6e <HAL_UART_Transmit+0x26>
 810bb68:	88fb      	ldrh	r3, [r7, #6]
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	d101      	bne.n	810bb72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810bb6e:	2301      	movs	r3, #1
 810bb70:	e074      	b.n	810bc5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bb72:	68fb      	ldr	r3, [r7, #12]
 810bb74:	2200      	movs	r2, #0
 810bb76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810bb7a:	68fb      	ldr	r3, [r7, #12]
 810bb7c:	2221      	movs	r2, #33	@ 0x21
 810bb7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810bb82:	f7f6 ffc7 	bl	8102b14 <HAL_GetTick>
 810bb86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810bb88:	68fb      	ldr	r3, [r7, #12]
 810bb8a:	88fa      	ldrh	r2, [r7, #6]
 810bb8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810bb90:	68fb      	ldr	r3, [r7, #12]
 810bb92:	88fa      	ldrh	r2, [r7, #6]
 810bb94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810bb98:	68fb      	ldr	r3, [r7, #12]
 810bb9a:	689b      	ldr	r3, [r3, #8]
 810bb9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810bba0:	d108      	bne.n	810bbb4 <HAL_UART_Transmit+0x6c>
 810bba2:	68fb      	ldr	r3, [r7, #12]
 810bba4:	691b      	ldr	r3, [r3, #16]
 810bba6:	2b00      	cmp	r3, #0
 810bba8:	d104      	bne.n	810bbb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810bbaa:	2300      	movs	r3, #0
 810bbac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810bbae:	68bb      	ldr	r3, [r7, #8]
 810bbb0:	61bb      	str	r3, [r7, #24]
 810bbb2:	e003      	b.n	810bbbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810bbb4:	68bb      	ldr	r3, [r7, #8]
 810bbb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810bbb8:	2300      	movs	r3, #0
 810bbba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810bbbc:	e030      	b.n	810bc20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810bbbe:	683b      	ldr	r3, [r7, #0]
 810bbc0:	9300      	str	r3, [sp, #0]
 810bbc2:	697b      	ldr	r3, [r7, #20]
 810bbc4:	2200      	movs	r2, #0
 810bbc6:	2180      	movs	r1, #128	@ 0x80
 810bbc8:	68f8      	ldr	r0, [r7, #12]
 810bbca:	f000 feff 	bl	810c9cc <UART_WaitOnFlagUntilTimeout>
 810bbce:	4603      	mov	r3, r0
 810bbd0:	2b00      	cmp	r3, #0
 810bbd2:	d005      	beq.n	810bbe0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810bbd4:	68fb      	ldr	r3, [r7, #12]
 810bbd6:	2220      	movs	r2, #32
 810bbd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810bbdc:	2303      	movs	r3, #3
 810bbde:	e03d      	b.n	810bc5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810bbe0:	69fb      	ldr	r3, [r7, #28]
 810bbe2:	2b00      	cmp	r3, #0
 810bbe4:	d10b      	bne.n	810bbfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810bbe6:	69bb      	ldr	r3, [r7, #24]
 810bbe8:	881b      	ldrh	r3, [r3, #0]
 810bbea:	461a      	mov	r2, r3
 810bbec:	68fb      	ldr	r3, [r7, #12]
 810bbee:	681b      	ldr	r3, [r3, #0]
 810bbf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810bbf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810bbf6:	69bb      	ldr	r3, [r7, #24]
 810bbf8:	3302      	adds	r3, #2
 810bbfa:	61bb      	str	r3, [r7, #24]
 810bbfc:	e007      	b.n	810bc0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810bbfe:	69fb      	ldr	r3, [r7, #28]
 810bc00:	781a      	ldrb	r2, [r3, #0]
 810bc02:	68fb      	ldr	r3, [r7, #12]
 810bc04:	681b      	ldr	r3, [r3, #0]
 810bc06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810bc08:	69fb      	ldr	r3, [r7, #28]
 810bc0a:	3301      	adds	r3, #1
 810bc0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810bc0e:	68fb      	ldr	r3, [r7, #12]
 810bc10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810bc14:	b29b      	uxth	r3, r3
 810bc16:	3b01      	subs	r3, #1
 810bc18:	b29a      	uxth	r2, r3
 810bc1a:	68fb      	ldr	r3, [r7, #12]
 810bc1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810bc20:	68fb      	ldr	r3, [r7, #12]
 810bc22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810bc26:	b29b      	uxth	r3, r3
 810bc28:	2b00      	cmp	r3, #0
 810bc2a:	d1c8      	bne.n	810bbbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810bc2c:	683b      	ldr	r3, [r7, #0]
 810bc2e:	9300      	str	r3, [sp, #0]
 810bc30:	697b      	ldr	r3, [r7, #20]
 810bc32:	2200      	movs	r2, #0
 810bc34:	2140      	movs	r1, #64	@ 0x40
 810bc36:	68f8      	ldr	r0, [r7, #12]
 810bc38:	f000 fec8 	bl	810c9cc <UART_WaitOnFlagUntilTimeout>
 810bc3c:	4603      	mov	r3, r0
 810bc3e:	2b00      	cmp	r3, #0
 810bc40:	d005      	beq.n	810bc4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810bc42:	68fb      	ldr	r3, [r7, #12]
 810bc44:	2220      	movs	r2, #32
 810bc46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810bc4a:	2303      	movs	r3, #3
 810bc4c:	e006      	b.n	810bc5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810bc4e:	68fb      	ldr	r3, [r7, #12]
 810bc50:	2220      	movs	r2, #32
 810bc52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810bc56:	2300      	movs	r3, #0
 810bc58:	e000      	b.n	810bc5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810bc5a:	2302      	movs	r3, #2
  }
}
 810bc5c:	4618      	mov	r0, r3
 810bc5e:	3720      	adds	r7, #32
 810bc60:	46bd      	mov	sp, r7
 810bc62:	bd80      	pop	{r7, pc}

0810bc64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810bc64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810bc68:	b092      	sub	sp, #72	@ 0x48
 810bc6a:	af00      	add	r7, sp, #0
 810bc6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810bc6e:	2300      	movs	r3, #0
 810bc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810bc74:	697b      	ldr	r3, [r7, #20]
 810bc76:	689a      	ldr	r2, [r3, #8]
 810bc78:	697b      	ldr	r3, [r7, #20]
 810bc7a:	691b      	ldr	r3, [r3, #16]
 810bc7c:	431a      	orrs	r2, r3
 810bc7e:	697b      	ldr	r3, [r7, #20]
 810bc80:	695b      	ldr	r3, [r3, #20]
 810bc82:	431a      	orrs	r2, r3
 810bc84:	697b      	ldr	r3, [r7, #20]
 810bc86:	69db      	ldr	r3, [r3, #28]
 810bc88:	4313      	orrs	r3, r2
 810bc8a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810bc8c:	697b      	ldr	r3, [r7, #20]
 810bc8e:	681b      	ldr	r3, [r3, #0]
 810bc90:	681a      	ldr	r2, [r3, #0]
 810bc92:	4bbd      	ldr	r3, [pc, #756]	@ (810bf88 <UART_SetConfig+0x324>)
 810bc94:	4013      	ands	r3, r2
 810bc96:	697a      	ldr	r2, [r7, #20]
 810bc98:	6812      	ldr	r2, [r2, #0]
 810bc9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bc9c:	430b      	orrs	r3, r1
 810bc9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810bca0:	697b      	ldr	r3, [r7, #20]
 810bca2:	681b      	ldr	r3, [r3, #0]
 810bca4:	685b      	ldr	r3, [r3, #4]
 810bca6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810bcaa:	697b      	ldr	r3, [r7, #20]
 810bcac:	68da      	ldr	r2, [r3, #12]
 810bcae:	697b      	ldr	r3, [r7, #20]
 810bcb0:	681b      	ldr	r3, [r3, #0]
 810bcb2:	430a      	orrs	r2, r1
 810bcb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810bcb6:	697b      	ldr	r3, [r7, #20]
 810bcb8:	699b      	ldr	r3, [r3, #24]
 810bcba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810bcbc:	697b      	ldr	r3, [r7, #20]
 810bcbe:	681b      	ldr	r3, [r3, #0]
 810bcc0:	4ab2      	ldr	r2, [pc, #712]	@ (810bf8c <UART_SetConfig+0x328>)
 810bcc2:	4293      	cmp	r3, r2
 810bcc4:	d004      	beq.n	810bcd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810bcc6:	697b      	ldr	r3, [r7, #20]
 810bcc8:	6a1b      	ldr	r3, [r3, #32]
 810bcca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bccc:	4313      	orrs	r3, r2
 810bcce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810bcd0:	697b      	ldr	r3, [r7, #20]
 810bcd2:	681b      	ldr	r3, [r3, #0]
 810bcd4:	689b      	ldr	r3, [r3, #8]
 810bcd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810bcda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810bcde:	697a      	ldr	r2, [r7, #20]
 810bce0:	6812      	ldr	r2, [r2, #0]
 810bce2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bce4:	430b      	orrs	r3, r1
 810bce6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810bce8:	697b      	ldr	r3, [r7, #20]
 810bcea:	681b      	ldr	r3, [r3, #0]
 810bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bcee:	f023 010f 	bic.w	r1, r3, #15
 810bcf2:	697b      	ldr	r3, [r7, #20]
 810bcf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810bcf6:	697b      	ldr	r3, [r7, #20]
 810bcf8:	681b      	ldr	r3, [r3, #0]
 810bcfa:	430a      	orrs	r2, r1
 810bcfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810bcfe:	697b      	ldr	r3, [r7, #20]
 810bd00:	681b      	ldr	r3, [r3, #0]
 810bd02:	4aa3      	ldr	r2, [pc, #652]	@ (810bf90 <UART_SetConfig+0x32c>)
 810bd04:	4293      	cmp	r3, r2
 810bd06:	d177      	bne.n	810bdf8 <UART_SetConfig+0x194>
 810bd08:	4ba2      	ldr	r3, [pc, #648]	@ (810bf94 <UART_SetConfig+0x330>)
 810bd0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bd0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810bd10:	2b28      	cmp	r3, #40	@ 0x28
 810bd12:	d86d      	bhi.n	810bdf0 <UART_SetConfig+0x18c>
 810bd14:	a201      	add	r2, pc, #4	@ (adr r2, 810bd1c <UART_SetConfig+0xb8>)
 810bd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bd1a:	bf00      	nop
 810bd1c:	0810bdc1 	.word	0x0810bdc1
 810bd20:	0810bdf1 	.word	0x0810bdf1
 810bd24:	0810bdf1 	.word	0x0810bdf1
 810bd28:	0810bdf1 	.word	0x0810bdf1
 810bd2c:	0810bdf1 	.word	0x0810bdf1
 810bd30:	0810bdf1 	.word	0x0810bdf1
 810bd34:	0810bdf1 	.word	0x0810bdf1
 810bd38:	0810bdf1 	.word	0x0810bdf1
 810bd3c:	0810bdc9 	.word	0x0810bdc9
 810bd40:	0810bdf1 	.word	0x0810bdf1
 810bd44:	0810bdf1 	.word	0x0810bdf1
 810bd48:	0810bdf1 	.word	0x0810bdf1
 810bd4c:	0810bdf1 	.word	0x0810bdf1
 810bd50:	0810bdf1 	.word	0x0810bdf1
 810bd54:	0810bdf1 	.word	0x0810bdf1
 810bd58:	0810bdf1 	.word	0x0810bdf1
 810bd5c:	0810bdd1 	.word	0x0810bdd1
 810bd60:	0810bdf1 	.word	0x0810bdf1
 810bd64:	0810bdf1 	.word	0x0810bdf1
 810bd68:	0810bdf1 	.word	0x0810bdf1
 810bd6c:	0810bdf1 	.word	0x0810bdf1
 810bd70:	0810bdf1 	.word	0x0810bdf1
 810bd74:	0810bdf1 	.word	0x0810bdf1
 810bd78:	0810bdf1 	.word	0x0810bdf1
 810bd7c:	0810bdd9 	.word	0x0810bdd9
 810bd80:	0810bdf1 	.word	0x0810bdf1
 810bd84:	0810bdf1 	.word	0x0810bdf1
 810bd88:	0810bdf1 	.word	0x0810bdf1
 810bd8c:	0810bdf1 	.word	0x0810bdf1
 810bd90:	0810bdf1 	.word	0x0810bdf1
 810bd94:	0810bdf1 	.word	0x0810bdf1
 810bd98:	0810bdf1 	.word	0x0810bdf1
 810bd9c:	0810bde1 	.word	0x0810bde1
 810bda0:	0810bdf1 	.word	0x0810bdf1
 810bda4:	0810bdf1 	.word	0x0810bdf1
 810bda8:	0810bdf1 	.word	0x0810bdf1
 810bdac:	0810bdf1 	.word	0x0810bdf1
 810bdb0:	0810bdf1 	.word	0x0810bdf1
 810bdb4:	0810bdf1 	.word	0x0810bdf1
 810bdb8:	0810bdf1 	.word	0x0810bdf1
 810bdbc:	0810bde9 	.word	0x0810bde9
 810bdc0:	2301      	movs	r3, #1
 810bdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdc6:	e220      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bdc8:	2304      	movs	r3, #4
 810bdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdce:	e21c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bdd0:	2308      	movs	r3, #8
 810bdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdd6:	e218      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bdd8:	2310      	movs	r3, #16
 810bdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdde:	e214      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bde0:	2320      	movs	r3, #32
 810bde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bde6:	e210      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bde8:	2340      	movs	r3, #64	@ 0x40
 810bdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdee:	e20c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bdf0:	2380      	movs	r3, #128	@ 0x80
 810bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bdf6:	e208      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bdf8:	697b      	ldr	r3, [r7, #20]
 810bdfa:	681b      	ldr	r3, [r3, #0]
 810bdfc:	4a66      	ldr	r2, [pc, #408]	@ (810bf98 <UART_SetConfig+0x334>)
 810bdfe:	4293      	cmp	r3, r2
 810be00:	d130      	bne.n	810be64 <UART_SetConfig+0x200>
 810be02:	4b64      	ldr	r3, [pc, #400]	@ (810bf94 <UART_SetConfig+0x330>)
 810be04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810be06:	f003 0307 	and.w	r3, r3, #7
 810be0a:	2b05      	cmp	r3, #5
 810be0c:	d826      	bhi.n	810be5c <UART_SetConfig+0x1f8>
 810be0e:	a201      	add	r2, pc, #4	@ (adr r2, 810be14 <UART_SetConfig+0x1b0>)
 810be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be14:	0810be2d 	.word	0x0810be2d
 810be18:	0810be35 	.word	0x0810be35
 810be1c:	0810be3d 	.word	0x0810be3d
 810be20:	0810be45 	.word	0x0810be45
 810be24:	0810be4d 	.word	0x0810be4d
 810be28:	0810be55 	.word	0x0810be55
 810be2c:	2300      	movs	r3, #0
 810be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be32:	e1ea      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be34:	2304      	movs	r3, #4
 810be36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be3a:	e1e6      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be3c:	2308      	movs	r3, #8
 810be3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be42:	e1e2      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be44:	2310      	movs	r3, #16
 810be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be4a:	e1de      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be4c:	2320      	movs	r3, #32
 810be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be52:	e1da      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be54:	2340      	movs	r3, #64	@ 0x40
 810be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be5a:	e1d6      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be5c:	2380      	movs	r3, #128	@ 0x80
 810be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be62:	e1d2      	b.n	810c20a <UART_SetConfig+0x5a6>
 810be64:	697b      	ldr	r3, [r7, #20]
 810be66:	681b      	ldr	r3, [r3, #0]
 810be68:	4a4c      	ldr	r2, [pc, #304]	@ (810bf9c <UART_SetConfig+0x338>)
 810be6a:	4293      	cmp	r3, r2
 810be6c:	d130      	bne.n	810bed0 <UART_SetConfig+0x26c>
 810be6e:	4b49      	ldr	r3, [pc, #292]	@ (810bf94 <UART_SetConfig+0x330>)
 810be70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810be72:	f003 0307 	and.w	r3, r3, #7
 810be76:	2b05      	cmp	r3, #5
 810be78:	d826      	bhi.n	810bec8 <UART_SetConfig+0x264>
 810be7a:	a201      	add	r2, pc, #4	@ (adr r2, 810be80 <UART_SetConfig+0x21c>)
 810be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be80:	0810be99 	.word	0x0810be99
 810be84:	0810bea1 	.word	0x0810bea1
 810be88:	0810bea9 	.word	0x0810bea9
 810be8c:	0810beb1 	.word	0x0810beb1
 810be90:	0810beb9 	.word	0x0810beb9
 810be94:	0810bec1 	.word	0x0810bec1
 810be98:	2300      	movs	r3, #0
 810be9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810be9e:	e1b4      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bea0:	2304      	movs	r3, #4
 810bea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bea6:	e1b0      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bea8:	2308      	movs	r3, #8
 810beaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810beae:	e1ac      	b.n	810c20a <UART_SetConfig+0x5a6>
 810beb0:	2310      	movs	r3, #16
 810beb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810beb6:	e1a8      	b.n	810c20a <UART_SetConfig+0x5a6>
 810beb8:	2320      	movs	r3, #32
 810beba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bebe:	e1a4      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bec0:	2340      	movs	r3, #64	@ 0x40
 810bec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bec6:	e1a0      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bec8:	2380      	movs	r3, #128	@ 0x80
 810beca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bece:	e19c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bed0:	697b      	ldr	r3, [r7, #20]
 810bed2:	681b      	ldr	r3, [r3, #0]
 810bed4:	4a32      	ldr	r2, [pc, #200]	@ (810bfa0 <UART_SetConfig+0x33c>)
 810bed6:	4293      	cmp	r3, r2
 810bed8:	d130      	bne.n	810bf3c <UART_SetConfig+0x2d8>
 810beda:	4b2e      	ldr	r3, [pc, #184]	@ (810bf94 <UART_SetConfig+0x330>)
 810bedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bede:	f003 0307 	and.w	r3, r3, #7
 810bee2:	2b05      	cmp	r3, #5
 810bee4:	d826      	bhi.n	810bf34 <UART_SetConfig+0x2d0>
 810bee6:	a201      	add	r2, pc, #4	@ (adr r2, 810beec <UART_SetConfig+0x288>)
 810bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810beec:	0810bf05 	.word	0x0810bf05
 810bef0:	0810bf0d 	.word	0x0810bf0d
 810bef4:	0810bf15 	.word	0x0810bf15
 810bef8:	0810bf1d 	.word	0x0810bf1d
 810befc:	0810bf25 	.word	0x0810bf25
 810bf00:	0810bf2d 	.word	0x0810bf2d
 810bf04:	2300      	movs	r3, #0
 810bf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf0a:	e17e      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf0c:	2304      	movs	r3, #4
 810bf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf12:	e17a      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf14:	2308      	movs	r3, #8
 810bf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf1a:	e176      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf1c:	2310      	movs	r3, #16
 810bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf22:	e172      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf24:	2320      	movs	r3, #32
 810bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf2a:	e16e      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf2c:	2340      	movs	r3, #64	@ 0x40
 810bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf32:	e16a      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf34:	2380      	movs	r3, #128	@ 0x80
 810bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf3a:	e166      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf3c:	697b      	ldr	r3, [r7, #20]
 810bf3e:	681b      	ldr	r3, [r3, #0]
 810bf40:	4a18      	ldr	r2, [pc, #96]	@ (810bfa4 <UART_SetConfig+0x340>)
 810bf42:	4293      	cmp	r3, r2
 810bf44:	d140      	bne.n	810bfc8 <UART_SetConfig+0x364>
 810bf46:	4b13      	ldr	r3, [pc, #76]	@ (810bf94 <UART_SetConfig+0x330>)
 810bf48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bf4a:	f003 0307 	and.w	r3, r3, #7
 810bf4e:	2b05      	cmp	r3, #5
 810bf50:	d836      	bhi.n	810bfc0 <UART_SetConfig+0x35c>
 810bf52:	a201      	add	r2, pc, #4	@ (adr r2, 810bf58 <UART_SetConfig+0x2f4>)
 810bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bf58:	0810bf71 	.word	0x0810bf71
 810bf5c:	0810bf79 	.word	0x0810bf79
 810bf60:	0810bf81 	.word	0x0810bf81
 810bf64:	0810bfa9 	.word	0x0810bfa9
 810bf68:	0810bfb1 	.word	0x0810bfb1
 810bf6c:	0810bfb9 	.word	0x0810bfb9
 810bf70:	2300      	movs	r3, #0
 810bf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf76:	e148      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf78:	2304      	movs	r3, #4
 810bf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf7e:	e144      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf80:	2308      	movs	r3, #8
 810bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf86:	e140      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bf88:	cfff69f3 	.word	0xcfff69f3
 810bf8c:	58000c00 	.word	0x58000c00
 810bf90:	40011000 	.word	0x40011000
 810bf94:	58024400 	.word	0x58024400
 810bf98:	40004400 	.word	0x40004400
 810bf9c:	40004800 	.word	0x40004800
 810bfa0:	40004c00 	.word	0x40004c00
 810bfa4:	40005000 	.word	0x40005000
 810bfa8:	2310      	movs	r3, #16
 810bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfae:	e12c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bfb0:	2320      	movs	r3, #32
 810bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfb6:	e128      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bfb8:	2340      	movs	r3, #64	@ 0x40
 810bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfbe:	e124      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bfc0:	2380      	movs	r3, #128	@ 0x80
 810bfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfc6:	e120      	b.n	810c20a <UART_SetConfig+0x5a6>
 810bfc8:	697b      	ldr	r3, [r7, #20]
 810bfca:	681b      	ldr	r3, [r3, #0]
 810bfcc:	4acb      	ldr	r2, [pc, #812]	@ (810c2fc <UART_SetConfig+0x698>)
 810bfce:	4293      	cmp	r3, r2
 810bfd0:	d176      	bne.n	810c0c0 <UART_SetConfig+0x45c>
 810bfd2:	4bcb      	ldr	r3, [pc, #812]	@ (810c300 <UART_SetConfig+0x69c>)
 810bfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bfd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810bfda:	2b28      	cmp	r3, #40	@ 0x28
 810bfdc:	d86c      	bhi.n	810c0b8 <UART_SetConfig+0x454>
 810bfde:	a201      	add	r2, pc, #4	@ (adr r2, 810bfe4 <UART_SetConfig+0x380>)
 810bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bfe4:	0810c089 	.word	0x0810c089
 810bfe8:	0810c0b9 	.word	0x0810c0b9
 810bfec:	0810c0b9 	.word	0x0810c0b9
 810bff0:	0810c0b9 	.word	0x0810c0b9
 810bff4:	0810c0b9 	.word	0x0810c0b9
 810bff8:	0810c0b9 	.word	0x0810c0b9
 810bffc:	0810c0b9 	.word	0x0810c0b9
 810c000:	0810c0b9 	.word	0x0810c0b9
 810c004:	0810c091 	.word	0x0810c091
 810c008:	0810c0b9 	.word	0x0810c0b9
 810c00c:	0810c0b9 	.word	0x0810c0b9
 810c010:	0810c0b9 	.word	0x0810c0b9
 810c014:	0810c0b9 	.word	0x0810c0b9
 810c018:	0810c0b9 	.word	0x0810c0b9
 810c01c:	0810c0b9 	.word	0x0810c0b9
 810c020:	0810c0b9 	.word	0x0810c0b9
 810c024:	0810c099 	.word	0x0810c099
 810c028:	0810c0b9 	.word	0x0810c0b9
 810c02c:	0810c0b9 	.word	0x0810c0b9
 810c030:	0810c0b9 	.word	0x0810c0b9
 810c034:	0810c0b9 	.word	0x0810c0b9
 810c038:	0810c0b9 	.word	0x0810c0b9
 810c03c:	0810c0b9 	.word	0x0810c0b9
 810c040:	0810c0b9 	.word	0x0810c0b9
 810c044:	0810c0a1 	.word	0x0810c0a1
 810c048:	0810c0b9 	.word	0x0810c0b9
 810c04c:	0810c0b9 	.word	0x0810c0b9
 810c050:	0810c0b9 	.word	0x0810c0b9
 810c054:	0810c0b9 	.word	0x0810c0b9
 810c058:	0810c0b9 	.word	0x0810c0b9
 810c05c:	0810c0b9 	.word	0x0810c0b9
 810c060:	0810c0b9 	.word	0x0810c0b9
 810c064:	0810c0a9 	.word	0x0810c0a9
 810c068:	0810c0b9 	.word	0x0810c0b9
 810c06c:	0810c0b9 	.word	0x0810c0b9
 810c070:	0810c0b9 	.word	0x0810c0b9
 810c074:	0810c0b9 	.word	0x0810c0b9
 810c078:	0810c0b9 	.word	0x0810c0b9
 810c07c:	0810c0b9 	.word	0x0810c0b9
 810c080:	0810c0b9 	.word	0x0810c0b9
 810c084:	0810c0b1 	.word	0x0810c0b1
 810c088:	2301      	movs	r3, #1
 810c08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c08e:	e0bc      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c090:	2304      	movs	r3, #4
 810c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c096:	e0b8      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c098:	2308      	movs	r3, #8
 810c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c09e:	e0b4      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0a0:	2310      	movs	r3, #16
 810c0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0a6:	e0b0      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0a8:	2320      	movs	r3, #32
 810c0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0ae:	e0ac      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0b0:	2340      	movs	r3, #64	@ 0x40
 810c0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0b6:	e0a8      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0b8:	2380      	movs	r3, #128	@ 0x80
 810c0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0be:	e0a4      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0c0:	697b      	ldr	r3, [r7, #20]
 810c0c2:	681b      	ldr	r3, [r3, #0]
 810c0c4:	4a8f      	ldr	r2, [pc, #572]	@ (810c304 <UART_SetConfig+0x6a0>)
 810c0c6:	4293      	cmp	r3, r2
 810c0c8:	d130      	bne.n	810c12c <UART_SetConfig+0x4c8>
 810c0ca:	4b8d      	ldr	r3, [pc, #564]	@ (810c300 <UART_SetConfig+0x69c>)
 810c0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c0ce:	f003 0307 	and.w	r3, r3, #7
 810c0d2:	2b05      	cmp	r3, #5
 810c0d4:	d826      	bhi.n	810c124 <UART_SetConfig+0x4c0>
 810c0d6:	a201      	add	r2, pc, #4	@ (adr r2, 810c0dc <UART_SetConfig+0x478>)
 810c0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c0dc:	0810c0f5 	.word	0x0810c0f5
 810c0e0:	0810c0fd 	.word	0x0810c0fd
 810c0e4:	0810c105 	.word	0x0810c105
 810c0e8:	0810c10d 	.word	0x0810c10d
 810c0ec:	0810c115 	.word	0x0810c115
 810c0f0:	0810c11d 	.word	0x0810c11d
 810c0f4:	2300      	movs	r3, #0
 810c0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0fa:	e086      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c0fc:	2304      	movs	r3, #4
 810c0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c102:	e082      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c104:	2308      	movs	r3, #8
 810c106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c10a:	e07e      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c10c:	2310      	movs	r3, #16
 810c10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c112:	e07a      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c114:	2320      	movs	r3, #32
 810c116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c11a:	e076      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c11c:	2340      	movs	r3, #64	@ 0x40
 810c11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c122:	e072      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c124:	2380      	movs	r3, #128	@ 0x80
 810c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c12a:	e06e      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c12c:	697b      	ldr	r3, [r7, #20]
 810c12e:	681b      	ldr	r3, [r3, #0]
 810c130:	4a75      	ldr	r2, [pc, #468]	@ (810c308 <UART_SetConfig+0x6a4>)
 810c132:	4293      	cmp	r3, r2
 810c134:	d130      	bne.n	810c198 <UART_SetConfig+0x534>
 810c136:	4b72      	ldr	r3, [pc, #456]	@ (810c300 <UART_SetConfig+0x69c>)
 810c138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c13a:	f003 0307 	and.w	r3, r3, #7
 810c13e:	2b05      	cmp	r3, #5
 810c140:	d826      	bhi.n	810c190 <UART_SetConfig+0x52c>
 810c142:	a201      	add	r2, pc, #4	@ (adr r2, 810c148 <UART_SetConfig+0x4e4>)
 810c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c148:	0810c161 	.word	0x0810c161
 810c14c:	0810c169 	.word	0x0810c169
 810c150:	0810c171 	.word	0x0810c171
 810c154:	0810c179 	.word	0x0810c179
 810c158:	0810c181 	.word	0x0810c181
 810c15c:	0810c189 	.word	0x0810c189
 810c160:	2300      	movs	r3, #0
 810c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c166:	e050      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c168:	2304      	movs	r3, #4
 810c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c16e:	e04c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c170:	2308      	movs	r3, #8
 810c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c176:	e048      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c178:	2310      	movs	r3, #16
 810c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c17e:	e044      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c180:	2320      	movs	r3, #32
 810c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c186:	e040      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c188:	2340      	movs	r3, #64	@ 0x40
 810c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c18e:	e03c      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c190:	2380      	movs	r3, #128	@ 0x80
 810c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c196:	e038      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c198:	697b      	ldr	r3, [r7, #20]
 810c19a:	681b      	ldr	r3, [r3, #0]
 810c19c:	4a5b      	ldr	r2, [pc, #364]	@ (810c30c <UART_SetConfig+0x6a8>)
 810c19e:	4293      	cmp	r3, r2
 810c1a0:	d130      	bne.n	810c204 <UART_SetConfig+0x5a0>
 810c1a2:	4b57      	ldr	r3, [pc, #348]	@ (810c300 <UART_SetConfig+0x69c>)
 810c1a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c1a6:	f003 0307 	and.w	r3, r3, #7
 810c1aa:	2b05      	cmp	r3, #5
 810c1ac:	d826      	bhi.n	810c1fc <UART_SetConfig+0x598>
 810c1ae:	a201      	add	r2, pc, #4	@ (adr r2, 810c1b4 <UART_SetConfig+0x550>)
 810c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c1b4:	0810c1cd 	.word	0x0810c1cd
 810c1b8:	0810c1d5 	.word	0x0810c1d5
 810c1bc:	0810c1dd 	.word	0x0810c1dd
 810c1c0:	0810c1e5 	.word	0x0810c1e5
 810c1c4:	0810c1ed 	.word	0x0810c1ed
 810c1c8:	0810c1f5 	.word	0x0810c1f5
 810c1cc:	2302      	movs	r3, #2
 810c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1d2:	e01a      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1d4:	2304      	movs	r3, #4
 810c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1da:	e016      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1dc:	2308      	movs	r3, #8
 810c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1e2:	e012      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1e4:	2310      	movs	r3, #16
 810c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1ea:	e00e      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1ec:	2320      	movs	r3, #32
 810c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1f2:	e00a      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1f4:	2340      	movs	r3, #64	@ 0x40
 810c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1fa:	e006      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c1fc:	2380      	movs	r3, #128	@ 0x80
 810c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c202:	e002      	b.n	810c20a <UART_SetConfig+0x5a6>
 810c204:	2380      	movs	r3, #128	@ 0x80
 810c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810c20a:	697b      	ldr	r3, [r7, #20]
 810c20c:	681b      	ldr	r3, [r3, #0]
 810c20e:	4a3f      	ldr	r2, [pc, #252]	@ (810c30c <UART_SetConfig+0x6a8>)
 810c210:	4293      	cmp	r3, r2
 810c212:	f040 80f8 	bne.w	810c406 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810c216:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c21a:	2b20      	cmp	r3, #32
 810c21c:	dc46      	bgt.n	810c2ac <UART_SetConfig+0x648>
 810c21e:	2b02      	cmp	r3, #2
 810c220:	f2c0 8082 	blt.w	810c328 <UART_SetConfig+0x6c4>
 810c224:	3b02      	subs	r3, #2
 810c226:	2b1e      	cmp	r3, #30
 810c228:	d87e      	bhi.n	810c328 <UART_SetConfig+0x6c4>
 810c22a:	a201      	add	r2, pc, #4	@ (adr r2, 810c230 <UART_SetConfig+0x5cc>)
 810c22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c230:	0810c2b3 	.word	0x0810c2b3
 810c234:	0810c329 	.word	0x0810c329
 810c238:	0810c2bb 	.word	0x0810c2bb
 810c23c:	0810c329 	.word	0x0810c329
 810c240:	0810c329 	.word	0x0810c329
 810c244:	0810c329 	.word	0x0810c329
 810c248:	0810c2cb 	.word	0x0810c2cb
 810c24c:	0810c329 	.word	0x0810c329
 810c250:	0810c329 	.word	0x0810c329
 810c254:	0810c329 	.word	0x0810c329
 810c258:	0810c329 	.word	0x0810c329
 810c25c:	0810c329 	.word	0x0810c329
 810c260:	0810c329 	.word	0x0810c329
 810c264:	0810c329 	.word	0x0810c329
 810c268:	0810c2db 	.word	0x0810c2db
 810c26c:	0810c329 	.word	0x0810c329
 810c270:	0810c329 	.word	0x0810c329
 810c274:	0810c329 	.word	0x0810c329
 810c278:	0810c329 	.word	0x0810c329
 810c27c:	0810c329 	.word	0x0810c329
 810c280:	0810c329 	.word	0x0810c329
 810c284:	0810c329 	.word	0x0810c329
 810c288:	0810c329 	.word	0x0810c329
 810c28c:	0810c329 	.word	0x0810c329
 810c290:	0810c329 	.word	0x0810c329
 810c294:	0810c329 	.word	0x0810c329
 810c298:	0810c329 	.word	0x0810c329
 810c29c:	0810c329 	.word	0x0810c329
 810c2a0:	0810c329 	.word	0x0810c329
 810c2a4:	0810c329 	.word	0x0810c329
 810c2a8:	0810c31b 	.word	0x0810c31b
 810c2ac:	2b40      	cmp	r3, #64	@ 0x40
 810c2ae:	d037      	beq.n	810c320 <UART_SetConfig+0x6bc>
 810c2b0:	e03a      	b.n	810c328 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810c2b2:	f7fb ff81 	bl	81081b8 <HAL_RCCEx_GetD3PCLK1Freq>
 810c2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c2b8:	e03c      	b.n	810c334 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c2ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c2be:	4618      	mov	r0, r3
 810c2c0:	f7fb ff90 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c2c8:	e034      	b.n	810c334 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c2ca:	f107 0318 	add.w	r3, r7, #24
 810c2ce:	4618      	mov	r0, r3
 810c2d0:	f7fc f8dc 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c2d4:	69fb      	ldr	r3, [r7, #28]
 810c2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c2d8:	e02c      	b.n	810c334 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c2da:	4b09      	ldr	r3, [pc, #36]	@ (810c300 <UART_SetConfig+0x69c>)
 810c2dc:	681b      	ldr	r3, [r3, #0]
 810c2de:	f003 0320 	and.w	r3, r3, #32
 810c2e2:	2b00      	cmp	r3, #0
 810c2e4:	d016      	beq.n	810c314 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c2e6:	4b06      	ldr	r3, [pc, #24]	@ (810c300 <UART_SetConfig+0x69c>)
 810c2e8:	681b      	ldr	r3, [r3, #0]
 810c2ea:	08db      	lsrs	r3, r3, #3
 810c2ec:	f003 0303 	and.w	r3, r3, #3
 810c2f0:	4a07      	ldr	r2, [pc, #28]	@ (810c310 <UART_SetConfig+0x6ac>)
 810c2f2:	fa22 f303 	lsr.w	r3, r2, r3
 810c2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c2f8:	e01c      	b.n	810c334 <UART_SetConfig+0x6d0>
 810c2fa:	bf00      	nop
 810c2fc:	40011400 	.word	0x40011400
 810c300:	58024400 	.word	0x58024400
 810c304:	40007800 	.word	0x40007800
 810c308:	40007c00 	.word	0x40007c00
 810c30c:	58000c00 	.word	0x58000c00
 810c310:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810c314:	4b9d      	ldr	r3, [pc, #628]	@ (810c58c <UART_SetConfig+0x928>)
 810c316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c318:	e00c      	b.n	810c334 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c31a:	4b9d      	ldr	r3, [pc, #628]	@ (810c590 <UART_SetConfig+0x92c>)
 810c31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c31e:	e009      	b.n	810c334 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c326:	e005      	b.n	810c334 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810c328:	2300      	movs	r3, #0
 810c32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c32c:	2301      	movs	r3, #1
 810c32e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c332:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810c334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c336:	2b00      	cmp	r3, #0
 810c338:	f000 81de 	beq.w	810c6f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810c33c:	697b      	ldr	r3, [r7, #20]
 810c33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c340:	4a94      	ldr	r2, [pc, #592]	@ (810c594 <UART_SetConfig+0x930>)
 810c342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c346:	461a      	mov	r2, r3
 810c348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c34a:	fbb3 f3f2 	udiv	r3, r3, r2
 810c34e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c350:	697b      	ldr	r3, [r7, #20]
 810c352:	685a      	ldr	r2, [r3, #4]
 810c354:	4613      	mov	r3, r2
 810c356:	005b      	lsls	r3, r3, #1
 810c358:	4413      	add	r3, r2
 810c35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c35c:	429a      	cmp	r2, r3
 810c35e:	d305      	bcc.n	810c36c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810c360:	697b      	ldr	r3, [r7, #20]
 810c362:	685b      	ldr	r3, [r3, #4]
 810c364:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c368:	429a      	cmp	r2, r3
 810c36a:	d903      	bls.n	810c374 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810c36c:	2301      	movs	r3, #1
 810c36e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c372:	e1c1      	b.n	810c6f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c376:	2200      	movs	r2, #0
 810c378:	60bb      	str	r3, [r7, #8]
 810c37a:	60fa      	str	r2, [r7, #12]
 810c37c:	697b      	ldr	r3, [r7, #20]
 810c37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c380:	4a84      	ldr	r2, [pc, #528]	@ (810c594 <UART_SetConfig+0x930>)
 810c382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c386:	b29b      	uxth	r3, r3
 810c388:	2200      	movs	r2, #0
 810c38a:	603b      	str	r3, [r7, #0]
 810c38c:	607a      	str	r2, [r7, #4]
 810c38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810c396:	f7f3 ff9f 	bl	81002d8 <__aeabi_uldivmod>
 810c39a:	4602      	mov	r2, r0
 810c39c:	460b      	mov	r3, r1
 810c39e:	4610      	mov	r0, r2
 810c3a0:	4619      	mov	r1, r3
 810c3a2:	f04f 0200 	mov.w	r2, #0
 810c3a6:	f04f 0300 	mov.w	r3, #0
 810c3aa:	020b      	lsls	r3, r1, #8
 810c3ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810c3b0:	0202      	lsls	r2, r0, #8
 810c3b2:	6979      	ldr	r1, [r7, #20]
 810c3b4:	6849      	ldr	r1, [r1, #4]
 810c3b6:	0849      	lsrs	r1, r1, #1
 810c3b8:	2000      	movs	r0, #0
 810c3ba:	460c      	mov	r4, r1
 810c3bc:	4605      	mov	r5, r0
 810c3be:	eb12 0804 	adds.w	r8, r2, r4
 810c3c2:	eb43 0905 	adc.w	r9, r3, r5
 810c3c6:	697b      	ldr	r3, [r7, #20]
 810c3c8:	685b      	ldr	r3, [r3, #4]
 810c3ca:	2200      	movs	r2, #0
 810c3cc:	469a      	mov	sl, r3
 810c3ce:	4693      	mov	fp, r2
 810c3d0:	4652      	mov	r2, sl
 810c3d2:	465b      	mov	r3, fp
 810c3d4:	4640      	mov	r0, r8
 810c3d6:	4649      	mov	r1, r9
 810c3d8:	f7f3 ff7e 	bl	81002d8 <__aeabi_uldivmod>
 810c3dc:	4602      	mov	r2, r0
 810c3de:	460b      	mov	r3, r1
 810c3e0:	4613      	mov	r3, r2
 810c3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810c3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c3e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810c3ea:	d308      	bcc.n	810c3fe <UART_SetConfig+0x79a>
 810c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c3ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c3f2:	d204      	bcs.n	810c3fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810c3f4:	697b      	ldr	r3, [r7, #20]
 810c3f6:	681b      	ldr	r3, [r3, #0]
 810c3f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810c3fa:	60da      	str	r2, [r3, #12]
 810c3fc:	e17c      	b.n	810c6f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810c3fe:	2301      	movs	r3, #1
 810c400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c404:	e178      	b.n	810c6f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810c406:	697b      	ldr	r3, [r7, #20]
 810c408:	69db      	ldr	r3, [r3, #28]
 810c40a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810c40e:	f040 80c5 	bne.w	810c59c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810c412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c416:	2b20      	cmp	r3, #32
 810c418:	dc48      	bgt.n	810c4ac <UART_SetConfig+0x848>
 810c41a:	2b00      	cmp	r3, #0
 810c41c:	db7b      	blt.n	810c516 <UART_SetConfig+0x8b2>
 810c41e:	2b20      	cmp	r3, #32
 810c420:	d879      	bhi.n	810c516 <UART_SetConfig+0x8b2>
 810c422:	a201      	add	r2, pc, #4	@ (adr r2, 810c428 <UART_SetConfig+0x7c4>)
 810c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c428:	0810c4b3 	.word	0x0810c4b3
 810c42c:	0810c4bb 	.word	0x0810c4bb
 810c430:	0810c517 	.word	0x0810c517
 810c434:	0810c517 	.word	0x0810c517
 810c438:	0810c4c3 	.word	0x0810c4c3
 810c43c:	0810c517 	.word	0x0810c517
 810c440:	0810c517 	.word	0x0810c517
 810c444:	0810c517 	.word	0x0810c517
 810c448:	0810c4d3 	.word	0x0810c4d3
 810c44c:	0810c517 	.word	0x0810c517
 810c450:	0810c517 	.word	0x0810c517
 810c454:	0810c517 	.word	0x0810c517
 810c458:	0810c517 	.word	0x0810c517
 810c45c:	0810c517 	.word	0x0810c517
 810c460:	0810c517 	.word	0x0810c517
 810c464:	0810c517 	.word	0x0810c517
 810c468:	0810c4e3 	.word	0x0810c4e3
 810c46c:	0810c517 	.word	0x0810c517
 810c470:	0810c517 	.word	0x0810c517
 810c474:	0810c517 	.word	0x0810c517
 810c478:	0810c517 	.word	0x0810c517
 810c47c:	0810c517 	.word	0x0810c517
 810c480:	0810c517 	.word	0x0810c517
 810c484:	0810c517 	.word	0x0810c517
 810c488:	0810c517 	.word	0x0810c517
 810c48c:	0810c517 	.word	0x0810c517
 810c490:	0810c517 	.word	0x0810c517
 810c494:	0810c517 	.word	0x0810c517
 810c498:	0810c517 	.word	0x0810c517
 810c49c:	0810c517 	.word	0x0810c517
 810c4a0:	0810c517 	.word	0x0810c517
 810c4a4:	0810c517 	.word	0x0810c517
 810c4a8:	0810c509 	.word	0x0810c509
 810c4ac:	2b40      	cmp	r3, #64	@ 0x40
 810c4ae:	d02e      	beq.n	810c50e <UART_SetConfig+0x8aa>
 810c4b0:	e031      	b.n	810c516 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c4b2:	f7f9 fe8b 	bl	81061cc <HAL_RCC_GetPCLK1Freq>
 810c4b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c4b8:	e033      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c4ba:	f7f9 fe9d 	bl	81061f8 <HAL_RCC_GetPCLK2Freq>
 810c4be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c4c0:	e02f      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c4c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c4c6:	4618      	mov	r0, r3
 810c4c8:	f7fb fe8c 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c4d0:	e027      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c4d2:	f107 0318 	add.w	r3, r7, #24
 810c4d6:	4618      	mov	r0, r3
 810c4d8:	f7fb ffd8 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c4dc:	69fb      	ldr	r3, [r7, #28]
 810c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c4e0:	e01f      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c4e2:	4b2d      	ldr	r3, [pc, #180]	@ (810c598 <UART_SetConfig+0x934>)
 810c4e4:	681b      	ldr	r3, [r3, #0]
 810c4e6:	f003 0320 	and.w	r3, r3, #32
 810c4ea:	2b00      	cmp	r3, #0
 810c4ec:	d009      	beq.n	810c502 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c4ee:	4b2a      	ldr	r3, [pc, #168]	@ (810c598 <UART_SetConfig+0x934>)
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	08db      	lsrs	r3, r3, #3
 810c4f4:	f003 0303 	and.w	r3, r3, #3
 810c4f8:	4a24      	ldr	r2, [pc, #144]	@ (810c58c <UART_SetConfig+0x928>)
 810c4fa:	fa22 f303 	lsr.w	r3, r2, r3
 810c4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c500:	e00f      	b.n	810c522 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810c502:	4b22      	ldr	r3, [pc, #136]	@ (810c58c <UART_SetConfig+0x928>)
 810c504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c506:	e00c      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c508:	4b21      	ldr	r3, [pc, #132]	@ (810c590 <UART_SetConfig+0x92c>)
 810c50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c50c:	e009      	b.n	810c522 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c50e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c514:	e005      	b.n	810c522 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810c516:	2300      	movs	r3, #0
 810c518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c51a:	2301      	movs	r3, #1
 810c51c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810c522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c524:	2b00      	cmp	r3, #0
 810c526:	f000 80e7 	beq.w	810c6f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c52a:	697b      	ldr	r3, [r7, #20]
 810c52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c52e:	4a19      	ldr	r2, [pc, #100]	@ (810c594 <UART_SetConfig+0x930>)
 810c530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c534:	461a      	mov	r2, r3
 810c536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c538:	fbb3 f3f2 	udiv	r3, r3, r2
 810c53c:	005a      	lsls	r2, r3, #1
 810c53e:	697b      	ldr	r3, [r7, #20]
 810c540:	685b      	ldr	r3, [r3, #4]
 810c542:	085b      	lsrs	r3, r3, #1
 810c544:	441a      	add	r2, r3
 810c546:	697b      	ldr	r3, [r7, #20]
 810c548:	685b      	ldr	r3, [r3, #4]
 810c54a:	fbb2 f3f3 	udiv	r3, r2, r3
 810c54e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c552:	2b0f      	cmp	r3, #15
 810c554:	d916      	bls.n	810c584 <UART_SetConfig+0x920>
 810c556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c55c:	d212      	bcs.n	810c584 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c560:	b29b      	uxth	r3, r3
 810c562:	f023 030f 	bic.w	r3, r3, #15
 810c566:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810c568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c56a:	085b      	lsrs	r3, r3, #1
 810c56c:	b29b      	uxth	r3, r3
 810c56e:	f003 0307 	and.w	r3, r3, #7
 810c572:	b29a      	uxth	r2, r3
 810c574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810c576:	4313      	orrs	r3, r2
 810c578:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810c57a:	697b      	ldr	r3, [r7, #20]
 810c57c:	681b      	ldr	r3, [r3, #0]
 810c57e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810c580:	60da      	str	r2, [r3, #12]
 810c582:	e0b9      	b.n	810c6f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810c584:	2301      	movs	r3, #1
 810c586:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c58a:	e0b5      	b.n	810c6f8 <UART_SetConfig+0xa94>
 810c58c:	03d09000 	.word	0x03d09000
 810c590:	003d0900 	.word	0x003d0900
 810c594:	0810e884 	.word	0x0810e884
 810c598:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810c59c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c5a0:	2b20      	cmp	r3, #32
 810c5a2:	dc49      	bgt.n	810c638 <UART_SetConfig+0x9d4>
 810c5a4:	2b00      	cmp	r3, #0
 810c5a6:	db7c      	blt.n	810c6a2 <UART_SetConfig+0xa3e>
 810c5a8:	2b20      	cmp	r3, #32
 810c5aa:	d87a      	bhi.n	810c6a2 <UART_SetConfig+0xa3e>
 810c5ac:	a201      	add	r2, pc, #4	@ (adr r2, 810c5b4 <UART_SetConfig+0x950>)
 810c5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c5b2:	bf00      	nop
 810c5b4:	0810c63f 	.word	0x0810c63f
 810c5b8:	0810c647 	.word	0x0810c647
 810c5bc:	0810c6a3 	.word	0x0810c6a3
 810c5c0:	0810c6a3 	.word	0x0810c6a3
 810c5c4:	0810c64f 	.word	0x0810c64f
 810c5c8:	0810c6a3 	.word	0x0810c6a3
 810c5cc:	0810c6a3 	.word	0x0810c6a3
 810c5d0:	0810c6a3 	.word	0x0810c6a3
 810c5d4:	0810c65f 	.word	0x0810c65f
 810c5d8:	0810c6a3 	.word	0x0810c6a3
 810c5dc:	0810c6a3 	.word	0x0810c6a3
 810c5e0:	0810c6a3 	.word	0x0810c6a3
 810c5e4:	0810c6a3 	.word	0x0810c6a3
 810c5e8:	0810c6a3 	.word	0x0810c6a3
 810c5ec:	0810c6a3 	.word	0x0810c6a3
 810c5f0:	0810c6a3 	.word	0x0810c6a3
 810c5f4:	0810c66f 	.word	0x0810c66f
 810c5f8:	0810c6a3 	.word	0x0810c6a3
 810c5fc:	0810c6a3 	.word	0x0810c6a3
 810c600:	0810c6a3 	.word	0x0810c6a3
 810c604:	0810c6a3 	.word	0x0810c6a3
 810c608:	0810c6a3 	.word	0x0810c6a3
 810c60c:	0810c6a3 	.word	0x0810c6a3
 810c610:	0810c6a3 	.word	0x0810c6a3
 810c614:	0810c6a3 	.word	0x0810c6a3
 810c618:	0810c6a3 	.word	0x0810c6a3
 810c61c:	0810c6a3 	.word	0x0810c6a3
 810c620:	0810c6a3 	.word	0x0810c6a3
 810c624:	0810c6a3 	.word	0x0810c6a3
 810c628:	0810c6a3 	.word	0x0810c6a3
 810c62c:	0810c6a3 	.word	0x0810c6a3
 810c630:	0810c6a3 	.word	0x0810c6a3
 810c634:	0810c695 	.word	0x0810c695
 810c638:	2b40      	cmp	r3, #64	@ 0x40
 810c63a:	d02e      	beq.n	810c69a <UART_SetConfig+0xa36>
 810c63c:	e031      	b.n	810c6a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c63e:	f7f9 fdc5 	bl	81061cc <HAL_RCC_GetPCLK1Freq>
 810c642:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c644:	e033      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c646:	f7f9 fdd7 	bl	81061f8 <HAL_RCC_GetPCLK2Freq>
 810c64a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c64c:	e02f      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c64e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c652:	4618      	mov	r0, r3
 810c654:	f7fb fdc6 	bl	81081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c65c:	e027      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c65e:	f107 0318 	add.w	r3, r7, #24
 810c662:	4618      	mov	r0, r3
 810c664:	f7fb ff12 	bl	810848c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c668:	69fb      	ldr	r3, [r7, #28]
 810c66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c66c:	e01f      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c66e:	4b2d      	ldr	r3, [pc, #180]	@ (810c724 <UART_SetConfig+0xac0>)
 810c670:	681b      	ldr	r3, [r3, #0]
 810c672:	f003 0320 	and.w	r3, r3, #32
 810c676:	2b00      	cmp	r3, #0
 810c678:	d009      	beq.n	810c68e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c67a:	4b2a      	ldr	r3, [pc, #168]	@ (810c724 <UART_SetConfig+0xac0>)
 810c67c:	681b      	ldr	r3, [r3, #0]
 810c67e:	08db      	lsrs	r3, r3, #3
 810c680:	f003 0303 	and.w	r3, r3, #3
 810c684:	4a28      	ldr	r2, [pc, #160]	@ (810c728 <UART_SetConfig+0xac4>)
 810c686:	fa22 f303 	lsr.w	r3, r2, r3
 810c68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c68c:	e00f      	b.n	810c6ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810c68e:	4b26      	ldr	r3, [pc, #152]	@ (810c728 <UART_SetConfig+0xac4>)
 810c690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c692:	e00c      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c694:	4b25      	ldr	r3, [pc, #148]	@ (810c72c <UART_SetConfig+0xac8>)
 810c696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c698:	e009      	b.n	810c6ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c69a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c6a0:	e005      	b.n	810c6ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810c6a2:	2300      	movs	r3, #0
 810c6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c6a6:	2301      	movs	r3, #1
 810c6a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c6ac:	bf00      	nop
    }

    if (pclk != 0U)
 810c6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	d021      	beq.n	810c6f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c6b4:	697b      	ldr	r3, [r7, #20]
 810c6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c6b8:	4a1d      	ldr	r2, [pc, #116]	@ (810c730 <UART_SetConfig+0xacc>)
 810c6ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c6be:	461a      	mov	r2, r3
 810c6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c6c2:	fbb3 f2f2 	udiv	r2, r3, r2
 810c6c6:	697b      	ldr	r3, [r7, #20]
 810c6c8:	685b      	ldr	r3, [r3, #4]
 810c6ca:	085b      	lsrs	r3, r3, #1
 810c6cc:	441a      	add	r2, r3
 810c6ce:	697b      	ldr	r3, [r7, #20]
 810c6d0:	685b      	ldr	r3, [r3, #4]
 810c6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 810c6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c6da:	2b0f      	cmp	r3, #15
 810c6dc:	d909      	bls.n	810c6f2 <UART_SetConfig+0xa8e>
 810c6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c6e4:	d205      	bcs.n	810c6f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810c6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c6e8:	b29a      	uxth	r2, r3
 810c6ea:	697b      	ldr	r3, [r7, #20]
 810c6ec:	681b      	ldr	r3, [r3, #0]
 810c6ee:	60da      	str	r2, [r3, #12]
 810c6f0:	e002      	b.n	810c6f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810c6f2:	2301      	movs	r3, #1
 810c6f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810c6f8:	697b      	ldr	r3, [r7, #20]
 810c6fa:	2201      	movs	r2, #1
 810c6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810c700:	697b      	ldr	r3, [r7, #20]
 810c702:	2201      	movs	r2, #1
 810c704:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810c708:	697b      	ldr	r3, [r7, #20]
 810c70a:	2200      	movs	r2, #0
 810c70c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810c70e:	697b      	ldr	r3, [r7, #20]
 810c710:	2200      	movs	r2, #0
 810c712:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810c714:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810c718:	4618      	mov	r0, r3
 810c71a:	3748      	adds	r7, #72	@ 0x48
 810c71c:	46bd      	mov	sp, r7
 810c71e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810c722:	bf00      	nop
 810c724:	58024400 	.word	0x58024400
 810c728:	03d09000 	.word	0x03d09000
 810c72c:	003d0900 	.word	0x003d0900
 810c730:	0810e884 	.word	0x0810e884

0810c734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810c734:	b480      	push	{r7}
 810c736:	b083      	sub	sp, #12
 810c738:	af00      	add	r7, sp, #0
 810c73a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c73c:	687b      	ldr	r3, [r7, #4]
 810c73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c740:	f003 0308 	and.w	r3, r3, #8
 810c744:	2b00      	cmp	r3, #0
 810c746:	d00a      	beq.n	810c75e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c748:	687b      	ldr	r3, [r7, #4]
 810c74a:	681b      	ldr	r3, [r3, #0]
 810c74c:	685b      	ldr	r3, [r3, #4]
 810c74e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810c752:	687b      	ldr	r3, [r7, #4]
 810c754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c756:	687b      	ldr	r3, [r7, #4]
 810c758:	681b      	ldr	r3, [r3, #0]
 810c75a:	430a      	orrs	r2, r1
 810c75c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810c75e:	687b      	ldr	r3, [r7, #4]
 810c760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c762:	f003 0301 	and.w	r3, r3, #1
 810c766:	2b00      	cmp	r3, #0
 810c768:	d00a      	beq.n	810c780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c76a:	687b      	ldr	r3, [r7, #4]
 810c76c:	681b      	ldr	r3, [r3, #0]
 810c76e:	685b      	ldr	r3, [r3, #4]
 810c770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810c774:	687b      	ldr	r3, [r7, #4]
 810c776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c778:	687b      	ldr	r3, [r7, #4]
 810c77a:	681b      	ldr	r3, [r3, #0]
 810c77c:	430a      	orrs	r2, r1
 810c77e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c780:	687b      	ldr	r3, [r7, #4]
 810c782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c784:	f003 0302 	and.w	r3, r3, #2
 810c788:	2b00      	cmp	r3, #0
 810c78a:	d00a      	beq.n	810c7a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c78c:	687b      	ldr	r3, [r7, #4]
 810c78e:	681b      	ldr	r3, [r3, #0]
 810c790:	685b      	ldr	r3, [r3, #4]
 810c792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810c796:	687b      	ldr	r3, [r7, #4]
 810c798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810c79a:	687b      	ldr	r3, [r7, #4]
 810c79c:	681b      	ldr	r3, [r3, #0]
 810c79e:	430a      	orrs	r2, r1
 810c7a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c7a2:	687b      	ldr	r3, [r7, #4]
 810c7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c7a6:	f003 0304 	and.w	r3, r3, #4
 810c7aa:	2b00      	cmp	r3, #0
 810c7ac:	d00a      	beq.n	810c7c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c7ae:	687b      	ldr	r3, [r7, #4]
 810c7b0:	681b      	ldr	r3, [r3, #0]
 810c7b2:	685b      	ldr	r3, [r3, #4]
 810c7b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810c7b8:	687b      	ldr	r3, [r7, #4]
 810c7ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810c7bc:	687b      	ldr	r3, [r7, #4]
 810c7be:	681b      	ldr	r3, [r3, #0]
 810c7c0:	430a      	orrs	r2, r1
 810c7c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c7c4:	687b      	ldr	r3, [r7, #4]
 810c7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c7c8:	f003 0310 	and.w	r3, r3, #16
 810c7cc:	2b00      	cmp	r3, #0
 810c7ce:	d00a      	beq.n	810c7e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c7d0:	687b      	ldr	r3, [r7, #4]
 810c7d2:	681b      	ldr	r3, [r3, #0]
 810c7d4:	689b      	ldr	r3, [r3, #8]
 810c7d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810c7da:	687b      	ldr	r3, [r7, #4]
 810c7dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810c7de:	687b      	ldr	r3, [r7, #4]
 810c7e0:	681b      	ldr	r3, [r3, #0]
 810c7e2:	430a      	orrs	r2, r1
 810c7e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c7e6:	687b      	ldr	r3, [r7, #4]
 810c7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c7ea:	f003 0320 	and.w	r3, r3, #32
 810c7ee:	2b00      	cmp	r3, #0
 810c7f0:	d00a      	beq.n	810c808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c7f2:	687b      	ldr	r3, [r7, #4]
 810c7f4:	681b      	ldr	r3, [r3, #0]
 810c7f6:	689b      	ldr	r3, [r3, #8]
 810c7f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810c7fc:	687b      	ldr	r3, [r7, #4]
 810c7fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810c800:	687b      	ldr	r3, [r7, #4]
 810c802:	681b      	ldr	r3, [r3, #0]
 810c804:	430a      	orrs	r2, r1
 810c806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c808:	687b      	ldr	r3, [r7, #4]
 810c80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c810:	2b00      	cmp	r3, #0
 810c812:	d01a      	beq.n	810c84a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c814:	687b      	ldr	r3, [r7, #4]
 810c816:	681b      	ldr	r3, [r3, #0]
 810c818:	685b      	ldr	r3, [r3, #4]
 810c81a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810c81e:	687b      	ldr	r3, [r7, #4]
 810c820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810c822:	687b      	ldr	r3, [r7, #4]
 810c824:	681b      	ldr	r3, [r3, #0]
 810c826:	430a      	orrs	r2, r1
 810c828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c82a:	687b      	ldr	r3, [r7, #4]
 810c82c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810c82e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c832:	d10a      	bne.n	810c84a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c834:	687b      	ldr	r3, [r7, #4]
 810c836:	681b      	ldr	r3, [r3, #0]
 810c838:	685b      	ldr	r3, [r3, #4]
 810c83a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810c842:	687b      	ldr	r3, [r7, #4]
 810c844:	681b      	ldr	r3, [r3, #0]
 810c846:	430a      	orrs	r2, r1
 810c848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c84a:	687b      	ldr	r3, [r7, #4]
 810c84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c852:	2b00      	cmp	r3, #0
 810c854:	d00a      	beq.n	810c86c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c856:	687b      	ldr	r3, [r7, #4]
 810c858:	681b      	ldr	r3, [r3, #0]
 810c85a:	685b      	ldr	r3, [r3, #4]
 810c85c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810c860:	687b      	ldr	r3, [r7, #4]
 810c862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810c864:	687b      	ldr	r3, [r7, #4]
 810c866:	681b      	ldr	r3, [r3, #0]
 810c868:	430a      	orrs	r2, r1
 810c86a:	605a      	str	r2, [r3, #4]
  }
}
 810c86c:	bf00      	nop
 810c86e:	370c      	adds	r7, #12
 810c870:	46bd      	mov	sp, r7
 810c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c876:	4770      	bx	lr

0810c878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810c878:	b580      	push	{r7, lr}
 810c87a:	b098      	sub	sp, #96	@ 0x60
 810c87c:	af02      	add	r7, sp, #8
 810c87e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c880:	687b      	ldr	r3, [r7, #4]
 810c882:	2200      	movs	r2, #0
 810c884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810c888:	f7f6 f944 	bl	8102b14 <HAL_GetTick>
 810c88c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810c88e:	687b      	ldr	r3, [r7, #4]
 810c890:	681b      	ldr	r3, [r3, #0]
 810c892:	681b      	ldr	r3, [r3, #0]
 810c894:	f003 0308 	and.w	r3, r3, #8
 810c898:	2b08      	cmp	r3, #8
 810c89a:	d12f      	bne.n	810c8fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c89c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810c8a0:	9300      	str	r3, [sp, #0]
 810c8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810c8a4:	2200      	movs	r2, #0
 810c8a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810c8aa:	6878      	ldr	r0, [r7, #4]
 810c8ac:	f000 f88e 	bl	810c9cc <UART_WaitOnFlagUntilTimeout>
 810c8b0:	4603      	mov	r3, r0
 810c8b2:	2b00      	cmp	r3, #0
 810c8b4:	d022      	beq.n	810c8fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810c8b6:	687b      	ldr	r3, [r7, #4]
 810c8b8:	681b      	ldr	r3, [r3, #0]
 810c8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c8be:	e853 3f00 	ldrex	r3, [r3]
 810c8c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810c8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c8c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810c8ca:	653b      	str	r3, [r7, #80]	@ 0x50
 810c8cc:	687b      	ldr	r3, [r7, #4]
 810c8ce:	681b      	ldr	r3, [r3, #0]
 810c8d0:	461a      	mov	r2, r3
 810c8d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810c8d4:	647b      	str	r3, [r7, #68]	@ 0x44
 810c8d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c8d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810c8da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810c8dc:	e841 2300 	strex	r3, r2, [r1]
 810c8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810c8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c8e4:	2b00      	cmp	r3, #0
 810c8e6:	d1e6      	bne.n	810c8b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	2220      	movs	r2, #32
 810c8ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810c8f0:	687b      	ldr	r3, [r7, #4]
 810c8f2:	2200      	movs	r2, #0
 810c8f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c8f8:	2303      	movs	r3, #3
 810c8fa:	e063      	b.n	810c9c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810c8fc:	687b      	ldr	r3, [r7, #4]
 810c8fe:	681b      	ldr	r3, [r3, #0]
 810c900:	681b      	ldr	r3, [r3, #0]
 810c902:	f003 0304 	and.w	r3, r3, #4
 810c906:	2b04      	cmp	r3, #4
 810c908:	d149      	bne.n	810c99e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c90a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810c90e:	9300      	str	r3, [sp, #0]
 810c910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810c912:	2200      	movs	r2, #0
 810c914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810c918:	6878      	ldr	r0, [r7, #4]
 810c91a:	f000 f857 	bl	810c9cc <UART_WaitOnFlagUntilTimeout>
 810c91e:	4603      	mov	r3, r0
 810c920:	2b00      	cmp	r3, #0
 810c922:	d03c      	beq.n	810c99e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c924:	687b      	ldr	r3, [r7, #4]
 810c926:	681b      	ldr	r3, [r3, #0]
 810c928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c92c:	e853 3f00 	ldrex	r3, [r3]
 810c930:	623b      	str	r3, [r7, #32]
   return(result);
 810c932:	6a3b      	ldr	r3, [r7, #32]
 810c934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810c938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c93a:	687b      	ldr	r3, [r7, #4]
 810c93c:	681b      	ldr	r3, [r3, #0]
 810c93e:	461a      	mov	r2, r3
 810c940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c942:	633b      	str	r3, [r7, #48]	@ 0x30
 810c944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810c948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c94a:	e841 2300 	strex	r3, r2, [r1]
 810c94e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c952:	2b00      	cmp	r3, #0
 810c954:	d1e6      	bne.n	810c924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c956:	687b      	ldr	r3, [r7, #4]
 810c958:	681b      	ldr	r3, [r3, #0]
 810c95a:	3308      	adds	r3, #8
 810c95c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c95e:	693b      	ldr	r3, [r7, #16]
 810c960:	e853 3f00 	ldrex	r3, [r3]
 810c964:	60fb      	str	r3, [r7, #12]
   return(result);
 810c966:	68fb      	ldr	r3, [r7, #12]
 810c968:	f023 0301 	bic.w	r3, r3, #1
 810c96c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c96e:	687b      	ldr	r3, [r7, #4]
 810c970:	681b      	ldr	r3, [r3, #0]
 810c972:	3308      	adds	r3, #8
 810c974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810c976:	61fa      	str	r2, [r7, #28]
 810c978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c97a:	69b9      	ldr	r1, [r7, #24]
 810c97c:	69fa      	ldr	r2, [r7, #28]
 810c97e:	e841 2300 	strex	r3, r2, [r1]
 810c982:	617b      	str	r3, [r7, #20]
   return(result);
 810c984:	697b      	ldr	r3, [r7, #20]
 810c986:	2b00      	cmp	r3, #0
 810c988:	d1e5      	bne.n	810c956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810c98a:	687b      	ldr	r3, [r7, #4]
 810c98c:	2220      	movs	r2, #32
 810c98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810c992:	687b      	ldr	r3, [r7, #4]
 810c994:	2200      	movs	r2, #0
 810c996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c99a:	2303      	movs	r3, #3
 810c99c:	e012      	b.n	810c9c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c99e:	687b      	ldr	r3, [r7, #4]
 810c9a0:	2220      	movs	r2, #32
 810c9a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810c9a6:	687b      	ldr	r3, [r7, #4]
 810c9a8:	2220      	movs	r2, #32
 810c9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c9ae:	687b      	ldr	r3, [r7, #4]
 810c9b0:	2200      	movs	r2, #0
 810c9b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810c9b4:	687b      	ldr	r3, [r7, #4]
 810c9b6:	2200      	movs	r2, #0
 810c9b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810c9ba:	687b      	ldr	r3, [r7, #4]
 810c9bc:	2200      	movs	r2, #0
 810c9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c9c2:	2300      	movs	r3, #0
}
 810c9c4:	4618      	mov	r0, r3
 810c9c6:	3758      	adds	r7, #88	@ 0x58
 810c9c8:	46bd      	mov	sp, r7
 810c9ca:	bd80      	pop	{r7, pc}

0810c9cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c9cc:	b580      	push	{r7, lr}
 810c9ce:	b084      	sub	sp, #16
 810c9d0:	af00      	add	r7, sp, #0
 810c9d2:	60f8      	str	r0, [r7, #12]
 810c9d4:	60b9      	str	r1, [r7, #8]
 810c9d6:	603b      	str	r3, [r7, #0]
 810c9d8:	4613      	mov	r3, r2
 810c9da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c9dc:	e04f      	b.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c9de:	69bb      	ldr	r3, [r7, #24]
 810c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c9e4:	d04b      	beq.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c9e6:	f7f6 f895 	bl	8102b14 <HAL_GetTick>
 810c9ea:	4602      	mov	r2, r0
 810c9ec:	683b      	ldr	r3, [r7, #0]
 810c9ee:	1ad3      	subs	r3, r2, r3
 810c9f0:	69ba      	ldr	r2, [r7, #24]
 810c9f2:	429a      	cmp	r2, r3
 810c9f4:	d302      	bcc.n	810c9fc <UART_WaitOnFlagUntilTimeout+0x30>
 810c9f6:	69bb      	ldr	r3, [r7, #24]
 810c9f8:	2b00      	cmp	r3, #0
 810c9fa:	d101      	bne.n	810ca00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810c9fc:	2303      	movs	r3, #3
 810c9fe:	e04e      	b.n	810ca9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810ca00:	68fb      	ldr	r3, [r7, #12]
 810ca02:	681b      	ldr	r3, [r3, #0]
 810ca04:	681b      	ldr	r3, [r3, #0]
 810ca06:	f003 0304 	and.w	r3, r3, #4
 810ca0a:	2b00      	cmp	r3, #0
 810ca0c:	d037      	beq.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
 810ca0e:	68bb      	ldr	r3, [r7, #8]
 810ca10:	2b80      	cmp	r3, #128	@ 0x80
 810ca12:	d034      	beq.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
 810ca14:	68bb      	ldr	r3, [r7, #8]
 810ca16:	2b40      	cmp	r3, #64	@ 0x40
 810ca18:	d031      	beq.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810ca1a:	68fb      	ldr	r3, [r7, #12]
 810ca1c:	681b      	ldr	r3, [r3, #0]
 810ca1e:	69db      	ldr	r3, [r3, #28]
 810ca20:	f003 0308 	and.w	r3, r3, #8
 810ca24:	2b08      	cmp	r3, #8
 810ca26:	d110      	bne.n	810ca4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ca28:	68fb      	ldr	r3, [r7, #12]
 810ca2a:	681b      	ldr	r3, [r3, #0]
 810ca2c:	2208      	movs	r2, #8
 810ca2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ca30:	68f8      	ldr	r0, [r7, #12]
 810ca32:	f000 f838 	bl	810caa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810ca36:	68fb      	ldr	r3, [r7, #12]
 810ca38:	2208      	movs	r2, #8
 810ca3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ca3e:	68fb      	ldr	r3, [r7, #12]
 810ca40:	2200      	movs	r2, #0
 810ca42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810ca46:	2301      	movs	r3, #1
 810ca48:	e029      	b.n	810ca9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ca4a:	68fb      	ldr	r3, [r7, #12]
 810ca4c:	681b      	ldr	r3, [r3, #0]
 810ca4e:	69db      	ldr	r3, [r3, #28]
 810ca50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810ca54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810ca58:	d111      	bne.n	810ca7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ca5a:	68fb      	ldr	r3, [r7, #12]
 810ca5c:	681b      	ldr	r3, [r3, #0]
 810ca5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810ca62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ca64:	68f8      	ldr	r0, [r7, #12]
 810ca66:	f000 f81e 	bl	810caa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ca6a:	68fb      	ldr	r3, [r7, #12]
 810ca6c:	2220      	movs	r2, #32
 810ca6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ca72:	68fb      	ldr	r3, [r7, #12]
 810ca74:	2200      	movs	r2, #0
 810ca76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810ca7a:	2303      	movs	r3, #3
 810ca7c:	e00f      	b.n	810ca9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ca7e:	68fb      	ldr	r3, [r7, #12]
 810ca80:	681b      	ldr	r3, [r3, #0]
 810ca82:	69da      	ldr	r2, [r3, #28]
 810ca84:	68bb      	ldr	r3, [r7, #8]
 810ca86:	4013      	ands	r3, r2
 810ca88:	68ba      	ldr	r2, [r7, #8]
 810ca8a:	429a      	cmp	r2, r3
 810ca8c:	bf0c      	ite	eq
 810ca8e:	2301      	moveq	r3, #1
 810ca90:	2300      	movne	r3, #0
 810ca92:	b2db      	uxtb	r3, r3
 810ca94:	461a      	mov	r2, r3
 810ca96:	79fb      	ldrb	r3, [r7, #7]
 810ca98:	429a      	cmp	r2, r3
 810ca9a:	d0a0      	beq.n	810c9de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810ca9c:	2300      	movs	r3, #0
}
 810ca9e:	4618      	mov	r0, r3
 810caa0:	3710      	adds	r7, #16
 810caa2:	46bd      	mov	sp, r7
 810caa4:	bd80      	pop	{r7, pc}

0810caa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810caa6:	b480      	push	{r7}
 810caa8:	b095      	sub	sp, #84	@ 0x54
 810caaa:	af00      	add	r7, sp, #0
 810caac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810caae:	687b      	ldr	r3, [r7, #4]
 810cab0:	681b      	ldr	r3, [r3, #0]
 810cab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cab6:	e853 3f00 	ldrex	r3, [r3]
 810caba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810cabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cabe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810cac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810cac4:	687b      	ldr	r3, [r7, #4]
 810cac6:	681b      	ldr	r3, [r3, #0]
 810cac8:	461a      	mov	r2, r3
 810caca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810cacc:	643b      	str	r3, [r7, #64]	@ 0x40
 810cace:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810cad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810cad4:	e841 2300 	strex	r3, r2, [r1]
 810cad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cadc:	2b00      	cmp	r3, #0
 810cade:	d1e6      	bne.n	810caae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cae0:	687b      	ldr	r3, [r7, #4]
 810cae2:	681b      	ldr	r3, [r3, #0]
 810cae4:	3308      	adds	r3, #8
 810cae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cae8:	6a3b      	ldr	r3, [r7, #32]
 810caea:	e853 3f00 	ldrex	r3, [r3]
 810caee:	61fb      	str	r3, [r7, #28]
   return(result);
 810caf0:	69fb      	ldr	r3, [r7, #28]
 810caf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810caf6:	f023 0301 	bic.w	r3, r3, #1
 810cafa:	64bb      	str	r3, [r7, #72]	@ 0x48
 810cafc:	687b      	ldr	r3, [r7, #4]
 810cafe:	681b      	ldr	r3, [r3, #0]
 810cb00:	3308      	adds	r3, #8
 810cb02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810cb04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810cb06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810cb0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810cb0c:	e841 2300 	strex	r3, r2, [r1]
 810cb10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb14:	2b00      	cmp	r3, #0
 810cb16:	d1e3      	bne.n	810cae0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810cb18:	687b      	ldr	r3, [r7, #4]
 810cb1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810cb1c:	2b01      	cmp	r3, #1
 810cb1e:	d118      	bne.n	810cb52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	681b      	ldr	r3, [r3, #0]
 810cb24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb26:	68fb      	ldr	r3, [r7, #12]
 810cb28:	e853 3f00 	ldrex	r3, [r3]
 810cb2c:	60bb      	str	r3, [r7, #8]
   return(result);
 810cb2e:	68bb      	ldr	r3, [r7, #8]
 810cb30:	f023 0310 	bic.w	r3, r3, #16
 810cb34:	647b      	str	r3, [r7, #68]	@ 0x44
 810cb36:	687b      	ldr	r3, [r7, #4]
 810cb38:	681b      	ldr	r3, [r3, #0]
 810cb3a:	461a      	mov	r2, r3
 810cb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810cb3e:	61bb      	str	r3, [r7, #24]
 810cb40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb42:	6979      	ldr	r1, [r7, #20]
 810cb44:	69ba      	ldr	r2, [r7, #24]
 810cb46:	e841 2300 	strex	r3, r2, [r1]
 810cb4a:	613b      	str	r3, [r7, #16]
   return(result);
 810cb4c:	693b      	ldr	r3, [r7, #16]
 810cb4e:	2b00      	cmp	r3, #0
 810cb50:	d1e6      	bne.n	810cb20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	2220      	movs	r2, #32
 810cb56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cb5a:	687b      	ldr	r3, [r7, #4]
 810cb5c:	2200      	movs	r2, #0
 810cb5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810cb60:	687b      	ldr	r3, [r7, #4]
 810cb62:	2200      	movs	r2, #0
 810cb64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810cb66:	bf00      	nop
 810cb68:	3754      	adds	r7, #84	@ 0x54
 810cb6a:	46bd      	mov	sp, r7
 810cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb70:	4770      	bx	lr

0810cb72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810cb72:	b480      	push	{r7}
 810cb74:	b085      	sub	sp, #20
 810cb76:	af00      	add	r7, sp, #0
 810cb78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cb7a:	687b      	ldr	r3, [r7, #4]
 810cb7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cb80:	2b01      	cmp	r3, #1
 810cb82:	d101      	bne.n	810cb88 <HAL_UARTEx_DisableFifoMode+0x16>
 810cb84:	2302      	movs	r3, #2
 810cb86:	e027      	b.n	810cbd8 <HAL_UARTEx_DisableFifoMode+0x66>
 810cb88:	687b      	ldr	r3, [r7, #4]
 810cb8a:	2201      	movs	r2, #1
 810cb8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cb90:	687b      	ldr	r3, [r7, #4]
 810cb92:	2224      	movs	r2, #36	@ 0x24
 810cb94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cb98:	687b      	ldr	r3, [r7, #4]
 810cb9a:	681b      	ldr	r3, [r3, #0]
 810cb9c:	681b      	ldr	r3, [r3, #0]
 810cb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cba0:	687b      	ldr	r3, [r7, #4]
 810cba2:	681b      	ldr	r3, [r3, #0]
 810cba4:	681a      	ldr	r2, [r3, #0]
 810cba6:	687b      	ldr	r3, [r7, #4]
 810cba8:	681b      	ldr	r3, [r3, #0]
 810cbaa:	f022 0201 	bic.w	r2, r2, #1
 810cbae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810cbb0:	68fb      	ldr	r3, [r7, #12]
 810cbb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810cbb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810cbb8:	687b      	ldr	r3, [r7, #4]
 810cbba:	2200      	movs	r2, #0
 810cbbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cbbe:	687b      	ldr	r3, [r7, #4]
 810cbc0:	681b      	ldr	r3, [r3, #0]
 810cbc2:	68fa      	ldr	r2, [r7, #12]
 810cbc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cbc6:	687b      	ldr	r3, [r7, #4]
 810cbc8:	2220      	movs	r2, #32
 810cbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cbce:	687b      	ldr	r3, [r7, #4]
 810cbd0:	2200      	movs	r2, #0
 810cbd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810cbd6:	2300      	movs	r3, #0
}
 810cbd8:	4618      	mov	r0, r3
 810cbda:	3714      	adds	r7, #20
 810cbdc:	46bd      	mov	sp, r7
 810cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbe2:	4770      	bx	lr

0810cbe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cbe4:	b580      	push	{r7, lr}
 810cbe6:	b084      	sub	sp, #16
 810cbe8:	af00      	add	r7, sp, #0
 810cbea:	6078      	str	r0, [r7, #4]
 810cbec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cbee:	687b      	ldr	r3, [r7, #4]
 810cbf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cbf4:	2b01      	cmp	r3, #1
 810cbf6:	d101      	bne.n	810cbfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810cbf8:	2302      	movs	r3, #2
 810cbfa:	e02d      	b.n	810cc58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810cbfc:	687b      	ldr	r3, [r7, #4]
 810cbfe:	2201      	movs	r2, #1
 810cc00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cc04:	687b      	ldr	r3, [r7, #4]
 810cc06:	2224      	movs	r2, #36	@ 0x24
 810cc08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cc0c:	687b      	ldr	r3, [r7, #4]
 810cc0e:	681b      	ldr	r3, [r3, #0]
 810cc10:	681b      	ldr	r3, [r3, #0]
 810cc12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cc14:	687b      	ldr	r3, [r7, #4]
 810cc16:	681b      	ldr	r3, [r3, #0]
 810cc18:	681a      	ldr	r2, [r3, #0]
 810cc1a:	687b      	ldr	r3, [r7, #4]
 810cc1c:	681b      	ldr	r3, [r3, #0]
 810cc1e:	f022 0201 	bic.w	r2, r2, #1
 810cc22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810cc24:	687b      	ldr	r3, [r7, #4]
 810cc26:	681b      	ldr	r3, [r3, #0]
 810cc28:	689b      	ldr	r3, [r3, #8]
 810cc2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810cc2e:	687b      	ldr	r3, [r7, #4]
 810cc30:	681b      	ldr	r3, [r3, #0]
 810cc32:	683a      	ldr	r2, [r7, #0]
 810cc34:	430a      	orrs	r2, r1
 810cc36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cc38:	6878      	ldr	r0, [r7, #4]
 810cc3a:	f000 f84f 	bl	810ccdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cc3e:	687b      	ldr	r3, [r7, #4]
 810cc40:	681b      	ldr	r3, [r3, #0]
 810cc42:	68fa      	ldr	r2, [r7, #12]
 810cc44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cc46:	687b      	ldr	r3, [r7, #4]
 810cc48:	2220      	movs	r2, #32
 810cc4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cc4e:	687b      	ldr	r3, [r7, #4]
 810cc50:	2200      	movs	r2, #0
 810cc52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810cc56:	2300      	movs	r3, #0
}
 810cc58:	4618      	mov	r0, r3
 810cc5a:	3710      	adds	r7, #16
 810cc5c:	46bd      	mov	sp, r7
 810cc5e:	bd80      	pop	{r7, pc}

0810cc60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cc60:	b580      	push	{r7, lr}
 810cc62:	b084      	sub	sp, #16
 810cc64:	af00      	add	r7, sp, #0
 810cc66:	6078      	str	r0, [r7, #4]
 810cc68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cc6a:	687b      	ldr	r3, [r7, #4]
 810cc6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cc70:	2b01      	cmp	r3, #1
 810cc72:	d101      	bne.n	810cc78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810cc74:	2302      	movs	r3, #2
 810cc76:	e02d      	b.n	810ccd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810cc78:	687b      	ldr	r3, [r7, #4]
 810cc7a:	2201      	movs	r2, #1
 810cc7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cc80:	687b      	ldr	r3, [r7, #4]
 810cc82:	2224      	movs	r2, #36	@ 0x24
 810cc84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cc88:	687b      	ldr	r3, [r7, #4]
 810cc8a:	681b      	ldr	r3, [r3, #0]
 810cc8c:	681b      	ldr	r3, [r3, #0]
 810cc8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cc90:	687b      	ldr	r3, [r7, #4]
 810cc92:	681b      	ldr	r3, [r3, #0]
 810cc94:	681a      	ldr	r2, [r3, #0]
 810cc96:	687b      	ldr	r3, [r7, #4]
 810cc98:	681b      	ldr	r3, [r3, #0]
 810cc9a:	f022 0201 	bic.w	r2, r2, #1
 810cc9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810cca0:	687b      	ldr	r3, [r7, #4]
 810cca2:	681b      	ldr	r3, [r3, #0]
 810cca4:	689b      	ldr	r3, [r3, #8]
 810cca6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810ccaa:	687b      	ldr	r3, [r7, #4]
 810ccac:	681b      	ldr	r3, [r3, #0]
 810ccae:	683a      	ldr	r2, [r7, #0]
 810ccb0:	430a      	orrs	r2, r1
 810ccb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ccb4:	6878      	ldr	r0, [r7, #4]
 810ccb6:	f000 f811 	bl	810ccdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ccba:	687b      	ldr	r3, [r7, #4]
 810ccbc:	681b      	ldr	r3, [r3, #0]
 810ccbe:	68fa      	ldr	r2, [r7, #12]
 810ccc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ccc2:	687b      	ldr	r3, [r7, #4]
 810ccc4:	2220      	movs	r2, #32
 810ccc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ccca:	687b      	ldr	r3, [r7, #4]
 810cccc:	2200      	movs	r2, #0
 810ccce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ccd2:	2300      	movs	r3, #0
}
 810ccd4:	4618      	mov	r0, r3
 810ccd6:	3710      	adds	r7, #16
 810ccd8:	46bd      	mov	sp, r7
 810ccda:	bd80      	pop	{r7, pc}

0810ccdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ccdc:	b480      	push	{r7}
 810ccde:	b085      	sub	sp, #20
 810cce0:	af00      	add	r7, sp, #0
 810cce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810cce4:	687b      	ldr	r3, [r7, #4]
 810cce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810cce8:	2b00      	cmp	r3, #0
 810ccea:	d108      	bne.n	810ccfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ccec:	687b      	ldr	r3, [r7, #4]
 810ccee:	2201      	movs	r2, #1
 810ccf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ccf4:	687b      	ldr	r3, [r7, #4]
 810ccf6:	2201      	movs	r2, #1
 810ccf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ccfc:	e031      	b.n	810cd62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ccfe:	2310      	movs	r3, #16
 810cd00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810cd02:	2310      	movs	r3, #16
 810cd04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810cd06:	687b      	ldr	r3, [r7, #4]
 810cd08:	681b      	ldr	r3, [r3, #0]
 810cd0a:	689b      	ldr	r3, [r3, #8]
 810cd0c:	0e5b      	lsrs	r3, r3, #25
 810cd0e:	b2db      	uxtb	r3, r3
 810cd10:	f003 0307 	and.w	r3, r3, #7
 810cd14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810cd16:	687b      	ldr	r3, [r7, #4]
 810cd18:	681b      	ldr	r3, [r3, #0]
 810cd1a:	689b      	ldr	r3, [r3, #8]
 810cd1c:	0f5b      	lsrs	r3, r3, #29
 810cd1e:	b2db      	uxtb	r3, r3
 810cd20:	f003 0307 	and.w	r3, r3, #7
 810cd24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cd26:	7bbb      	ldrb	r3, [r7, #14]
 810cd28:	7b3a      	ldrb	r2, [r7, #12]
 810cd2a:	4911      	ldr	r1, [pc, #68]	@ (810cd70 <UARTEx_SetNbDataToProcess+0x94>)
 810cd2c:	5c8a      	ldrb	r2, [r1, r2]
 810cd2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810cd32:	7b3a      	ldrb	r2, [r7, #12]
 810cd34:	490f      	ldr	r1, [pc, #60]	@ (810cd74 <UARTEx_SetNbDataToProcess+0x98>)
 810cd36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cd38:	fb93 f3f2 	sdiv	r3, r3, r2
 810cd3c:	b29a      	uxth	r2, r3
 810cd3e:	687b      	ldr	r3, [r7, #4]
 810cd40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cd44:	7bfb      	ldrb	r3, [r7, #15]
 810cd46:	7b7a      	ldrb	r2, [r7, #13]
 810cd48:	4909      	ldr	r1, [pc, #36]	@ (810cd70 <UARTEx_SetNbDataToProcess+0x94>)
 810cd4a:	5c8a      	ldrb	r2, [r1, r2]
 810cd4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810cd50:	7b7a      	ldrb	r2, [r7, #13]
 810cd52:	4908      	ldr	r1, [pc, #32]	@ (810cd74 <UARTEx_SetNbDataToProcess+0x98>)
 810cd54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cd56:	fb93 f3f2 	sdiv	r3, r3, r2
 810cd5a:	b29a      	uxth	r2, r3
 810cd5c:	687b      	ldr	r3, [r7, #4]
 810cd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810cd62:	bf00      	nop
 810cd64:	3714      	adds	r7, #20
 810cd66:	46bd      	mov	sp, r7
 810cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd6c:	4770      	bx	lr
 810cd6e:	bf00      	nop
 810cd70:	0810e89c 	.word	0x0810e89c
 810cd74:	0810e8a4 	.word	0x0810e8a4

0810cd78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 810cd78:	b480      	push	{r7}
 810cd7a:	b083      	sub	sp, #12
 810cd7c:	af00      	add	r7, sp, #0
 810cd7e:	6078      	str	r0, [r7, #4]
 810cd80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810cd82:	683b      	ldr	r3, [r7, #0]
 810cd84:	681b      	ldr	r3, [r3, #0]
 810cd86:	2b00      	cmp	r3, #0
 810cd88:	d123      	bne.n	810cdd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810cd8a:	687b      	ldr	r3, [r7, #4]
 810cd8c:	681b      	ldr	r3, [r3, #0]
 810cd8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810cd92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810cd96:	683a      	ldr	r2, [r7, #0]
 810cd98:	6851      	ldr	r1, [r2, #4]
 810cd9a:	683a      	ldr	r2, [r7, #0]
 810cd9c:	6892      	ldr	r2, [r2, #8]
 810cd9e:	4311      	orrs	r1, r2
 810cda0:	683a      	ldr	r2, [r7, #0]
 810cda2:	68d2      	ldr	r2, [r2, #12]
 810cda4:	4311      	orrs	r1, r2
 810cda6:	683a      	ldr	r2, [r7, #0]
 810cda8:	6912      	ldr	r2, [r2, #16]
 810cdaa:	4311      	orrs	r1, r2
 810cdac:	683a      	ldr	r2, [r7, #0]
 810cdae:	6952      	ldr	r2, [r2, #20]
 810cdb0:	4311      	orrs	r1, r2
 810cdb2:	683a      	ldr	r2, [r7, #0]
 810cdb4:	6992      	ldr	r2, [r2, #24]
 810cdb6:	4311      	orrs	r1, r2
 810cdb8:	683a      	ldr	r2, [r7, #0]
 810cdba:	69d2      	ldr	r2, [r2, #28]
 810cdbc:	4311      	orrs	r1, r2
 810cdbe:	683a      	ldr	r2, [r7, #0]
 810cdc0:	6a12      	ldr	r2, [r2, #32]
 810cdc2:	4311      	orrs	r1, r2
 810cdc4:	683a      	ldr	r2, [r7, #0]
 810cdc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810cdc8:	430a      	orrs	r2, r1
 810cdca:	431a      	orrs	r2, r3
 810cdcc:	687b      	ldr	r3, [r7, #4]
 810cdce:	601a      	str	r2, [r3, #0]
 810cdd0:	e028      	b.n	810ce24 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810cdd2:	687b      	ldr	r3, [r7, #4]
 810cdd4:	681b      	ldr	r3, [r3, #0]
 810cdd6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810cdda:	683b      	ldr	r3, [r7, #0]
 810cddc:	69d9      	ldr	r1, [r3, #28]
 810cdde:	683b      	ldr	r3, [r7, #0]
 810cde0:	6a1b      	ldr	r3, [r3, #32]
 810cde2:	4319      	orrs	r1, r3
 810cde4:	683b      	ldr	r3, [r7, #0]
 810cde6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cde8:	430b      	orrs	r3, r1
 810cdea:	431a      	orrs	r2, r3
 810cdec:	687b      	ldr	r3, [r7, #4]
 810cdee:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810cdf0:	687b      	ldr	r3, [r7, #4]
 810cdf2:	685b      	ldr	r3, [r3, #4]
 810cdf4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810cdf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810cdfc:	683a      	ldr	r2, [r7, #0]
 810cdfe:	6851      	ldr	r1, [r2, #4]
 810ce00:	683a      	ldr	r2, [r7, #0]
 810ce02:	6892      	ldr	r2, [r2, #8]
 810ce04:	4311      	orrs	r1, r2
 810ce06:	683a      	ldr	r2, [r7, #0]
 810ce08:	68d2      	ldr	r2, [r2, #12]
 810ce0a:	4311      	orrs	r1, r2
 810ce0c:	683a      	ldr	r2, [r7, #0]
 810ce0e:	6912      	ldr	r2, [r2, #16]
 810ce10:	4311      	orrs	r1, r2
 810ce12:	683a      	ldr	r2, [r7, #0]
 810ce14:	6952      	ldr	r2, [r2, #20]
 810ce16:	4311      	orrs	r1, r2
 810ce18:	683a      	ldr	r2, [r7, #0]
 810ce1a:	6992      	ldr	r2, [r2, #24]
 810ce1c:	430a      	orrs	r2, r1
 810ce1e:	431a      	orrs	r2, r3
 810ce20:	687b      	ldr	r3, [r7, #4]
 810ce22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810ce24:	2300      	movs	r3, #0
}
 810ce26:	4618      	mov	r0, r3
 810ce28:	370c      	adds	r7, #12
 810ce2a:	46bd      	mov	sp, r7
 810ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce30:	4770      	bx	lr

0810ce32 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810ce32:	b480      	push	{r7}
 810ce34:	b085      	sub	sp, #20
 810ce36:	af00      	add	r7, sp, #0
 810ce38:	60f8      	str	r0, [r7, #12]
 810ce3a:	60b9      	str	r1, [r7, #8]
 810ce3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810ce3e:	687b      	ldr	r3, [r7, #4]
 810ce40:	2b00      	cmp	r3, #0
 810ce42:	d128      	bne.n	810ce96 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810ce44:	68fb      	ldr	r3, [r7, #12]
 810ce46:	689b      	ldr	r3, [r3, #8]
 810ce48:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810ce4c:	68bb      	ldr	r3, [r7, #8]
 810ce4e:	681b      	ldr	r3, [r3, #0]
 810ce50:	1e59      	subs	r1, r3, #1
 810ce52:	68bb      	ldr	r3, [r7, #8]
 810ce54:	685b      	ldr	r3, [r3, #4]
 810ce56:	3b01      	subs	r3, #1
 810ce58:	011b      	lsls	r3, r3, #4
 810ce5a:	4319      	orrs	r1, r3
 810ce5c:	68bb      	ldr	r3, [r7, #8]
 810ce5e:	689b      	ldr	r3, [r3, #8]
 810ce60:	3b01      	subs	r3, #1
 810ce62:	021b      	lsls	r3, r3, #8
 810ce64:	4319      	orrs	r1, r3
 810ce66:	68bb      	ldr	r3, [r7, #8]
 810ce68:	68db      	ldr	r3, [r3, #12]
 810ce6a:	3b01      	subs	r3, #1
 810ce6c:	031b      	lsls	r3, r3, #12
 810ce6e:	4319      	orrs	r1, r3
 810ce70:	68bb      	ldr	r3, [r7, #8]
 810ce72:	691b      	ldr	r3, [r3, #16]
 810ce74:	3b01      	subs	r3, #1
 810ce76:	041b      	lsls	r3, r3, #16
 810ce78:	4319      	orrs	r1, r3
 810ce7a:	68bb      	ldr	r3, [r7, #8]
 810ce7c:	695b      	ldr	r3, [r3, #20]
 810ce7e:	3b01      	subs	r3, #1
 810ce80:	051b      	lsls	r3, r3, #20
 810ce82:	4319      	orrs	r1, r3
 810ce84:	68bb      	ldr	r3, [r7, #8]
 810ce86:	699b      	ldr	r3, [r3, #24]
 810ce88:	3b01      	subs	r3, #1
 810ce8a:	061b      	lsls	r3, r3, #24
 810ce8c:	430b      	orrs	r3, r1
 810ce8e:	431a      	orrs	r2, r3
 810ce90:	68fb      	ldr	r3, [r7, #12]
 810ce92:	609a      	str	r2, [r3, #8]
 810ce94:	e02f      	b.n	810cef6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810ce96:	68fb      	ldr	r3, [r7, #12]
 810ce98:	689b      	ldr	r3, [r3, #8]
 810ce9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810ce9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810cea2:	68ba      	ldr	r2, [r7, #8]
 810cea4:	68d2      	ldr	r2, [r2, #12]
 810cea6:	3a01      	subs	r2, #1
 810cea8:	0311      	lsls	r1, r2, #12
 810ceaa:	68ba      	ldr	r2, [r7, #8]
 810ceac:	6952      	ldr	r2, [r2, #20]
 810ceae:	3a01      	subs	r2, #1
 810ceb0:	0512      	lsls	r2, r2, #20
 810ceb2:	430a      	orrs	r2, r1
 810ceb4:	431a      	orrs	r2, r3
 810ceb6:	68fb      	ldr	r3, [r7, #12]
 810ceb8:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810ceba:	68fb      	ldr	r3, [r7, #12]
 810cebc:	68db      	ldr	r3, [r3, #12]
 810cebe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810cec2:	68bb      	ldr	r3, [r7, #8]
 810cec4:	681b      	ldr	r3, [r3, #0]
 810cec6:	1e59      	subs	r1, r3, #1
 810cec8:	68bb      	ldr	r3, [r7, #8]
 810ceca:	685b      	ldr	r3, [r3, #4]
 810cecc:	3b01      	subs	r3, #1
 810cece:	011b      	lsls	r3, r3, #4
 810ced0:	4319      	orrs	r1, r3
 810ced2:	68bb      	ldr	r3, [r7, #8]
 810ced4:	689b      	ldr	r3, [r3, #8]
 810ced6:	3b01      	subs	r3, #1
 810ced8:	021b      	lsls	r3, r3, #8
 810ceda:	4319      	orrs	r1, r3
 810cedc:	68bb      	ldr	r3, [r7, #8]
 810cede:	691b      	ldr	r3, [r3, #16]
 810cee0:	3b01      	subs	r3, #1
 810cee2:	041b      	lsls	r3, r3, #16
 810cee4:	4319      	orrs	r1, r3
 810cee6:	68bb      	ldr	r3, [r7, #8]
 810cee8:	699b      	ldr	r3, [r3, #24]
 810ceea:	3b01      	subs	r3, #1
 810ceec:	061b      	lsls	r3, r3, #24
 810ceee:	430b      	orrs	r3, r1
 810cef0:	431a      	orrs	r2, r3
 810cef2:	68fb      	ldr	r3, [r7, #12]
 810cef4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810cef6:	2300      	movs	r3, #0
}
 810cef8:	4618      	mov	r0, r3
 810cefa:	3714      	adds	r7, #20
 810cefc:	46bd      	mov	sp, r7
 810cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf02:	4770      	bx	lr

0810cf04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810cf04:	b084      	sub	sp, #16
 810cf06:	b480      	push	{r7}
 810cf08:	b085      	sub	sp, #20
 810cf0a:	af00      	add	r7, sp, #0
 810cf0c:	6078      	str	r0, [r7, #4]
 810cf0e:	f107 001c 	add.w	r0, r7, #28
 810cf12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810cf16:	2300      	movs	r3, #0
 810cf18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810cf1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810cf1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810cf1e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810cf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810cf22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810cf26:	431a      	orrs	r2, r3
             Init.ClockDiv
 810cf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810cf2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810cf2c:	68fa      	ldr	r2, [r7, #12]
 810cf2e:	4313      	orrs	r3, r2
 810cf30:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810cf32:	687b      	ldr	r3, [r7, #4]
 810cf34:	685a      	ldr	r2, [r3, #4]
 810cf36:	4b07      	ldr	r3, [pc, #28]	@ (810cf54 <SDMMC_Init+0x50>)
 810cf38:	4013      	ands	r3, r2
 810cf3a:	68fa      	ldr	r2, [r7, #12]
 810cf3c:	431a      	orrs	r2, r3
 810cf3e:	687b      	ldr	r3, [r7, #4]
 810cf40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810cf42:	2300      	movs	r3, #0
}
 810cf44:	4618      	mov	r0, r3
 810cf46:	3714      	adds	r7, #20
 810cf48:	46bd      	mov	sp, r7
 810cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf4e:	b004      	add	sp, #16
 810cf50:	4770      	bx	lr
 810cf52:	bf00      	nop
 810cf54:	ffc02c00 	.word	0xffc02c00

0810cf58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810cf58:	b480      	push	{r7}
 810cf5a:	b083      	sub	sp, #12
 810cf5c:	af00      	add	r7, sp, #0
 810cf5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810cf60:	687b      	ldr	r3, [r7, #4]
 810cf62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810cf66:	4618      	mov	r0, r3
 810cf68:	370c      	adds	r7, #12
 810cf6a:	46bd      	mov	sp, r7
 810cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf70:	4770      	bx	lr

0810cf72 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810cf72:	b480      	push	{r7}
 810cf74:	b083      	sub	sp, #12
 810cf76:	af00      	add	r7, sp, #0
 810cf78:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810cf7a:	687b      	ldr	r3, [r7, #4]
 810cf7c:	681b      	ldr	r3, [r3, #0]
 810cf7e:	f043 0203 	orr.w	r2, r3, #3
 810cf82:	687b      	ldr	r3, [r7, #4]
 810cf84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810cf86:	2300      	movs	r3, #0
}
 810cf88:	4618      	mov	r0, r3
 810cf8a:	370c      	adds	r7, #12
 810cf8c:	46bd      	mov	sp, r7
 810cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf92:	4770      	bx	lr

0810cf94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810cf94:	b480      	push	{r7}
 810cf96:	b083      	sub	sp, #12
 810cf98:	af00      	add	r7, sp, #0
 810cf9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810cf9c:	687b      	ldr	r3, [r7, #4]
 810cf9e:	681b      	ldr	r3, [r3, #0]
 810cfa0:	f003 0303 	and.w	r3, r3, #3
}
 810cfa4:	4618      	mov	r0, r3
 810cfa6:	370c      	adds	r7, #12
 810cfa8:	46bd      	mov	sp, r7
 810cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfae:	4770      	bx	lr

0810cfb0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810cfb0:	b480      	push	{r7}
 810cfb2:	b085      	sub	sp, #20
 810cfb4:	af00      	add	r7, sp, #0
 810cfb6:	6078      	str	r0, [r7, #4]
 810cfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810cfba:	2300      	movs	r3, #0
 810cfbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810cfbe:	683b      	ldr	r3, [r7, #0]
 810cfc0:	681a      	ldr	r2, [r3, #0]
 810cfc2:	687b      	ldr	r3, [r7, #4]
 810cfc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810cfc6:	683b      	ldr	r3, [r7, #0]
 810cfc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810cfca:	683b      	ldr	r3, [r7, #0]
 810cfcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810cfce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810cfd0:	683b      	ldr	r3, [r7, #0]
 810cfd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810cfd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 810cfd6:	683b      	ldr	r3, [r7, #0]
 810cfd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810cfda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810cfdc:	68fa      	ldr	r2, [r7, #12]
 810cfde:	4313      	orrs	r3, r2
 810cfe0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810cfe2:	687b      	ldr	r3, [r7, #4]
 810cfe4:	68da      	ldr	r2, [r3, #12]
 810cfe6:	4b06      	ldr	r3, [pc, #24]	@ (810d000 <SDMMC_SendCommand+0x50>)
 810cfe8:	4013      	ands	r3, r2
 810cfea:	68fa      	ldr	r2, [r7, #12]
 810cfec:	431a      	orrs	r2, r3
 810cfee:	687b      	ldr	r3, [r7, #4]
 810cff0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810cff2:	2300      	movs	r3, #0
}
 810cff4:	4618      	mov	r0, r3
 810cff6:	3714      	adds	r7, #20
 810cff8:	46bd      	mov	sp, r7
 810cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cffe:	4770      	bx	lr
 810d000:	fffee0c0 	.word	0xfffee0c0

0810d004 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810d004:	b480      	push	{r7}
 810d006:	b083      	sub	sp, #12
 810d008:	af00      	add	r7, sp, #0
 810d00a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810d00c:	687b      	ldr	r3, [r7, #4]
 810d00e:	691b      	ldr	r3, [r3, #16]
 810d010:	b2db      	uxtb	r3, r3
}
 810d012:	4618      	mov	r0, r3
 810d014:	370c      	adds	r7, #12
 810d016:	46bd      	mov	sp, r7
 810d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d01c:	4770      	bx	lr

0810d01e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810d01e:	b480      	push	{r7}
 810d020:	b085      	sub	sp, #20
 810d022:	af00      	add	r7, sp, #0
 810d024:	6078      	str	r0, [r7, #4]
 810d026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810d028:	687b      	ldr	r3, [r7, #4]
 810d02a:	3314      	adds	r3, #20
 810d02c:	461a      	mov	r2, r3
 810d02e:	683b      	ldr	r3, [r7, #0]
 810d030:	4413      	add	r3, r2
 810d032:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810d034:	68fb      	ldr	r3, [r7, #12]
 810d036:	681b      	ldr	r3, [r3, #0]
}
 810d038:	4618      	mov	r0, r3
 810d03a:	3714      	adds	r7, #20
 810d03c:	46bd      	mov	sp, r7
 810d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d042:	4770      	bx	lr

0810d044 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810d044:	b480      	push	{r7}
 810d046:	b085      	sub	sp, #20
 810d048:	af00      	add	r7, sp, #0
 810d04a:	6078      	str	r0, [r7, #4]
 810d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810d04e:	2300      	movs	r3, #0
 810d050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810d052:	683b      	ldr	r3, [r7, #0]
 810d054:	681a      	ldr	r2, [r3, #0]
 810d056:	687b      	ldr	r3, [r7, #4]
 810d058:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810d05a:	683b      	ldr	r3, [r7, #0]
 810d05c:	685a      	ldr	r2, [r3, #4]
 810d05e:	687b      	ldr	r3, [r7, #4]
 810d060:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d062:	683b      	ldr	r3, [r7, #0]
 810d064:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810d066:	683b      	ldr	r3, [r7, #0]
 810d068:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d06a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810d06c:	683b      	ldr	r3, [r7, #0]
 810d06e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810d070:	431a      	orrs	r2, r3
                       Data->DPSM);
 810d072:	683b      	ldr	r3, [r7, #0]
 810d074:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810d076:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d078:	68fa      	ldr	r2, [r7, #12]
 810d07a:	4313      	orrs	r3, r2
 810d07c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810d07e:	687b      	ldr	r3, [r7, #4]
 810d080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d082:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810d086:	68fb      	ldr	r3, [r7, #12]
 810d088:	431a      	orrs	r2, r3
 810d08a:	687b      	ldr	r3, [r7, #4]
 810d08c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810d08e:	2300      	movs	r3, #0

}
 810d090:	4618      	mov	r0, r3
 810d092:	3714      	adds	r7, #20
 810d094:	46bd      	mov	sp, r7
 810d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d09a:	4770      	bx	lr

0810d09c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810d09c:	b580      	push	{r7, lr}
 810d09e:	b088      	sub	sp, #32
 810d0a0:	af00      	add	r7, sp, #0
 810d0a2:	6078      	str	r0, [r7, #4]
 810d0a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810d0a6:	683b      	ldr	r3, [r7, #0]
 810d0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810d0aa:	2310      	movs	r3, #16
 810d0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d0ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d0b4:	2300      	movs	r3, #0
 810d0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d0b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d0bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d0be:	f107 0308 	add.w	r3, r7, #8
 810d0c2:	4619      	mov	r1, r3
 810d0c4:	6878      	ldr	r0, [r7, #4]
 810d0c6:	f7ff ff73 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810d0ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d0ce:	2110      	movs	r1, #16
 810d0d0:	6878      	ldr	r0, [r7, #4]
 810d0d2:	f000 f995 	bl	810d400 <SDMMC_GetCmdResp1>
 810d0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d0d8:	69fb      	ldr	r3, [r7, #28]
}
 810d0da:	4618      	mov	r0, r3
 810d0dc:	3720      	adds	r7, #32
 810d0de:	46bd      	mov	sp, r7
 810d0e0:	bd80      	pop	{r7, pc}

0810d0e2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810d0e2:	b580      	push	{r7, lr}
 810d0e4:	b088      	sub	sp, #32
 810d0e6:	af00      	add	r7, sp, #0
 810d0e8:	6078      	str	r0, [r7, #4]
 810d0ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810d0ec:	683b      	ldr	r3, [r7, #0]
 810d0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810d0f0:	2307      	movs	r3, #7
 810d0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d0f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d0fa:	2300      	movs	r3, #0
 810d0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d0fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d104:	f107 0308 	add.w	r3, r7, #8
 810d108:	4619      	mov	r1, r3
 810d10a:	6878      	ldr	r0, [r7, #4]
 810d10c:	f7ff ff50 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810d110:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d114:	2107      	movs	r1, #7
 810d116:	6878      	ldr	r0, [r7, #4]
 810d118:	f000 f972 	bl	810d400 <SDMMC_GetCmdResp1>
 810d11c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d11e:	69fb      	ldr	r3, [r7, #28]
}
 810d120:	4618      	mov	r0, r3
 810d122:	3720      	adds	r7, #32
 810d124:	46bd      	mov	sp, r7
 810d126:	bd80      	pop	{r7, pc}

0810d128 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810d128:	b580      	push	{r7, lr}
 810d12a:	b088      	sub	sp, #32
 810d12c:	af00      	add	r7, sp, #0
 810d12e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d130:	2300      	movs	r3, #0
 810d132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810d134:	2300      	movs	r3, #0
 810d136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810d138:	2300      	movs	r3, #0
 810d13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d13c:	2300      	movs	r3, #0
 810d13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d146:	f107 0308 	add.w	r3, r7, #8
 810d14a:	4619      	mov	r1, r3
 810d14c:	6878      	ldr	r0, [r7, #4]
 810d14e:	f7ff ff2f 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810d152:	6878      	ldr	r0, [r7, #4]
 810d154:	f000 fb96 	bl	810d884 <SDMMC_GetCmdError>
 810d158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d15a:	69fb      	ldr	r3, [r7, #28]
}
 810d15c:	4618      	mov	r0, r3
 810d15e:	3720      	adds	r7, #32
 810d160:	46bd      	mov	sp, r7
 810d162:	bd80      	pop	{r7, pc}

0810d164 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810d164:	b580      	push	{r7, lr}
 810d166:	b088      	sub	sp, #32
 810d168:	af00      	add	r7, sp, #0
 810d16a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810d16c:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810d170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810d172:	2308      	movs	r3, #8
 810d174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d176:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d17c:	2300      	movs	r3, #0
 810d17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d186:	f107 0308 	add.w	r3, r7, #8
 810d18a:	4619      	mov	r1, r3
 810d18c:	6878      	ldr	r0, [r7, #4]
 810d18e:	f7ff ff0f 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810d192:	6878      	ldr	r0, [r7, #4]
 810d194:	f000 fb28 	bl	810d7e8 <SDMMC_GetCmdResp7>
 810d198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d19a:	69fb      	ldr	r3, [r7, #28]
}
 810d19c:	4618      	mov	r0, r3
 810d19e:	3720      	adds	r7, #32
 810d1a0:	46bd      	mov	sp, r7
 810d1a2:	bd80      	pop	{r7, pc}

0810d1a4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d1a4:	b580      	push	{r7, lr}
 810d1a6:	b088      	sub	sp, #32
 810d1a8:	af00      	add	r7, sp, #0
 810d1aa:	6078      	str	r0, [r7, #4]
 810d1ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810d1ae:	683b      	ldr	r3, [r7, #0]
 810d1b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810d1b2:	2337      	movs	r3, #55	@ 0x37
 810d1b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d1b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d1ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d1bc:	2300      	movs	r3, #0
 810d1be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d1c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d1c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d1c6:	f107 0308 	add.w	r3, r7, #8
 810d1ca:	4619      	mov	r1, r3
 810d1cc:	6878      	ldr	r0, [r7, #4]
 810d1ce:	f7ff feef 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810d1d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d1d6:	2137      	movs	r1, #55	@ 0x37
 810d1d8:	6878      	ldr	r0, [r7, #4]
 810d1da:	f000 f911 	bl	810d400 <SDMMC_GetCmdResp1>
 810d1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d1e0:	69fb      	ldr	r3, [r7, #28]
}
 810d1e2:	4618      	mov	r0, r3
 810d1e4:	3720      	adds	r7, #32
 810d1e6:	46bd      	mov	sp, r7
 810d1e8:	bd80      	pop	{r7, pc}

0810d1ea <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d1ea:	b580      	push	{r7, lr}
 810d1ec:	b088      	sub	sp, #32
 810d1ee:	af00      	add	r7, sp, #0
 810d1f0:	6078      	str	r0, [r7, #4]
 810d1f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d1f4:	683b      	ldr	r3, [r7, #0]
 810d1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810d1f8:	2329      	movs	r3, #41	@ 0x29
 810d1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d1fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d202:	2300      	movs	r3, #0
 810d204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d20a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d20c:	f107 0308 	add.w	r3, r7, #8
 810d210:	4619      	mov	r1, r3
 810d212:	6878      	ldr	r0, [r7, #4]
 810d214:	f7ff fecc 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810d218:	6878      	ldr	r0, [r7, #4]
 810d21a:	f000 fa2d 	bl	810d678 <SDMMC_GetCmdResp3>
 810d21e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d220:	69fb      	ldr	r3, [r7, #28]
}
 810d222:	4618      	mov	r0, r3
 810d224:	3720      	adds	r7, #32
 810d226:	46bd      	mov	sp, r7
 810d228:	bd80      	pop	{r7, pc}

0810d22a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810d22a:	b580      	push	{r7, lr}
 810d22c:	b088      	sub	sp, #32
 810d22e:	af00      	add	r7, sp, #0
 810d230:	6078      	str	r0, [r7, #4]
 810d232:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810d234:	683b      	ldr	r3, [r7, #0]
 810d236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810d238:	2306      	movs	r3, #6
 810d23a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d23c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d242:	2300      	movs	r3, #0
 810d244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d24a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d24c:	f107 0308 	add.w	r3, r7, #8
 810d250:	4619      	mov	r1, r3
 810d252:	6878      	ldr	r0, [r7, #4]
 810d254:	f7ff feac 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810d258:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d25c:	2106      	movs	r1, #6
 810d25e:	6878      	ldr	r0, [r7, #4]
 810d260:	f000 f8ce 	bl	810d400 <SDMMC_GetCmdResp1>
 810d264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d266:	69fb      	ldr	r3, [r7, #28]
}
 810d268:	4618      	mov	r0, r3
 810d26a:	3720      	adds	r7, #32
 810d26c:	46bd      	mov	sp, r7
 810d26e:	bd80      	pop	{r7, pc}

0810d270 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810d270:	b580      	push	{r7, lr}
 810d272:	b088      	sub	sp, #32
 810d274:	af00      	add	r7, sp, #0
 810d276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810d278:	2300      	movs	r3, #0
 810d27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810d27c:	2333      	movs	r3, #51	@ 0x33
 810d27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d286:	2300      	movs	r3, #0
 810d288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d28a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d28e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d290:	f107 0308 	add.w	r3, r7, #8
 810d294:	4619      	mov	r1, r3
 810d296:	6878      	ldr	r0, [r7, #4]
 810d298:	f7ff fe8a 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810d29c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d2a0:	2133      	movs	r1, #51	@ 0x33
 810d2a2:	6878      	ldr	r0, [r7, #4]
 810d2a4:	f000 f8ac 	bl	810d400 <SDMMC_GetCmdResp1>
 810d2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2aa:	69fb      	ldr	r3, [r7, #28]
}
 810d2ac:	4618      	mov	r0, r3
 810d2ae:	3720      	adds	r7, #32
 810d2b0:	46bd      	mov	sp, r7
 810d2b2:	bd80      	pop	{r7, pc}

0810d2b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810d2b4:	b580      	push	{r7, lr}
 810d2b6:	b088      	sub	sp, #32
 810d2b8:	af00      	add	r7, sp, #0
 810d2ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810d2bc:	2300      	movs	r3, #0
 810d2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810d2c0:	2302      	movs	r3, #2
 810d2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d2c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810d2c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d2ca:	2300      	movs	r3, #0
 810d2cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d2ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d2d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d2d4:	f107 0308 	add.w	r3, r7, #8
 810d2d8:	4619      	mov	r1, r3
 810d2da:	6878      	ldr	r0, [r7, #4]
 810d2dc:	f7ff fe68 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d2e0:	6878      	ldr	r0, [r7, #4]
 810d2e2:	f000 f97f 	bl	810d5e4 <SDMMC_GetCmdResp2>
 810d2e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2e8:	69fb      	ldr	r3, [r7, #28]
}
 810d2ea:	4618      	mov	r0, r3
 810d2ec:	3720      	adds	r7, #32
 810d2ee:	46bd      	mov	sp, r7
 810d2f0:	bd80      	pop	{r7, pc}

0810d2f2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d2f2:	b580      	push	{r7, lr}
 810d2f4:	b088      	sub	sp, #32
 810d2f6:	af00      	add	r7, sp, #0
 810d2f8:	6078      	str	r0, [r7, #4]
 810d2fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810d2fc:	683b      	ldr	r3, [r7, #0]
 810d2fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810d300:	2309      	movs	r3, #9
 810d302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d304:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810d308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d30a:	2300      	movs	r3, #0
 810d30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d30e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d312:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d314:	f107 0308 	add.w	r3, r7, #8
 810d318:	4619      	mov	r1, r3
 810d31a:	6878      	ldr	r0, [r7, #4]
 810d31c:	f7ff fe48 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d320:	6878      	ldr	r0, [r7, #4]
 810d322:	f000 f95f 	bl	810d5e4 <SDMMC_GetCmdResp2>
 810d326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d328:	69fb      	ldr	r3, [r7, #28]
}
 810d32a:	4618      	mov	r0, r3
 810d32c:	3720      	adds	r7, #32
 810d32e:	46bd      	mov	sp, r7
 810d330:	bd80      	pop	{r7, pc}

0810d332 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810d332:	b580      	push	{r7, lr}
 810d334:	b088      	sub	sp, #32
 810d336:	af00      	add	r7, sp, #0
 810d338:	6078      	str	r0, [r7, #4]
 810d33a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810d33c:	2300      	movs	r3, #0
 810d33e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810d340:	2303      	movs	r3, #3
 810d342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d34a:	2300      	movs	r3, #0
 810d34c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d34e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d354:	f107 0308 	add.w	r3, r7, #8
 810d358:	4619      	mov	r1, r3
 810d35a:	6878      	ldr	r0, [r7, #4]
 810d35c:	f7ff fe28 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810d360:	683a      	ldr	r2, [r7, #0]
 810d362:	2103      	movs	r1, #3
 810d364:	6878      	ldr	r0, [r7, #4]
 810d366:	f000 f9c7 	bl	810d6f8 <SDMMC_GetCmdResp6>
 810d36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d36c:	69fb      	ldr	r3, [r7, #28]
}
 810d36e:	4618      	mov	r0, r3
 810d370:	3720      	adds	r7, #32
 810d372:	46bd      	mov	sp, r7
 810d374:	bd80      	pop	{r7, pc}

0810d376 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d376:	b580      	push	{r7, lr}
 810d378:	b088      	sub	sp, #32
 810d37a:	af00      	add	r7, sp, #0
 810d37c:	6078      	str	r0, [r7, #4]
 810d37e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d380:	683b      	ldr	r3, [r7, #0]
 810d382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810d384:	230d      	movs	r3, #13
 810d386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d38e:	2300      	movs	r3, #0
 810d390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d398:	f107 0308 	add.w	r3, r7, #8
 810d39c:	4619      	mov	r1, r3
 810d39e:	6878      	ldr	r0, [r7, #4]
 810d3a0:	f7ff fe06 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810d3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d3a8:	210d      	movs	r1, #13
 810d3aa:	6878      	ldr	r0, [r7, #4]
 810d3ac:	f000 f828 	bl	810d400 <SDMMC_GetCmdResp1>
 810d3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d3b2:	69fb      	ldr	r3, [r7, #28]
}
 810d3b4:	4618      	mov	r0, r3
 810d3b6:	3720      	adds	r7, #32
 810d3b8:	46bd      	mov	sp, r7
 810d3ba:	bd80      	pop	{r7, pc}

0810d3bc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810d3bc:	b580      	push	{r7, lr}
 810d3be:	b088      	sub	sp, #32
 810d3c0:	af00      	add	r7, sp, #0
 810d3c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d3c4:	2300      	movs	r3, #0
 810d3c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810d3c8:	230d      	movs	r3, #13
 810d3ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d3cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d3d2:	2300      	movs	r3, #0
 810d3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d3d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d3da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d3dc:	f107 0308 	add.w	r3, r7, #8
 810d3e0:	4619      	mov	r1, r3
 810d3e2:	6878      	ldr	r0, [r7, #4]
 810d3e4:	f7ff fde4 	bl	810cfb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810d3e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d3ec:	210d      	movs	r1, #13
 810d3ee:	6878      	ldr	r0, [r7, #4]
 810d3f0:	f000 f806 	bl	810d400 <SDMMC_GetCmdResp1>
 810d3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d3f6:	69fb      	ldr	r3, [r7, #28]
}
 810d3f8:	4618      	mov	r0, r3
 810d3fa:	3720      	adds	r7, #32
 810d3fc:	46bd      	mov	sp, r7
 810d3fe:	bd80      	pop	{r7, pc}

0810d400 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810d400:	b580      	push	{r7, lr}
 810d402:	b088      	sub	sp, #32
 810d404:	af00      	add	r7, sp, #0
 810d406:	60f8      	str	r0, [r7, #12]
 810d408:	460b      	mov	r3, r1
 810d40a:	607a      	str	r2, [r7, #4]
 810d40c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810d40e:	4b70      	ldr	r3, [pc, #448]	@ (810d5d0 <SDMMC_GetCmdResp1+0x1d0>)
 810d410:	681b      	ldr	r3, [r3, #0]
 810d412:	4a70      	ldr	r2, [pc, #448]	@ (810d5d4 <SDMMC_GetCmdResp1+0x1d4>)
 810d414:	fba2 2303 	umull	r2, r3, r2, r3
 810d418:	0a5a      	lsrs	r2, r3, #9
 810d41a:	687b      	ldr	r3, [r7, #4]
 810d41c:	fb02 f303 	mul.w	r3, r2, r3
 810d420:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d422:	69fb      	ldr	r3, [r7, #28]
 810d424:	1e5a      	subs	r2, r3, #1
 810d426:	61fa      	str	r2, [r7, #28]
 810d428:	2b00      	cmp	r3, #0
 810d42a:	d102      	bne.n	810d432 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d42c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d430:	e0c9      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810d432:	68fb      	ldr	r3, [r7, #12]
 810d434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d436:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810d438:	69ba      	ldr	r2, [r7, #24]
 810d43a:	4b67      	ldr	r3, [pc, #412]	@ (810d5d8 <SDMMC_GetCmdResp1+0x1d8>)
 810d43c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d43e:	2b00      	cmp	r3, #0
 810d440:	d0ef      	beq.n	810d422 <SDMMC_GetCmdResp1+0x22>
 810d442:	69bb      	ldr	r3, [r7, #24]
 810d444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810d448:	2b00      	cmp	r3, #0
 810d44a:	d1ea      	bne.n	810d422 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d44c:	68fb      	ldr	r3, [r7, #12]
 810d44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d450:	f003 0304 	and.w	r3, r3, #4
 810d454:	2b00      	cmp	r3, #0
 810d456:	d004      	beq.n	810d462 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d458:	68fb      	ldr	r3, [r7, #12]
 810d45a:	2204      	movs	r2, #4
 810d45c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d45e:	2304      	movs	r3, #4
 810d460:	e0b1      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d462:	68fb      	ldr	r3, [r7, #12]
 810d464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d466:	f003 0301 	and.w	r3, r3, #1
 810d46a:	2b00      	cmp	r3, #0
 810d46c:	d004      	beq.n	810d478 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d46e:	68fb      	ldr	r3, [r7, #12]
 810d470:	2201      	movs	r2, #1
 810d472:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d474:	2301      	movs	r3, #1
 810d476:	e0a6      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d478:	68fb      	ldr	r3, [r7, #12]
 810d47a:	4a58      	ldr	r2, [pc, #352]	@ (810d5dc <SDMMC_GetCmdResp1+0x1dc>)
 810d47c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d47e:	68f8      	ldr	r0, [r7, #12]
 810d480:	f7ff fdc0 	bl	810d004 <SDMMC_GetCommandResponse>
 810d484:	4603      	mov	r3, r0
 810d486:	461a      	mov	r2, r3
 810d488:	7afb      	ldrb	r3, [r7, #11]
 810d48a:	4293      	cmp	r3, r2
 810d48c:	d001      	beq.n	810d492 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d48e:	2301      	movs	r3, #1
 810d490:	e099      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d492:	2100      	movs	r1, #0
 810d494:	68f8      	ldr	r0, [r7, #12]
 810d496:	f7ff fdc2 	bl	810d01e <SDMMC_GetResponse>
 810d49a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810d49c:	697a      	ldr	r2, [r7, #20]
 810d49e:	4b50      	ldr	r3, [pc, #320]	@ (810d5e0 <SDMMC_GetCmdResp1+0x1e0>)
 810d4a0:	4013      	ands	r3, r2
 810d4a2:	2b00      	cmp	r3, #0
 810d4a4:	d101      	bne.n	810d4aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810d4a6:	2300      	movs	r3, #0
 810d4a8:	e08d      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810d4aa:	697b      	ldr	r3, [r7, #20]
 810d4ac:	2b00      	cmp	r3, #0
 810d4ae:	da02      	bge.n	810d4b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810d4b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810d4b4:	e087      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810d4b6:	697b      	ldr	r3, [r7, #20]
 810d4b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	d001      	beq.n	810d4c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810d4c0:	2340      	movs	r3, #64	@ 0x40
 810d4c2:	e080      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810d4c4:	697b      	ldr	r3, [r7, #20]
 810d4c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810d4ca:	2b00      	cmp	r3, #0
 810d4cc:	d001      	beq.n	810d4d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810d4ce:	2380      	movs	r3, #128	@ 0x80
 810d4d0:	e079      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810d4d2:	697b      	ldr	r3, [r7, #20]
 810d4d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810d4d8:	2b00      	cmp	r3, #0
 810d4da:	d002      	beq.n	810d4e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810d4dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d4e0:	e071      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810d4e2:	697b      	ldr	r3, [r7, #20]
 810d4e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810d4e8:	2b00      	cmp	r3, #0
 810d4ea:	d002      	beq.n	810d4f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810d4ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810d4f0:	e069      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810d4f2:	697b      	ldr	r3, [r7, #20]
 810d4f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810d4f8:	2b00      	cmp	r3, #0
 810d4fa:	d002      	beq.n	810d502 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810d4fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d500:	e061      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810d502:	697b      	ldr	r3, [r7, #20]
 810d504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810d508:	2b00      	cmp	r3, #0
 810d50a:	d002      	beq.n	810d512 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810d50c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810d510:	e059      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810d512:	697b      	ldr	r3, [r7, #20]
 810d514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810d518:	2b00      	cmp	r3, #0
 810d51a:	d002      	beq.n	810d522 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d51c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d520:	e051      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810d522:	697b      	ldr	r3, [r7, #20]
 810d524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810d528:	2b00      	cmp	r3, #0
 810d52a:	d002      	beq.n	810d532 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d52c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810d530:	e049      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810d532:	697b      	ldr	r3, [r7, #20]
 810d534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810d538:	2b00      	cmp	r3, #0
 810d53a:	d002      	beq.n	810d542 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810d53c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810d540:	e041      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810d542:	697b      	ldr	r3, [r7, #20]
 810d544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810d548:	2b00      	cmp	r3, #0
 810d54a:	d002      	beq.n	810d552 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810d54c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d550:	e039      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810d552:	697b      	ldr	r3, [r7, #20]
 810d554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810d558:	2b00      	cmp	r3, #0
 810d55a:	d002      	beq.n	810d562 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810d55c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810d560:	e031      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810d562:	697b      	ldr	r3, [r7, #20]
 810d564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810d568:	2b00      	cmp	r3, #0
 810d56a:	d002      	beq.n	810d572 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810d56c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810d570:	e029      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810d572:	697b      	ldr	r3, [r7, #20]
 810d574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810d578:	2b00      	cmp	r3, #0
 810d57a:	d002      	beq.n	810d582 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810d57c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810d580:	e021      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810d582:	697b      	ldr	r3, [r7, #20]
 810d584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810d588:	2b00      	cmp	r3, #0
 810d58a:	d002      	beq.n	810d592 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810d58c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810d590:	e019      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810d592:	697b      	ldr	r3, [r7, #20]
 810d594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d598:	2b00      	cmp	r3, #0
 810d59a:	d002      	beq.n	810d5a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810d59c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810d5a0:	e011      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810d5a2:	697b      	ldr	r3, [r7, #20]
 810d5a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810d5a8:	2b00      	cmp	r3, #0
 810d5aa:	d002      	beq.n	810d5b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810d5ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810d5b0:	e009      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810d5b2:	697b      	ldr	r3, [r7, #20]
 810d5b4:	f003 0308 	and.w	r3, r3, #8
 810d5b8:	2b00      	cmp	r3, #0
 810d5ba:	d002      	beq.n	810d5c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810d5bc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810d5c0:	e001      	b.n	810d5c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d5c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810d5c6:	4618      	mov	r0, r3
 810d5c8:	3720      	adds	r7, #32
 810d5ca:	46bd      	mov	sp, r7
 810d5cc:	bd80      	pop	{r7, pc}
 810d5ce:	bf00      	nop
 810d5d0:	10000000 	.word	0x10000000
 810d5d4:	10624dd3 	.word	0x10624dd3
 810d5d8:	00200045 	.word	0x00200045
 810d5dc:	002000c5 	.word	0x002000c5
 810d5e0:	fdffe008 	.word	0xfdffe008

0810d5e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810d5e4:	b480      	push	{r7}
 810d5e6:	b085      	sub	sp, #20
 810d5e8:	af00      	add	r7, sp, #0
 810d5ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d5ec:	4b1f      	ldr	r3, [pc, #124]	@ (810d66c <SDMMC_GetCmdResp2+0x88>)
 810d5ee:	681b      	ldr	r3, [r3, #0]
 810d5f0:	4a1f      	ldr	r2, [pc, #124]	@ (810d670 <SDMMC_GetCmdResp2+0x8c>)
 810d5f2:	fba2 2303 	umull	r2, r3, r2, r3
 810d5f6:	0a5b      	lsrs	r3, r3, #9
 810d5f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d5fc:	fb02 f303 	mul.w	r3, r2, r3
 810d600:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d602:	68fb      	ldr	r3, [r7, #12]
 810d604:	1e5a      	subs	r2, r3, #1
 810d606:	60fa      	str	r2, [r7, #12]
 810d608:	2b00      	cmp	r3, #0
 810d60a:	d102      	bne.n	810d612 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d60c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d610:	e026      	b.n	810d660 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810d612:	687b      	ldr	r3, [r7, #4]
 810d614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d616:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d618:	68bb      	ldr	r3, [r7, #8]
 810d61a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d61e:	2b00      	cmp	r3, #0
 810d620:	d0ef      	beq.n	810d602 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d622:	68bb      	ldr	r3, [r7, #8]
 810d624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d628:	2b00      	cmp	r3, #0
 810d62a:	d1ea      	bne.n	810d602 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d62c:	687b      	ldr	r3, [r7, #4]
 810d62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d630:	f003 0304 	and.w	r3, r3, #4
 810d634:	2b00      	cmp	r3, #0
 810d636:	d004      	beq.n	810d642 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d638:	687b      	ldr	r3, [r7, #4]
 810d63a:	2204      	movs	r2, #4
 810d63c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d63e:	2304      	movs	r3, #4
 810d640:	e00e      	b.n	810d660 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d642:	687b      	ldr	r3, [r7, #4]
 810d644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d646:	f003 0301 	and.w	r3, r3, #1
 810d64a:	2b00      	cmp	r3, #0
 810d64c:	d004      	beq.n	810d658 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d64e:	687b      	ldr	r3, [r7, #4]
 810d650:	2201      	movs	r2, #1
 810d652:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d654:	2301      	movs	r3, #1
 810d656:	e003      	b.n	810d660 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	4a06      	ldr	r2, [pc, #24]	@ (810d674 <SDMMC_GetCmdResp2+0x90>)
 810d65c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d65e:	2300      	movs	r3, #0
}
 810d660:	4618      	mov	r0, r3
 810d662:	3714      	adds	r7, #20
 810d664:	46bd      	mov	sp, r7
 810d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d66a:	4770      	bx	lr
 810d66c:	10000000 	.word	0x10000000
 810d670:	10624dd3 	.word	0x10624dd3
 810d674:	002000c5 	.word	0x002000c5

0810d678 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810d678:	b480      	push	{r7}
 810d67a:	b085      	sub	sp, #20
 810d67c:	af00      	add	r7, sp, #0
 810d67e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d680:	4b1a      	ldr	r3, [pc, #104]	@ (810d6ec <SDMMC_GetCmdResp3+0x74>)
 810d682:	681b      	ldr	r3, [r3, #0]
 810d684:	4a1a      	ldr	r2, [pc, #104]	@ (810d6f0 <SDMMC_GetCmdResp3+0x78>)
 810d686:	fba2 2303 	umull	r2, r3, r2, r3
 810d68a:	0a5b      	lsrs	r3, r3, #9
 810d68c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d690:	fb02 f303 	mul.w	r3, r2, r3
 810d694:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d696:	68fb      	ldr	r3, [r7, #12]
 810d698:	1e5a      	subs	r2, r3, #1
 810d69a:	60fa      	str	r2, [r7, #12]
 810d69c:	2b00      	cmp	r3, #0
 810d69e:	d102      	bne.n	810d6a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d6a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d6a4:	e01b      	b.n	810d6de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810d6a6:	687b      	ldr	r3, [r7, #4]
 810d6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d6aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d6ac:	68bb      	ldr	r3, [r7, #8]
 810d6ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d6b2:	2b00      	cmp	r3, #0
 810d6b4:	d0ef      	beq.n	810d696 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d6b6:	68bb      	ldr	r3, [r7, #8]
 810d6b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d6bc:	2b00      	cmp	r3, #0
 810d6be:	d1ea      	bne.n	810d696 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d6c0:	687b      	ldr	r3, [r7, #4]
 810d6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d6c4:	f003 0304 	and.w	r3, r3, #4
 810d6c8:	2b00      	cmp	r3, #0
 810d6ca:	d004      	beq.n	810d6d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d6cc:	687b      	ldr	r3, [r7, #4]
 810d6ce:	2204      	movs	r2, #4
 810d6d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d6d2:	2304      	movs	r3, #4
 810d6d4:	e003      	b.n	810d6de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d6d6:	687b      	ldr	r3, [r7, #4]
 810d6d8:	4a06      	ldr	r2, [pc, #24]	@ (810d6f4 <SDMMC_GetCmdResp3+0x7c>)
 810d6da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d6dc:	2300      	movs	r3, #0
}
 810d6de:	4618      	mov	r0, r3
 810d6e0:	3714      	adds	r7, #20
 810d6e2:	46bd      	mov	sp, r7
 810d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6e8:	4770      	bx	lr
 810d6ea:	bf00      	nop
 810d6ec:	10000000 	.word	0x10000000
 810d6f0:	10624dd3 	.word	0x10624dd3
 810d6f4:	002000c5 	.word	0x002000c5

0810d6f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810d6f8:	b580      	push	{r7, lr}
 810d6fa:	b088      	sub	sp, #32
 810d6fc:	af00      	add	r7, sp, #0
 810d6fe:	60f8      	str	r0, [r7, #12]
 810d700:	460b      	mov	r3, r1
 810d702:	607a      	str	r2, [r7, #4]
 810d704:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d706:	4b35      	ldr	r3, [pc, #212]	@ (810d7dc <SDMMC_GetCmdResp6+0xe4>)
 810d708:	681b      	ldr	r3, [r3, #0]
 810d70a:	4a35      	ldr	r2, [pc, #212]	@ (810d7e0 <SDMMC_GetCmdResp6+0xe8>)
 810d70c:	fba2 2303 	umull	r2, r3, r2, r3
 810d710:	0a5b      	lsrs	r3, r3, #9
 810d712:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d716:	fb02 f303 	mul.w	r3, r2, r3
 810d71a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d71c:	69fb      	ldr	r3, [r7, #28]
 810d71e:	1e5a      	subs	r2, r3, #1
 810d720:	61fa      	str	r2, [r7, #28]
 810d722:	2b00      	cmp	r3, #0
 810d724:	d102      	bne.n	810d72c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d726:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d72a:	e052      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810d72c:	68fb      	ldr	r3, [r7, #12]
 810d72e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d730:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d732:	69bb      	ldr	r3, [r7, #24]
 810d734:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d738:	2b00      	cmp	r3, #0
 810d73a:	d0ef      	beq.n	810d71c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d73c:	69bb      	ldr	r3, [r7, #24]
 810d73e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d742:	2b00      	cmp	r3, #0
 810d744:	d1ea      	bne.n	810d71c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d746:	68fb      	ldr	r3, [r7, #12]
 810d748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d74a:	f003 0304 	and.w	r3, r3, #4
 810d74e:	2b00      	cmp	r3, #0
 810d750:	d004      	beq.n	810d75c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d752:	68fb      	ldr	r3, [r7, #12]
 810d754:	2204      	movs	r2, #4
 810d756:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d758:	2304      	movs	r3, #4
 810d75a:	e03a      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d75c:	68fb      	ldr	r3, [r7, #12]
 810d75e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d760:	f003 0301 	and.w	r3, r3, #1
 810d764:	2b00      	cmp	r3, #0
 810d766:	d004      	beq.n	810d772 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d768:	68fb      	ldr	r3, [r7, #12]
 810d76a:	2201      	movs	r2, #1
 810d76c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d76e:	2301      	movs	r3, #1
 810d770:	e02f      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d772:	68f8      	ldr	r0, [r7, #12]
 810d774:	f7ff fc46 	bl	810d004 <SDMMC_GetCommandResponse>
 810d778:	4603      	mov	r3, r0
 810d77a:	461a      	mov	r2, r3
 810d77c:	7afb      	ldrb	r3, [r7, #11]
 810d77e:	4293      	cmp	r3, r2
 810d780:	d001      	beq.n	810d786 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d782:	2301      	movs	r3, #1
 810d784:	e025      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d786:	68fb      	ldr	r3, [r7, #12]
 810d788:	4a16      	ldr	r2, [pc, #88]	@ (810d7e4 <SDMMC_GetCmdResp6+0xec>)
 810d78a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d78c:	2100      	movs	r1, #0
 810d78e:	68f8      	ldr	r0, [r7, #12]
 810d790:	f7ff fc45 	bl	810d01e <SDMMC_GetResponse>
 810d794:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810d796:	697b      	ldr	r3, [r7, #20]
 810d798:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810d79c:	2b00      	cmp	r3, #0
 810d79e:	d106      	bne.n	810d7ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810d7a0:	697b      	ldr	r3, [r7, #20]
 810d7a2:	0c1b      	lsrs	r3, r3, #16
 810d7a4:	b29a      	uxth	r2, r3
 810d7a6:	687b      	ldr	r3, [r7, #4]
 810d7a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810d7aa:	2300      	movs	r3, #0
 810d7ac:	e011      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810d7ae:	697b      	ldr	r3, [r7, #20]
 810d7b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d7b4:	2b00      	cmp	r3, #0
 810d7b6:	d002      	beq.n	810d7be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d7b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810d7bc:	e009      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810d7be:	697b      	ldr	r3, [r7, #20]
 810d7c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810d7c4:	2b00      	cmp	r3, #0
 810d7c6:	d002      	beq.n	810d7ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d7c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d7cc:	e001      	b.n	810d7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d7ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810d7d2:	4618      	mov	r0, r3
 810d7d4:	3720      	adds	r7, #32
 810d7d6:	46bd      	mov	sp, r7
 810d7d8:	bd80      	pop	{r7, pc}
 810d7da:	bf00      	nop
 810d7dc:	10000000 	.word	0x10000000
 810d7e0:	10624dd3 	.word	0x10624dd3
 810d7e4:	002000c5 	.word	0x002000c5

0810d7e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810d7e8:	b480      	push	{r7}
 810d7ea:	b085      	sub	sp, #20
 810d7ec:	af00      	add	r7, sp, #0
 810d7ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d7f0:	4b22      	ldr	r3, [pc, #136]	@ (810d87c <SDMMC_GetCmdResp7+0x94>)
 810d7f2:	681b      	ldr	r3, [r3, #0]
 810d7f4:	4a22      	ldr	r2, [pc, #136]	@ (810d880 <SDMMC_GetCmdResp7+0x98>)
 810d7f6:	fba2 2303 	umull	r2, r3, r2, r3
 810d7fa:	0a5b      	lsrs	r3, r3, #9
 810d7fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d800:	fb02 f303 	mul.w	r3, r2, r3
 810d804:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d806:	68fb      	ldr	r3, [r7, #12]
 810d808:	1e5a      	subs	r2, r3, #1
 810d80a:	60fa      	str	r2, [r7, #12]
 810d80c:	2b00      	cmp	r3, #0
 810d80e:	d102      	bne.n	810d816 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d810:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d814:	e02c      	b.n	810d870 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810d816:	687b      	ldr	r3, [r7, #4]
 810d818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d81a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d81c:	68bb      	ldr	r3, [r7, #8]
 810d81e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d822:	2b00      	cmp	r3, #0
 810d824:	d0ef      	beq.n	810d806 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d826:	68bb      	ldr	r3, [r7, #8]
 810d828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d82c:	2b00      	cmp	r3, #0
 810d82e:	d1ea      	bne.n	810d806 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d830:	687b      	ldr	r3, [r7, #4]
 810d832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d834:	f003 0304 	and.w	r3, r3, #4
 810d838:	2b00      	cmp	r3, #0
 810d83a:	d004      	beq.n	810d846 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d83c:	687b      	ldr	r3, [r7, #4]
 810d83e:	2204      	movs	r2, #4
 810d840:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d842:	2304      	movs	r3, #4
 810d844:	e014      	b.n	810d870 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d846:	687b      	ldr	r3, [r7, #4]
 810d848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d84a:	f003 0301 	and.w	r3, r3, #1
 810d84e:	2b00      	cmp	r3, #0
 810d850:	d004      	beq.n	810d85c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d852:	687b      	ldr	r3, [r7, #4]
 810d854:	2201      	movs	r2, #1
 810d856:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d858:	2301      	movs	r3, #1
 810d85a:	e009      	b.n	810d870 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810d85c:	687b      	ldr	r3, [r7, #4]
 810d85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d864:	2b00      	cmp	r3, #0
 810d866:	d002      	beq.n	810d86e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810d868:	687b      	ldr	r3, [r7, #4]
 810d86a:	2240      	movs	r2, #64	@ 0x40
 810d86c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d86e:	2300      	movs	r3, #0

}
 810d870:	4618      	mov	r0, r3
 810d872:	3714      	adds	r7, #20
 810d874:	46bd      	mov	sp, r7
 810d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d87a:	4770      	bx	lr
 810d87c:	10000000 	.word	0x10000000
 810d880:	10624dd3 	.word	0x10624dd3

0810d884 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810d884:	b480      	push	{r7}
 810d886:	b085      	sub	sp, #20
 810d888:	af00      	add	r7, sp, #0
 810d88a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d88c:	4b11      	ldr	r3, [pc, #68]	@ (810d8d4 <SDMMC_GetCmdError+0x50>)
 810d88e:	681b      	ldr	r3, [r3, #0]
 810d890:	4a11      	ldr	r2, [pc, #68]	@ (810d8d8 <SDMMC_GetCmdError+0x54>)
 810d892:	fba2 2303 	umull	r2, r3, r2, r3
 810d896:	0a5b      	lsrs	r3, r3, #9
 810d898:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d89c:	fb02 f303 	mul.w	r3, r2, r3
 810d8a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d8a2:	68fb      	ldr	r3, [r7, #12]
 810d8a4:	1e5a      	subs	r2, r3, #1
 810d8a6:	60fa      	str	r2, [r7, #12]
 810d8a8:	2b00      	cmp	r3, #0
 810d8aa:	d102      	bne.n	810d8b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d8ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d8b0:	e009      	b.n	810d8c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810d8b2:	687b      	ldr	r3, [r7, #4]
 810d8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d8ba:	2b00      	cmp	r3, #0
 810d8bc:	d0f1      	beq.n	810d8a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d8be:	687b      	ldr	r3, [r7, #4]
 810d8c0:	4a06      	ldr	r2, [pc, #24]	@ (810d8dc <SDMMC_GetCmdError+0x58>)
 810d8c2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810d8c4:	2300      	movs	r3, #0
}
 810d8c6:	4618      	mov	r0, r3
 810d8c8:	3714      	adds	r7, #20
 810d8ca:	46bd      	mov	sp, r7
 810d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8d0:	4770      	bx	lr
 810d8d2:	bf00      	nop
 810d8d4:	10000000 	.word	0x10000000
 810d8d8:	10624dd3 	.word	0x10624dd3
 810d8dc:	002000c5 	.word	0x002000c5

0810d8e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810d8e0:	b084      	sub	sp, #16
 810d8e2:	b580      	push	{r7, lr}
 810d8e4:	b084      	sub	sp, #16
 810d8e6:	af00      	add	r7, sp, #0
 810d8e8:	6078      	str	r0, [r7, #4]
 810d8ea:	f107 001c 	add.w	r0, r7, #28
 810d8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810d8f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810d8f6:	2b01      	cmp	r3, #1
 810d8f8:	d123      	bne.n	810d942 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810d8fa:	687b      	ldr	r3, [r7, #4]
 810d8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d8fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810d902:	687b      	ldr	r3, [r7, #4]
 810d904:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810d906:	687b      	ldr	r3, [r7, #4]
 810d908:	68db      	ldr	r3, [r3, #12]
 810d90a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810d90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810d912:	687a      	ldr	r2, [r7, #4]
 810d914:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810d916:	687b      	ldr	r3, [r7, #4]
 810d918:	68db      	ldr	r3, [r3, #12]
 810d91a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810d91e:	687b      	ldr	r3, [r7, #4]
 810d920:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810d922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810d926:	2b01      	cmp	r3, #1
 810d928:	d105      	bne.n	810d936 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810d92a:	687b      	ldr	r3, [r7, #4]
 810d92c:	68db      	ldr	r3, [r3, #12]
 810d92e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810d932:	687b      	ldr	r3, [r7, #4]
 810d934:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810d936:	6878      	ldr	r0, [r7, #4]
 810d938:	f000 faa6 	bl	810de88 <USB_CoreReset>
 810d93c:	4603      	mov	r3, r0
 810d93e:	73fb      	strb	r3, [r7, #15]
 810d940:	e01b      	b.n	810d97a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810d942:	687b      	ldr	r3, [r7, #4]
 810d944:	68db      	ldr	r3, [r3, #12]
 810d946:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810d94a:	687b      	ldr	r3, [r7, #4]
 810d94c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810d94e:	6878      	ldr	r0, [r7, #4]
 810d950:	f000 fa9a 	bl	810de88 <USB_CoreReset>
 810d954:	4603      	mov	r3, r0
 810d956:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810d958:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810d95c:	2b00      	cmp	r3, #0
 810d95e:	d106      	bne.n	810d96e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810d960:	687b      	ldr	r3, [r7, #4]
 810d962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d964:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810d968:	687b      	ldr	r3, [r7, #4]
 810d96a:	639a      	str	r2, [r3, #56]	@ 0x38
 810d96c:	e005      	b.n	810d97a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810d96e:	687b      	ldr	r3, [r7, #4]
 810d970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810d976:	687b      	ldr	r3, [r7, #4]
 810d978:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810d97a:	7fbb      	ldrb	r3, [r7, #30]
 810d97c:	2b01      	cmp	r3, #1
 810d97e:	d118      	bne.n	810d9b2 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810d980:	687b      	ldr	r3, [r7, #4]
 810d982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810d984:	b29a      	uxth	r2, r3
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810d98a:	687b      	ldr	r3, [r7, #4]
 810d98c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810d98e:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810d992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810d996:	687a      	ldr	r2, [r7, #4]
 810d998:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	689b      	ldr	r3, [r3, #8]
 810d99e:	f043 0206 	orr.w	r2, r3, #6
 810d9a2:	687b      	ldr	r3, [r7, #4]
 810d9a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810d9a6:	687b      	ldr	r3, [r7, #4]
 810d9a8:	689b      	ldr	r3, [r3, #8]
 810d9aa:	f043 0220 	orr.w	r2, r3, #32
 810d9ae:	687b      	ldr	r3, [r7, #4]
 810d9b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810d9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 810d9b4:	4618      	mov	r0, r3
 810d9b6:	3710      	adds	r7, #16
 810d9b8:	46bd      	mov	sp, r7
 810d9ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810d9be:	b004      	add	sp, #16
 810d9c0:	4770      	bx	lr

0810d9c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810d9c2:	b480      	push	{r7}
 810d9c4:	b083      	sub	sp, #12
 810d9c6:	af00      	add	r7, sp, #0
 810d9c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	689b      	ldr	r3, [r3, #8]
 810d9ce:	f023 0201 	bic.w	r2, r3, #1
 810d9d2:	687b      	ldr	r3, [r7, #4]
 810d9d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810d9d6:	2300      	movs	r3, #0
}
 810d9d8:	4618      	mov	r0, r3
 810d9da:	370c      	adds	r7, #12
 810d9dc:	46bd      	mov	sp, r7
 810d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9e2:	4770      	bx	lr

0810d9e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810d9e4:	b580      	push	{r7, lr}
 810d9e6:	b084      	sub	sp, #16
 810d9e8:	af00      	add	r7, sp, #0
 810d9ea:	6078      	str	r0, [r7, #4]
 810d9ec:	460b      	mov	r3, r1
 810d9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810d9f0:	2300      	movs	r3, #0
 810d9f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810d9f4:	687b      	ldr	r3, [r7, #4]
 810d9f6:	68db      	ldr	r3, [r3, #12]
 810d9f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810d9fc:	687b      	ldr	r3, [r7, #4]
 810d9fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810da00:	78fb      	ldrb	r3, [r7, #3]
 810da02:	2b01      	cmp	r3, #1
 810da04:	d115      	bne.n	810da32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	68db      	ldr	r3, [r3, #12]
 810da0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810da0e:	687b      	ldr	r3, [r7, #4]
 810da10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810da12:	200a      	movs	r0, #10
 810da14:	f7f5 f88a 	bl	8102b2c <HAL_Delay>
      ms += 10U;
 810da18:	68fb      	ldr	r3, [r7, #12]
 810da1a:	330a      	adds	r3, #10
 810da1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810da1e:	6878      	ldr	r0, [r7, #4]
 810da20:	f000 fa24 	bl	810de6c <USB_GetMode>
 810da24:	4603      	mov	r3, r0
 810da26:	2b01      	cmp	r3, #1
 810da28:	d01e      	beq.n	810da68 <USB_SetCurrentMode+0x84>
 810da2a:	68fb      	ldr	r3, [r7, #12]
 810da2c:	2bc7      	cmp	r3, #199	@ 0xc7
 810da2e:	d9f0      	bls.n	810da12 <USB_SetCurrentMode+0x2e>
 810da30:	e01a      	b.n	810da68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810da32:	78fb      	ldrb	r3, [r7, #3]
 810da34:	2b00      	cmp	r3, #0
 810da36:	d115      	bne.n	810da64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810da38:	687b      	ldr	r3, [r7, #4]
 810da3a:	68db      	ldr	r3, [r3, #12]
 810da3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810da40:	687b      	ldr	r3, [r7, #4]
 810da42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810da44:	200a      	movs	r0, #10
 810da46:	f7f5 f871 	bl	8102b2c <HAL_Delay>
      ms += 10U;
 810da4a:	68fb      	ldr	r3, [r7, #12]
 810da4c:	330a      	adds	r3, #10
 810da4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810da50:	6878      	ldr	r0, [r7, #4]
 810da52:	f000 fa0b 	bl	810de6c <USB_GetMode>
 810da56:	4603      	mov	r3, r0
 810da58:	2b00      	cmp	r3, #0
 810da5a:	d005      	beq.n	810da68 <USB_SetCurrentMode+0x84>
 810da5c:	68fb      	ldr	r3, [r7, #12]
 810da5e:	2bc7      	cmp	r3, #199	@ 0xc7
 810da60:	d9f0      	bls.n	810da44 <USB_SetCurrentMode+0x60>
 810da62:	e001      	b.n	810da68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810da64:	2301      	movs	r3, #1
 810da66:	e005      	b.n	810da74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810da68:	68fb      	ldr	r3, [r7, #12]
 810da6a:	2bc8      	cmp	r3, #200	@ 0xc8
 810da6c:	d101      	bne.n	810da72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810da6e:	2301      	movs	r3, #1
 810da70:	e000      	b.n	810da74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810da72:	2300      	movs	r3, #0
}
 810da74:	4618      	mov	r0, r3
 810da76:	3710      	adds	r7, #16
 810da78:	46bd      	mov	sp, r7
 810da7a:	bd80      	pop	{r7, pc}

0810da7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810da7c:	b084      	sub	sp, #16
 810da7e:	b580      	push	{r7, lr}
 810da80:	b086      	sub	sp, #24
 810da82:	af00      	add	r7, sp, #0
 810da84:	6078      	str	r0, [r7, #4]
 810da86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810da8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810da8e:	2300      	movs	r3, #0
 810da90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810da92:	687b      	ldr	r3, [r7, #4]
 810da94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810da96:	2300      	movs	r3, #0
 810da98:	613b      	str	r3, [r7, #16]
 810da9a:	e009      	b.n	810dab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810da9c:	687a      	ldr	r2, [r7, #4]
 810da9e:	693b      	ldr	r3, [r7, #16]
 810daa0:	3340      	adds	r3, #64	@ 0x40
 810daa2:	009b      	lsls	r3, r3, #2
 810daa4:	4413      	add	r3, r2
 810daa6:	2200      	movs	r2, #0
 810daa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810daaa:	693b      	ldr	r3, [r7, #16]
 810daac:	3301      	adds	r3, #1
 810daae:	613b      	str	r3, [r7, #16]
 810dab0:	693b      	ldr	r3, [r7, #16]
 810dab2:	2b0e      	cmp	r3, #14
 810dab4:	d9f2      	bls.n	810da9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810dab6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810daba:	2b00      	cmp	r3, #0
 810dabc:	d11c      	bne.n	810daf8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810dabe:	68fb      	ldr	r3, [r7, #12]
 810dac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dac4:	685b      	ldr	r3, [r3, #4]
 810dac6:	68fa      	ldr	r2, [r7, #12]
 810dac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810dacc:	f043 0302 	orr.w	r3, r3, #2
 810dad0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810dad2:	687b      	ldr	r3, [r7, #4]
 810dad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dad6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810dada:	687b      	ldr	r3, [r7, #4]
 810dadc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810dade:	687b      	ldr	r3, [r7, #4]
 810dae0:	681b      	ldr	r3, [r3, #0]
 810dae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810dae6:	687b      	ldr	r3, [r7, #4]
 810dae8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810daea:	687b      	ldr	r3, [r7, #4]
 810daec:	681b      	ldr	r3, [r3, #0]
 810daee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810daf2:	687b      	ldr	r3, [r7, #4]
 810daf4:	601a      	str	r2, [r3, #0]
 810daf6:	e005      	b.n	810db04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810daf8:	687b      	ldr	r3, [r7, #4]
 810dafa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dafc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810db00:	687b      	ldr	r3, [r7, #4]
 810db02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810db04:	68fb      	ldr	r3, [r7, #12]
 810db06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810db0a:	461a      	mov	r2, r3
 810db0c:	2300      	movs	r3, #0
 810db0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810db10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810db14:	2b01      	cmp	r3, #1
 810db16:	d10d      	bne.n	810db34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810db18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810db1c:	2b00      	cmp	r3, #0
 810db1e:	d104      	bne.n	810db2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810db20:	2100      	movs	r1, #0
 810db22:	6878      	ldr	r0, [r7, #4]
 810db24:	f000 f968 	bl	810ddf8 <USB_SetDevSpeed>
 810db28:	e008      	b.n	810db3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810db2a:	2101      	movs	r1, #1
 810db2c:	6878      	ldr	r0, [r7, #4]
 810db2e:	f000 f963 	bl	810ddf8 <USB_SetDevSpeed>
 810db32:	e003      	b.n	810db3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810db34:	2103      	movs	r1, #3
 810db36:	6878      	ldr	r0, [r7, #4]
 810db38:	f000 f95e 	bl	810ddf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810db3c:	2110      	movs	r1, #16
 810db3e:	6878      	ldr	r0, [r7, #4]
 810db40:	f000 f8fa 	bl	810dd38 <USB_FlushTxFifo>
 810db44:	4603      	mov	r3, r0
 810db46:	2b00      	cmp	r3, #0
 810db48:	d001      	beq.n	810db4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810db4a:	2301      	movs	r3, #1
 810db4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810db4e:	6878      	ldr	r0, [r7, #4]
 810db50:	f000 f924 	bl	810dd9c <USB_FlushRxFifo>
 810db54:	4603      	mov	r3, r0
 810db56:	2b00      	cmp	r3, #0
 810db58:	d001      	beq.n	810db5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810db5a:	2301      	movs	r3, #1
 810db5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810db5e:	68fb      	ldr	r3, [r7, #12]
 810db60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810db64:	461a      	mov	r2, r3
 810db66:	2300      	movs	r3, #0
 810db68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810db6a:	68fb      	ldr	r3, [r7, #12]
 810db6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810db70:	461a      	mov	r2, r3
 810db72:	2300      	movs	r3, #0
 810db74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810db76:	68fb      	ldr	r3, [r7, #12]
 810db78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810db7c:	461a      	mov	r2, r3
 810db7e:	2300      	movs	r3, #0
 810db80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810db82:	2300      	movs	r3, #0
 810db84:	613b      	str	r3, [r7, #16]
 810db86:	e043      	b.n	810dc10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810db88:	693b      	ldr	r3, [r7, #16]
 810db8a:	015a      	lsls	r2, r3, #5
 810db8c:	68fb      	ldr	r3, [r7, #12]
 810db8e:	4413      	add	r3, r2
 810db90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810db94:	681b      	ldr	r3, [r3, #0]
 810db96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810db9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810db9e:	d118      	bne.n	810dbd2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 810dba0:	693b      	ldr	r3, [r7, #16]
 810dba2:	2b00      	cmp	r3, #0
 810dba4:	d10a      	bne.n	810dbbc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810dba6:	693b      	ldr	r3, [r7, #16]
 810dba8:	015a      	lsls	r2, r3, #5
 810dbaa:	68fb      	ldr	r3, [r7, #12]
 810dbac:	4413      	add	r3, r2
 810dbae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dbb2:	461a      	mov	r2, r3
 810dbb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810dbb8:	6013      	str	r3, [r2, #0]
 810dbba:	e013      	b.n	810dbe4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810dbbc:	693b      	ldr	r3, [r7, #16]
 810dbbe:	015a      	lsls	r2, r3, #5
 810dbc0:	68fb      	ldr	r3, [r7, #12]
 810dbc2:	4413      	add	r3, r2
 810dbc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dbc8:	461a      	mov	r2, r3
 810dbca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810dbce:	6013      	str	r3, [r2, #0]
 810dbd0:	e008      	b.n	810dbe4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810dbd2:	693b      	ldr	r3, [r7, #16]
 810dbd4:	015a      	lsls	r2, r3, #5
 810dbd6:	68fb      	ldr	r3, [r7, #12]
 810dbd8:	4413      	add	r3, r2
 810dbda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dbde:	461a      	mov	r2, r3
 810dbe0:	2300      	movs	r3, #0
 810dbe2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810dbe4:	693b      	ldr	r3, [r7, #16]
 810dbe6:	015a      	lsls	r2, r3, #5
 810dbe8:	68fb      	ldr	r3, [r7, #12]
 810dbea:	4413      	add	r3, r2
 810dbec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dbf0:	461a      	mov	r2, r3
 810dbf2:	2300      	movs	r3, #0
 810dbf4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810dbf6:	693b      	ldr	r3, [r7, #16]
 810dbf8:	015a      	lsls	r2, r3, #5
 810dbfa:	68fb      	ldr	r3, [r7, #12]
 810dbfc:	4413      	add	r3, r2
 810dbfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dc02:	461a      	mov	r2, r3
 810dc04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810dc08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dc0a:	693b      	ldr	r3, [r7, #16]
 810dc0c:	3301      	adds	r3, #1
 810dc0e:	613b      	str	r3, [r7, #16]
 810dc10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810dc14:	461a      	mov	r2, r3
 810dc16:	693b      	ldr	r3, [r7, #16]
 810dc18:	4293      	cmp	r3, r2
 810dc1a:	d3b5      	bcc.n	810db88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dc1c:	2300      	movs	r3, #0
 810dc1e:	613b      	str	r3, [r7, #16]
 810dc20:	e043      	b.n	810dcaa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810dc22:	693b      	ldr	r3, [r7, #16]
 810dc24:	015a      	lsls	r2, r3, #5
 810dc26:	68fb      	ldr	r3, [r7, #12]
 810dc28:	4413      	add	r3, r2
 810dc2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc2e:	681b      	ldr	r3, [r3, #0]
 810dc30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810dc34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810dc38:	d118      	bne.n	810dc6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810dc3a:	693b      	ldr	r3, [r7, #16]
 810dc3c:	2b00      	cmp	r3, #0
 810dc3e:	d10a      	bne.n	810dc56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810dc40:	693b      	ldr	r3, [r7, #16]
 810dc42:	015a      	lsls	r2, r3, #5
 810dc44:	68fb      	ldr	r3, [r7, #12]
 810dc46:	4413      	add	r3, r2
 810dc48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc4c:	461a      	mov	r2, r3
 810dc4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810dc52:	6013      	str	r3, [r2, #0]
 810dc54:	e013      	b.n	810dc7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810dc56:	693b      	ldr	r3, [r7, #16]
 810dc58:	015a      	lsls	r2, r3, #5
 810dc5a:	68fb      	ldr	r3, [r7, #12]
 810dc5c:	4413      	add	r3, r2
 810dc5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc62:	461a      	mov	r2, r3
 810dc64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810dc68:	6013      	str	r3, [r2, #0]
 810dc6a:	e008      	b.n	810dc7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810dc6c:	693b      	ldr	r3, [r7, #16]
 810dc6e:	015a      	lsls	r2, r3, #5
 810dc70:	68fb      	ldr	r3, [r7, #12]
 810dc72:	4413      	add	r3, r2
 810dc74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc78:	461a      	mov	r2, r3
 810dc7a:	2300      	movs	r3, #0
 810dc7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810dc7e:	693b      	ldr	r3, [r7, #16]
 810dc80:	015a      	lsls	r2, r3, #5
 810dc82:	68fb      	ldr	r3, [r7, #12]
 810dc84:	4413      	add	r3, r2
 810dc86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc8a:	461a      	mov	r2, r3
 810dc8c:	2300      	movs	r3, #0
 810dc8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810dc90:	693b      	ldr	r3, [r7, #16]
 810dc92:	015a      	lsls	r2, r3, #5
 810dc94:	68fb      	ldr	r3, [r7, #12]
 810dc96:	4413      	add	r3, r2
 810dc98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dc9c:	461a      	mov	r2, r3
 810dc9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810dca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dca4:	693b      	ldr	r3, [r7, #16]
 810dca6:	3301      	adds	r3, #1
 810dca8:	613b      	str	r3, [r7, #16]
 810dcaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810dcae:	461a      	mov	r2, r3
 810dcb0:	693b      	ldr	r3, [r7, #16]
 810dcb2:	4293      	cmp	r3, r2
 810dcb4:	d3b5      	bcc.n	810dc22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810dcb6:	68fb      	ldr	r3, [r7, #12]
 810dcb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dcbc:	691b      	ldr	r3, [r3, #16]
 810dcbe:	68fa      	ldr	r2, [r7, #12]
 810dcc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810dcc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810dcc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810dcca:	687b      	ldr	r3, [r7, #4]
 810dccc:	2200      	movs	r2, #0
 810dcce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810dcd0:	687b      	ldr	r3, [r7, #4]
 810dcd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810dcd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810dcd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810dcdc:	2b00      	cmp	r3, #0
 810dcde:	d105      	bne.n	810dcec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810dce0:	687b      	ldr	r3, [r7, #4]
 810dce2:	699b      	ldr	r3, [r3, #24]
 810dce4:	f043 0210 	orr.w	r2, r3, #16
 810dce8:	687b      	ldr	r3, [r7, #4]
 810dcea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810dcec:	687b      	ldr	r3, [r7, #4]
 810dcee:	699a      	ldr	r2, [r3, #24]
 810dcf0:	4b10      	ldr	r3, [pc, #64]	@ (810dd34 <USB_DevInit+0x2b8>)
 810dcf2:	4313      	orrs	r3, r2
 810dcf4:	687a      	ldr	r2, [r7, #4]
 810dcf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810dcf8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810dcfc:	2b00      	cmp	r3, #0
 810dcfe:	d005      	beq.n	810dd0c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810dd00:	687b      	ldr	r3, [r7, #4]
 810dd02:	699b      	ldr	r3, [r3, #24]
 810dd04:	f043 0208 	orr.w	r2, r3, #8
 810dd08:	687b      	ldr	r3, [r7, #4]
 810dd0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810dd0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810dd10:	2b01      	cmp	r3, #1
 810dd12:	d107      	bne.n	810dd24 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810dd14:	687b      	ldr	r3, [r7, #4]
 810dd16:	699b      	ldr	r3, [r3, #24]
 810dd18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810dd1c:	f043 0304 	orr.w	r3, r3, #4
 810dd20:	687a      	ldr	r2, [r7, #4]
 810dd22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810dd24:	7dfb      	ldrb	r3, [r7, #23]
}
 810dd26:	4618      	mov	r0, r3
 810dd28:	3718      	adds	r7, #24
 810dd2a:	46bd      	mov	sp, r7
 810dd2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810dd30:	b004      	add	sp, #16
 810dd32:	4770      	bx	lr
 810dd34:	803c3800 	.word	0x803c3800

0810dd38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810dd38:	b480      	push	{r7}
 810dd3a:	b085      	sub	sp, #20
 810dd3c:	af00      	add	r7, sp, #0
 810dd3e:	6078      	str	r0, [r7, #4]
 810dd40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810dd42:	2300      	movs	r3, #0
 810dd44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810dd46:	68fb      	ldr	r3, [r7, #12]
 810dd48:	3301      	adds	r3, #1
 810dd4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dd4c:	68fb      	ldr	r3, [r7, #12]
 810dd4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810dd52:	d901      	bls.n	810dd58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810dd54:	2303      	movs	r3, #3
 810dd56:	e01b      	b.n	810dd90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810dd58:	687b      	ldr	r3, [r7, #4]
 810dd5a:	691b      	ldr	r3, [r3, #16]
 810dd5c:	2b00      	cmp	r3, #0
 810dd5e:	daf2      	bge.n	810dd46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810dd60:	2300      	movs	r3, #0
 810dd62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810dd64:	683b      	ldr	r3, [r7, #0]
 810dd66:	019b      	lsls	r3, r3, #6
 810dd68:	f043 0220 	orr.w	r2, r3, #32
 810dd6c:	687b      	ldr	r3, [r7, #4]
 810dd6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810dd70:	68fb      	ldr	r3, [r7, #12]
 810dd72:	3301      	adds	r3, #1
 810dd74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dd76:	68fb      	ldr	r3, [r7, #12]
 810dd78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810dd7c:	d901      	bls.n	810dd82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810dd7e:	2303      	movs	r3, #3
 810dd80:	e006      	b.n	810dd90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810dd82:	687b      	ldr	r3, [r7, #4]
 810dd84:	691b      	ldr	r3, [r3, #16]
 810dd86:	f003 0320 	and.w	r3, r3, #32
 810dd8a:	2b20      	cmp	r3, #32
 810dd8c:	d0f0      	beq.n	810dd70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810dd8e:	2300      	movs	r3, #0
}
 810dd90:	4618      	mov	r0, r3
 810dd92:	3714      	adds	r7, #20
 810dd94:	46bd      	mov	sp, r7
 810dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd9a:	4770      	bx	lr

0810dd9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810dd9c:	b480      	push	{r7}
 810dd9e:	b085      	sub	sp, #20
 810dda0:	af00      	add	r7, sp, #0
 810dda2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810dda4:	2300      	movs	r3, #0
 810dda6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810dda8:	68fb      	ldr	r3, [r7, #12]
 810ddaa:	3301      	adds	r3, #1
 810ddac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810ddae:	68fb      	ldr	r3, [r7, #12]
 810ddb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810ddb4:	d901      	bls.n	810ddba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810ddb6:	2303      	movs	r3, #3
 810ddb8:	e018      	b.n	810ddec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810ddba:	687b      	ldr	r3, [r7, #4]
 810ddbc:	691b      	ldr	r3, [r3, #16]
 810ddbe:	2b00      	cmp	r3, #0
 810ddc0:	daf2      	bge.n	810dda8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810ddc2:	2300      	movs	r3, #0
 810ddc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	2210      	movs	r2, #16
 810ddca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810ddcc:	68fb      	ldr	r3, [r7, #12]
 810ddce:	3301      	adds	r3, #1
 810ddd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810ddd2:	68fb      	ldr	r3, [r7, #12]
 810ddd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810ddd8:	d901      	bls.n	810ddde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810ddda:	2303      	movs	r3, #3
 810dddc:	e006      	b.n	810ddec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810ddde:	687b      	ldr	r3, [r7, #4]
 810dde0:	691b      	ldr	r3, [r3, #16]
 810dde2:	f003 0310 	and.w	r3, r3, #16
 810dde6:	2b10      	cmp	r3, #16
 810dde8:	d0f0      	beq.n	810ddcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810ddea:	2300      	movs	r3, #0
}
 810ddec:	4618      	mov	r0, r3
 810ddee:	3714      	adds	r7, #20
 810ddf0:	46bd      	mov	sp, r7
 810ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddf6:	4770      	bx	lr

0810ddf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810ddf8:	b480      	push	{r7}
 810ddfa:	b085      	sub	sp, #20
 810ddfc:	af00      	add	r7, sp, #0
 810ddfe:	6078      	str	r0, [r7, #4]
 810de00:	460b      	mov	r3, r1
 810de02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810de04:	687b      	ldr	r3, [r7, #4]
 810de06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810de08:	68fb      	ldr	r3, [r7, #12]
 810de0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810de0e:	681a      	ldr	r2, [r3, #0]
 810de10:	78fb      	ldrb	r3, [r7, #3]
 810de12:	68f9      	ldr	r1, [r7, #12]
 810de14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810de18:	4313      	orrs	r3, r2
 810de1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810de1c:	2300      	movs	r3, #0
}
 810de1e:	4618      	mov	r0, r3
 810de20:	3714      	adds	r7, #20
 810de22:	46bd      	mov	sp, r7
 810de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de28:	4770      	bx	lr

0810de2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810de2a:	b480      	push	{r7}
 810de2c:	b085      	sub	sp, #20
 810de2e:	af00      	add	r7, sp, #0
 810de30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810de32:	687b      	ldr	r3, [r7, #4]
 810de34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810de36:	68fb      	ldr	r3, [r7, #12]
 810de38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810de3c:	681b      	ldr	r3, [r3, #0]
 810de3e:	68fa      	ldr	r2, [r7, #12]
 810de40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810de44:	f023 0303 	bic.w	r3, r3, #3
 810de48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810de4a:	68fb      	ldr	r3, [r7, #12]
 810de4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810de50:	685b      	ldr	r3, [r3, #4]
 810de52:	68fa      	ldr	r2, [r7, #12]
 810de54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810de58:	f043 0302 	orr.w	r3, r3, #2
 810de5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810de5e:	2300      	movs	r3, #0
}
 810de60:	4618      	mov	r0, r3
 810de62:	3714      	adds	r7, #20
 810de64:	46bd      	mov	sp, r7
 810de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de6a:	4770      	bx	lr

0810de6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810de6c:	b480      	push	{r7}
 810de6e:	b083      	sub	sp, #12
 810de70:	af00      	add	r7, sp, #0
 810de72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810de74:	687b      	ldr	r3, [r7, #4]
 810de76:	695b      	ldr	r3, [r3, #20]
 810de78:	f003 0301 	and.w	r3, r3, #1
}
 810de7c:	4618      	mov	r0, r3
 810de7e:	370c      	adds	r7, #12
 810de80:	46bd      	mov	sp, r7
 810de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de86:	4770      	bx	lr

0810de88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810de88:	b480      	push	{r7}
 810de8a:	b085      	sub	sp, #20
 810de8c:	af00      	add	r7, sp, #0
 810de8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810de90:	2300      	movs	r3, #0
 810de92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810de94:	68fb      	ldr	r3, [r7, #12]
 810de96:	3301      	adds	r3, #1
 810de98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810de9a:	68fb      	ldr	r3, [r7, #12]
 810de9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810dea0:	d901      	bls.n	810dea6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810dea2:	2303      	movs	r3, #3
 810dea4:	e01b      	b.n	810dede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810dea6:	687b      	ldr	r3, [r7, #4]
 810dea8:	691b      	ldr	r3, [r3, #16]
 810deaa:	2b00      	cmp	r3, #0
 810deac:	daf2      	bge.n	810de94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810deae:	2300      	movs	r3, #0
 810deb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810deb2:	687b      	ldr	r3, [r7, #4]
 810deb4:	691b      	ldr	r3, [r3, #16]
 810deb6:	f043 0201 	orr.w	r2, r3, #1
 810deba:	687b      	ldr	r3, [r7, #4]
 810debc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810debe:	68fb      	ldr	r3, [r7, #12]
 810dec0:	3301      	adds	r3, #1
 810dec2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dec4:	68fb      	ldr	r3, [r7, #12]
 810dec6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810deca:	d901      	bls.n	810ded0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810decc:	2303      	movs	r3, #3
 810dece:	e006      	b.n	810dede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810ded0:	687b      	ldr	r3, [r7, #4]
 810ded2:	691b      	ldr	r3, [r3, #16]
 810ded4:	f003 0301 	and.w	r3, r3, #1
 810ded8:	2b01      	cmp	r3, #1
 810deda:	d0f0      	beq.n	810debe <USB_CoreReset+0x36>

  return HAL_OK;
 810dedc:	2300      	movs	r3, #0
}
 810dede:	4618      	mov	r0, r3
 810dee0:	3714      	adds	r7, #20
 810dee2:	46bd      	mov	sp, r7
 810dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dee8:	4770      	bx	lr
	...

0810deec <std>:
 810deec:	2300      	movs	r3, #0
 810deee:	b510      	push	{r4, lr}
 810def0:	4604      	mov	r4, r0
 810def2:	e9c0 3300 	strd	r3, r3, [r0]
 810def6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810defa:	6083      	str	r3, [r0, #8]
 810defc:	8181      	strh	r1, [r0, #12]
 810defe:	6643      	str	r3, [r0, #100]	@ 0x64
 810df00:	81c2      	strh	r2, [r0, #14]
 810df02:	6183      	str	r3, [r0, #24]
 810df04:	4619      	mov	r1, r3
 810df06:	2208      	movs	r2, #8
 810df08:	305c      	adds	r0, #92	@ 0x5c
 810df0a:	f000 f9e7 	bl	810e2dc <memset>
 810df0e:	4b0d      	ldr	r3, [pc, #52]	@ (810df44 <std+0x58>)
 810df10:	6263      	str	r3, [r4, #36]	@ 0x24
 810df12:	4b0d      	ldr	r3, [pc, #52]	@ (810df48 <std+0x5c>)
 810df14:	62a3      	str	r3, [r4, #40]	@ 0x28
 810df16:	4b0d      	ldr	r3, [pc, #52]	@ (810df4c <std+0x60>)
 810df18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810df1a:	4b0d      	ldr	r3, [pc, #52]	@ (810df50 <std+0x64>)
 810df1c:	6323      	str	r3, [r4, #48]	@ 0x30
 810df1e:	4b0d      	ldr	r3, [pc, #52]	@ (810df54 <std+0x68>)
 810df20:	6224      	str	r4, [r4, #32]
 810df22:	429c      	cmp	r4, r3
 810df24:	d006      	beq.n	810df34 <std+0x48>
 810df26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810df2a:	4294      	cmp	r4, r2
 810df2c:	d002      	beq.n	810df34 <std+0x48>
 810df2e:	33d0      	adds	r3, #208	@ 0xd0
 810df30:	429c      	cmp	r4, r3
 810df32:	d105      	bne.n	810df40 <std+0x54>
 810df34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810df38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810df3c:	f000 ba46 	b.w	810e3cc <__retarget_lock_init_recursive>
 810df40:	bd10      	pop	{r4, pc}
 810df42:	bf00      	nop
 810df44:	0810e12d 	.word	0x0810e12d
 810df48:	0810e14f 	.word	0x0810e14f
 810df4c:	0810e187 	.word	0x0810e187
 810df50:	0810e1ab 	.word	0x0810e1ab
 810df54:	10000ea8 	.word	0x10000ea8

0810df58 <stdio_exit_handler>:
 810df58:	4a02      	ldr	r2, [pc, #8]	@ (810df64 <stdio_exit_handler+0xc>)
 810df5a:	4903      	ldr	r1, [pc, #12]	@ (810df68 <stdio_exit_handler+0x10>)
 810df5c:	4803      	ldr	r0, [pc, #12]	@ (810df6c <stdio_exit_handler+0x14>)
 810df5e:	f000 b869 	b.w	810e034 <_fwalk_sglue>
 810df62:	bf00      	nop
 810df64:	10000010 	.word	0x10000010
 810df68:	0810e6cd 	.word	0x0810e6cd
 810df6c:	10000020 	.word	0x10000020

0810df70 <cleanup_stdio>:
 810df70:	6841      	ldr	r1, [r0, #4]
 810df72:	4b0c      	ldr	r3, [pc, #48]	@ (810dfa4 <cleanup_stdio+0x34>)
 810df74:	4299      	cmp	r1, r3
 810df76:	b510      	push	{r4, lr}
 810df78:	4604      	mov	r4, r0
 810df7a:	d001      	beq.n	810df80 <cleanup_stdio+0x10>
 810df7c:	f000 fba6 	bl	810e6cc <_fflush_r>
 810df80:	68a1      	ldr	r1, [r4, #8]
 810df82:	4b09      	ldr	r3, [pc, #36]	@ (810dfa8 <cleanup_stdio+0x38>)
 810df84:	4299      	cmp	r1, r3
 810df86:	d002      	beq.n	810df8e <cleanup_stdio+0x1e>
 810df88:	4620      	mov	r0, r4
 810df8a:	f000 fb9f 	bl	810e6cc <_fflush_r>
 810df8e:	68e1      	ldr	r1, [r4, #12]
 810df90:	4b06      	ldr	r3, [pc, #24]	@ (810dfac <cleanup_stdio+0x3c>)
 810df92:	4299      	cmp	r1, r3
 810df94:	d004      	beq.n	810dfa0 <cleanup_stdio+0x30>
 810df96:	4620      	mov	r0, r4
 810df98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810df9c:	f000 bb96 	b.w	810e6cc <_fflush_r>
 810dfa0:	bd10      	pop	{r4, pc}
 810dfa2:	bf00      	nop
 810dfa4:	10000ea8 	.word	0x10000ea8
 810dfa8:	10000f10 	.word	0x10000f10
 810dfac:	10000f78 	.word	0x10000f78

0810dfb0 <global_stdio_init.part.0>:
 810dfb0:	b510      	push	{r4, lr}
 810dfb2:	4b0b      	ldr	r3, [pc, #44]	@ (810dfe0 <global_stdio_init.part.0+0x30>)
 810dfb4:	4c0b      	ldr	r4, [pc, #44]	@ (810dfe4 <global_stdio_init.part.0+0x34>)
 810dfb6:	4a0c      	ldr	r2, [pc, #48]	@ (810dfe8 <global_stdio_init.part.0+0x38>)
 810dfb8:	601a      	str	r2, [r3, #0]
 810dfba:	4620      	mov	r0, r4
 810dfbc:	2200      	movs	r2, #0
 810dfbe:	2104      	movs	r1, #4
 810dfc0:	f7ff ff94 	bl	810deec <std>
 810dfc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810dfc8:	2201      	movs	r2, #1
 810dfca:	2109      	movs	r1, #9
 810dfcc:	f7ff ff8e 	bl	810deec <std>
 810dfd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810dfd4:	2202      	movs	r2, #2
 810dfd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dfda:	2112      	movs	r1, #18
 810dfdc:	f7ff bf86 	b.w	810deec <std>
 810dfe0:	10000fe0 	.word	0x10000fe0
 810dfe4:	10000ea8 	.word	0x10000ea8
 810dfe8:	0810df59 	.word	0x0810df59

0810dfec <__sfp_lock_acquire>:
 810dfec:	4801      	ldr	r0, [pc, #4]	@ (810dff4 <__sfp_lock_acquire+0x8>)
 810dfee:	f000 b9ee 	b.w	810e3ce <__retarget_lock_acquire_recursive>
 810dff2:	bf00      	nop
 810dff4:	10000fe9 	.word	0x10000fe9

0810dff8 <__sfp_lock_release>:
 810dff8:	4801      	ldr	r0, [pc, #4]	@ (810e000 <__sfp_lock_release+0x8>)
 810dffa:	f000 b9e9 	b.w	810e3d0 <__retarget_lock_release_recursive>
 810dffe:	bf00      	nop
 810e000:	10000fe9 	.word	0x10000fe9

0810e004 <__sinit>:
 810e004:	b510      	push	{r4, lr}
 810e006:	4604      	mov	r4, r0
 810e008:	f7ff fff0 	bl	810dfec <__sfp_lock_acquire>
 810e00c:	6a23      	ldr	r3, [r4, #32]
 810e00e:	b11b      	cbz	r3, 810e018 <__sinit+0x14>
 810e010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e014:	f7ff bff0 	b.w	810dff8 <__sfp_lock_release>
 810e018:	4b04      	ldr	r3, [pc, #16]	@ (810e02c <__sinit+0x28>)
 810e01a:	6223      	str	r3, [r4, #32]
 810e01c:	4b04      	ldr	r3, [pc, #16]	@ (810e030 <__sinit+0x2c>)
 810e01e:	681b      	ldr	r3, [r3, #0]
 810e020:	2b00      	cmp	r3, #0
 810e022:	d1f5      	bne.n	810e010 <__sinit+0xc>
 810e024:	f7ff ffc4 	bl	810dfb0 <global_stdio_init.part.0>
 810e028:	e7f2      	b.n	810e010 <__sinit+0xc>
 810e02a:	bf00      	nop
 810e02c:	0810df71 	.word	0x0810df71
 810e030:	10000fe0 	.word	0x10000fe0

0810e034 <_fwalk_sglue>:
 810e034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e038:	4607      	mov	r7, r0
 810e03a:	4688      	mov	r8, r1
 810e03c:	4614      	mov	r4, r2
 810e03e:	2600      	movs	r6, #0
 810e040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810e044:	f1b9 0901 	subs.w	r9, r9, #1
 810e048:	d505      	bpl.n	810e056 <_fwalk_sglue+0x22>
 810e04a:	6824      	ldr	r4, [r4, #0]
 810e04c:	2c00      	cmp	r4, #0
 810e04e:	d1f7      	bne.n	810e040 <_fwalk_sglue+0xc>
 810e050:	4630      	mov	r0, r6
 810e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e056:	89ab      	ldrh	r3, [r5, #12]
 810e058:	2b01      	cmp	r3, #1
 810e05a:	d907      	bls.n	810e06c <_fwalk_sglue+0x38>
 810e05c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810e060:	3301      	adds	r3, #1
 810e062:	d003      	beq.n	810e06c <_fwalk_sglue+0x38>
 810e064:	4629      	mov	r1, r5
 810e066:	4638      	mov	r0, r7
 810e068:	47c0      	blx	r8
 810e06a:	4306      	orrs	r6, r0
 810e06c:	3568      	adds	r5, #104	@ 0x68
 810e06e:	e7e9      	b.n	810e044 <_fwalk_sglue+0x10>

0810e070 <_puts_r>:
 810e070:	6a03      	ldr	r3, [r0, #32]
 810e072:	b570      	push	{r4, r5, r6, lr}
 810e074:	6884      	ldr	r4, [r0, #8]
 810e076:	4605      	mov	r5, r0
 810e078:	460e      	mov	r6, r1
 810e07a:	b90b      	cbnz	r3, 810e080 <_puts_r+0x10>
 810e07c:	f7ff ffc2 	bl	810e004 <__sinit>
 810e080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e082:	07db      	lsls	r3, r3, #31
 810e084:	d405      	bmi.n	810e092 <_puts_r+0x22>
 810e086:	89a3      	ldrh	r3, [r4, #12]
 810e088:	0598      	lsls	r0, r3, #22
 810e08a:	d402      	bmi.n	810e092 <_puts_r+0x22>
 810e08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e08e:	f000 f99e 	bl	810e3ce <__retarget_lock_acquire_recursive>
 810e092:	89a3      	ldrh	r3, [r4, #12]
 810e094:	0719      	lsls	r1, r3, #28
 810e096:	d502      	bpl.n	810e09e <_puts_r+0x2e>
 810e098:	6923      	ldr	r3, [r4, #16]
 810e09a:	2b00      	cmp	r3, #0
 810e09c:	d135      	bne.n	810e10a <_puts_r+0x9a>
 810e09e:	4621      	mov	r1, r4
 810e0a0:	4628      	mov	r0, r5
 810e0a2:	f000 f8c5 	bl	810e230 <__swsetup_r>
 810e0a6:	b380      	cbz	r0, 810e10a <_puts_r+0x9a>
 810e0a8:	f04f 35ff 	mov.w	r5, #4294967295
 810e0ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e0ae:	07da      	lsls	r2, r3, #31
 810e0b0:	d405      	bmi.n	810e0be <_puts_r+0x4e>
 810e0b2:	89a3      	ldrh	r3, [r4, #12]
 810e0b4:	059b      	lsls	r3, r3, #22
 810e0b6:	d402      	bmi.n	810e0be <_puts_r+0x4e>
 810e0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e0ba:	f000 f989 	bl	810e3d0 <__retarget_lock_release_recursive>
 810e0be:	4628      	mov	r0, r5
 810e0c0:	bd70      	pop	{r4, r5, r6, pc}
 810e0c2:	2b00      	cmp	r3, #0
 810e0c4:	da04      	bge.n	810e0d0 <_puts_r+0x60>
 810e0c6:	69a2      	ldr	r2, [r4, #24]
 810e0c8:	429a      	cmp	r2, r3
 810e0ca:	dc17      	bgt.n	810e0fc <_puts_r+0x8c>
 810e0cc:	290a      	cmp	r1, #10
 810e0ce:	d015      	beq.n	810e0fc <_puts_r+0x8c>
 810e0d0:	6823      	ldr	r3, [r4, #0]
 810e0d2:	1c5a      	adds	r2, r3, #1
 810e0d4:	6022      	str	r2, [r4, #0]
 810e0d6:	7019      	strb	r1, [r3, #0]
 810e0d8:	68a3      	ldr	r3, [r4, #8]
 810e0da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810e0de:	3b01      	subs	r3, #1
 810e0e0:	60a3      	str	r3, [r4, #8]
 810e0e2:	2900      	cmp	r1, #0
 810e0e4:	d1ed      	bne.n	810e0c2 <_puts_r+0x52>
 810e0e6:	2b00      	cmp	r3, #0
 810e0e8:	da11      	bge.n	810e10e <_puts_r+0x9e>
 810e0ea:	4622      	mov	r2, r4
 810e0ec:	210a      	movs	r1, #10
 810e0ee:	4628      	mov	r0, r5
 810e0f0:	f000 f85f 	bl	810e1b2 <__swbuf_r>
 810e0f4:	3001      	adds	r0, #1
 810e0f6:	d0d7      	beq.n	810e0a8 <_puts_r+0x38>
 810e0f8:	250a      	movs	r5, #10
 810e0fa:	e7d7      	b.n	810e0ac <_puts_r+0x3c>
 810e0fc:	4622      	mov	r2, r4
 810e0fe:	4628      	mov	r0, r5
 810e100:	f000 f857 	bl	810e1b2 <__swbuf_r>
 810e104:	3001      	adds	r0, #1
 810e106:	d1e7      	bne.n	810e0d8 <_puts_r+0x68>
 810e108:	e7ce      	b.n	810e0a8 <_puts_r+0x38>
 810e10a:	3e01      	subs	r6, #1
 810e10c:	e7e4      	b.n	810e0d8 <_puts_r+0x68>
 810e10e:	6823      	ldr	r3, [r4, #0]
 810e110:	1c5a      	adds	r2, r3, #1
 810e112:	6022      	str	r2, [r4, #0]
 810e114:	220a      	movs	r2, #10
 810e116:	701a      	strb	r2, [r3, #0]
 810e118:	e7ee      	b.n	810e0f8 <_puts_r+0x88>
	...

0810e11c <puts>:
 810e11c:	4b02      	ldr	r3, [pc, #8]	@ (810e128 <puts+0xc>)
 810e11e:	4601      	mov	r1, r0
 810e120:	6818      	ldr	r0, [r3, #0]
 810e122:	f7ff bfa5 	b.w	810e070 <_puts_r>
 810e126:	bf00      	nop
 810e128:	1000001c 	.word	0x1000001c

0810e12c <__sread>:
 810e12c:	b510      	push	{r4, lr}
 810e12e:	460c      	mov	r4, r1
 810e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e134:	f000 f8fc 	bl	810e330 <_read_r>
 810e138:	2800      	cmp	r0, #0
 810e13a:	bfab      	itete	ge
 810e13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810e13e:	89a3      	ldrhlt	r3, [r4, #12]
 810e140:	181b      	addge	r3, r3, r0
 810e142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810e146:	bfac      	ite	ge
 810e148:	6563      	strge	r3, [r4, #84]	@ 0x54
 810e14a:	81a3      	strhlt	r3, [r4, #12]
 810e14c:	bd10      	pop	{r4, pc}

0810e14e <__swrite>:
 810e14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e152:	461f      	mov	r7, r3
 810e154:	898b      	ldrh	r3, [r1, #12]
 810e156:	05db      	lsls	r3, r3, #23
 810e158:	4605      	mov	r5, r0
 810e15a:	460c      	mov	r4, r1
 810e15c:	4616      	mov	r6, r2
 810e15e:	d505      	bpl.n	810e16c <__swrite+0x1e>
 810e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e164:	2302      	movs	r3, #2
 810e166:	2200      	movs	r2, #0
 810e168:	f000 f8d0 	bl	810e30c <_lseek_r>
 810e16c:	89a3      	ldrh	r3, [r4, #12]
 810e16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810e176:	81a3      	strh	r3, [r4, #12]
 810e178:	4632      	mov	r2, r6
 810e17a:	463b      	mov	r3, r7
 810e17c:	4628      	mov	r0, r5
 810e17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e182:	f000 b8e7 	b.w	810e354 <_write_r>

0810e186 <__sseek>:
 810e186:	b510      	push	{r4, lr}
 810e188:	460c      	mov	r4, r1
 810e18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e18e:	f000 f8bd 	bl	810e30c <_lseek_r>
 810e192:	1c43      	adds	r3, r0, #1
 810e194:	89a3      	ldrh	r3, [r4, #12]
 810e196:	bf15      	itete	ne
 810e198:	6560      	strne	r0, [r4, #84]	@ 0x54
 810e19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810e19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810e1a2:	81a3      	strheq	r3, [r4, #12]
 810e1a4:	bf18      	it	ne
 810e1a6:	81a3      	strhne	r3, [r4, #12]
 810e1a8:	bd10      	pop	{r4, pc}

0810e1aa <__sclose>:
 810e1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e1ae:	f000 b89d 	b.w	810e2ec <_close_r>

0810e1b2 <__swbuf_r>:
 810e1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e1b4:	460e      	mov	r6, r1
 810e1b6:	4614      	mov	r4, r2
 810e1b8:	4605      	mov	r5, r0
 810e1ba:	b118      	cbz	r0, 810e1c4 <__swbuf_r+0x12>
 810e1bc:	6a03      	ldr	r3, [r0, #32]
 810e1be:	b90b      	cbnz	r3, 810e1c4 <__swbuf_r+0x12>
 810e1c0:	f7ff ff20 	bl	810e004 <__sinit>
 810e1c4:	69a3      	ldr	r3, [r4, #24]
 810e1c6:	60a3      	str	r3, [r4, #8]
 810e1c8:	89a3      	ldrh	r3, [r4, #12]
 810e1ca:	071a      	lsls	r2, r3, #28
 810e1cc:	d501      	bpl.n	810e1d2 <__swbuf_r+0x20>
 810e1ce:	6923      	ldr	r3, [r4, #16]
 810e1d0:	b943      	cbnz	r3, 810e1e4 <__swbuf_r+0x32>
 810e1d2:	4621      	mov	r1, r4
 810e1d4:	4628      	mov	r0, r5
 810e1d6:	f000 f82b 	bl	810e230 <__swsetup_r>
 810e1da:	b118      	cbz	r0, 810e1e4 <__swbuf_r+0x32>
 810e1dc:	f04f 37ff 	mov.w	r7, #4294967295
 810e1e0:	4638      	mov	r0, r7
 810e1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e1e4:	6823      	ldr	r3, [r4, #0]
 810e1e6:	6922      	ldr	r2, [r4, #16]
 810e1e8:	1a98      	subs	r0, r3, r2
 810e1ea:	6963      	ldr	r3, [r4, #20]
 810e1ec:	b2f6      	uxtb	r6, r6
 810e1ee:	4283      	cmp	r3, r0
 810e1f0:	4637      	mov	r7, r6
 810e1f2:	dc05      	bgt.n	810e200 <__swbuf_r+0x4e>
 810e1f4:	4621      	mov	r1, r4
 810e1f6:	4628      	mov	r0, r5
 810e1f8:	f000 fa68 	bl	810e6cc <_fflush_r>
 810e1fc:	2800      	cmp	r0, #0
 810e1fe:	d1ed      	bne.n	810e1dc <__swbuf_r+0x2a>
 810e200:	68a3      	ldr	r3, [r4, #8]
 810e202:	3b01      	subs	r3, #1
 810e204:	60a3      	str	r3, [r4, #8]
 810e206:	6823      	ldr	r3, [r4, #0]
 810e208:	1c5a      	adds	r2, r3, #1
 810e20a:	6022      	str	r2, [r4, #0]
 810e20c:	701e      	strb	r6, [r3, #0]
 810e20e:	6962      	ldr	r2, [r4, #20]
 810e210:	1c43      	adds	r3, r0, #1
 810e212:	429a      	cmp	r2, r3
 810e214:	d004      	beq.n	810e220 <__swbuf_r+0x6e>
 810e216:	89a3      	ldrh	r3, [r4, #12]
 810e218:	07db      	lsls	r3, r3, #31
 810e21a:	d5e1      	bpl.n	810e1e0 <__swbuf_r+0x2e>
 810e21c:	2e0a      	cmp	r6, #10
 810e21e:	d1df      	bne.n	810e1e0 <__swbuf_r+0x2e>
 810e220:	4621      	mov	r1, r4
 810e222:	4628      	mov	r0, r5
 810e224:	f000 fa52 	bl	810e6cc <_fflush_r>
 810e228:	2800      	cmp	r0, #0
 810e22a:	d0d9      	beq.n	810e1e0 <__swbuf_r+0x2e>
 810e22c:	e7d6      	b.n	810e1dc <__swbuf_r+0x2a>
	...

0810e230 <__swsetup_r>:
 810e230:	b538      	push	{r3, r4, r5, lr}
 810e232:	4b29      	ldr	r3, [pc, #164]	@ (810e2d8 <__swsetup_r+0xa8>)
 810e234:	4605      	mov	r5, r0
 810e236:	6818      	ldr	r0, [r3, #0]
 810e238:	460c      	mov	r4, r1
 810e23a:	b118      	cbz	r0, 810e244 <__swsetup_r+0x14>
 810e23c:	6a03      	ldr	r3, [r0, #32]
 810e23e:	b90b      	cbnz	r3, 810e244 <__swsetup_r+0x14>
 810e240:	f7ff fee0 	bl	810e004 <__sinit>
 810e244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e248:	0719      	lsls	r1, r3, #28
 810e24a:	d422      	bmi.n	810e292 <__swsetup_r+0x62>
 810e24c:	06da      	lsls	r2, r3, #27
 810e24e:	d407      	bmi.n	810e260 <__swsetup_r+0x30>
 810e250:	2209      	movs	r2, #9
 810e252:	602a      	str	r2, [r5, #0]
 810e254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e258:	81a3      	strh	r3, [r4, #12]
 810e25a:	f04f 30ff 	mov.w	r0, #4294967295
 810e25e:	e033      	b.n	810e2c8 <__swsetup_r+0x98>
 810e260:	0758      	lsls	r0, r3, #29
 810e262:	d512      	bpl.n	810e28a <__swsetup_r+0x5a>
 810e264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e266:	b141      	cbz	r1, 810e27a <__swsetup_r+0x4a>
 810e268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e26c:	4299      	cmp	r1, r3
 810e26e:	d002      	beq.n	810e276 <__swsetup_r+0x46>
 810e270:	4628      	mov	r0, r5
 810e272:	f000 f8af 	bl	810e3d4 <_free_r>
 810e276:	2300      	movs	r3, #0
 810e278:	6363      	str	r3, [r4, #52]	@ 0x34
 810e27a:	89a3      	ldrh	r3, [r4, #12]
 810e27c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810e280:	81a3      	strh	r3, [r4, #12]
 810e282:	2300      	movs	r3, #0
 810e284:	6063      	str	r3, [r4, #4]
 810e286:	6923      	ldr	r3, [r4, #16]
 810e288:	6023      	str	r3, [r4, #0]
 810e28a:	89a3      	ldrh	r3, [r4, #12]
 810e28c:	f043 0308 	orr.w	r3, r3, #8
 810e290:	81a3      	strh	r3, [r4, #12]
 810e292:	6923      	ldr	r3, [r4, #16]
 810e294:	b94b      	cbnz	r3, 810e2aa <__swsetup_r+0x7a>
 810e296:	89a3      	ldrh	r3, [r4, #12]
 810e298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810e29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810e2a0:	d003      	beq.n	810e2aa <__swsetup_r+0x7a>
 810e2a2:	4621      	mov	r1, r4
 810e2a4:	4628      	mov	r0, r5
 810e2a6:	f000 fa5f 	bl	810e768 <__smakebuf_r>
 810e2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e2ae:	f013 0201 	ands.w	r2, r3, #1
 810e2b2:	d00a      	beq.n	810e2ca <__swsetup_r+0x9a>
 810e2b4:	2200      	movs	r2, #0
 810e2b6:	60a2      	str	r2, [r4, #8]
 810e2b8:	6962      	ldr	r2, [r4, #20]
 810e2ba:	4252      	negs	r2, r2
 810e2bc:	61a2      	str	r2, [r4, #24]
 810e2be:	6922      	ldr	r2, [r4, #16]
 810e2c0:	b942      	cbnz	r2, 810e2d4 <__swsetup_r+0xa4>
 810e2c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810e2c6:	d1c5      	bne.n	810e254 <__swsetup_r+0x24>
 810e2c8:	bd38      	pop	{r3, r4, r5, pc}
 810e2ca:	0799      	lsls	r1, r3, #30
 810e2cc:	bf58      	it	pl
 810e2ce:	6962      	ldrpl	r2, [r4, #20]
 810e2d0:	60a2      	str	r2, [r4, #8]
 810e2d2:	e7f4      	b.n	810e2be <__swsetup_r+0x8e>
 810e2d4:	2000      	movs	r0, #0
 810e2d6:	e7f7      	b.n	810e2c8 <__swsetup_r+0x98>
 810e2d8:	1000001c 	.word	0x1000001c

0810e2dc <memset>:
 810e2dc:	4402      	add	r2, r0
 810e2de:	4603      	mov	r3, r0
 810e2e0:	4293      	cmp	r3, r2
 810e2e2:	d100      	bne.n	810e2e6 <memset+0xa>
 810e2e4:	4770      	bx	lr
 810e2e6:	f803 1b01 	strb.w	r1, [r3], #1
 810e2ea:	e7f9      	b.n	810e2e0 <memset+0x4>

0810e2ec <_close_r>:
 810e2ec:	b538      	push	{r3, r4, r5, lr}
 810e2ee:	4d06      	ldr	r5, [pc, #24]	@ (810e308 <_close_r+0x1c>)
 810e2f0:	2300      	movs	r3, #0
 810e2f2:	4604      	mov	r4, r0
 810e2f4:	4608      	mov	r0, r1
 810e2f6:	602b      	str	r3, [r5, #0]
 810e2f8:	f7f4 facd 	bl	8102896 <_close>
 810e2fc:	1c43      	adds	r3, r0, #1
 810e2fe:	d102      	bne.n	810e306 <_close_r+0x1a>
 810e300:	682b      	ldr	r3, [r5, #0]
 810e302:	b103      	cbz	r3, 810e306 <_close_r+0x1a>
 810e304:	6023      	str	r3, [r4, #0]
 810e306:	bd38      	pop	{r3, r4, r5, pc}
 810e308:	10000fe4 	.word	0x10000fe4

0810e30c <_lseek_r>:
 810e30c:	b538      	push	{r3, r4, r5, lr}
 810e30e:	4d07      	ldr	r5, [pc, #28]	@ (810e32c <_lseek_r+0x20>)
 810e310:	4604      	mov	r4, r0
 810e312:	4608      	mov	r0, r1
 810e314:	4611      	mov	r1, r2
 810e316:	2200      	movs	r2, #0
 810e318:	602a      	str	r2, [r5, #0]
 810e31a:	461a      	mov	r2, r3
 810e31c:	f7f4 fae2 	bl	81028e4 <_lseek>
 810e320:	1c43      	adds	r3, r0, #1
 810e322:	d102      	bne.n	810e32a <_lseek_r+0x1e>
 810e324:	682b      	ldr	r3, [r5, #0]
 810e326:	b103      	cbz	r3, 810e32a <_lseek_r+0x1e>
 810e328:	6023      	str	r3, [r4, #0]
 810e32a:	bd38      	pop	{r3, r4, r5, pc}
 810e32c:	10000fe4 	.word	0x10000fe4

0810e330 <_read_r>:
 810e330:	b538      	push	{r3, r4, r5, lr}
 810e332:	4d07      	ldr	r5, [pc, #28]	@ (810e350 <_read_r+0x20>)
 810e334:	4604      	mov	r4, r0
 810e336:	4608      	mov	r0, r1
 810e338:	4611      	mov	r1, r2
 810e33a:	2200      	movs	r2, #0
 810e33c:	602a      	str	r2, [r5, #0]
 810e33e:	461a      	mov	r2, r3
 810e340:	f7f4 fa70 	bl	8102824 <_read>
 810e344:	1c43      	adds	r3, r0, #1
 810e346:	d102      	bne.n	810e34e <_read_r+0x1e>
 810e348:	682b      	ldr	r3, [r5, #0]
 810e34a:	b103      	cbz	r3, 810e34e <_read_r+0x1e>
 810e34c:	6023      	str	r3, [r4, #0]
 810e34e:	bd38      	pop	{r3, r4, r5, pc}
 810e350:	10000fe4 	.word	0x10000fe4

0810e354 <_write_r>:
 810e354:	b538      	push	{r3, r4, r5, lr}
 810e356:	4d07      	ldr	r5, [pc, #28]	@ (810e374 <_write_r+0x20>)
 810e358:	4604      	mov	r4, r0
 810e35a:	4608      	mov	r0, r1
 810e35c:	4611      	mov	r1, r2
 810e35e:	2200      	movs	r2, #0
 810e360:	602a      	str	r2, [r5, #0]
 810e362:	461a      	mov	r2, r3
 810e364:	f7f4 fa7b 	bl	810285e <_write>
 810e368:	1c43      	adds	r3, r0, #1
 810e36a:	d102      	bne.n	810e372 <_write_r+0x1e>
 810e36c:	682b      	ldr	r3, [r5, #0]
 810e36e:	b103      	cbz	r3, 810e372 <_write_r+0x1e>
 810e370:	6023      	str	r3, [r4, #0]
 810e372:	bd38      	pop	{r3, r4, r5, pc}
 810e374:	10000fe4 	.word	0x10000fe4

0810e378 <__errno>:
 810e378:	4b01      	ldr	r3, [pc, #4]	@ (810e380 <__errno+0x8>)
 810e37a:	6818      	ldr	r0, [r3, #0]
 810e37c:	4770      	bx	lr
 810e37e:	bf00      	nop
 810e380:	1000001c 	.word	0x1000001c

0810e384 <__libc_init_array>:
 810e384:	b570      	push	{r4, r5, r6, lr}
 810e386:	4d0d      	ldr	r5, [pc, #52]	@ (810e3bc <__libc_init_array+0x38>)
 810e388:	4c0d      	ldr	r4, [pc, #52]	@ (810e3c0 <__libc_init_array+0x3c>)
 810e38a:	1b64      	subs	r4, r4, r5
 810e38c:	10a4      	asrs	r4, r4, #2
 810e38e:	2600      	movs	r6, #0
 810e390:	42a6      	cmp	r6, r4
 810e392:	d109      	bne.n	810e3a8 <__libc_init_array+0x24>
 810e394:	4d0b      	ldr	r5, [pc, #44]	@ (810e3c4 <__libc_init_array+0x40>)
 810e396:	4c0c      	ldr	r4, [pc, #48]	@ (810e3c8 <__libc_init_array+0x44>)
 810e398:	f000 fa54 	bl	810e844 <_init>
 810e39c:	1b64      	subs	r4, r4, r5
 810e39e:	10a4      	asrs	r4, r4, #2
 810e3a0:	2600      	movs	r6, #0
 810e3a2:	42a6      	cmp	r6, r4
 810e3a4:	d105      	bne.n	810e3b2 <__libc_init_array+0x2e>
 810e3a6:	bd70      	pop	{r4, r5, r6, pc}
 810e3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 810e3ac:	4798      	blx	r3
 810e3ae:	3601      	adds	r6, #1
 810e3b0:	e7ee      	b.n	810e390 <__libc_init_array+0xc>
 810e3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 810e3b6:	4798      	blx	r3
 810e3b8:	3601      	adds	r6, #1
 810e3ba:	e7f2      	b.n	810e3a2 <__libc_init_array+0x1e>
 810e3bc:	0810e8b4 	.word	0x0810e8b4
 810e3c0:	0810e8b4 	.word	0x0810e8b4
 810e3c4:	0810e8b4 	.word	0x0810e8b4
 810e3c8:	0810e8b8 	.word	0x0810e8b8

0810e3cc <__retarget_lock_init_recursive>:
 810e3cc:	4770      	bx	lr

0810e3ce <__retarget_lock_acquire_recursive>:
 810e3ce:	4770      	bx	lr

0810e3d0 <__retarget_lock_release_recursive>:
 810e3d0:	4770      	bx	lr
	...

0810e3d4 <_free_r>:
 810e3d4:	b538      	push	{r3, r4, r5, lr}
 810e3d6:	4605      	mov	r5, r0
 810e3d8:	2900      	cmp	r1, #0
 810e3da:	d041      	beq.n	810e460 <_free_r+0x8c>
 810e3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e3e0:	1f0c      	subs	r4, r1, #4
 810e3e2:	2b00      	cmp	r3, #0
 810e3e4:	bfb8      	it	lt
 810e3e6:	18e4      	addlt	r4, r4, r3
 810e3e8:	f000 f8e0 	bl	810e5ac <__malloc_lock>
 810e3ec:	4a1d      	ldr	r2, [pc, #116]	@ (810e464 <_free_r+0x90>)
 810e3ee:	6813      	ldr	r3, [r2, #0]
 810e3f0:	b933      	cbnz	r3, 810e400 <_free_r+0x2c>
 810e3f2:	6063      	str	r3, [r4, #4]
 810e3f4:	6014      	str	r4, [r2, #0]
 810e3f6:	4628      	mov	r0, r5
 810e3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e3fc:	f000 b8dc 	b.w	810e5b8 <__malloc_unlock>
 810e400:	42a3      	cmp	r3, r4
 810e402:	d908      	bls.n	810e416 <_free_r+0x42>
 810e404:	6820      	ldr	r0, [r4, #0]
 810e406:	1821      	adds	r1, r4, r0
 810e408:	428b      	cmp	r3, r1
 810e40a:	bf01      	itttt	eq
 810e40c:	6819      	ldreq	r1, [r3, #0]
 810e40e:	685b      	ldreq	r3, [r3, #4]
 810e410:	1809      	addeq	r1, r1, r0
 810e412:	6021      	streq	r1, [r4, #0]
 810e414:	e7ed      	b.n	810e3f2 <_free_r+0x1e>
 810e416:	461a      	mov	r2, r3
 810e418:	685b      	ldr	r3, [r3, #4]
 810e41a:	b10b      	cbz	r3, 810e420 <_free_r+0x4c>
 810e41c:	42a3      	cmp	r3, r4
 810e41e:	d9fa      	bls.n	810e416 <_free_r+0x42>
 810e420:	6811      	ldr	r1, [r2, #0]
 810e422:	1850      	adds	r0, r2, r1
 810e424:	42a0      	cmp	r0, r4
 810e426:	d10b      	bne.n	810e440 <_free_r+0x6c>
 810e428:	6820      	ldr	r0, [r4, #0]
 810e42a:	4401      	add	r1, r0
 810e42c:	1850      	adds	r0, r2, r1
 810e42e:	4283      	cmp	r3, r0
 810e430:	6011      	str	r1, [r2, #0]
 810e432:	d1e0      	bne.n	810e3f6 <_free_r+0x22>
 810e434:	6818      	ldr	r0, [r3, #0]
 810e436:	685b      	ldr	r3, [r3, #4]
 810e438:	6053      	str	r3, [r2, #4]
 810e43a:	4408      	add	r0, r1
 810e43c:	6010      	str	r0, [r2, #0]
 810e43e:	e7da      	b.n	810e3f6 <_free_r+0x22>
 810e440:	d902      	bls.n	810e448 <_free_r+0x74>
 810e442:	230c      	movs	r3, #12
 810e444:	602b      	str	r3, [r5, #0]
 810e446:	e7d6      	b.n	810e3f6 <_free_r+0x22>
 810e448:	6820      	ldr	r0, [r4, #0]
 810e44a:	1821      	adds	r1, r4, r0
 810e44c:	428b      	cmp	r3, r1
 810e44e:	bf04      	itt	eq
 810e450:	6819      	ldreq	r1, [r3, #0]
 810e452:	685b      	ldreq	r3, [r3, #4]
 810e454:	6063      	str	r3, [r4, #4]
 810e456:	bf04      	itt	eq
 810e458:	1809      	addeq	r1, r1, r0
 810e45a:	6021      	streq	r1, [r4, #0]
 810e45c:	6054      	str	r4, [r2, #4]
 810e45e:	e7ca      	b.n	810e3f6 <_free_r+0x22>
 810e460:	bd38      	pop	{r3, r4, r5, pc}
 810e462:	bf00      	nop
 810e464:	10000ff0 	.word	0x10000ff0

0810e468 <sbrk_aligned>:
 810e468:	b570      	push	{r4, r5, r6, lr}
 810e46a:	4e0f      	ldr	r6, [pc, #60]	@ (810e4a8 <sbrk_aligned+0x40>)
 810e46c:	460c      	mov	r4, r1
 810e46e:	6831      	ldr	r1, [r6, #0]
 810e470:	4605      	mov	r5, r0
 810e472:	b911      	cbnz	r1, 810e47a <sbrk_aligned+0x12>
 810e474:	f000 f9d6 	bl	810e824 <_sbrk_r>
 810e478:	6030      	str	r0, [r6, #0]
 810e47a:	4621      	mov	r1, r4
 810e47c:	4628      	mov	r0, r5
 810e47e:	f000 f9d1 	bl	810e824 <_sbrk_r>
 810e482:	1c43      	adds	r3, r0, #1
 810e484:	d103      	bne.n	810e48e <sbrk_aligned+0x26>
 810e486:	f04f 34ff 	mov.w	r4, #4294967295
 810e48a:	4620      	mov	r0, r4
 810e48c:	bd70      	pop	{r4, r5, r6, pc}
 810e48e:	1cc4      	adds	r4, r0, #3
 810e490:	f024 0403 	bic.w	r4, r4, #3
 810e494:	42a0      	cmp	r0, r4
 810e496:	d0f8      	beq.n	810e48a <sbrk_aligned+0x22>
 810e498:	1a21      	subs	r1, r4, r0
 810e49a:	4628      	mov	r0, r5
 810e49c:	f000 f9c2 	bl	810e824 <_sbrk_r>
 810e4a0:	3001      	adds	r0, #1
 810e4a2:	d1f2      	bne.n	810e48a <sbrk_aligned+0x22>
 810e4a4:	e7ef      	b.n	810e486 <sbrk_aligned+0x1e>
 810e4a6:	bf00      	nop
 810e4a8:	10000fec 	.word	0x10000fec

0810e4ac <_malloc_r>:
 810e4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e4b0:	1ccd      	adds	r5, r1, #3
 810e4b2:	f025 0503 	bic.w	r5, r5, #3
 810e4b6:	3508      	adds	r5, #8
 810e4b8:	2d0c      	cmp	r5, #12
 810e4ba:	bf38      	it	cc
 810e4bc:	250c      	movcc	r5, #12
 810e4be:	2d00      	cmp	r5, #0
 810e4c0:	4606      	mov	r6, r0
 810e4c2:	db01      	blt.n	810e4c8 <_malloc_r+0x1c>
 810e4c4:	42a9      	cmp	r1, r5
 810e4c6:	d904      	bls.n	810e4d2 <_malloc_r+0x26>
 810e4c8:	230c      	movs	r3, #12
 810e4ca:	6033      	str	r3, [r6, #0]
 810e4cc:	2000      	movs	r0, #0
 810e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e5a8 <_malloc_r+0xfc>
 810e4d6:	f000 f869 	bl	810e5ac <__malloc_lock>
 810e4da:	f8d8 3000 	ldr.w	r3, [r8]
 810e4de:	461c      	mov	r4, r3
 810e4e0:	bb44      	cbnz	r4, 810e534 <_malloc_r+0x88>
 810e4e2:	4629      	mov	r1, r5
 810e4e4:	4630      	mov	r0, r6
 810e4e6:	f7ff ffbf 	bl	810e468 <sbrk_aligned>
 810e4ea:	1c43      	adds	r3, r0, #1
 810e4ec:	4604      	mov	r4, r0
 810e4ee:	d158      	bne.n	810e5a2 <_malloc_r+0xf6>
 810e4f0:	f8d8 4000 	ldr.w	r4, [r8]
 810e4f4:	4627      	mov	r7, r4
 810e4f6:	2f00      	cmp	r7, #0
 810e4f8:	d143      	bne.n	810e582 <_malloc_r+0xd6>
 810e4fa:	2c00      	cmp	r4, #0
 810e4fc:	d04b      	beq.n	810e596 <_malloc_r+0xea>
 810e4fe:	6823      	ldr	r3, [r4, #0]
 810e500:	4639      	mov	r1, r7
 810e502:	4630      	mov	r0, r6
 810e504:	eb04 0903 	add.w	r9, r4, r3
 810e508:	f000 f98c 	bl	810e824 <_sbrk_r>
 810e50c:	4581      	cmp	r9, r0
 810e50e:	d142      	bne.n	810e596 <_malloc_r+0xea>
 810e510:	6821      	ldr	r1, [r4, #0]
 810e512:	1a6d      	subs	r5, r5, r1
 810e514:	4629      	mov	r1, r5
 810e516:	4630      	mov	r0, r6
 810e518:	f7ff ffa6 	bl	810e468 <sbrk_aligned>
 810e51c:	3001      	adds	r0, #1
 810e51e:	d03a      	beq.n	810e596 <_malloc_r+0xea>
 810e520:	6823      	ldr	r3, [r4, #0]
 810e522:	442b      	add	r3, r5
 810e524:	6023      	str	r3, [r4, #0]
 810e526:	f8d8 3000 	ldr.w	r3, [r8]
 810e52a:	685a      	ldr	r2, [r3, #4]
 810e52c:	bb62      	cbnz	r2, 810e588 <_malloc_r+0xdc>
 810e52e:	f8c8 7000 	str.w	r7, [r8]
 810e532:	e00f      	b.n	810e554 <_malloc_r+0xa8>
 810e534:	6822      	ldr	r2, [r4, #0]
 810e536:	1b52      	subs	r2, r2, r5
 810e538:	d420      	bmi.n	810e57c <_malloc_r+0xd0>
 810e53a:	2a0b      	cmp	r2, #11
 810e53c:	d917      	bls.n	810e56e <_malloc_r+0xc2>
 810e53e:	1961      	adds	r1, r4, r5
 810e540:	42a3      	cmp	r3, r4
 810e542:	6025      	str	r5, [r4, #0]
 810e544:	bf18      	it	ne
 810e546:	6059      	strne	r1, [r3, #4]
 810e548:	6863      	ldr	r3, [r4, #4]
 810e54a:	bf08      	it	eq
 810e54c:	f8c8 1000 	streq.w	r1, [r8]
 810e550:	5162      	str	r2, [r4, r5]
 810e552:	604b      	str	r3, [r1, #4]
 810e554:	4630      	mov	r0, r6
 810e556:	f000 f82f 	bl	810e5b8 <__malloc_unlock>
 810e55a:	f104 000b 	add.w	r0, r4, #11
 810e55e:	1d23      	adds	r3, r4, #4
 810e560:	f020 0007 	bic.w	r0, r0, #7
 810e564:	1ac2      	subs	r2, r0, r3
 810e566:	bf1c      	itt	ne
 810e568:	1a1b      	subne	r3, r3, r0
 810e56a:	50a3      	strne	r3, [r4, r2]
 810e56c:	e7af      	b.n	810e4ce <_malloc_r+0x22>
 810e56e:	6862      	ldr	r2, [r4, #4]
 810e570:	42a3      	cmp	r3, r4
 810e572:	bf0c      	ite	eq
 810e574:	f8c8 2000 	streq.w	r2, [r8]
 810e578:	605a      	strne	r2, [r3, #4]
 810e57a:	e7eb      	b.n	810e554 <_malloc_r+0xa8>
 810e57c:	4623      	mov	r3, r4
 810e57e:	6864      	ldr	r4, [r4, #4]
 810e580:	e7ae      	b.n	810e4e0 <_malloc_r+0x34>
 810e582:	463c      	mov	r4, r7
 810e584:	687f      	ldr	r7, [r7, #4]
 810e586:	e7b6      	b.n	810e4f6 <_malloc_r+0x4a>
 810e588:	461a      	mov	r2, r3
 810e58a:	685b      	ldr	r3, [r3, #4]
 810e58c:	42a3      	cmp	r3, r4
 810e58e:	d1fb      	bne.n	810e588 <_malloc_r+0xdc>
 810e590:	2300      	movs	r3, #0
 810e592:	6053      	str	r3, [r2, #4]
 810e594:	e7de      	b.n	810e554 <_malloc_r+0xa8>
 810e596:	230c      	movs	r3, #12
 810e598:	6033      	str	r3, [r6, #0]
 810e59a:	4630      	mov	r0, r6
 810e59c:	f000 f80c 	bl	810e5b8 <__malloc_unlock>
 810e5a0:	e794      	b.n	810e4cc <_malloc_r+0x20>
 810e5a2:	6005      	str	r5, [r0, #0]
 810e5a4:	e7d6      	b.n	810e554 <_malloc_r+0xa8>
 810e5a6:	bf00      	nop
 810e5a8:	10000ff0 	.word	0x10000ff0

0810e5ac <__malloc_lock>:
 810e5ac:	4801      	ldr	r0, [pc, #4]	@ (810e5b4 <__malloc_lock+0x8>)
 810e5ae:	f7ff bf0e 	b.w	810e3ce <__retarget_lock_acquire_recursive>
 810e5b2:	bf00      	nop
 810e5b4:	10000fe8 	.word	0x10000fe8

0810e5b8 <__malloc_unlock>:
 810e5b8:	4801      	ldr	r0, [pc, #4]	@ (810e5c0 <__malloc_unlock+0x8>)
 810e5ba:	f7ff bf09 	b.w	810e3d0 <__retarget_lock_release_recursive>
 810e5be:	bf00      	nop
 810e5c0:	10000fe8 	.word	0x10000fe8

0810e5c4 <__sflush_r>:
 810e5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e5cc:	0716      	lsls	r6, r2, #28
 810e5ce:	4605      	mov	r5, r0
 810e5d0:	460c      	mov	r4, r1
 810e5d2:	d454      	bmi.n	810e67e <__sflush_r+0xba>
 810e5d4:	684b      	ldr	r3, [r1, #4]
 810e5d6:	2b00      	cmp	r3, #0
 810e5d8:	dc02      	bgt.n	810e5e0 <__sflush_r+0x1c>
 810e5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810e5dc:	2b00      	cmp	r3, #0
 810e5de:	dd48      	ble.n	810e672 <__sflush_r+0xae>
 810e5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810e5e2:	2e00      	cmp	r6, #0
 810e5e4:	d045      	beq.n	810e672 <__sflush_r+0xae>
 810e5e6:	2300      	movs	r3, #0
 810e5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810e5ec:	682f      	ldr	r7, [r5, #0]
 810e5ee:	6a21      	ldr	r1, [r4, #32]
 810e5f0:	602b      	str	r3, [r5, #0]
 810e5f2:	d030      	beq.n	810e656 <__sflush_r+0x92>
 810e5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810e5f6:	89a3      	ldrh	r3, [r4, #12]
 810e5f8:	0759      	lsls	r1, r3, #29
 810e5fa:	d505      	bpl.n	810e608 <__sflush_r+0x44>
 810e5fc:	6863      	ldr	r3, [r4, #4]
 810e5fe:	1ad2      	subs	r2, r2, r3
 810e600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810e602:	b10b      	cbz	r3, 810e608 <__sflush_r+0x44>
 810e604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810e606:	1ad2      	subs	r2, r2, r3
 810e608:	2300      	movs	r3, #0
 810e60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810e60c:	6a21      	ldr	r1, [r4, #32]
 810e60e:	4628      	mov	r0, r5
 810e610:	47b0      	blx	r6
 810e612:	1c43      	adds	r3, r0, #1
 810e614:	89a3      	ldrh	r3, [r4, #12]
 810e616:	d106      	bne.n	810e626 <__sflush_r+0x62>
 810e618:	6829      	ldr	r1, [r5, #0]
 810e61a:	291d      	cmp	r1, #29
 810e61c:	d82b      	bhi.n	810e676 <__sflush_r+0xb2>
 810e61e:	4a2a      	ldr	r2, [pc, #168]	@ (810e6c8 <__sflush_r+0x104>)
 810e620:	40ca      	lsrs	r2, r1
 810e622:	07d6      	lsls	r6, r2, #31
 810e624:	d527      	bpl.n	810e676 <__sflush_r+0xb2>
 810e626:	2200      	movs	r2, #0
 810e628:	6062      	str	r2, [r4, #4]
 810e62a:	04d9      	lsls	r1, r3, #19
 810e62c:	6922      	ldr	r2, [r4, #16]
 810e62e:	6022      	str	r2, [r4, #0]
 810e630:	d504      	bpl.n	810e63c <__sflush_r+0x78>
 810e632:	1c42      	adds	r2, r0, #1
 810e634:	d101      	bne.n	810e63a <__sflush_r+0x76>
 810e636:	682b      	ldr	r3, [r5, #0]
 810e638:	b903      	cbnz	r3, 810e63c <__sflush_r+0x78>
 810e63a:	6560      	str	r0, [r4, #84]	@ 0x54
 810e63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e63e:	602f      	str	r7, [r5, #0]
 810e640:	b1b9      	cbz	r1, 810e672 <__sflush_r+0xae>
 810e642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e646:	4299      	cmp	r1, r3
 810e648:	d002      	beq.n	810e650 <__sflush_r+0x8c>
 810e64a:	4628      	mov	r0, r5
 810e64c:	f7ff fec2 	bl	810e3d4 <_free_r>
 810e650:	2300      	movs	r3, #0
 810e652:	6363      	str	r3, [r4, #52]	@ 0x34
 810e654:	e00d      	b.n	810e672 <__sflush_r+0xae>
 810e656:	2301      	movs	r3, #1
 810e658:	4628      	mov	r0, r5
 810e65a:	47b0      	blx	r6
 810e65c:	4602      	mov	r2, r0
 810e65e:	1c50      	adds	r0, r2, #1
 810e660:	d1c9      	bne.n	810e5f6 <__sflush_r+0x32>
 810e662:	682b      	ldr	r3, [r5, #0]
 810e664:	2b00      	cmp	r3, #0
 810e666:	d0c6      	beq.n	810e5f6 <__sflush_r+0x32>
 810e668:	2b1d      	cmp	r3, #29
 810e66a:	d001      	beq.n	810e670 <__sflush_r+0xac>
 810e66c:	2b16      	cmp	r3, #22
 810e66e:	d11e      	bne.n	810e6ae <__sflush_r+0xea>
 810e670:	602f      	str	r7, [r5, #0]
 810e672:	2000      	movs	r0, #0
 810e674:	e022      	b.n	810e6bc <__sflush_r+0xf8>
 810e676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e67a:	b21b      	sxth	r3, r3
 810e67c:	e01b      	b.n	810e6b6 <__sflush_r+0xf2>
 810e67e:	690f      	ldr	r7, [r1, #16]
 810e680:	2f00      	cmp	r7, #0
 810e682:	d0f6      	beq.n	810e672 <__sflush_r+0xae>
 810e684:	0793      	lsls	r3, r2, #30
 810e686:	680e      	ldr	r6, [r1, #0]
 810e688:	bf08      	it	eq
 810e68a:	694b      	ldreq	r3, [r1, #20]
 810e68c:	600f      	str	r7, [r1, #0]
 810e68e:	bf18      	it	ne
 810e690:	2300      	movne	r3, #0
 810e692:	eba6 0807 	sub.w	r8, r6, r7
 810e696:	608b      	str	r3, [r1, #8]
 810e698:	f1b8 0f00 	cmp.w	r8, #0
 810e69c:	dde9      	ble.n	810e672 <__sflush_r+0xae>
 810e69e:	6a21      	ldr	r1, [r4, #32]
 810e6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810e6a2:	4643      	mov	r3, r8
 810e6a4:	463a      	mov	r2, r7
 810e6a6:	4628      	mov	r0, r5
 810e6a8:	47b0      	blx	r6
 810e6aa:	2800      	cmp	r0, #0
 810e6ac:	dc08      	bgt.n	810e6c0 <__sflush_r+0xfc>
 810e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e6b6:	81a3      	strh	r3, [r4, #12]
 810e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 810e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e6c0:	4407      	add	r7, r0
 810e6c2:	eba8 0800 	sub.w	r8, r8, r0
 810e6c6:	e7e7      	b.n	810e698 <__sflush_r+0xd4>
 810e6c8:	20400001 	.word	0x20400001

0810e6cc <_fflush_r>:
 810e6cc:	b538      	push	{r3, r4, r5, lr}
 810e6ce:	690b      	ldr	r3, [r1, #16]
 810e6d0:	4605      	mov	r5, r0
 810e6d2:	460c      	mov	r4, r1
 810e6d4:	b913      	cbnz	r3, 810e6dc <_fflush_r+0x10>
 810e6d6:	2500      	movs	r5, #0
 810e6d8:	4628      	mov	r0, r5
 810e6da:	bd38      	pop	{r3, r4, r5, pc}
 810e6dc:	b118      	cbz	r0, 810e6e6 <_fflush_r+0x1a>
 810e6de:	6a03      	ldr	r3, [r0, #32]
 810e6e0:	b90b      	cbnz	r3, 810e6e6 <_fflush_r+0x1a>
 810e6e2:	f7ff fc8f 	bl	810e004 <__sinit>
 810e6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e6ea:	2b00      	cmp	r3, #0
 810e6ec:	d0f3      	beq.n	810e6d6 <_fflush_r+0xa>
 810e6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810e6f0:	07d0      	lsls	r0, r2, #31
 810e6f2:	d404      	bmi.n	810e6fe <_fflush_r+0x32>
 810e6f4:	0599      	lsls	r1, r3, #22
 810e6f6:	d402      	bmi.n	810e6fe <_fflush_r+0x32>
 810e6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e6fa:	f7ff fe68 	bl	810e3ce <__retarget_lock_acquire_recursive>
 810e6fe:	4628      	mov	r0, r5
 810e700:	4621      	mov	r1, r4
 810e702:	f7ff ff5f 	bl	810e5c4 <__sflush_r>
 810e706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e708:	07da      	lsls	r2, r3, #31
 810e70a:	4605      	mov	r5, r0
 810e70c:	d4e4      	bmi.n	810e6d8 <_fflush_r+0xc>
 810e70e:	89a3      	ldrh	r3, [r4, #12]
 810e710:	059b      	lsls	r3, r3, #22
 810e712:	d4e1      	bmi.n	810e6d8 <_fflush_r+0xc>
 810e714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e716:	f7ff fe5b 	bl	810e3d0 <__retarget_lock_release_recursive>
 810e71a:	e7dd      	b.n	810e6d8 <_fflush_r+0xc>

0810e71c <__swhatbuf_r>:
 810e71c:	b570      	push	{r4, r5, r6, lr}
 810e71e:	460c      	mov	r4, r1
 810e720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e724:	2900      	cmp	r1, #0
 810e726:	b096      	sub	sp, #88	@ 0x58
 810e728:	4615      	mov	r5, r2
 810e72a:	461e      	mov	r6, r3
 810e72c:	da0d      	bge.n	810e74a <__swhatbuf_r+0x2e>
 810e72e:	89a3      	ldrh	r3, [r4, #12]
 810e730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810e734:	f04f 0100 	mov.w	r1, #0
 810e738:	bf14      	ite	ne
 810e73a:	2340      	movne	r3, #64	@ 0x40
 810e73c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810e740:	2000      	movs	r0, #0
 810e742:	6031      	str	r1, [r6, #0]
 810e744:	602b      	str	r3, [r5, #0]
 810e746:	b016      	add	sp, #88	@ 0x58
 810e748:	bd70      	pop	{r4, r5, r6, pc}
 810e74a:	466a      	mov	r2, sp
 810e74c:	f000 f848 	bl	810e7e0 <_fstat_r>
 810e750:	2800      	cmp	r0, #0
 810e752:	dbec      	blt.n	810e72e <__swhatbuf_r+0x12>
 810e754:	9901      	ldr	r1, [sp, #4]
 810e756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810e75a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810e75e:	4259      	negs	r1, r3
 810e760:	4159      	adcs	r1, r3
 810e762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810e766:	e7eb      	b.n	810e740 <__swhatbuf_r+0x24>

0810e768 <__smakebuf_r>:
 810e768:	898b      	ldrh	r3, [r1, #12]
 810e76a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e76c:	079d      	lsls	r5, r3, #30
 810e76e:	4606      	mov	r6, r0
 810e770:	460c      	mov	r4, r1
 810e772:	d507      	bpl.n	810e784 <__smakebuf_r+0x1c>
 810e774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810e778:	6023      	str	r3, [r4, #0]
 810e77a:	6123      	str	r3, [r4, #16]
 810e77c:	2301      	movs	r3, #1
 810e77e:	6163      	str	r3, [r4, #20]
 810e780:	b003      	add	sp, #12
 810e782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e784:	ab01      	add	r3, sp, #4
 810e786:	466a      	mov	r2, sp
 810e788:	f7ff ffc8 	bl	810e71c <__swhatbuf_r>
 810e78c:	9f00      	ldr	r7, [sp, #0]
 810e78e:	4605      	mov	r5, r0
 810e790:	4639      	mov	r1, r7
 810e792:	4630      	mov	r0, r6
 810e794:	f7ff fe8a 	bl	810e4ac <_malloc_r>
 810e798:	b948      	cbnz	r0, 810e7ae <__smakebuf_r+0x46>
 810e79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e79e:	059a      	lsls	r2, r3, #22
 810e7a0:	d4ee      	bmi.n	810e780 <__smakebuf_r+0x18>
 810e7a2:	f023 0303 	bic.w	r3, r3, #3
 810e7a6:	f043 0302 	orr.w	r3, r3, #2
 810e7aa:	81a3      	strh	r3, [r4, #12]
 810e7ac:	e7e2      	b.n	810e774 <__smakebuf_r+0xc>
 810e7ae:	89a3      	ldrh	r3, [r4, #12]
 810e7b0:	6020      	str	r0, [r4, #0]
 810e7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810e7b6:	81a3      	strh	r3, [r4, #12]
 810e7b8:	9b01      	ldr	r3, [sp, #4]
 810e7ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810e7be:	b15b      	cbz	r3, 810e7d8 <__smakebuf_r+0x70>
 810e7c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e7c4:	4630      	mov	r0, r6
 810e7c6:	f000 f81d 	bl	810e804 <_isatty_r>
 810e7ca:	b128      	cbz	r0, 810e7d8 <__smakebuf_r+0x70>
 810e7cc:	89a3      	ldrh	r3, [r4, #12]
 810e7ce:	f023 0303 	bic.w	r3, r3, #3
 810e7d2:	f043 0301 	orr.w	r3, r3, #1
 810e7d6:	81a3      	strh	r3, [r4, #12]
 810e7d8:	89a3      	ldrh	r3, [r4, #12]
 810e7da:	431d      	orrs	r5, r3
 810e7dc:	81a5      	strh	r5, [r4, #12]
 810e7de:	e7cf      	b.n	810e780 <__smakebuf_r+0x18>

0810e7e0 <_fstat_r>:
 810e7e0:	b538      	push	{r3, r4, r5, lr}
 810e7e2:	4d07      	ldr	r5, [pc, #28]	@ (810e800 <_fstat_r+0x20>)
 810e7e4:	2300      	movs	r3, #0
 810e7e6:	4604      	mov	r4, r0
 810e7e8:	4608      	mov	r0, r1
 810e7ea:	4611      	mov	r1, r2
 810e7ec:	602b      	str	r3, [r5, #0]
 810e7ee:	f7f4 f85e 	bl	81028ae <_fstat>
 810e7f2:	1c43      	adds	r3, r0, #1
 810e7f4:	d102      	bne.n	810e7fc <_fstat_r+0x1c>
 810e7f6:	682b      	ldr	r3, [r5, #0]
 810e7f8:	b103      	cbz	r3, 810e7fc <_fstat_r+0x1c>
 810e7fa:	6023      	str	r3, [r4, #0]
 810e7fc:	bd38      	pop	{r3, r4, r5, pc}
 810e7fe:	bf00      	nop
 810e800:	10000fe4 	.word	0x10000fe4

0810e804 <_isatty_r>:
 810e804:	b538      	push	{r3, r4, r5, lr}
 810e806:	4d06      	ldr	r5, [pc, #24]	@ (810e820 <_isatty_r+0x1c>)
 810e808:	2300      	movs	r3, #0
 810e80a:	4604      	mov	r4, r0
 810e80c:	4608      	mov	r0, r1
 810e80e:	602b      	str	r3, [r5, #0]
 810e810:	f7f4 f85d 	bl	81028ce <_isatty>
 810e814:	1c43      	adds	r3, r0, #1
 810e816:	d102      	bne.n	810e81e <_isatty_r+0x1a>
 810e818:	682b      	ldr	r3, [r5, #0]
 810e81a:	b103      	cbz	r3, 810e81e <_isatty_r+0x1a>
 810e81c:	6023      	str	r3, [r4, #0]
 810e81e:	bd38      	pop	{r3, r4, r5, pc}
 810e820:	10000fe4 	.word	0x10000fe4

0810e824 <_sbrk_r>:
 810e824:	b538      	push	{r3, r4, r5, lr}
 810e826:	4d06      	ldr	r5, [pc, #24]	@ (810e840 <_sbrk_r+0x1c>)
 810e828:	2300      	movs	r3, #0
 810e82a:	4604      	mov	r4, r0
 810e82c:	4608      	mov	r0, r1
 810e82e:	602b      	str	r3, [r5, #0]
 810e830:	f7f4 f866 	bl	8102900 <_sbrk>
 810e834:	1c43      	adds	r3, r0, #1
 810e836:	d102      	bne.n	810e83e <_sbrk_r+0x1a>
 810e838:	682b      	ldr	r3, [r5, #0]
 810e83a:	b103      	cbz	r3, 810e83e <_sbrk_r+0x1a>
 810e83c:	6023      	str	r3, [r4, #0]
 810e83e:	bd38      	pop	{r3, r4, r5, pc}
 810e840:	10000fe4 	.word	0x10000fe4

0810e844 <_init>:
 810e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e846:	bf00      	nop
 810e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e84a:	bc08      	pop	{r3}
 810e84c:	469e      	mov	lr, r3
 810e84e:	4770      	bx	lr

0810e850 <_fini>:
 810e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e852:	bf00      	nop
 810e854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e856:	bc08      	pop	{r3}
 810e858:	469e      	mov	lr, r3
 810e85a:	4770      	bx	lr
