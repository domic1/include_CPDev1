
include_CPDev_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6dc  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0810e974  0810e974  0000f974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e9d8  0810e9d8  0000f9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e9e0  0810e9e0  0000f9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810e9e4  0810e9e4  0000f9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  0810e9e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  1000006c  0810ea54  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  100000cc  0810eab4  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec8  1000012c  0810eb14  0001012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000ff4  0810eb14  00010ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036278  00000000  00000000  0001015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056c7  00000000  00000000  000463d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002970  00000000  00000000  0004baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002054  00000000  00000000  0004e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004f989  00000000  00000000  00050464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037784  00000000  00000000  0009fded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e6597  00000000  00000000  000d7571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002bdb08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bca8  00000000  00000000  002bdb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  002c97f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000012c 	.word	0x1000012c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810e95c 	.word	0x0810e95c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000130 	.word	0x10000130
 81002d4:	0810e95c 	.word	0x0810e95c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b082      	sub	sp, #8
 8100668:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810066a:	4b4d      	ldr	r3, [pc, #308]	@ (81007a0 <main+0x13c>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a4b      	ldr	r2, [pc, #300]	@ (81007a0 <main+0x13c>)
 8100672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b49      	ldr	r3, [pc, #292]	@ (81007a0 <main+0x13c>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100688:	2001      	movs	r0, #1
 810068a:	f005 f9c7 	bl	8105a1c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810068e:	f005 fba5 	bl	8105ddc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100692:	2201      	movs	r2, #1
 8100694:	2102      	movs	r1, #2
 8100696:	2000      	movs	r0, #0
 8100698:	f005 fb26 	bl	8105ce8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810069c:	4b41      	ldr	r3, [pc, #260]	@ (81007a4 <main+0x140>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006a4:	2b70      	cmp	r3, #112	@ 0x70
 81006a6:	d108      	bne.n	81006ba <main+0x56>
 81006a8:	4b3f      	ldr	r3, [pc, #252]	@ (81007a8 <main+0x144>)
 81006aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ae:	4a3e      	ldr	r2, [pc, #248]	@ (81007a8 <main+0x144>)
 81006b0:	f043 0301 	orr.w	r3, r3, #1
 81006b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006b8:	e007      	b.n	81006ca <main+0x66>
 81006ba:	4b3b      	ldr	r3, [pc, #236]	@ (81007a8 <main+0x144>)
 81006bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c0:	4a39      	ldr	r2, [pc, #228]	@ (81007a8 <main+0x144>)
 81006c2:	f043 0301 	orr.w	r3, r3, #1
 81006c6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ca:	f002 f9b9 	bl	8102a40 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006ce:	f000 fe43 	bl	8101358 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 81006d2:	f000 fdd5 	bl	8101280 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 81006d6:	f000 f873 	bl	81007c0 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 81006da:	f000 f8fb 	bl	81008d4 <_ZL12MX_ADC3_Initv>
  MX_ETH_Init();
 81006de:	f000 f967 	bl	81009b0 <_ZL11MX_ETH_Initv>
  MX_FMC_Init();
 81006e2:	f000 fde7 	bl	81012b4 <_ZL11MX_FMC_Initv>
  MX_HDMI_CEC_Init();
 81006e6:	f000 f9b5 	bl	8100a54 <_ZL16MX_HDMI_CEC_Initv>
  MX_QUADSPI_Init();
 81006ea:	f000 f9ed 	bl	8100ac8 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 81006ee:	f000 fa19 	bl	8100b24 <_ZL11MX_RTC_Initv>
  MX_SAI1_Init();
 81006f2:	f000 fa6f 	bl	8100bd4 <_ZL12MX_SAI1_Initv>
  MX_SDMMC1_SD_Init();
 81006f6:	f000 fb19 	bl	8100d2c <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX1_Init();
 81006fa:	f000 fb3f 	bl	8100d7c <_ZL16MX_SPDIFRX1_Initv>
  MX_SPI2_Init();
 81006fe:	f000 fb7b 	bl	8100df8 <_ZL12MX_SPI2_Initv>
  MX_SPI5_Init();
 8100702:	f000 fbd3 	bl	8100eac <_ZL12MX_SPI5_Initv>
  MX_TIM8_Init();
 8100706:	f000 fc2b 	bl	8100f60 <_ZL12MX_TIM8_Initv>
  MX_TIM13_Init();
 810070a:	f000 fccd 	bl	81010a8 <_ZL13MX_TIM13_Initv>
  MX_UART8_Init();
 810070e:	f000 fd21 	bl	8101154 <_ZL13MX_UART8_Initv>
  MX_USB_OTG_HS_PCD_Init();
 8100712:	f000 fd7f 	bl	8101214 <_ZL22MX_USB_OTG_HS_PCD_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart8, (uint8_t*)"CM4 Started\r\n", 22, 100);
 8100716:	2364      	movs	r3, #100	@ 0x64
 8100718:	2216      	movs	r2, #22
 810071a:	4924      	ldr	r1, [pc, #144]	@ (81007ac <main+0x148>)
 810071c:	4824      	ldr	r0, [pc, #144]	@ (81007b0 <main+0x14c>)
 810071e:	f00b fa9f 	bl	810bc60 <HAL_UART_Transmit>
  // Test LED2
   printf("LED2 ON\n");
 8100722:	4824      	ldr	r0, [pc, #144]	@ (81007b4 <main+0x150>)
 8100724:	f00d fd86 	bl	810e234 <puts>
   HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8100728:	2201      	movs	r2, #1
 810072a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 810072e:	4822      	ldr	r0, [pc, #136]	@ (81007b8 <main+0x154>)
 8100730:	f005 f8f2 	bl	8105918 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8100734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100738:	f002 fa36 	bl	8102ba8 <HAL_Delay>
   HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 810073c:	2200      	movs	r2, #0
 810073e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100742:	481d      	ldr	r0, [pc, #116]	@ (81007b8 <main+0x154>)
 8100744:	f005 f8e8 	bl	8105918 <HAL_GPIO_WritePin>
   printf("LED2 OFF\n");
 8100748:	481c      	ldr	r0, [pc, #112]	@ (81007bc <main+0x158>)
 810074a:	f00d fd73 	bl	810e234 <puts>
   HAL_Delay(500);
 810074e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100752:	f002 fa29 	bl	8102ba8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 8100756:	2000      	movs	r0, #0
 8100758:	f005 f936 	bl	81059c8 <HAL_HSEM_IsSemTaken>
 810075c:	4603      	mov	r3, r0
 810075e:	2b00      	cmp	r3, #0
 8100760:	bf0c      	ite	eq
 8100762:	2301      	moveq	r3, #1
 8100764:	2300      	movne	r3, #0
 8100766:	b2db      	uxtb	r3, r3
 8100768:	2b00      	cmp	r3, #0
 810076a:	d0f4      	beq.n	8100756 <main+0xf2>
	         if(HAL_HSEM_Take(HSEM_ID_0, 0) == HAL_OK) {
 810076c:	2100      	movs	r1, #0
 810076e:	2000      	movs	r0, #0
 8100770:	f005 f906 	bl	8105980 <HAL_HSEM_Take>
 8100774:	4603      	mov	r3, r0
 8100776:	2b00      	cmp	r3, #0
 8100778:	bf0c      	ite	eq
 810077a:	2301      	moveq	r3, #1
 810077c:	2300      	movne	r3, #0
 810077e:	b2db      	uxtb	r3, r3
 8100780:	2b00      	cmp	r3, #0
 8100782:	d008      	beq.n	8100796 <main+0x132>
	             HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8100784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100788:	480b      	ldr	r0, [pc, #44]	@ (81007b8 <main+0x154>)
 810078a:	f005 f8de 	bl	810594a <HAL_GPIO_TogglePin>
	             HAL_HSEM_Release(HSEM_ID_0, 0);
 810078e:	2100      	movs	r1, #0
 8100790:	2000      	movs	r0, #0
 8100792:	f005 f92f 	bl	81059f4 <HAL_HSEM_Release>
	         }

	     HAL_Delay(10);
 8100796:	200a      	movs	r0, #10
 8100798:	f002 fa06 	bl	8102ba8 <HAL_Delay>
	  if(HAL_HSEM_IsSemTaken(HSEM_ID_0) == 0) {
 810079c:	e7db      	b.n	8100756 <main+0xf2>
 810079e:	bf00      	nop
 81007a0:	58024400 	.word	0x58024400
 81007a4:	e000ed00 	.word	0xe000ed00
 81007a8:	58026400 	.word	0x58026400
 81007ac:	0810e974 	.word	0x0810e974
 81007b0:	10000750 	.word	0x10000750
 81007b4:	0810e984 	.word	0x0810e984
 81007b8:	58022000 	.word	0x58022000
 81007bc:	0810e98c 	.word	0x0810e98c

081007c0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81007c0:	b580      	push	{r7, lr}
 81007c2:	b08a      	sub	sp, #40	@ 0x28
 81007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81007c6:	f107 031c 	add.w	r3, r7, #28
 81007ca:	2200      	movs	r2, #0
 81007cc:	601a      	str	r2, [r3, #0]
 81007ce:	605a      	str	r2, [r3, #4]
 81007d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81007d2:	463b      	mov	r3, r7
 81007d4:	2200      	movs	r2, #0
 81007d6:	601a      	str	r2, [r3, #0]
 81007d8:	605a      	str	r2, [r3, #4]
 81007da:	609a      	str	r2, [r3, #8]
 81007dc:	60da      	str	r2, [r3, #12]
 81007de:	611a      	str	r2, [r3, #16]
 81007e0:	615a      	str	r2, [r3, #20]
 81007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81007e4:	4b38      	ldr	r3, [pc, #224]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81007e6:	4a39      	ldr	r2, [pc, #228]	@ (81008cc <_ZL12MX_ADC1_Initv+0x10c>)
 81007e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81007ea:	4b37      	ldr	r3, [pc, #220]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81007ec:	2200      	movs	r2, #0
 81007ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81007f0:	4b35      	ldr	r3, [pc, #212]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81007f2:	2200      	movs	r2, #0
 81007f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81007f6:	4b34      	ldr	r3, [pc, #208]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81007f8:	2200      	movs	r2, #0
 81007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81007fc:	4b32      	ldr	r3, [pc, #200]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81007fe:	2204      	movs	r2, #4
 8100800:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100802:	4b31      	ldr	r3, [pc, #196]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100804:	2200      	movs	r2, #0
 8100806:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100808:	4b2f      	ldr	r3, [pc, #188]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 810080a:	2200      	movs	r2, #0
 810080c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810080e:	4b2e      	ldr	r3, [pc, #184]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100810:	2201      	movs	r2, #1
 8100812:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100814:	4b2c      	ldr	r3, [pc, #176]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100816:	2200      	movs	r2, #0
 8100818:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810081a:	4b2b      	ldr	r3, [pc, #172]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 810081c:	2200      	movs	r2, #0
 810081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100820:	4b29      	ldr	r3, [pc, #164]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100822:	2200      	movs	r2, #0
 8100824:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100826:	4b28      	ldr	r3, [pc, #160]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100828:	2200      	movs	r2, #0
 810082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810082c:	4b26      	ldr	r3, [pc, #152]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 810082e:	2200      	movs	r2, #0
 8100830:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100832:	4b25      	ldr	r3, [pc, #148]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100834:	2200      	movs	r2, #0
 8100836:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100838:	4b23      	ldr	r3, [pc, #140]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 810083a:	2200      	movs	r2, #0
 810083c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8100840:	4b21      	ldr	r3, [pc, #132]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100842:	2201      	movs	r2, #1
 8100844:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100846:	4820      	ldr	r0, [pc, #128]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 8100848:	f002 fbc6 	bl	8102fd8 <HAL_ADC_Init>
 810084c:	4603      	mov	r3, r0
 810084e:	2b00      	cmp	r3, #0
 8100850:	bf14      	ite	ne
 8100852:	2301      	movne	r3, #1
 8100854:	2300      	moveq	r3, #0
 8100856:	b2db      	uxtb	r3, r3
 8100858:	2b00      	cmp	r3, #0
 810085a:	d001      	beq.n	8100860 <_ZL12MX_ADC1_Initv+0xa0>
  {
    Error_Handler();
 810085c:	f000 fe5c 	bl	8101518 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100860:	2300      	movs	r3, #0
 8100862:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100864:	f107 031c 	add.w	r3, r7, #28
 8100868:	4619      	mov	r1, r3
 810086a:	4817      	ldr	r0, [pc, #92]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 810086c:	f003 f978 	bl	8103b60 <HAL_ADCEx_MultiModeConfigChannel>
 8100870:	4603      	mov	r3, r0
 8100872:	2b00      	cmp	r3, #0
 8100874:	bf14      	ite	ne
 8100876:	2301      	movne	r3, #1
 8100878:	2300      	moveq	r3, #0
 810087a:	b2db      	uxtb	r3, r3
 810087c:	2b00      	cmp	r3, #0
 810087e:	d001      	beq.n	8100884 <_ZL12MX_ADC1_Initv+0xc4>
  {
    Error_Handler();
 8100880:	f000 fe4a 	bl	8101518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100884:	4b12      	ldr	r3, [pc, #72]	@ (81008d0 <_ZL12MX_ADC1_Initv+0x110>)
 8100886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100888:	2306      	movs	r3, #6
 810088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810088c:	2300      	movs	r3, #0
 810088e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100890:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100894:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100896:	2304      	movs	r3, #4
 8100898:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810089a:	2300      	movs	r3, #0
 810089c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810089e:	2300      	movs	r3, #0
 81008a0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81008a2:	463b      	mov	r3, r7
 81008a4:	4619      	mov	r1, r3
 81008a6:	4808      	ldr	r0, [pc, #32]	@ (81008c8 <_ZL12MX_ADC1_Initv+0x108>)
 81008a8:	f002 fd38 	bl	810331c <HAL_ADC_ConfigChannel>
 81008ac:	4603      	mov	r3, r0
 81008ae:	2b00      	cmp	r3, #0
 81008b0:	bf14      	ite	ne
 81008b2:	2301      	movne	r3, #1
 81008b4:	2300      	moveq	r3, #0
 81008b6:	b2db      	uxtb	r3, r3
 81008b8:	2b00      	cmp	r3, #0
 81008ba:	d001      	beq.n	81008c0 <_ZL12MX_ADC1_Initv+0x100>
  {
    Error_Handler();
 81008bc:	f000 fe2c 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81008c0:	bf00      	nop
 81008c2:	3728      	adds	r7, #40	@ 0x28
 81008c4:	46bd      	mov	sp, r7
 81008c6:	bd80      	pop	{r7, pc}
 81008c8:	10000180 	.word	0x10000180
 81008cc:	40022000 	.word	0x40022000
 81008d0:	04300002 	.word	0x04300002

081008d4 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81008d4:	b580      	push	{r7, lr}
 81008d6:	b088      	sub	sp, #32
 81008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81008da:	1d3b      	adds	r3, r7, #4
 81008dc:	2200      	movs	r2, #0
 81008de:	601a      	str	r2, [r3, #0]
 81008e0:	605a      	str	r2, [r3, #4]
 81008e2:	609a      	str	r2, [r3, #8]
 81008e4:	60da      	str	r2, [r3, #12]
 81008e6:	611a      	str	r2, [r3, #16]
 81008e8:	615a      	str	r2, [r3, #20]
 81008ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81008ec:	4b2e      	ldr	r3, [pc, #184]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 81008ee:	4a2f      	ldr	r2, [pc, #188]	@ (81009ac <_ZL12MX_ADC3_Initv+0xd8>)
 81008f0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81008f2:	4b2d      	ldr	r3, [pc, #180]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 81008f4:	2200      	movs	r2, #0
 81008f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81008f8:	4b2b      	ldr	r3, [pc, #172]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 81008fa:	2200      	movs	r2, #0
 81008fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81008fe:	4b2a      	ldr	r3, [pc, #168]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100900:	2204      	movs	r2, #4
 8100902:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100904:	4b28      	ldr	r3, [pc, #160]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100906:	2200      	movs	r2, #0
 8100908:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 810090a:	4b27      	ldr	r3, [pc, #156]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 810090c:	2200      	movs	r2, #0
 810090e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8100910:	4b25      	ldr	r3, [pc, #148]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100912:	2201      	movs	r2, #1
 8100914:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100916:	4b24      	ldr	r3, [pc, #144]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100918:	2200      	movs	r2, #0
 810091a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810091c:	4b22      	ldr	r3, [pc, #136]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 810091e:	2200      	movs	r2, #0
 8100920:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100922:	4b21      	ldr	r3, [pc, #132]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100924:	2200      	movs	r2, #0
 8100926:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100928:	4b1f      	ldr	r3, [pc, #124]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 810092a:	2200      	movs	r2, #0
 810092c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810092e:	4b1e      	ldr	r3, [pc, #120]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100930:	2200      	movs	r2, #0
 8100932:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100934:	4b1c      	ldr	r3, [pc, #112]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100936:	2200      	movs	r2, #0
 8100938:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 810093a:	4b1b      	ldr	r3, [pc, #108]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 810093c:	2200      	movs	r2, #0
 810093e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8100942:	4b19      	ldr	r3, [pc, #100]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100944:	2201      	movs	r2, #1
 8100946:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100948:	4817      	ldr	r0, [pc, #92]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 810094a:	f002 fb45 	bl	8102fd8 <HAL_ADC_Init>
 810094e:	4603      	mov	r3, r0
 8100950:	2b00      	cmp	r3, #0
 8100952:	bf14      	ite	ne
 8100954:	2301      	movne	r3, #1
 8100956:	2300      	moveq	r3, #0
 8100958:	b2db      	uxtb	r3, r3
 810095a:	2b00      	cmp	r3, #0
 810095c:	d001      	beq.n	8100962 <_ZL12MX_ADC3_Initv+0x8e>
  {
    Error_Handler();
 810095e:	f000 fddb 	bl	8101518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100962:	2301      	movs	r3, #1
 8100964:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100966:	2306      	movs	r3, #6
 8100968:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810096a:	2300      	movs	r3, #0
 810096c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810096e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100972:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100974:	2304      	movs	r3, #4
 8100976:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8100978:	2300      	movs	r3, #0
 810097a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 810097c:	2300      	movs	r3, #0
 810097e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8100980:	1d3b      	adds	r3, r7, #4
 8100982:	4619      	mov	r1, r3
 8100984:	4808      	ldr	r0, [pc, #32]	@ (81009a8 <_ZL12MX_ADC3_Initv+0xd4>)
 8100986:	f002 fcc9 	bl	810331c <HAL_ADC_ConfigChannel>
 810098a:	4603      	mov	r3, r0
 810098c:	2b00      	cmp	r3, #0
 810098e:	bf14      	ite	ne
 8100990:	2301      	movne	r3, #1
 8100992:	2300      	moveq	r3, #0
 8100994:	b2db      	uxtb	r3, r3
 8100996:	2b00      	cmp	r3, #0
 8100998:	d001      	beq.n	810099e <_ZL12MX_ADC3_Initv+0xca>
  {
    Error_Handler();
 810099a:	f000 fdbd 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810099e:	bf00      	nop
 81009a0:	3720      	adds	r7, #32
 81009a2:	46bd      	mov	sp, r7
 81009a4:	bd80      	pop	{r7, pc}
 81009a6:	bf00      	nop
 81009a8:	100001e4 	.word	0x100001e4
 81009ac:	58026000 	.word	0x58026000

081009b0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81009b4:	4b21      	ldr	r3, [pc, #132]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009b6:	4a22      	ldr	r2, [pc, #136]	@ (8100a40 <_ZL11MX_ETH_Initv+0x90>)
 81009b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81009ba:	4b22      	ldr	r3, [pc, #136]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009bc:	2200      	movs	r2, #0
 81009be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81009c0:	4b20      	ldr	r3, [pc, #128]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009c2:	2280      	movs	r2, #128	@ 0x80
 81009c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 81009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009c8:	22e1      	movs	r2, #225	@ 0xe1
 81009ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 81009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009ce:	2200      	movs	r2, #0
 81009d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 81009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009d4:	2200      	movs	r2, #0
 81009d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 81009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009da:	2200      	movs	r2, #0
 81009dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 81009de:	4b17      	ldr	r3, [pc, #92]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009e0:	4a18      	ldr	r2, [pc, #96]	@ (8100a44 <_ZL11MX_ETH_Initv+0x94>)
 81009e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81009e4:	4b15      	ldr	r3, [pc, #84]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009e6:	2201      	movs	r2, #1
 81009e8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81009ea:	4b14      	ldr	r3, [pc, #80]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009ec:	4a16      	ldr	r2, [pc, #88]	@ (8100a48 <_ZL11MX_ETH_Initv+0x98>)
 81009ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81009f0:	4b12      	ldr	r3, [pc, #72]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009f2:	4a16      	ldr	r2, [pc, #88]	@ (8100a4c <_ZL11MX_ETH_Initv+0x9c>)
 81009f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81009f6:	4b11      	ldr	r3, [pc, #68]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 81009f8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81009fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 81009fe:	480f      	ldr	r0, [pc, #60]	@ (8100a3c <_ZL11MX_ETH_Initv+0x8c>)
 8100a00:	f004 f9a6 	bl	8104d50 <HAL_ETH_Init>
 8100a04:	4603      	mov	r3, r0
 8100a06:	2b00      	cmp	r3, #0
 8100a08:	bf14      	ite	ne
 8100a0a:	2301      	movne	r3, #1
 8100a0c:	2300      	moveq	r3, #0
 8100a0e:	b2db      	uxtb	r3, r3
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	d001      	beq.n	8100a18 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8100a14:	f000 fd80 	bl	8101518 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100a18:	2238      	movs	r2, #56	@ 0x38
 8100a1a:	2100      	movs	r1, #0
 8100a1c:	480c      	ldr	r0, [pc, #48]	@ (8100a50 <_ZL11MX_ETH_Initv+0xa0>)
 8100a1e:	f00d fce9 	bl	810e3f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100a22:	4b0b      	ldr	r3, [pc, #44]	@ (8100a50 <_ZL11MX_ETH_Initv+0xa0>)
 8100a24:	2221      	movs	r2, #33	@ 0x21
 8100a26:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100a28:	4b09      	ldr	r3, [pc, #36]	@ (8100a50 <_ZL11MX_ETH_Initv+0xa0>)
 8100a2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8100a2e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100a30:	4b07      	ldr	r3, [pc, #28]	@ (8100a50 <_ZL11MX_ETH_Initv+0xa0>)
 8100a32:	2200      	movs	r2, #0
 8100a34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100a36:	bf00      	nop
 8100a38:	bd80      	pop	{r7, pc}
 8100a3a:	bf00      	nop
 8100a3c:	10000248 	.word	0x10000248
 8100a40:	40028000 	.word	0x40028000
 8100a44:	10000e90 	.word	0x10000e90
 8100a48:	100000cc 	.word	0x100000cc
 8100a4c:	1000006c 	.word	0x1000006c
 8100a50:	10000148 	.word	0x10000148

08100a54 <_ZL16MX_HDMI_CEC_Initv>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100a54:	b580      	push	{r7, lr}
 8100a56:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100a58:	4b18      	ldr	r3, [pc, #96]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a5a:	4a19      	ldr	r2, [pc, #100]	@ (8100ac0 <_ZL16MX_HDMI_CEC_Initv+0x6c>)
 8100a5c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100a5e:	4b17      	ldr	r3, [pc, #92]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a60:	2200      	movs	r2, #0
 8100a62:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100a64:	4b15      	ldr	r3, [pc, #84]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100a6a:	4b14      	ldr	r3, [pc, #80]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a6c:	2210      	movs	r2, #16
 8100a6e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100a70:	4b12      	ldr	r3, [pc, #72]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a72:	2200      	movs	r2, #0
 8100a74:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100a76:	4b11      	ldr	r3, [pc, #68]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a78:	2200      	movs	r2, #0
 8100a7a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a7e:	2200      	movs	r2, #0
 8100a80:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100a82:	4b0e      	ldr	r3, [pc, #56]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a84:	2200      	movs	r2, #0
 8100a86:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100a88:	4b0c      	ldr	r3, [pc, #48]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100a8e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100a90:	4b0a      	ldr	r3, [pc, #40]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a92:	2200      	movs	r2, #0
 8100a94:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100a96:	4b09      	ldr	r3, [pc, #36]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a98:	4a0a      	ldr	r2, [pc, #40]	@ (8100ac4 <_ZL16MX_HDMI_CEC_Initv+0x70>)
 8100a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100a9c:	4807      	ldr	r0, [pc, #28]	@ (8100abc <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100a9e:	f003 f941 	bl	8103d24 <HAL_CEC_Init>
 8100aa2:	4603      	mov	r3, r0
 8100aa4:	2b00      	cmp	r3, #0
 8100aa6:	bf14      	ite	ne
 8100aa8:	2301      	movne	r3, #1
 8100aaa:	2300      	moveq	r3, #0
 8100aac:	b2db      	uxtb	r3, r3
 8100aae:	2b00      	cmp	r3, #0
 8100ab0:	d001      	beq.n	8100ab6 <_ZL16MX_HDMI_CEC_Initv+0x62>
  {
    Error_Handler();
 8100ab2:	f000 fd31 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100ab6:	bf00      	nop
 8100ab8:	bd80      	pop	{r7, pc}
 8100aba:	bf00      	nop
 8100abc:	100002f8 	.word	0x100002f8
 8100ac0:	40006c00 	.word	0x40006c00
 8100ac4:	10000e80 	.word	0x10000e80

08100ac8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100acc:	4b13      	ldr	r3, [pc, #76]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100ace:	4a14      	ldr	r2, [pc, #80]	@ (8100b20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8100ad0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100ad2:	4b12      	ldr	r3, [pc, #72]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100ad4:	22ff      	movs	r2, #255	@ 0xff
 8100ad6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100ad8:	4b10      	ldr	r3, [pc, #64]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100ada:	2201      	movs	r2, #1
 8100adc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100ade:	4b0f      	ldr	r3, [pc, #60]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100ae0:	2200      	movs	r2, #0
 8100ae2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100ae6:	2201      	movs	r2, #1
 8100ae8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100aea:	4b0c      	ldr	r3, [pc, #48]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100aec:	2200      	movs	r2, #0
 8100aee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100af0:	4b0a      	ldr	r3, [pc, #40]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100af2:	2200      	movs	r2, #0
 8100af4:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100af6:	4b09      	ldr	r3, [pc, #36]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100af8:	2240      	movs	r2, #64	@ 0x40
 8100afa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100afc:	4807      	ldr	r0, [pc, #28]	@ (8100b1c <_ZL15MX_QUADSPI_Initv+0x54>)
 8100afe:	f005 f98b 	bl	8105e18 <HAL_QSPI_Init>
 8100b02:	4603      	mov	r3, r0
 8100b04:	2b00      	cmp	r3, #0
 8100b06:	bf14      	ite	ne
 8100b08:	2301      	movne	r3, #1
 8100b0a:	2300      	moveq	r3, #0
 8100b0c:	b2db      	uxtb	r3, r3
 8100b0e:	2b00      	cmp	r3, #0
 8100b10:	d001      	beq.n	8100b16 <_ZL15MX_QUADSPI_Initv+0x4e>
  {
    Error_Handler();
 8100b12:	f000 fd01 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100b16:	bf00      	nop
 8100b18:	bd80      	pop	{r7, pc}
 8100b1a:	bf00      	nop
 8100b1c:	1000033c 	.word	0x1000033c
 8100b20:	52005000 	.word	0x52005000

08100b24 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100b24:	b580      	push	{r7, lr}
 8100b26:	b08a      	sub	sp, #40	@ 0x28
 8100b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100b2a:	463b      	mov	r3, r7
 8100b2c:	2228      	movs	r2, #40	@ 0x28
 8100b2e:	2100      	movs	r1, #0
 8100b30:	4618      	mov	r0, r3
 8100b32:	f00d fc5f 	bl	810e3f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100b36:	4b25      	ldr	r3, [pc, #148]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b38:	4a25      	ldr	r2, [pc, #148]	@ (8100bd0 <_ZL11MX_RTC_Initv+0xac>)
 8100b3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100b3c:	4b23      	ldr	r3, [pc, #140]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b3e:	2200      	movs	r2, #0
 8100b40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100b42:	4b22      	ldr	r3, [pc, #136]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b44:	227f      	movs	r2, #127	@ 0x7f
 8100b46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100b48:	4b20      	ldr	r3, [pc, #128]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b4a:	22ff      	movs	r2, #255	@ 0xff
 8100b4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100b54:	4b1d      	ldr	r3, [pc, #116]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100b60:	4b1a      	ldr	r3, [pc, #104]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100b66:	4819      	ldr	r0, [pc, #100]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100b68:	f008 f926 	bl	8108db8 <HAL_RTC_Init>
 8100b6c:	4603      	mov	r3, r0
 8100b6e:	2b00      	cmp	r3, #0
 8100b70:	bf14      	ite	ne
 8100b72:	2301      	movne	r3, #1
 8100b74:	2300      	moveq	r3, #0
 8100b76:	b2db      	uxtb	r3, r3
 8100b78:	2b00      	cmp	r3, #0
 8100b7a:	d001      	beq.n	8100b80 <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 8100b7c:	f000 fccc 	bl	8101518 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100b80:	2301      	movs	r3, #1
 8100b82:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100b84:	2301      	movs	r3, #1
 8100b86:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100b88:	2300      	movs	r3, #0
 8100b8a:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100b8c:	2300      	movs	r3, #0
 8100b8e:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100b90:	2300      	movs	r3, #0
 8100b92:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100b94:	2300      	movs	r3, #0
 8100b96:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100b98:	2300      	movs	r3, #0
 8100b9a:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100b9c:	2300      	movs	r3, #0
 8100b9e:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100ba0:	2380      	movs	r3, #128	@ 0x80
 8100ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100ba4:	463b      	mov	r3, r7
 8100ba6:	4619      	mov	r1, r3
 8100ba8:	4808      	ldr	r0, [pc, #32]	@ (8100bcc <_ZL11MX_RTC_Initv+0xa8>)
 8100baa:	f008 fa1d 	bl	8108fe8 <HAL_RTCEx_SetTamper>
 8100bae:	4603      	mov	r3, r0
 8100bb0:	2b00      	cmp	r3, #0
 8100bb2:	bf14      	ite	ne
 8100bb4:	2301      	movne	r3, #1
 8100bb6:	2300      	moveq	r3, #0
 8100bb8:	b2db      	uxtb	r3, r3
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d001      	beq.n	8100bc2 <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8100bbe:	f000 fcab 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100bc2:	bf00      	nop
 8100bc4:	3728      	adds	r7, #40	@ 0x28
 8100bc6:	46bd      	mov	sp, r7
 8100bc8:	bd80      	pop	{r7, pc}
 8100bca:	bf00      	nop
 8100bcc:	10000388 	.word	0x10000388
 8100bd0:	58004000 	.word	0x58004000

08100bd4 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100bd4:	b580      	push	{r7, lr}
 8100bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100bda:	4a50      	ldr	r2, [pc, #320]	@ (8100d1c <_ZL12MX_SAI1_Initv+0x148>)
 8100bdc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100bde:	4b4e      	ldr	r3, [pc, #312]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100be0:	2200      	movs	r2, #0
 8100be2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100be4:	4b4c      	ldr	r3, [pc, #304]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100be6:	2200      	movs	r2, #0
 8100be8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100bea:	4b4b      	ldr	r3, [pc, #300]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100bec:	2240      	movs	r2, #64	@ 0x40
 8100bee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100bf0:	4b49      	ldr	r3, [pc, #292]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100bf2:	2200      	movs	r2, #0
 8100bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100bf6:	4b48      	ldr	r3, [pc, #288]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100bf8:	2200      	movs	r2, #0
 8100bfa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100bfc:	4b46      	ldr	r3, [pc, #280]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100bfe:	2200      	movs	r2, #0
 8100c00:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100c02:	4b45      	ldr	r3, [pc, #276]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c04:	2200      	movs	r2, #0
 8100c06:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c08:	4b43      	ldr	r3, [pc, #268]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c0a:	2200      	movs	r2, #0
 8100c0c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c0e:	4b42      	ldr	r3, [pc, #264]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c10:	2200      	movs	r2, #0
 8100c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c14:	4b40      	ldr	r3, [pc, #256]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c16:	2200      	movs	r2, #0
 8100c18:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c1c:	4a40      	ldr	r2, [pc, #256]	@ (8100d20 <_ZL12MX_SAI1_Initv+0x14c>)
 8100c1e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c20:	4b3d      	ldr	r3, [pc, #244]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c22:	2200      	movs	r2, #0
 8100c24:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c26:	4b3c      	ldr	r3, [pc, #240]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c28:	2200      	movs	r2, #0
 8100c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c2e:	2200      	movs	r2, #0
 8100c30:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100c32:	4b39      	ldr	r3, [pc, #228]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c34:	2200      	movs	r2, #0
 8100c36:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100c38:	4b37      	ldr	r3, [pc, #220]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100c40:	4b35      	ldr	r3, [pc, #212]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c42:	2201      	movs	r2, #1
 8100c44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c46:	4b34      	ldr	r3, [pc, #208]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100c4e:	4b32      	ldr	r3, [pc, #200]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c50:	2208      	movs	r2, #8
 8100c52:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100c54:	4b30      	ldr	r3, [pc, #192]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c56:	2201      	movs	r2, #1
 8100c58:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c5c:	2200      	movs	r2, #0
 8100c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100c60:	4b2d      	ldr	r3, [pc, #180]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c62:	2200      	movs	r2, #0
 8100c64:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100c66:	4b2c      	ldr	r3, [pc, #176]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c68:	2200      	movs	r2, #0
 8100c6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c6e:	2200      	movs	r2, #0
 8100c70:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100c72:	4b29      	ldr	r3, [pc, #164]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c74:	2200      	movs	r2, #0
 8100c76:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100c78:	4b27      	ldr	r3, [pc, #156]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c7a:	2201      	movs	r2, #1
 8100c7c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100c7e:	4b26      	ldr	r3, [pc, #152]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100c84:	4824      	ldr	r0, [pc, #144]	@ (8100d18 <_ZL12MX_SAI1_Initv+0x144>)
 8100c86:	f008 fa8f 	bl	81091a8 <HAL_SAI_Init>
 8100c8a:	4603      	mov	r3, r0
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	bf14      	ite	ne
 8100c90:	2301      	movne	r3, #1
 8100c92:	2300      	moveq	r3, #0
 8100c94:	b2db      	uxtb	r3, r3
 8100c96:	2b00      	cmp	r3, #0
 8100c98:	d001      	beq.n	8100c9e <_ZL12MX_SAI1_Initv+0xca>
  {
    Error_Handler();
 8100c9a:	f000 fc3d 	bl	8101518 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100c9e:	4b21      	ldr	r3, [pc, #132]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100ca0:	4a21      	ldr	r2, [pc, #132]	@ (8100d28 <_ZL12MX_SAI1_Initv+0x154>)
 8100ca2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100ca6:	2204      	movs	r2, #4
 8100ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100caa:	4b1e      	ldr	r3, [pc, #120]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cac:	2200      	movs	r2, #0
 8100cae:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cb2:	2200      	movs	r2, #0
 8100cb4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cb8:	2200      	movs	r2, #0
 8100cba:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cbc:	4b19      	ldr	r3, [pc, #100]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cbe:	2200      	movs	r2, #0
 8100cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100cc2:	4b18      	ldr	r3, [pc, #96]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cc4:	2200      	movs	r2, #0
 8100cc6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100cc8:	4b16      	ldr	r3, [pc, #88]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cca:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100cce:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100cd0:	4b14      	ldr	r3, [pc, #80]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cd2:	2200      	movs	r2, #0
 8100cd4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100cd6:	4b13      	ldr	r3, [pc, #76]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cd8:	2200      	movs	r2, #0
 8100cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100cdc:	4b11      	ldr	r3, [pc, #68]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cde:	2200      	movs	r2, #0
 8100ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100ce2:	4b10      	ldr	r3, [pc, #64]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100ce4:	2200      	movs	r2, #0
 8100ce6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100cea:	4b0e      	ldr	r3, [pc, #56]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cec:	2201      	movs	r2, #1
 8100cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100cf8:	480a      	ldr	r0, [pc, #40]	@ (8100d24 <_ZL12MX_SAI1_Initv+0x150>)
 8100cfa:	f008 fa55 	bl	81091a8 <HAL_SAI_Init>
 8100cfe:	4603      	mov	r3, r0
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	bf14      	ite	ne
 8100d04:	2301      	movne	r3, #1
 8100d06:	2300      	moveq	r3, #0
 8100d08:	b2db      	uxtb	r3, r3
 8100d0a:	2b00      	cmp	r3, #0
 8100d0c:	d001      	beq.n	8100d12 <_ZL12MX_SAI1_Initv+0x13e>
  {
    Error_Handler();
 8100d0e:	f000 fc03 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100d12:	bf00      	nop
 8100d14:	bd80      	pop	{r7, pc}
 8100d16:	bf00      	nop
 8100d18:	100003ac 	.word	0x100003ac
 8100d1c:	40015804 	.word	0x40015804
 8100d20:	0002ee00 	.word	0x0002ee00
 8100d24:	10000444 	.word	0x10000444
 8100d28:	40015824 	.word	0x40015824

08100d2c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100d2c:	b580      	push	{r7, lr}
 8100d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100d30:	4b10      	ldr	r3, [pc, #64]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d32:	4a11      	ldr	r2, [pc, #68]	@ (8100d78 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8100d34:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100d36:	4b0f      	ldr	r3, [pc, #60]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d38:	2200      	movs	r2, #0
 8100d3a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d3e:	2200      	movs	r2, #0
 8100d40:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100d42:	4b0c      	ldr	r3, [pc, #48]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100d48:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d4c:	2200      	movs	r2, #0
 8100d4e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100d50:	4b08      	ldr	r3, [pc, #32]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d52:	2200      	movs	r2, #0
 8100d54:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100d56:	4807      	ldr	r0, [pc, #28]	@ (8100d74 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8100d58:	f008 fd0a 	bl	8109770 <HAL_SD_Init>
 8100d5c:	4603      	mov	r3, r0
 8100d5e:	2b00      	cmp	r3, #0
 8100d60:	bf14      	ite	ne
 8100d62:	2301      	movne	r3, #1
 8100d64:	2300      	moveq	r3, #0
 8100d66:	b2db      	uxtb	r3, r3
 8100d68:	2b00      	cmp	r3, #0
 8100d6a:	d001      	beq.n	8100d70 <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8100d6c:	f000 fbd4 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100d70:	bf00      	nop
 8100d72:	bd80      	pop	{r7, pc}
 8100d74:	100004dc 	.word	0x100004dc
 8100d78:	52007000 	.word	0x52007000

08100d7c <_ZL16MX_SPDIFRX1_Initv>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100d80:	4b1c      	ldr	r3, [pc, #112]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d82:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100d86:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100d88:	4b1a      	ldr	r3, [pc, #104]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d8a:	2200      	movs	r2, #0
 8100d8c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100d8e:	4b19      	ldr	r3, [pc, #100]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d90:	2200      	movs	r2, #0
 8100d92:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100d94:	4b17      	ldr	r3, [pc, #92]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d96:	2200      	movs	r2, #0
 8100d98:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100d9a:	4b16      	ldr	r3, [pc, #88]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100da0:	4b14      	ldr	r3, [pc, #80]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100da6:	4b13      	ldr	r3, [pc, #76]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100da8:	2200      	movs	r2, #0
 8100daa:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100dac:	4b11      	ldr	r3, [pc, #68]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dae:	2200      	movs	r2, #0
 8100db0:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100db2:	4b10      	ldr	r3, [pc, #64]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100db4:	2200      	movs	r2, #0
 8100db6:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100db8:	4b0e      	ldr	r3, [pc, #56]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dba:	2200      	movs	r2, #0
 8100dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dc0:	2200      	movs	r2, #0
 8100dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dc6:	2200      	movs	r2, #0
 8100dc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100dcc:	4b09      	ldr	r3, [pc, #36]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dce:	2200      	movs	r2, #0
 8100dd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100dd4:	4807      	ldr	r0, [pc, #28]	@ (8100df4 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100dd6:	f009 fd75 	bl	810a8c4 <HAL_SPDIFRX_Init>
 8100dda:	4603      	mov	r3, r0
 8100ddc:	2b00      	cmp	r3, #0
 8100dde:	bf14      	ite	ne
 8100de0:	2301      	movne	r3, #1
 8100de2:	2300      	moveq	r3, #0
 8100de4:	b2db      	uxtb	r3, r3
 8100de6:	2b00      	cmp	r3, #0
 8100de8:	d001      	beq.n	8100dee <_ZL16MX_SPDIFRX1_Initv+0x72>
  {
    Error_Handler();
 8100dea:	f000 fb95 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100dee:	bf00      	nop
 8100df0:	bd80      	pop	{r7, pc}
 8100df2:	bf00      	nop
 8100df4:	10000558 	.word	0x10000558

08100df8 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100dfc:	4b29      	ldr	r3, [pc, #164]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8100ea8 <_ZL12MX_SPI2_Initv+0xb0>)
 8100e00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100e02:	4b28      	ldr	r3, [pc, #160]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100e0a:	4b26      	ldr	r3, [pc, #152]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e10:	4b24      	ldr	r3, [pc, #144]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e12:	2203      	movs	r2, #3
 8100e14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e16:	4b23      	ldr	r3, [pc, #140]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e18:	2200      	movs	r2, #0
 8100e1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e1c:	4b21      	ldr	r3, [pc, #132]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e1e:	2200      	movs	r2, #0
 8100e20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100e22:	4b20      	ldr	r3, [pc, #128]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e24:	2200      	movs	r2, #0
 8100e26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100e28:	4b1e      	ldr	r3, [pc, #120]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e2a:	2200      	movs	r2, #0
 8100e2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e30:	2200      	movs	r2, #0
 8100e32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e34:	4b1b      	ldr	r3, [pc, #108]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e36:	2200      	movs	r2, #0
 8100e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100e40:	4b18      	ldr	r3, [pc, #96]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e42:	2200      	movs	r2, #0
 8100e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e46:	4b17      	ldr	r3, [pc, #92]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e4e:	4b15      	ldr	r3, [pc, #84]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e50:	2200      	movs	r2, #0
 8100e52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e54:	4b13      	ldr	r3, [pc, #76]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e56:	2200      	movs	r2, #0
 8100e58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e5a:	4b12      	ldr	r3, [pc, #72]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e5c:	2200      	movs	r2, #0
 8100e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e60:	4b10      	ldr	r3, [pc, #64]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e62:	2200      	movs	r2, #0
 8100e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e66:	4b0f      	ldr	r3, [pc, #60]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e68:	2200      	movs	r2, #0
 8100e6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e6e:	2200      	movs	r2, #0
 8100e70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e72:	4b0c      	ldr	r3, [pc, #48]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e74:	2200      	movs	r2, #0
 8100e76:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e78:	4b0a      	ldr	r3, [pc, #40]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e7a:	2200      	movs	r2, #0
 8100e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e7e:	4b09      	ldr	r3, [pc, #36]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e80:	2200      	movs	r2, #0
 8100e82:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100e84:	4807      	ldr	r0, [pc, #28]	@ (8100ea4 <_ZL12MX_SPI2_Initv+0xac>)
 8100e86:	f009 fd8b 	bl	810a9a0 <HAL_SPI_Init>
 8100e8a:	4603      	mov	r3, r0
 8100e8c:	2b00      	cmp	r3, #0
 8100e8e:	bf14      	ite	ne
 8100e90:	2301      	movne	r3, #1
 8100e92:	2300      	moveq	r3, #0
 8100e94:	b2db      	uxtb	r3, r3
 8100e96:	2b00      	cmp	r3, #0
 8100e98:	d001      	beq.n	8100e9e <_ZL12MX_SPI2_Initv+0xa6>
  {
    Error_Handler();
 8100e9a:	f000 fb3d 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100e9e:	bf00      	nop
 8100ea0:	bd80      	pop	{r7, pc}
 8100ea2:	bf00      	nop
 8100ea4:	100005a8 	.word	0x100005a8
 8100ea8:	40003800 	.word	0x40003800

08100eac <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100eac:	b580      	push	{r7, lr}
 8100eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100eb0:	4b29      	ldr	r3, [pc, #164]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8100f5c <_ZL12MX_SPI5_Initv+0xb0>)
 8100eb4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100eb6:	4b28      	ldr	r3, [pc, #160]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100eb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ebc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100ebe:	4b26      	ldr	r3, [pc, #152]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ec0:	2200      	movs	r2, #0
 8100ec2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100ec4:	4b24      	ldr	r3, [pc, #144]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ec6:	2203      	movs	r2, #3
 8100ec8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100eca:	4b23      	ldr	r3, [pc, #140]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ecc:	2200      	movs	r2, #0
 8100ece:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ed0:	4b21      	ldr	r3, [pc, #132]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ed2:	2200      	movs	r2, #0
 8100ed4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100ed6:	4b20      	ldr	r3, [pc, #128]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100edc:	4b1e      	ldr	r3, [pc, #120]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ee4:	2200      	movs	r2, #0
 8100ee6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100eea:	2200      	movs	r2, #0
 8100eec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100eee:	4b1a      	ldr	r3, [pc, #104]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100ef4:	4b18      	ldr	r3, [pc, #96]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100ef6:	2200      	movs	r2, #0
 8100ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100efa:	4b17      	ldr	r3, [pc, #92]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100efc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100f00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f02:	4b15      	ldr	r3, [pc, #84]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f08:	4b13      	ldr	r3, [pc, #76]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f0e:	4b12      	ldr	r3, [pc, #72]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f10:	2200      	movs	r2, #0
 8100f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f14:	4b10      	ldr	r3, [pc, #64]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f1c:	2200      	movs	r2, #0
 8100f1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f20:	4b0d      	ldr	r3, [pc, #52]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f22:	2200      	movs	r2, #0
 8100f24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f26:	4b0c      	ldr	r3, [pc, #48]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f28:	2200      	movs	r2, #0
 8100f2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f2e:	2200      	movs	r2, #0
 8100f30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f32:	4b09      	ldr	r3, [pc, #36]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f34:	2200      	movs	r2, #0
 8100f36:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100f38:	4807      	ldr	r0, [pc, #28]	@ (8100f58 <_ZL12MX_SPI5_Initv+0xac>)
 8100f3a:	f009 fd31 	bl	810a9a0 <HAL_SPI_Init>
 8100f3e:	4603      	mov	r3, r0
 8100f40:	2b00      	cmp	r3, #0
 8100f42:	bf14      	ite	ne
 8100f44:	2301      	movne	r3, #1
 8100f46:	2300      	moveq	r3, #0
 8100f48:	b2db      	uxtb	r3, r3
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	d001      	beq.n	8100f52 <_ZL12MX_SPI5_Initv+0xa6>
  {
    Error_Handler();
 8100f4e:	f000 fae3 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f52:	bf00      	nop
 8100f54:	bd80      	pop	{r7, pc}
 8100f56:	bf00      	nop
 8100f58:	10000630 	.word	0x10000630
 8100f5c:	40015000 	.word	0x40015000

08100f60 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100f60:	b580      	push	{r7, lr}
 8100f62:	b096      	sub	sp, #88	@ 0x58
 8100f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100f66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100f6a:	2200      	movs	r2, #0
 8100f6c:	601a      	str	r2, [r3, #0]
 8100f6e:	605a      	str	r2, [r3, #4]
 8100f70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100f72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100f76:	2200      	movs	r2, #0
 8100f78:	601a      	str	r2, [r3, #0]
 8100f7a:	605a      	str	r2, [r3, #4]
 8100f7c:	609a      	str	r2, [r3, #8]
 8100f7e:	60da      	str	r2, [r3, #12]
 8100f80:	611a      	str	r2, [r3, #16]
 8100f82:	615a      	str	r2, [r3, #20]
 8100f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100f86:	1d3b      	adds	r3, r7, #4
 8100f88:	222c      	movs	r2, #44	@ 0x2c
 8100f8a:	2100      	movs	r1, #0
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	f00d fa31 	bl	810e3f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100f92:	4b43      	ldr	r3, [pc, #268]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100f94:	4a43      	ldr	r2, [pc, #268]	@ (81010a4 <_ZL12MX_TIM8_Initv+0x144>)
 8100f96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100f98:	4b41      	ldr	r3, [pc, #260]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100f9a:	2200      	movs	r2, #0
 8100f9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f9e:	4b40      	ldr	r3, [pc, #256]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fa0:	2200      	movs	r2, #0
 8100fa2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100fa4:	4b3e      	ldr	r3, [pc, #248]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100faa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100fac:	4b3c      	ldr	r3, [pc, #240]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fae:	2200      	movs	r2, #0
 8100fb0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100fb2:	4b3b      	ldr	r3, [pc, #236]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fb4:	2200      	movs	r2, #0
 8100fb6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100fb8:	4b39      	ldr	r3, [pc, #228]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fba:	2200      	movs	r2, #0
 8100fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100fbe:	4838      	ldr	r0, [pc, #224]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fc0:	f009 fe84 	bl	810accc <HAL_TIM_OC_Init>
 8100fc4:	4603      	mov	r3, r0
 8100fc6:	2b00      	cmp	r3, #0
 8100fc8:	bf14      	ite	ne
 8100fca:	2301      	movne	r3, #1
 8100fcc:	2300      	moveq	r3, #0
 8100fce:	b2db      	uxtb	r3, r3
 8100fd0:	2b00      	cmp	r3, #0
 8100fd2:	d001      	beq.n	8100fd8 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8100fd4:	f000 faa0 	bl	8101518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100fd8:	2300      	movs	r3, #0
 8100fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100fdc:	2300      	movs	r3, #0
 8100fde:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100fe0:	2300      	movs	r3, #0
 8100fe2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100fe4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100fe8:	4619      	mov	r1, r3
 8100fea:	482d      	ldr	r0, [pc, #180]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8100fec:	f00a fcdc 	bl	810b9a8 <HAL_TIMEx_MasterConfigSynchronization>
 8100ff0:	4603      	mov	r3, r0
 8100ff2:	2b00      	cmp	r3, #0
 8100ff4:	bf14      	ite	ne
 8100ff6:	2301      	movne	r3, #1
 8100ff8:	2300      	moveq	r3, #0
 8100ffa:	b2db      	uxtb	r3, r3
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	d001      	beq.n	8101004 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8101000:	f000 fa8a 	bl	8101518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8101004:	2300      	movs	r3, #0
 8101006:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8101008:	2300      	movs	r3, #0
 810100a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810100c:	2300      	movs	r3, #0
 810100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101010:	2300      	movs	r3, #0
 8101012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101014:	2300      	movs	r3, #0
 8101016:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101018:	2300      	movs	r3, #0
 810101a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810101c:	2300      	movs	r3, #0
 810101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101020:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101024:	2204      	movs	r2, #4
 8101026:	4619      	mov	r1, r3
 8101028:	481d      	ldr	r0, [pc, #116]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 810102a:	f009 ff07 	bl	810ae3c <HAL_TIM_OC_ConfigChannel>
 810102e:	4603      	mov	r3, r0
 8101030:	2b00      	cmp	r3, #0
 8101032:	bf14      	ite	ne
 8101034:	2301      	movne	r3, #1
 8101036:	2300      	moveq	r3, #0
 8101038:	b2db      	uxtb	r3, r3
 810103a:	2b00      	cmp	r3, #0
 810103c:	d001      	beq.n	8101042 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 810103e:	f000 fa6b 	bl	8101518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101042:	2300      	movs	r3, #0
 8101044:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101046:	2300      	movs	r3, #0
 8101048:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810104a:	2300      	movs	r3, #0
 810104c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810104e:	2300      	movs	r3, #0
 8101050:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101052:	2300      	movs	r3, #0
 8101054:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101056:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810105a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810105c:	2300      	movs	r3, #0
 810105e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101060:	2300      	movs	r3, #0
 8101062:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101068:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810106a:	2300      	movs	r3, #0
 810106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810106e:	2300      	movs	r3, #0
 8101070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8101072:	1d3b      	adds	r3, r7, #4
 8101074:	4619      	mov	r1, r3
 8101076:	480a      	ldr	r0, [pc, #40]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8101078:	f00a fd24 	bl	810bac4 <HAL_TIMEx_ConfigBreakDeadTime>
 810107c:	4603      	mov	r3, r0
 810107e:	2b00      	cmp	r3, #0
 8101080:	bf14      	ite	ne
 8101082:	2301      	movne	r3, #1
 8101084:	2300      	moveq	r3, #0
 8101086:	b2db      	uxtb	r3, r3
 8101088:	2b00      	cmp	r3, #0
 810108a:	d001      	beq.n	8101090 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 810108c:	f000 fa44 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8101090:	4803      	ldr	r0, [pc, #12]	@ (81010a0 <_ZL12MX_TIM8_Initv+0x140>)
 8101092:	f000 ffe1 	bl	8102058 <HAL_TIM_MspPostInit>

}
 8101096:	bf00      	nop
 8101098:	3758      	adds	r7, #88	@ 0x58
 810109a:	46bd      	mov	sp, r7
 810109c:	bd80      	pop	{r7, pc}
 810109e:	bf00      	nop
 81010a0:	100006b8 	.word	0x100006b8
 81010a4:	40010400 	.word	0x40010400

081010a8 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 81010a8:	b580      	push	{r7, lr}
 81010aa:	b084      	sub	sp, #16
 81010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 81010ae:	463b      	mov	r3, r7
 81010b0:	2200      	movs	r2, #0
 81010b2:	601a      	str	r2, [r3, #0]
 81010b4:	605a      	str	r2, [r3, #4]
 81010b6:	609a      	str	r2, [r3, #8]
 81010b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 81010ba:	4b24      	ldr	r3, [pc, #144]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010bc:	4a24      	ldr	r2, [pc, #144]	@ (8101150 <_ZL13MX_TIM13_Initv+0xa8>)
 81010be:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 81010c0:	4b22      	ldr	r3, [pc, #136]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81010c6:	4b21      	ldr	r3, [pc, #132]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010c8:	2200      	movs	r2, #0
 81010ca:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 81010cc:	4b1f      	ldr	r3, [pc, #124]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81010d2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81010d4:	4b1d      	ldr	r3, [pc, #116]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010d6:	2200      	movs	r2, #0
 81010d8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81010da:	4b1c      	ldr	r3, [pc, #112]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010dc:	2200      	movs	r2, #0
 81010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81010e0:	481a      	ldr	r0, [pc, #104]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010e2:	f009 fd9c 	bl	810ac1e <HAL_TIM_Base_Init>
 81010e6:	4603      	mov	r3, r0
 81010e8:	2b00      	cmp	r3, #0
 81010ea:	bf14      	ite	ne
 81010ec:	2301      	movne	r3, #1
 81010ee:	2300      	moveq	r3, #0
 81010f0:	b2db      	uxtb	r3, r3
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	d001      	beq.n	81010fa <_ZL13MX_TIM13_Initv+0x52>
  {
    Error_Handler();
 81010f6:	f000 fa0f 	bl	8101518 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 81010fa:	4814      	ldr	r0, [pc, #80]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 81010fc:	f009 fe3d 	bl	810ad7a <HAL_TIM_IC_Init>
 8101100:	4603      	mov	r3, r0
 8101102:	2b00      	cmp	r3, #0
 8101104:	bf14      	ite	ne
 8101106:	2301      	movne	r3, #1
 8101108:	2300      	moveq	r3, #0
 810110a:	b2db      	uxtb	r3, r3
 810110c:	2b00      	cmp	r3, #0
 810110e:	d001      	beq.n	8101114 <_ZL13MX_TIM13_Initv+0x6c>
  {
    Error_Handler();
 8101110:	f000 fa02 	bl	8101518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8101114:	2300      	movs	r3, #0
 8101116:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8101118:	2301      	movs	r3, #1
 810111a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 810111c:	2300      	movs	r3, #0
 810111e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8101120:	2300      	movs	r3, #0
 8101122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8101124:	463b      	mov	r3, r7
 8101126:	2200      	movs	r2, #0
 8101128:	4619      	mov	r1, r3
 810112a:	4808      	ldr	r0, [pc, #32]	@ (810114c <_ZL13MX_TIM13_Initv+0xa4>)
 810112c:	f009 ff00 	bl	810af30 <HAL_TIM_IC_ConfigChannel>
 8101130:	4603      	mov	r3, r0
 8101132:	2b00      	cmp	r3, #0
 8101134:	bf14      	ite	ne
 8101136:	2301      	movne	r3, #1
 8101138:	2300      	moveq	r3, #0
 810113a:	b2db      	uxtb	r3, r3
 810113c:	2b00      	cmp	r3, #0
 810113e:	d001      	beq.n	8101144 <_ZL13MX_TIM13_Initv+0x9c>
  {
    Error_Handler();
 8101140:	f000 f9ea 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8101144:	bf00      	nop
 8101146:	3710      	adds	r7, #16
 8101148:	46bd      	mov	sp, r7
 810114a:	bd80      	pop	{r7, pc}
 810114c:	10000704 	.word	0x10000704
 8101150:	40001c00 	.word	0x40001c00

08101154 <_ZL13MX_UART8_Initv>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8101158:	4b2c      	ldr	r3, [pc, #176]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 810115a:	4a2d      	ldr	r2, [pc, #180]	@ (8101210 <_ZL13MX_UART8_Initv+0xbc>)
 810115c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 810115e:	4b2b      	ldr	r3, [pc, #172]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101164:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8101166:	4b29      	ldr	r3, [pc, #164]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101168:	2200      	movs	r2, #0
 810116a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 810116c:	4b27      	ldr	r3, [pc, #156]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 810116e:	2200      	movs	r2, #0
 8101170:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8101172:	4b26      	ldr	r3, [pc, #152]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101174:	2200      	movs	r2, #0
 8101176:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8101178:	4b24      	ldr	r3, [pc, #144]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 810117a:	220c      	movs	r2, #12
 810117c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810117e:	4b23      	ldr	r3, [pc, #140]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101180:	2200      	movs	r2, #0
 8101182:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8101184:	4b21      	ldr	r3, [pc, #132]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101186:	2200      	movs	r2, #0
 8101188:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810118a:	4b20      	ldr	r3, [pc, #128]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 810118c:	2200      	movs	r2, #0
 810118e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101190:	4b1e      	ldr	r3, [pc, #120]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101192:	2200      	movs	r2, #0
 8101194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101196:	4b1d      	ldr	r3, [pc, #116]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 8101198:	2200      	movs	r2, #0
 810119a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 810119c:	481b      	ldr	r0, [pc, #108]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 810119e:	f00a fd0f 	bl	810bbc0 <HAL_UART_Init>
 81011a2:	4603      	mov	r3, r0
 81011a4:	2b00      	cmp	r3, #0
 81011a6:	bf14      	ite	ne
 81011a8:	2301      	movne	r3, #1
 81011aa:	2300      	moveq	r3, #0
 81011ac:	b2db      	uxtb	r3, r3
 81011ae:	2b00      	cmp	r3, #0
 81011b0:	d001      	beq.n	81011b6 <_ZL13MX_UART8_Initv+0x62>
  {
    Error_Handler();
 81011b2:	f000 f9b1 	bl	8101518 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81011b6:	2100      	movs	r1, #0
 81011b8:	4814      	ldr	r0, [pc, #80]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 81011ba:	f00b fd9f 	bl	810ccfc <HAL_UARTEx_SetTxFifoThreshold>
 81011be:	4603      	mov	r3, r0
 81011c0:	2b00      	cmp	r3, #0
 81011c2:	bf14      	ite	ne
 81011c4:	2301      	movne	r3, #1
 81011c6:	2300      	moveq	r3, #0
 81011c8:	b2db      	uxtb	r3, r3
 81011ca:	2b00      	cmp	r3, #0
 81011cc:	d001      	beq.n	81011d2 <_ZL13MX_UART8_Initv+0x7e>
  {
    Error_Handler();
 81011ce:	f000 f9a3 	bl	8101518 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81011d2:	2100      	movs	r1, #0
 81011d4:	480d      	ldr	r0, [pc, #52]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 81011d6:	f00b fdcf 	bl	810cd78 <HAL_UARTEx_SetRxFifoThreshold>
 81011da:	4603      	mov	r3, r0
 81011dc:	2b00      	cmp	r3, #0
 81011de:	bf14      	ite	ne
 81011e0:	2301      	movne	r3, #1
 81011e2:	2300      	moveq	r3, #0
 81011e4:	b2db      	uxtb	r3, r3
 81011e6:	2b00      	cmp	r3, #0
 81011e8:	d001      	beq.n	81011ee <_ZL13MX_UART8_Initv+0x9a>
  {
    Error_Handler();
 81011ea:	f000 f995 	bl	8101518 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 81011ee:	4807      	ldr	r0, [pc, #28]	@ (810120c <_ZL13MX_UART8_Initv+0xb8>)
 81011f0:	f00b fd4b 	bl	810cc8a <HAL_UARTEx_DisableFifoMode>
 81011f4:	4603      	mov	r3, r0
 81011f6:	2b00      	cmp	r3, #0
 81011f8:	bf14      	ite	ne
 81011fa:	2301      	movne	r3, #1
 81011fc:	2300      	moveq	r3, #0
 81011fe:	b2db      	uxtb	r3, r3
 8101200:	2b00      	cmp	r3, #0
 8101202:	d001      	beq.n	8101208 <_ZL13MX_UART8_Initv+0xb4>
  {
    Error_Handler();
 8101204:	f000 f988 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8101208:	bf00      	nop
 810120a:	bd80      	pop	{r7, pc}
 810120c:	10000750 	.word	0x10000750
 8101210:	40007c00 	.word	0x40007c00

08101214 <_ZL22MX_USB_OTG_HS_PCD_Initv>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101218:	4b17      	ldr	r3, [pc, #92]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810121a:	4a18      	ldr	r2, [pc, #96]	@ (810127c <_ZL22MX_USB_OTG_HS_PCD_Initv+0x68>)
 810121c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810121e:	4b16      	ldr	r3, [pc, #88]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101220:	2209      	movs	r2, #9
 8101222:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8101224:	4b14      	ldr	r3, [pc, #80]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101226:	2200      	movs	r2, #0
 8101228:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 810122a:	4b13      	ldr	r3, [pc, #76]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810122c:	2200      	movs	r2, #0
 810122e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101230:	4b11      	ldr	r3, [pc, #68]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101232:	2201      	movs	r2, #1
 8101234:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101236:	4b10      	ldr	r3, [pc, #64]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101238:	2200      	movs	r2, #0
 810123a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810123c:	4b0e      	ldr	r3, [pc, #56]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810123e:	2200      	movs	r2, #0
 8101240:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8101242:	4b0d      	ldr	r3, [pc, #52]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101244:	2200      	movs	r2, #0
 8101246:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101248:	4b0b      	ldr	r3, [pc, #44]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810124a:	2200      	movs	r2, #0
 810124c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810124e:	4b0a      	ldr	r3, [pc, #40]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101250:	2200      	movs	r2, #0
 8101252:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101254:	4b08      	ldr	r3, [pc, #32]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 8101256:	2200      	movs	r2, #0
 8101258:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810125a:	4807      	ldr	r0, [pc, #28]	@ (8101278 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x64>)
 810125c:	f004 fc14 	bl	8105a88 <HAL_PCD_Init>
 8101260:	4603      	mov	r3, r0
 8101262:	2b00      	cmp	r3, #0
 8101264:	bf14      	ite	ne
 8101266:	2301      	movne	r3, #1
 8101268:	2300      	moveq	r3, #0
 810126a:	b2db      	uxtb	r3, r3
 810126c:	2b00      	cmp	r3, #0
 810126e:	d001      	beq.n	8101274 <_ZL22MX_USB_OTG_HS_PCD_Initv+0x60>
  {
    Error_Handler();
 8101270:	f000 f952 	bl	8101518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8101274:	bf00      	nop
 8101276:	bd80      	pop	{r7, pc}
 8101278:	10000968 	.word	0x10000968
 810127c:	40040000 	.word	0x40040000

08101280 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101280:	b480      	push	{r7}
 8101282:	b083      	sub	sp, #12
 8101284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101286:	4b0a      	ldr	r3, [pc, #40]	@ (81012b0 <_ZL11MX_DMA_Initv+0x30>)
 8101288:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810128c:	4a08      	ldr	r2, [pc, #32]	@ (81012b0 <_ZL11MX_DMA_Initv+0x30>)
 810128e:	f043 0301 	orr.w	r3, r3, #1
 8101292:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101296:	4b06      	ldr	r3, [pc, #24]	@ (81012b0 <_ZL11MX_DMA_Initv+0x30>)
 8101298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810129c:	f003 0301 	and.w	r3, r3, #1
 81012a0:	607b      	str	r3, [r7, #4]
 81012a2:	687b      	ldr	r3, [r7, #4]

}
 81012a4:	bf00      	nop
 81012a6:	370c      	adds	r7, #12
 81012a8:	46bd      	mov	sp, r7
 81012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ae:	4770      	bx	lr
 81012b0:	58024400 	.word	0x58024400

081012b4 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81012b4:	b580      	push	{r7, lr}
 81012b6:	b088      	sub	sp, #32
 81012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81012ba:	1d3b      	adds	r3, r7, #4
 81012bc:	2200      	movs	r2, #0
 81012be:	601a      	str	r2, [r3, #0]
 81012c0:	605a      	str	r2, [r3, #4]
 81012c2:	609a      	str	r2, [r3, #8]
 81012c4:	60da      	str	r2, [r3, #12]
 81012c6:	611a      	str	r2, [r3, #16]
 81012c8:	615a      	str	r2, [r3, #20]
 81012ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 81012cc:	4b20      	ldr	r3, [pc, #128]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012ce:	4a21      	ldr	r2, [pc, #132]	@ (8101354 <_ZL11MX_FMC_Initv+0xa0>)
 81012d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 81012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012d4:	2201      	movs	r2, #1
 81012d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 81012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012da:	2200      	movs	r2, #0
 81012dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 81012de:	4b1c      	ldr	r3, [pc, #112]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012e0:	2208      	movs	r2, #8
 81012e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 81012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012e6:	2220      	movs	r2, #32
 81012e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 81012ea:	4b19      	ldr	r3, [pc, #100]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012ec:	2200      	movs	r2, #0
 81012ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81012f0:	4b17      	ldr	r3, [pc, #92]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012f2:	2280      	movs	r2, #128	@ 0x80
 81012f4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 81012f6:	4b16      	ldr	r3, [pc, #88]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012f8:	2200      	movs	r2, #0
 81012fa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81012fc:	4b14      	ldr	r3, [pc, #80]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 81012fe:	2200      	movs	r2, #0
 8101300:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8101302:	4b13      	ldr	r3, [pc, #76]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 8101304:	2200      	movs	r2, #0
 8101306:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8101308:	4b11      	ldr	r3, [pc, #68]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 810130a:	2200      	movs	r2, #0
 810130c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 810130e:	2310      	movs	r3, #16
 8101310:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8101312:	2310      	movs	r3, #16
 8101314:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8101316:	2310      	movs	r3, #16
 8101318:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 810131a:	2310      	movs	r3, #16
 810131c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 810131e:	2310      	movs	r3, #16
 8101320:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8101322:	2310      	movs	r3, #16
 8101324:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8101326:	2310      	movs	r3, #16
 8101328:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 810132a:	1d3b      	adds	r3, r7, #4
 810132c:	4619      	mov	r1, r3
 810132e:	4808      	ldr	r0, [pc, #32]	@ (8101350 <_ZL11MX_FMC_Initv+0x9c>)
 8101330:	f009 fa8c 	bl	810a84c <HAL_SDRAM_Init>
 8101334:	4603      	mov	r3, r0
 8101336:	2b00      	cmp	r3, #0
 8101338:	bf14      	ite	ne
 810133a:	2301      	movne	r3, #1
 810133c:	2300      	moveq	r3, #0
 810133e:	b2db      	uxtb	r3, r3
 8101340:	2b00      	cmp	r3, #0
 8101342:	d001      	beq.n	8101348 <_ZL11MX_FMC_Initv+0x94>
  {
    Error_Handler( );
 8101344:	f000 f8e8 	bl	8101518 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8101348:	bf00      	nop
 810134a:	3720      	adds	r7, #32
 810134c:	46bd      	mov	sp, r7
 810134e:	bd80      	pop	{r7, pc}
 8101350:	10000e4c 	.word	0x10000e4c
 8101354:	52004140 	.word	0x52004140

08101358 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101358:	b580      	push	{r7, lr}
 810135a:	b090      	sub	sp, #64	@ 0x40
 810135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101362:	2200      	movs	r2, #0
 8101364:	601a      	str	r2, [r3, #0]
 8101366:	605a      	str	r2, [r3, #4]
 8101368:	609a      	str	r2, [r3, #8]
 810136a:	60da      	str	r2, [r3, #12]
 810136c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810136e:	4b5f      	ldr	r3, [pc, #380]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101374:	4a5d      	ldr	r2, [pc, #372]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810137e:	4b5b      	ldr	r3, [pc, #364]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101388:	62bb      	str	r3, [r7, #40]	@ 0x28
 810138a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810138c:	4b57      	ldr	r3, [pc, #348]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101392:	4a56      	ldr	r2, [pc, #344]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101394:	f043 0302 	orr.w	r3, r3, #2
 8101398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810139c:	4b53      	ldr	r3, [pc, #332]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013a2:	f003 0302 	and.w	r3, r3, #2
 81013a6:	627b      	str	r3, [r7, #36]	@ 0x24
 81013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81013aa:	4b50      	ldr	r3, [pc, #320]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013b0:	4a4e      	ldr	r2, [pc, #312]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013ba:	4b4c      	ldr	r3, [pc, #304]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81013c4:	623b      	str	r3, [r7, #32]
 81013c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81013c8:	4b48      	ldr	r3, [pc, #288]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013ce:	4a47      	ldr	r2, [pc, #284]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013d0:	f043 0304 	orr.w	r3, r3, #4
 81013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013d8:	4b44      	ldr	r3, [pc, #272]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013de:	f003 0304 	and.w	r3, r3, #4
 81013e2:	61fb      	str	r3, [r7, #28]
 81013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81013e6:	4b41      	ldr	r3, [pc, #260]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013ec:	4a3f      	ldr	r2, [pc, #252]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013ee:	f043 0310 	orr.w	r3, r3, #16
 81013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013f6:	4b3d      	ldr	r3, [pc, #244]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013fc:	f003 0310 	and.w	r3, r3, #16
 8101400:	61bb      	str	r3, [r7, #24]
 8101402:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101404:	4b39      	ldr	r3, [pc, #228]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810140a:	4a38      	ldr	r2, [pc, #224]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101414:	4b35      	ldr	r3, [pc, #212]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810141e:	617b      	str	r3, [r7, #20]
 8101420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101422:	4b32      	ldr	r3, [pc, #200]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101428:	4a30      	ldr	r2, [pc, #192]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810142a:	f043 0308 	orr.w	r3, r3, #8
 810142e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101432:	4b2e      	ldr	r3, [pc, #184]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101438:	f003 0308 	and.w	r3, r3, #8
 810143c:	613b      	str	r3, [r7, #16]
 810143e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101440:	4b2a      	ldr	r3, [pc, #168]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101446:	4a29      	ldr	r2, [pc, #164]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101448:	f043 0301 	orr.w	r3, r3, #1
 810144c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101450:	4b26      	ldr	r3, [pc, #152]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101456:	f003 0301 	and.w	r3, r3, #1
 810145a:	60fb      	str	r3, [r7, #12]
 810145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810145e:	4b23      	ldr	r3, [pc, #140]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101464:	4a21      	ldr	r2, [pc, #132]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101466:	f043 0320 	orr.w	r3, r3, #32
 810146a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810146e:	4b1f      	ldr	r3, [pc, #124]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101474:	f003 0320 	and.w	r3, r3, #32
 8101478:	60bb      	str	r3, [r7, #8]
 810147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810147c:	4b1b      	ldr	r3, [pc, #108]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101482:	4a1a      	ldr	r2, [pc, #104]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 8101484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810148c:	4b17      	ldr	r3, [pc, #92]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101496:	607b      	str	r3, [r7, #4]
 8101498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810149a:	4b14      	ldr	r3, [pc, #80]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 810149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a0:	4a12      	ldr	r2, [pc, #72]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81014a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014aa:	4b10      	ldr	r3, [pc, #64]	@ (81014ec <_ZL12MX_GPIO_Initv+0x194>)
 81014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81014b4:	603b      	str	r3, [r7, #0]
 81014b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 81014b8:	2200      	movs	r2, #0
 81014ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81014be:	480c      	ldr	r0, [pc, #48]	@ (81014f0 <_ZL12MX_GPIO_Initv+0x198>)
 81014c0:	f004 fa2a 	bl	8105918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 81014c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81014ca:	2301      	movs	r3, #1
 81014cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ce:	2300      	movs	r3, #0
 81014d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d2:	2300      	movs	r3, #0
 81014d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 81014d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81014da:	4619      	mov	r1, r3
 81014dc:	4804      	ldr	r0, [pc, #16]	@ (81014f0 <_ZL12MX_GPIO_Initv+0x198>)
 81014de:	f004 f86b 	bl	81055b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81014e2:	bf00      	nop
 81014e4:	3740      	adds	r7, #64	@ 0x40
 81014e6:	46bd      	mov	sp, r7
 81014e8:	bd80      	pop	{r7, pc}
 81014ea:	bf00      	nop
 81014ec:	58024400 	.word	0x58024400
 81014f0:	58022000 	.word	0x58022000

081014f4 <__io_putchar>:

/* USER CODE BEGIN 4 */
extern "C" {
    PUTCHAR_PROTOTYPE
    {
 81014f4:	b580      	push	{r7, lr}
 81014f6:	b082      	sub	sp, #8
 81014f8:	af00      	add	r7, sp, #0
 81014fa:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 81014fc:	1d39      	adds	r1, r7, #4
 81014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8101502:	2201      	movs	r2, #1
 8101504:	4803      	ldr	r0, [pc, #12]	@ (8101514 <__io_putchar+0x20>)
 8101506:	f00a fbab 	bl	810bc60 <HAL_UART_Transmit>
        return ch;
 810150a:	687b      	ldr	r3, [r7, #4]
    }
 810150c:	4618      	mov	r0, r3
 810150e:	3708      	adds	r7, #8
 8101510:	46bd      	mov	sp, r7
 8101512:	bd80      	pop	{r7, pc}
 8101514:	100007e4 	.word	0x100007e4

08101518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101518:	b480      	push	{r7}
 810151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810151c:	b672      	cpsid	i
}
 810151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101520:	bf00      	nop
 8101522:	e7fd      	b.n	8101520 <Error_Handler+0x8>

08101524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	b082      	sub	sp, #8
 8101528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810152a:	4b0d      	ldr	r3, [pc, #52]	@ (8101560 <HAL_MspInit+0x3c>)
 810152c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101530:	4a0b      	ldr	r2, [pc, #44]	@ (8101560 <HAL_MspInit+0x3c>)
 8101532:	f043 0302 	orr.w	r3, r3, #2
 8101536:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810153a:	4b09      	ldr	r3, [pc, #36]	@ (8101560 <HAL_MspInit+0x3c>)
 810153c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101540:	f003 0302 	and.w	r3, r3, #2
 8101544:	607b      	str	r3, [r7, #4]
 8101546:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101548:	2200      	movs	r2, #0
 810154a:	2100      	movs	r1, #0
 810154c:	207e      	movs	r0, #126	@ 0x7e
 810154e:	f002 fe22 	bl	8104196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101552:	207e      	movs	r0, #126	@ 0x7e
 8101554:	f002 fe39 	bl	81041ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101558:	bf00      	nop
 810155a:	3708      	adds	r7, #8
 810155c:	46bd      	mov	sp, r7
 810155e:	bd80      	pop	{r7, pc}
 8101560:	58024400 	.word	0x58024400

08101564 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101564:	b580      	push	{r7, lr}
 8101566:	b08c      	sub	sp, #48	@ 0x30
 8101568:	af00      	add	r7, sp, #0
 810156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810156c:	f107 031c 	add.w	r3, r7, #28
 8101570:	2200      	movs	r2, #0
 8101572:	601a      	str	r2, [r3, #0]
 8101574:	605a      	str	r2, [r3, #4]
 8101576:	609a      	str	r2, [r3, #8]
 8101578:	60da      	str	r2, [r3, #12]
 810157a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	681b      	ldr	r3, [r3, #0]
 8101580:	4a3e      	ldr	r2, [pc, #248]	@ (810167c <HAL_ADC_MspInit+0x118>)
 8101582:	4293      	cmp	r3, r2
 8101584:	d12a      	bne.n	81015dc <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101586:	4b3e      	ldr	r3, [pc, #248]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810158c:	4a3c      	ldr	r2, [pc, #240]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 810158e:	f043 0320 	orr.w	r3, r3, #32
 8101592:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101596:	4b3a      	ldr	r3, [pc, #232]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810159c:	f003 0320 	and.w	r3, r3, #32
 81015a0:	61bb      	str	r3, [r7, #24]
 81015a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015a4:	4b36      	ldr	r3, [pc, #216]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015aa:	4a35      	ldr	r2, [pc, #212]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015ac:	f043 0301 	orr.w	r3, r3, #1
 81015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015b4:	4b32      	ldr	r3, [pc, #200]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015ba:	f003 0301 	and.w	r3, r3, #1
 81015be:	617b      	str	r3, [r7, #20]
 81015c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81015c2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 81015c6:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 81015ca:	f001 fb31 	bl	8102c30 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81015ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81015d2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81015d6:	f001 fb2b 	bl	8102c30 <HAL_SYSCFG_AnalogSwitchConfig>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 81015da:	e04a      	b.n	8101672 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 81015dc:	687b      	ldr	r3, [r7, #4]
 81015de:	681b      	ldr	r3, [r3, #0]
 81015e0:	4a28      	ldr	r2, [pc, #160]	@ (8101684 <HAL_ADC_MspInit+0x120>)
 81015e2:	4293      	cmp	r3, r2
 81015e4:	d145      	bne.n	8101672 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 81015e6:	4b26      	ldr	r3, [pc, #152]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015ec:	4a24      	ldr	r2, [pc, #144]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015f6:	4b22      	ldr	r3, [pc, #136]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 81015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101600:	613b      	str	r3, [r7, #16]
 8101602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101604:	4b1e      	ldr	r3, [pc, #120]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810160a:	4a1d      	ldr	r2, [pc, #116]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 810160c:	f043 0320 	orr.w	r3, r3, #32
 8101610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101614:	4b1a      	ldr	r3, [pc, #104]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810161a:	f003 0320 	and.w	r3, r3, #32
 810161e:	60fb      	str	r3, [r7, #12]
 8101620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101622:	4b17      	ldr	r3, [pc, #92]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101628:	4a15      	ldr	r2, [pc, #84]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 810162a:	f043 0304 	orr.w	r3, r3, #4
 810162e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101632:	4b13      	ldr	r3, [pc, #76]	@ (8101680 <HAL_ADC_MspInit+0x11c>)
 8101634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101638:	f003 0304 	and.w	r3, r3, #4
 810163c:	60bb      	str	r3, [r7, #8]
 810163e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8101640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101646:	2303      	movs	r3, #3
 8101648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810164a:	2300      	movs	r3, #0
 810164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 810164e:	f107 031c 	add.w	r3, r7, #28
 8101652:	4619      	mov	r1, r3
 8101654:	480c      	ldr	r0, [pc, #48]	@ (8101688 <HAL_ADC_MspInit+0x124>)
 8101656:	f003 ffaf 	bl	81055b8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810165a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 810165e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8101662:	f001 fae5 	bl	8102c30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101666:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 810166a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 810166e:	f001 fadf 	bl	8102c30 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8101672:	bf00      	nop
 8101674:	3730      	adds	r7, #48	@ 0x30
 8101676:	46bd      	mov	sp, r7
 8101678:	bd80      	pop	{r7, pc}
 810167a:	bf00      	nop
 810167c:	40022000 	.word	0x40022000
 8101680:	58024400 	.word	0x58024400
 8101684:	58026000 	.word	0x58026000
 8101688:	58021400 	.word	0x58021400

0810168c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 810168c:	b580      	push	{r7, lr}
 810168e:	b08e      	sub	sp, #56	@ 0x38
 8101690:	af00      	add	r7, sp, #0
 8101692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101698:	2200      	movs	r2, #0
 810169a:	601a      	str	r2, [r3, #0]
 810169c:	605a      	str	r2, [r3, #4]
 810169e:	609a      	str	r2, [r3, #8]
 81016a0:	60da      	str	r2, [r3, #12]
 81016a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	4a49      	ldr	r2, [pc, #292]	@ (81017d0 <HAL_ETH_MspInit+0x144>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	f040 808b 	bne.w	81017c6 <HAL_ETH_MspInit+0x13a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81016b0:	4b48      	ldr	r3, [pc, #288]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81016b6:	4a47      	ldr	r2, [pc, #284]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81016bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81016c0:	4b44      	ldr	r3, [pc, #272]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81016c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81016ca:	623b      	str	r3, [r7, #32]
 81016cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81016ce:	4b41      	ldr	r3, [pc, #260]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81016d4:	4a3f      	ldr	r2, [pc, #252]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81016da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81016de:	4b3d      	ldr	r3, [pc, #244]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81016e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81016e8:	61fb      	str	r3, [r7, #28]
 81016ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 81016ec:	4b39      	ldr	r3, [pc, #228]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81016f2:	4a38      	ldr	r2, [pc, #224]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81016f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81016fc:	4b35      	ldr	r3, [pc, #212]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 81016fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101706:	61bb      	str	r3, [r7, #24]
 8101708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810170a:	4b32      	ldr	r3, [pc, #200]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 810170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101710:	4a30      	ldr	r2, [pc, #192]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 8101712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810171a:	4b2e      	ldr	r3, [pc, #184]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 810171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101724:	617b      	str	r3, [r7, #20]
 8101726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101728:	4b2a      	ldr	r3, [pc, #168]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 810172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810172e:	4a29      	ldr	r2, [pc, #164]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 8101730:	f043 0304 	orr.w	r3, r3, #4
 8101734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101738:	4b26      	ldr	r3, [pc, #152]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 810173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810173e:	f003 0304 	and.w	r3, r3, #4
 8101742:	613b      	str	r3, [r7, #16]
 8101744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101746:	4b23      	ldr	r3, [pc, #140]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 8101748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810174c:	4a21      	ldr	r2, [pc, #132]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 810174e:	f043 0301 	orr.w	r3, r3, #1
 8101752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101756:	4b1f      	ldr	r3, [pc, #124]	@ (81017d4 <HAL_ETH_MspInit+0x148>)
 8101758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810175c:	f003 0301 	and.w	r3, r3, #1
 8101760:	60fb      	str	r3, [r7, #12]
 8101762:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 8101764:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101768:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810176a:	2302      	movs	r3, #2
 810176c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810176e:	2300      	movs	r3, #0
 8101770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101772:	2300      	movs	r3, #0
 8101774:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101776:	230b      	movs	r3, #11
 8101778:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810177a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810177e:	4619      	mov	r1, r3
 8101780:	4815      	ldr	r0, [pc, #84]	@ (81017d8 <HAL_ETH_MspInit+0x14c>)
 8101782:	f003 ff19 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8101786:	2332      	movs	r3, #50	@ 0x32
 8101788:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810178a:	2302      	movs	r3, #2
 810178c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810178e:	2300      	movs	r3, #0
 8101790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101792:	2300      	movs	r3, #0
 8101794:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101796:	230b      	movs	r3, #11
 8101798:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810179e:	4619      	mov	r1, r3
 81017a0:	480e      	ldr	r0, [pc, #56]	@ (81017dc <HAL_ETH_MspInit+0x150>)
 81017a2:	f003 ff09 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 81017a6:	2386      	movs	r3, #134	@ 0x86
 81017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017aa:	2302      	movs	r3, #2
 81017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017ae:	2300      	movs	r3, #0
 81017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017b2:	2300      	movs	r3, #0
 81017b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81017b6:	230b      	movs	r3, #11
 81017b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81017ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81017be:	4619      	mov	r1, r3
 81017c0:	4807      	ldr	r0, [pc, #28]	@ (81017e0 <HAL_ETH_MspInit+0x154>)
 81017c2:	f003 fef9 	bl	81055b8 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 81017c6:	bf00      	nop
 81017c8:	3738      	adds	r7, #56	@ 0x38
 81017ca:	46bd      	mov	sp, r7
 81017cc:	bd80      	pop	{r7, pc}
 81017ce:	bf00      	nop
 81017d0:	40028000 	.word	0x40028000
 81017d4:	58024400 	.word	0x58024400
 81017d8:	58021800 	.word	0x58021800
 81017dc:	58020800 	.word	0x58020800
 81017e0:	58020000 	.word	0x58020000

081017e4 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 81017e4:	b580      	push	{r7, lr}
 81017e6:	b0bc      	sub	sp, #240	@ 0xf0
 81017e8:	af00      	add	r7, sp, #0
 81017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81017f0:	2200      	movs	r2, #0
 81017f2:	601a      	str	r2, [r3, #0]
 81017f4:	605a      	str	r2, [r3, #4]
 81017f6:	609a      	str	r2, [r3, #8]
 81017f8:	60da      	str	r2, [r3, #12]
 81017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017fc:	f107 0310 	add.w	r3, r7, #16
 8101800:	22c8      	movs	r2, #200	@ 0xc8
 8101802:	2100      	movs	r1, #0
 8101804:	4618      	mov	r0, r3
 8101806:	f00c fdf5 	bl	810e3f4 <memset>
  if(hcec->Instance==CEC)
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	4a2b      	ldr	r2, [pc, #172]	@ (81018bc <HAL_CEC_MspInit+0xd8>)
 8101810:	4293      	cmp	r3, r2
 8101812:	d14e      	bne.n	81018b2 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101814:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8101818:	f04f 0300 	mov.w	r3, #0
 810181c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101820:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101824:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101828:	f107 0310 	add.w	r3, r7, #16
 810182c:	4618      	mov	r0, r3
 810182e:	f004 fd85 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101832:	4603      	mov	r3, r0
 8101834:	2b00      	cmp	r3, #0
 8101836:	d001      	beq.n	810183c <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8101838:	f7ff fe6e 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 810183c:	4b20      	ldr	r3, [pc, #128]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 810183e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101842:	4a1f      	ldr	r2, [pc, #124]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 8101844:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101848:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810184c:	4b1c      	ldr	r3, [pc, #112]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 810184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101852:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101856:	60fb      	str	r3, [r7, #12]
 8101858:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810185a:	4b19      	ldr	r3, [pc, #100]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 810185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101860:	4a17      	ldr	r2, [pc, #92]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 8101862:	f043 0302 	orr.w	r3, r3, #2
 8101866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810186a:	4b15      	ldr	r3, [pc, #84]	@ (81018c0 <HAL_CEC_MspInit+0xdc>)
 810186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101870:	f003 0302 	and.w	r3, r3, #2
 8101874:	60bb      	str	r3, [r7, #8]
 8101876:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101878:	2340      	movs	r3, #64	@ 0x40
 810187a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810187e:	2312      	movs	r3, #18
 8101880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101884:	2300      	movs	r3, #0
 8101886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810188a:	2300      	movs	r3, #0
 810188c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101890:	2305      	movs	r3, #5
 8101892:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101896:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810189a:	4619      	mov	r1, r3
 810189c:	4809      	ldr	r0, [pc, #36]	@ (81018c4 <HAL_CEC_MspInit+0xe0>)
 810189e:	f003 fe8b 	bl	81055b8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81018a2:	2200      	movs	r2, #0
 81018a4:	2100      	movs	r1, #0
 81018a6:	205e      	movs	r0, #94	@ 0x5e
 81018a8:	f002 fc75 	bl	8104196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81018ac:	205e      	movs	r0, #94	@ 0x5e
 81018ae:	f002 fc8c 	bl	81041ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 81018b2:	bf00      	nop
 81018b4:	37f0      	adds	r7, #240	@ 0xf0
 81018b6:	46bd      	mov	sp, r7
 81018b8:	bd80      	pop	{r7, pc}
 81018ba:	bf00      	nop
 81018bc:	40006c00 	.word	0x40006c00
 81018c0:	58024400 	.word	0x58024400
 81018c4:	58020400 	.word	0x58020400

081018c8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81018c8:	b580      	push	{r7, lr}
 81018ca:	b0c0      	sub	sp, #256	@ 0x100
 81018cc:	af00      	add	r7, sp, #0
 81018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81018d4:	2200      	movs	r2, #0
 81018d6:	601a      	str	r2, [r3, #0]
 81018d8:	605a      	str	r2, [r3, #4]
 81018da:	609a      	str	r2, [r3, #8]
 81018dc:	60da      	str	r2, [r3, #12]
 81018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018e0:	f107 0320 	add.w	r3, r7, #32
 81018e4:	22c8      	movs	r2, #200	@ 0xc8
 81018e6:	2100      	movs	r1, #0
 81018e8:	4618      	mov	r0, r3
 81018ea:	f00c fd83 	bl	810e3f4 <memset>
  if(hqspi->Instance==QUADSPI)
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	681b      	ldr	r3, [r3, #0]
 81018f2:	4a85      	ldr	r2, [pc, #532]	@ (8101b08 <HAL_QSPI_MspInit+0x240>)
 81018f4:	4293      	cmp	r3, r2
 81018f6:	f040 8102 	bne.w	8101afe <HAL_QSPI_MspInit+0x236>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 81018fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 81018fe:	f04f 0300 	mov.w	r3, #0
 8101902:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101906:	2300      	movs	r3, #0
 8101908:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810190a:	f107 0320 	add.w	r3, r7, #32
 810190e:	4618      	mov	r0, r3
 8101910:	f004 fd14 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101914:	4603      	mov	r3, r0
 8101916:	2b00      	cmp	r3, #0
 8101918:	d001      	beq.n	810191e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810191a:	f7ff fdfd 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 810191e:	4b7b      	ldr	r3, [pc, #492]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101920:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101924:	4a79      	ldr	r2, [pc, #484]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810192a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 810192e:	4b77      	ldr	r3, [pc, #476]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101930:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101938:	61fb      	str	r3, [r7, #28]
 810193a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810193c:	4b73      	ldr	r3, [pc, #460]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101942:	4a72      	ldr	r2, [pc, #456]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810194c:	4b6f      	ldr	r3, [pc, #444]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101956:	61bb      	str	r3, [r7, #24]
 8101958:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810195a:	4b6c      	ldr	r3, [pc, #432]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101960:	4a6a      	ldr	r2, [pc, #424]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101962:	f043 0320 	orr.w	r3, r3, #32
 8101966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810196a:	4b68      	ldr	r3, [pc, #416]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101970:	f003 0320 	and.w	r3, r3, #32
 8101974:	617b      	str	r3, [r7, #20]
 8101976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101978:	4b64      	ldr	r3, [pc, #400]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810197e:	4a63      	ldr	r2, [pc, #396]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101988:	4b60      	ldr	r3, [pc, #384]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810198e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101992:	613b      	str	r3, [r7, #16]
 8101994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101996:	4b5d      	ldr	r3, [pc, #372]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 8101998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810199c:	4a5b      	ldr	r2, [pc, #364]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 810199e:	f043 0302 	orr.w	r3, r3, #2
 81019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019a6:	4b59      	ldr	r3, [pc, #356]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019ac:	f003 0302 	and.w	r3, r3, #2
 81019b0:	60fb      	str	r3, [r7, #12]
 81019b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019b4:	4b55      	ldr	r3, [pc, #340]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 81019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019ba:	4a54      	ldr	r2, [pc, #336]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 81019bc:	f043 0308 	orr.w	r3, r3, #8
 81019c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019c4:	4b51      	ldr	r3, [pc, #324]	@ (8101b0c <HAL_QSPI_MspInit+0x244>)
 81019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019ca:	f003 0308 	and.w	r3, r3, #8
 81019ce:	60bb      	str	r3, [r7, #8]
 81019d0:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 81019d2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 81019d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019da:	2302      	movs	r3, #2
 81019dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019e0:	2300      	movs	r3, #0
 81019e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019e6:	2300      	movs	r3, #0
 81019e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81019ec:	2309      	movs	r3, #9
 81019ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81019f2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81019f6:	4619      	mov	r1, r3
 81019f8:	4845      	ldr	r0, [pc, #276]	@ (8101b10 <HAL_QSPI_MspInit+0x248>)
 81019fa:	f003 fddd 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 81019fe:	2340      	movs	r3, #64	@ 0x40
 8101a00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a04:	2302      	movs	r3, #2
 8101a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a10:	2300      	movs	r3, #0
 8101a12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101a16:	230a      	movs	r3, #10
 8101a18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8101a1c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a20:	4619      	mov	r1, r3
 8101a22:	483b      	ldr	r0, [pc, #236]	@ (8101b10 <HAL_QSPI_MspInit+0x248>)
 8101a24:	f003 fdc8 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8101a28:	23c0      	movs	r3, #192	@ 0xc0
 8101a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a2e:	2302      	movs	r3, #2
 8101a30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a34:	2300      	movs	r3, #0
 8101a36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a3a:	2300      	movs	r3, #0
 8101a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a40:	2309      	movs	r3, #9
 8101a42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101a46:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a4a:	4619      	mov	r1, r3
 8101a4c:	4831      	ldr	r0, [pc, #196]	@ (8101b14 <HAL_QSPI_MspInit+0x24c>)
 8101a4e:	f003 fdb3 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101a52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101a56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a5a:	2302      	movs	r3, #2
 8101a5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a60:	2300      	movs	r3, #0
 8101a62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a66:	2300      	movs	r3, #0
 8101a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101a6c:	230a      	movs	r3, #10
 8101a6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8101a72:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a76:	4619      	mov	r1, r3
 8101a78:	4826      	ldr	r0, [pc, #152]	@ (8101b14 <HAL_QSPI_MspInit+0x24c>)
 8101a7a:	f003 fd9d 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101a7e:	230c      	movs	r3, #12
 8101a80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a84:	2302      	movs	r3, #2
 8101a86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a8a:	2300      	movs	r3, #0
 8101a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a90:	2300      	movs	r3, #0
 8101a92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101a96:	2309      	movs	r3, #9
 8101a98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101a9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101aa0:	4619      	mov	r1, r3
 8101aa2:	481d      	ldr	r0, [pc, #116]	@ (8101b18 <HAL_QSPI_MspInit+0x250>)
 8101aa4:	f003 fd88 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101aa8:	2304      	movs	r3, #4
 8101aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101aae:	2302      	movs	r3, #2
 8101ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ab4:	2300      	movs	r3, #0
 8101ab6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101aba:	2300      	movs	r3, #0
 8101abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101ac0:	2309      	movs	r3, #9
 8101ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101ac6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101aca:	4619      	mov	r1, r3
 8101acc:	4813      	ldr	r0, [pc, #76]	@ (8101b1c <HAL_QSPI_MspInit+0x254>)
 8101ace:	f003 fd73 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101ad2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ada:	2302      	movs	r3, #2
 8101adc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ae0:	2300      	movs	r3, #0
 8101ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101aec:	2309      	movs	r3, #9
 8101aee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101af2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101af6:	4619      	mov	r1, r3
 8101af8:	4809      	ldr	r0, [pc, #36]	@ (8101b20 <HAL_QSPI_MspInit+0x258>)
 8101afa:	f003 fd5d 	bl	81055b8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101afe:	bf00      	nop
 8101b00:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101b04:	46bd      	mov	sp, r7
 8101b06:	bd80      	pop	{r7, pc}
 8101b08:	52005000 	.word	0x52005000
 8101b0c:	58024400 	.word	0x58024400
 8101b10:	58021800 	.word	0x58021800
 8101b14:	58021400 	.word	0x58021400
 8101b18:	58021c00 	.word	0x58021c00
 8101b1c:	58020400 	.word	0x58020400
 8101b20:	58020c00 	.word	0x58020c00

08101b24 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b0b4      	sub	sp, #208	@ 0xd0
 8101b28:	af00      	add	r7, sp, #0
 8101b2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b2c:	f107 0308 	add.w	r3, r7, #8
 8101b30:	22c8      	movs	r2, #200	@ 0xc8
 8101b32:	2100      	movs	r1, #0
 8101b34:	4618      	mov	r0, r3
 8101b36:	f00c fc5d 	bl	810e3f4 <memset>
  if(hrtc->Instance==RTC)
 8101b3a:	687b      	ldr	r3, [r7, #4]
 8101b3c:	681b      	ldr	r3, [r3, #0]
 8101b3e:	4a10      	ldr	r2, [pc, #64]	@ (8101b80 <HAL_RTC_MspInit+0x5c>)
 8101b40:	4293      	cmp	r3, r2
 8101b42:	d119      	bne.n	8101b78 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101b44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101b48:	f04f 0300 	mov.w	r3, #0
 8101b4c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b58:	f107 0308 	add.w	r3, r7, #8
 8101b5c:	4618      	mov	r0, r3
 8101b5e:	f004 fbed 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101b62:	4603      	mov	r3, r0
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d001      	beq.n	8101b6c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101b68:	f7ff fcd6 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101b6c:	4b05      	ldr	r3, [pc, #20]	@ (8101b84 <HAL_RTC_MspInit+0x60>)
 8101b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101b70:	4a04      	ldr	r2, [pc, #16]	@ (8101b84 <HAL_RTC_MspInit+0x60>)
 8101b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101b76:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101b78:	bf00      	nop
 8101b7a:	37d0      	adds	r7, #208	@ 0xd0
 8101b7c:	46bd      	mov	sp, r7
 8101b7e:	bd80      	pop	{r7, pc}
 8101b80:	58004000 	.word	0x58004000
 8101b84:	58024400 	.word	0x58024400

08101b88 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101b88:	b580      	push	{r7, lr}
 8101b8a:	b0be      	sub	sp, #248	@ 0xf8
 8101b8c:	af00      	add	r7, sp, #0
 8101b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101b94:	2200      	movs	r2, #0
 8101b96:	601a      	str	r2, [r3, #0]
 8101b98:	605a      	str	r2, [r3, #4]
 8101b9a:	609a      	str	r2, [r3, #8]
 8101b9c:	60da      	str	r2, [r3, #12]
 8101b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ba0:	f107 0318 	add.w	r3, r7, #24
 8101ba4:	22c8      	movs	r2, #200	@ 0xc8
 8101ba6:	2100      	movs	r1, #0
 8101ba8:	4618      	mov	r0, r3
 8101baa:	f00c fc23 	bl	810e3f4 <memset>
  if(hsd->Instance==SDMMC1)
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	4a38      	ldr	r2, [pc, #224]	@ (8101c94 <HAL_SD_MspInit+0x10c>)
 8101bb4:	4293      	cmp	r3, r2
 8101bb6:	d169      	bne.n	8101c8c <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101bb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101bbc:	f04f 0300 	mov.w	r3, #0
 8101bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101bc4:	2300      	movs	r3, #0
 8101bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101bc8:	f107 0318 	add.w	r3, r7, #24
 8101bcc:	4618      	mov	r0, r3
 8101bce:	f004 fbb5 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101bd2:	4603      	mov	r3, r0
 8101bd4:	2b00      	cmp	r3, #0
 8101bd6:	d001      	beq.n	8101bdc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101bd8:	f7ff fc9e 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101bde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101be2:	4a2d      	ldr	r2, [pc, #180]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101be8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101bec:	4b2a      	ldr	r3, [pc, #168]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101bee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101bf6:	617b      	str	r3, [r7, #20]
 8101bf8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bfa:	4b27      	ldr	r3, [pc, #156]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c00:	4a25      	ldr	r2, [pc, #148]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101c02:	f043 0304 	orr.w	r3, r3, #4
 8101c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c0a:	4b23      	ldr	r3, [pc, #140]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c10:	f003 0304 	and.w	r3, r3, #4
 8101c14:	613b      	str	r3, [r7, #16]
 8101c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c18:	4b1f      	ldr	r3, [pc, #124]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101c20:	f043 0308 	orr.w	r3, r3, #8
 8101c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c28:	4b1b      	ldr	r3, [pc, #108]	@ (8101c98 <HAL_SD_MspInit+0x110>)
 8101c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c2e:	f003 0308 	and.w	r3, r3, #8
 8101c32:	60fb      	str	r3, [r7, #12]
 8101c34:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101c36:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8101c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c3e:	2302      	movs	r3, #2
 8101c40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c44:	2300      	movs	r3, #0
 8101c46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c4a:	2303      	movs	r3, #3
 8101c4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101c50:	230c      	movs	r3, #12
 8101c52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c56:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101c5a:	4619      	mov	r1, r3
 8101c5c:	480f      	ldr	r0, [pc, #60]	@ (8101c9c <HAL_SD_MspInit+0x114>)
 8101c5e:	f003 fcab 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101c62:	2304      	movs	r3, #4
 8101c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c68:	2302      	movs	r3, #2
 8101c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c6e:	2300      	movs	r3, #0
 8101c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c74:	2303      	movs	r3, #3
 8101c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101c7a:	230c      	movs	r3, #12
 8101c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101c80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101c84:	4619      	mov	r1, r3
 8101c86:	4806      	ldr	r0, [pc, #24]	@ (8101ca0 <HAL_SD_MspInit+0x118>)
 8101c88:	f003 fc96 	bl	81055b8 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8101c8c:	bf00      	nop
 8101c8e:	37f8      	adds	r7, #248	@ 0xf8
 8101c90:	46bd      	mov	sp, r7
 8101c92:	bd80      	pop	{r7, pc}
 8101c94:	52007000 	.word	0x52007000
 8101c98:	58024400 	.word	0x58024400
 8101c9c:	58020800 	.word	0x58020800
 8101ca0:	58020c00 	.word	0x58020c00

08101ca4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101ca4:	b580      	push	{r7, lr}
 8101ca6:	b0bc      	sub	sp, #240	@ 0xf0
 8101ca8:	af00      	add	r7, sp, #0
 8101caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101cb0:	2200      	movs	r2, #0
 8101cb2:	601a      	str	r2, [r3, #0]
 8101cb4:	605a      	str	r2, [r3, #4]
 8101cb6:	609a      	str	r2, [r3, #8]
 8101cb8:	60da      	str	r2, [r3, #12]
 8101cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cbc:	f107 0310 	add.w	r3, r7, #16
 8101cc0:	22c8      	movs	r2, #200	@ 0xc8
 8101cc2:	2100      	movs	r1, #0
 8101cc4:	4618      	mov	r0, r3
 8101cc6:	f00c fb95 	bl	810e3f4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	681b      	ldr	r3, [r3, #0]
 8101cce:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101cd2:	d144      	bne.n	8101d5e <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101cd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101cd8:	f04f 0300 	mov.w	r3, #0
 8101cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101ce0:	2300      	movs	r3, #0
 8101ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ce4:	f107 0310 	add.w	r3, r7, #16
 8101ce8:	4618      	mov	r0, r3
 8101cea:	f004 fb27 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101cee:	4603      	mov	r3, r0
 8101cf0:	2b00      	cmp	r3, #0
 8101cf2:	d001      	beq.n	8101cf8 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101cf4:	f7ff fc10 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101d04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101d08:	4b17      	ldr	r3, [pc, #92]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101d12:	60fb      	str	r3, [r7, #12]
 8101d14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d16:	4b14      	ldr	r3, [pc, #80]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d1c:	4a12      	ldr	r2, [pc, #72]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101d1e:	f043 0308 	orr.w	r3, r3, #8
 8101d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d26:	4b10      	ldr	r3, [pc, #64]	@ (8101d68 <HAL_SPDIFRX_MspInit+0xc4>)
 8101d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d2c:	f003 0308 	and.w	r3, r3, #8
 8101d30:	60bb      	str	r3, [r7, #8]
 8101d32:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101d34:	2380      	movs	r3, #128	@ 0x80
 8101d36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d3a:	2302      	movs	r3, #2
 8101d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d40:	2300      	movs	r3, #0
 8101d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d46:	2300      	movs	r3, #0
 8101d48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101d4c:	2309      	movs	r3, #9
 8101d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101d52:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101d56:	4619      	mov	r1, r3
 8101d58:	4804      	ldr	r0, [pc, #16]	@ (8101d6c <HAL_SPDIFRX_MspInit+0xc8>)
 8101d5a:	f003 fc2d 	bl	81055b8 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101d5e:	bf00      	nop
 8101d60:	37f0      	adds	r7, #240	@ 0xf0
 8101d62:	46bd      	mov	sp, r7
 8101d64:	bd80      	pop	{r7, pc}
 8101d66:	bf00      	nop
 8101d68:	58024400 	.word	0x58024400
 8101d6c:	58020c00 	.word	0x58020c00

08101d70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101d70:	b580      	push	{r7, lr}
 8101d72:	b0c0      	sub	sp, #256	@ 0x100
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101d7c:	2200      	movs	r2, #0
 8101d7e:	601a      	str	r2, [r3, #0]
 8101d80:	605a      	str	r2, [r3, #4]
 8101d82:	609a      	str	r2, [r3, #8]
 8101d84:	60da      	str	r2, [r3, #12]
 8101d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d88:	f107 0320 	add.w	r3, r7, #32
 8101d8c:	22c8      	movs	r2, #200	@ 0xc8
 8101d8e:	2100      	movs	r1, #0
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00c fb2f 	bl	810e3f4 <memset>
  if(hspi->Instance==SPI2)
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	4a72      	ldr	r2, [pc, #456]	@ (8101f64 <HAL_SPI_MspInit+0x1f4>)
 8101d9c:	4293      	cmp	r3, r2
 8101d9e:	d16b      	bne.n	8101e78 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101da0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101da4:	f04f 0300 	mov.w	r3, #0
 8101da8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101dac:	2300      	movs	r3, #0
 8101dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101db2:	f107 0320 	add.w	r3, r7, #32
 8101db6:	4618      	mov	r0, r3
 8101db8:	f004 fac0 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d001      	beq.n	8101dc6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101dc2:	f7ff fba9 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101dc6:	4b68      	ldr	r3, [pc, #416]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101dcc:	4a66      	ldr	r2, [pc, #408]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101dd6:	4b64      	ldr	r3, [pc, #400]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101de0:	61fb      	str	r3, [r7, #28]
 8101de2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101de4:	4b60      	ldr	r3, [pc, #384]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dea:	4a5f      	ldr	r2, [pc, #380]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101dec:	f043 0301 	orr.w	r3, r3, #1
 8101df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101df4:	4b5c      	ldr	r3, [pc, #368]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dfa:	f003 0301 	and.w	r3, r3, #1
 8101dfe:	61bb      	str	r3, [r7, #24]
 8101e00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101e02:	4b59      	ldr	r3, [pc, #356]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e08:	4a57      	ldr	r2, [pc, #348]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101e0a:	f043 0304 	orr.w	r3, r3, #4
 8101e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e12:	4b55      	ldr	r3, [pc, #340]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e18:	f003 0304 	and.w	r3, r3, #4
 8101e1c:	617b      	str	r3, [r7, #20]
 8101e1e:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101e20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101e24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e28:	2302      	movs	r3, #2
 8101e2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e2e:	2300      	movs	r3, #0
 8101e30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e34:	2300      	movs	r3, #0
 8101e36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101e3a:	2305      	movs	r3, #5
 8101e3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e40:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101e44:	4619      	mov	r1, r3
 8101e46:	4849      	ldr	r0, [pc, #292]	@ (8101f6c <HAL_SPI_MspInit+0x1fc>)
 8101e48:	f003 fbb6 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101e4c:	230c      	movs	r3, #12
 8101e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e52:	2302      	movs	r3, #2
 8101e54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e58:	2300      	movs	r3, #0
 8101e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e5e:	2300      	movs	r3, #0
 8101e60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101e64:	2305      	movs	r3, #5
 8101e66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101e6a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101e6e:	4619      	mov	r1, r3
 8101e70:	483f      	ldr	r0, [pc, #252]	@ (8101f70 <HAL_SPI_MspInit+0x200>)
 8101e72:	f003 fba1 	bl	81055b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101e76:	e06f      	b.n	8101f58 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8101f74 <HAL_SPI_MspInit+0x204>)
 8101e7e:	4293      	cmp	r3, r2
 8101e80:	d16a      	bne.n	8101f58 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101e82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101e86:	f04f 0300 	mov.w	r3, #0
 8101e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101e8e:	2300      	movs	r3, #0
 8101e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e94:	f107 0320 	add.w	r3, r7, #32
 8101e98:	4618      	mov	r0, r3
 8101e9a:	f004 fa4f 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d001      	beq.n	8101ea8 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101ea4:	f7ff fb38 	bl	8101518 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101eae:	4a2e      	ldr	r2, [pc, #184]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8101eb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101ec2:	613b      	str	r3, [r7, #16]
 8101ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101ec6:	4b28      	ldr	r3, [pc, #160]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ecc:	4a26      	ldr	r2, [pc, #152]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ed6:	4b24      	ldr	r3, [pc, #144]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101ee0:	60fb      	str	r3, [r7, #12]
 8101ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101ee4:	4b20      	ldr	r3, [pc, #128]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101eea:	4a1f      	ldr	r2, [pc, #124]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101eec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8101f68 <HAL_SPI_MspInit+0x1f8>)
 8101ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101efe:	60bb      	str	r3, [r7, #8]
 8101f00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101f02:	2303      	movs	r3, #3
 8101f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f08:	2302      	movs	r3, #2
 8101f0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f0e:	2300      	movs	r3, #0
 8101f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f14:	2300      	movs	r3, #0
 8101f16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101f1a:	2305      	movs	r3, #5
 8101f1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101f20:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101f24:	4619      	mov	r1, r3
 8101f26:	4814      	ldr	r0, [pc, #80]	@ (8101f78 <HAL_SPI_MspInit+0x208>)
 8101f28:	f003 fb46 	bl	81055b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101f2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f34:	2302      	movs	r3, #2
 8101f36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f3a:	2300      	movs	r3, #0
 8101f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f40:	2300      	movs	r3, #0
 8101f42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101f46:	2305      	movs	r3, #5
 8101f48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101f4c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101f50:	4619      	mov	r1, r3
 8101f52:	480a      	ldr	r0, [pc, #40]	@ (8101f7c <HAL_SPI_MspInit+0x20c>)
 8101f54:	f003 fb30 	bl	81055b8 <HAL_GPIO_Init>
}
 8101f58:	bf00      	nop
 8101f5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101f5e:	46bd      	mov	sp, r7
 8101f60:	bd80      	pop	{r7, pc}
 8101f62:	bf00      	nop
 8101f64:	40003800 	.word	0x40003800
 8101f68:	58024400 	.word	0x58024400
 8101f6c:	58020000 	.word	0x58020000
 8101f70:	58020800 	.word	0x58020800
 8101f74:	40015000 	.word	0x40015000
 8101f78:	58022800 	.word	0x58022800
 8101f7c:	58022400 	.word	0x58022400

08101f80 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101f80:	b480      	push	{r7}
 8101f82:	b085      	sub	sp, #20
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8101fbc <HAL_TIM_OC_MspInit+0x3c>)
 8101f8e:	4293      	cmp	r3, r2
 8101f90:	d10e      	bne.n	8101fb0 <HAL_TIM_OC_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101f92:	4b0b      	ldr	r3, [pc, #44]	@ (8101fc0 <HAL_TIM_OC_MspInit+0x40>)
 8101f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f98:	4a09      	ldr	r2, [pc, #36]	@ (8101fc0 <HAL_TIM_OC_MspInit+0x40>)
 8101f9a:	f043 0302 	orr.w	r3, r3, #2
 8101f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101fa2:	4b07      	ldr	r3, [pc, #28]	@ (8101fc0 <HAL_TIM_OC_MspInit+0x40>)
 8101fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101fa8:	f003 0302 	and.w	r3, r3, #2
 8101fac:	60fb      	str	r3, [r7, #12]
 8101fae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101fb0:	bf00      	nop
 8101fb2:	3714      	adds	r7, #20
 8101fb4:	46bd      	mov	sp, r7
 8101fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fba:	4770      	bx	lr
 8101fbc:	40010400 	.word	0x40010400
 8101fc0:	58024400 	.word	0x58024400

08101fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101fc4:	b580      	push	{r7, lr}
 8101fc6:	b08a      	sub	sp, #40	@ 0x28
 8101fc8:	af00      	add	r7, sp, #0
 8101fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fcc:	f107 0314 	add.w	r3, r7, #20
 8101fd0:	2200      	movs	r2, #0
 8101fd2:	601a      	str	r2, [r3, #0]
 8101fd4:	605a      	str	r2, [r3, #4]
 8101fd6:	609a      	str	r2, [r3, #8]
 8101fd8:	60da      	str	r2, [r3, #12]
 8101fda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	4a1a      	ldr	r2, [pc, #104]	@ (810204c <HAL_TIM_Base_MspInit+0x88>)
 8101fe2:	4293      	cmp	r3, r2
 8101fe4:	d12e      	bne.n	8102044 <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 8101fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101fec:	4a18      	ldr	r2, [pc, #96]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 8101fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101ff6:	4b16      	ldr	r3, [pc, #88]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 8101ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102000:	613b      	str	r3, [r7, #16]
 8102002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102004:	4b12      	ldr	r3, [pc, #72]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 8102006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810200a:	4a11      	ldr	r2, [pc, #68]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 810200c:	f043 0320 	orr.w	r3, r3, #32
 8102010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102014:	4b0e      	ldr	r3, [pc, #56]	@ (8102050 <HAL_TIM_Base_MspInit+0x8c>)
 8102016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810201a:	f003 0320 	and.w	r3, r3, #32
 810201e:	60fb      	str	r3, [r7, #12]
 8102020:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8102022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8102026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102028:	2302      	movs	r3, #2
 810202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810202c:	2300      	movs	r3, #0
 810202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102030:	2300      	movs	r3, #0
 8102032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102034:	2309      	movs	r3, #9
 8102036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8102038:	f107 0314 	add.w	r3, r7, #20
 810203c:	4619      	mov	r1, r3
 810203e:	4805      	ldr	r0, [pc, #20]	@ (8102054 <HAL_TIM_Base_MspInit+0x90>)
 8102040:	f003 faba 	bl	81055b8 <HAL_GPIO_Init>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8102044:	bf00      	nop
 8102046:	3728      	adds	r7, #40	@ 0x28
 8102048:	46bd      	mov	sp, r7
 810204a:	bd80      	pop	{r7, pc}
 810204c:	40001c00 	.word	0x40001c00
 8102050:	58024400 	.word	0x58024400
 8102054:	58021400 	.word	0x58021400

08102058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102058:	b580      	push	{r7, lr}
 810205a:	b088      	sub	sp, #32
 810205c:	af00      	add	r7, sp, #0
 810205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102060:	f107 030c 	add.w	r3, r7, #12
 8102064:	2200      	movs	r2, #0
 8102066:	601a      	str	r2, [r3, #0]
 8102068:	605a      	str	r2, [r3, #4]
 810206a:	609a      	str	r2, [r3, #8]
 810206c:	60da      	str	r2, [r3, #12]
 810206e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	4a12      	ldr	r2, [pc, #72]	@ (81020c0 <HAL_TIM_MspPostInit+0x68>)
 8102076:	4293      	cmp	r3, r2
 8102078:	d11e      	bne.n	81020b8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810207a:	4b12      	ldr	r3, [pc, #72]	@ (81020c4 <HAL_TIM_MspPostInit+0x6c>)
 810207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102080:	4a10      	ldr	r2, [pc, #64]	@ (81020c4 <HAL_TIM_MspPostInit+0x6c>)
 8102082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8102086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810208a:	4b0e      	ldr	r3, [pc, #56]	@ (81020c4 <HAL_TIM_MspPostInit+0x6c>)
 810208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102094:	60bb      	str	r3, [r7, #8]
 8102096:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8102098:	23c0      	movs	r3, #192	@ 0xc0
 810209a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810209c:	2302      	movs	r3, #2
 810209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020a0:	2300      	movs	r3, #0
 81020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020a4:	2300      	movs	r3, #0
 81020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81020a8:	2303      	movs	r3, #3
 81020aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81020ac:	f107 030c 	add.w	r3, r7, #12
 81020b0:	4619      	mov	r1, r3
 81020b2:	4805      	ldr	r0, [pc, #20]	@ (81020c8 <HAL_TIM_MspPostInit+0x70>)
 81020b4:	f003 fa80 	bl	81055b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 81020b8:	bf00      	nop
 81020ba:	3720      	adds	r7, #32
 81020bc:	46bd      	mov	sp, r7
 81020be:	bd80      	pop	{r7, pc}
 81020c0:	40010400 	.word	0x40010400
 81020c4:	58024400 	.word	0x58024400
 81020c8:	58022400 	.word	0x58022400

081020cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81020cc:	b580      	push	{r7, lr}
 81020ce:	b0be      	sub	sp, #248	@ 0xf8
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81020d8:	2200      	movs	r2, #0
 81020da:	601a      	str	r2, [r3, #0]
 81020dc:	605a      	str	r2, [r3, #4]
 81020de:	609a      	str	r2, [r3, #8]
 81020e0:	60da      	str	r2, [r3, #12]
 81020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020e4:	f107 0318 	add.w	r3, r7, #24
 81020e8:	22c8      	movs	r2, #200	@ 0xc8
 81020ea:	2100      	movs	r1, #0
 81020ec:	4618      	mov	r0, r3
 81020ee:	f00c f981 	bl	810e3f4 <memset>
  if(huart->Instance==UART8)
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	4a68      	ldr	r2, [pc, #416]	@ (8102298 <HAL_UART_MspInit+0x1cc>)
 81020f8:	4293      	cmp	r3, r2
 81020fa:	d147      	bne.n	810218c <HAL_UART_MspInit+0xc0>

    /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 81020fc:	f04f 0202 	mov.w	r2, #2
 8102100:	f04f 0300 	mov.w	r3, #0
 8102104:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102108:	2300      	movs	r3, #0
 810210a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810210e:	f107 0318 	add.w	r3, r7, #24
 8102112:	4618      	mov	r0, r3
 8102114:	f004 f912 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8102118:	4603      	mov	r3, r0
 810211a:	2b00      	cmp	r3, #0
 810211c:	d001      	beq.n	8102122 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810211e:	f7ff f9fb 	bl	8101518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8102122:	4b5e      	ldr	r3, [pc, #376]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 8102124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102128:	4a5c      	ldr	r2, [pc, #368]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 810212a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810212e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102132:	4b5a      	ldr	r3, [pc, #360]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 8102134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810213c:	617b      	str	r3, [r7, #20]
 810213e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102140:	4b56      	ldr	r3, [pc, #344]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 8102142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102146:	4a55      	ldr	r2, [pc, #340]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 8102148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810214c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102150:	4b52      	ldr	r3, [pc, #328]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 8102152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810215a:	613b      	str	r3, [r7, #16]
 810215c:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 810215e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102166:	2302      	movs	r3, #2
 8102168:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810216c:	2300      	movs	r3, #0
 810216e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102172:	2300      	movs	r3, #0
 8102174:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8102178:	2308      	movs	r3, #8
 810217a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810217e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102182:	4619      	mov	r1, r3
 8102184:	4846      	ldr	r0, [pc, #280]	@ (81022a0 <HAL_UART_MspInit+0x1d4>)
 8102186:	f003 fa17 	bl	81055b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 810218a:	e081      	b.n	8102290 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	681b      	ldr	r3, [r3, #0]
 8102190:	4a44      	ldr	r2, [pc, #272]	@ (81022a4 <HAL_UART_MspInit+0x1d8>)
 8102192:	4293      	cmp	r3, r2
 8102194:	d17c      	bne.n	8102290 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8102196:	f04f 0201 	mov.w	r2, #1
 810219a:	f04f 0300 	mov.w	r3, #0
 810219e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 81021a2:	2300      	movs	r3, #0
 81021a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81021a8:	f107 0318 	add.w	r3, r7, #24
 81021ac:	4618      	mov	r0, r3
 81021ae:	f004 f8c5 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 81021b2:	4603      	mov	r3, r0
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d001      	beq.n	81021bc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 81021b8:	f7ff f9ae 	bl	8101518 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 81021bc:	4b37      	ldr	r3, [pc, #220]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 81021be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81021c2:	4a36      	ldr	r2, [pc, #216]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 81021c4:	f043 0310 	orr.w	r3, r3, #16
 81021c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81021cc:	4b33      	ldr	r3, [pc, #204]	@ (810229c <HAL_UART_MspInit+0x1d0>)
 81021ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81021d2:	f003 0310 	and.w	r3, r3, #16
 81021d6:	60fb      	str	r3, [r7, #12]
 81021d8:	68fb      	ldr	r3, [r7, #12]
    hdma_usart1_rx.Instance = DMA1_Stream0;
 81021da:	4b33      	ldr	r3, [pc, #204]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021dc:	4a33      	ldr	r2, [pc, #204]	@ (81022ac <HAL_UART_MspInit+0x1e0>)
 81021de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 81021e0:	4b31      	ldr	r3, [pc, #196]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021e2:	2229      	movs	r2, #41	@ 0x29
 81021e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81021e6:	4b30      	ldr	r3, [pc, #192]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021e8:	2200      	movs	r2, #0
 81021ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81021ec:	4b2e      	ldr	r3, [pc, #184]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021ee:	2200      	movs	r2, #0
 81021f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 81021f2:	4b2d      	ldr	r3, [pc, #180]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81021f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81021fa:	4b2b      	ldr	r3, [pc, #172]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 81021fc:	2200      	movs	r2, #0
 81021fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102200:	4b29      	ldr	r3, [pc, #164]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 8102202:	2200      	movs	r2, #0
 8102204:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8102206:	4b28      	ldr	r3, [pc, #160]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 8102208:	2200      	movs	r2, #0
 810220a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 810220c:	4b26      	ldr	r3, [pc, #152]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 810220e:	2200      	movs	r2, #0
 8102210:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102212:	4b25      	ldr	r3, [pc, #148]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 8102214:	2200      	movs	r2, #0
 8102216:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8102218:	4823      	ldr	r0, [pc, #140]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 810221a:	f002 f803 	bl	8104224 <HAL_DMA_Init>
 810221e:	4603      	mov	r3, r0
 8102220:	2b00      	cmp	r3, #0
 8102222:	d001      	beq.n	8102228 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8102224:	f7ff f978 	bl	8101518 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	4a1f      	ldr	r2, [pc, #124]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 810222c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8102230:	4a1d      	ldr	r2, [pc, #116]	@ (81022a8 <HAL_UART_MspInit+0x1dc>)
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8102236:	4b1e      	ldr	r3, [pc, #120]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102238:	4a1e      	ldr	r2, [pc, #120]	@ (81022b4 <HAL_UART_MspInit+0x1e8>)
 810223a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 810223c:	4b1c      	ldr	r3, [pc, #112]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 810223e:	222a      	movs	r2, #42	@ 0x2a
 8102240:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102242:	4b1b      	ldr	r3, [pc, #108]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102244:	2240      	movs	r2, #64	@ 0x40
 8102246:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102248:	4b19      	ldr	r3, [pc, #100]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 810224a:	2200      	movs	r2, #0
 810224c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 810224e:	4b18      	ldr	r3, [pc, #96]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102254:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102256:	4b16      	ldr	r3, [pc, #88]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102258:	2200      	movs	r2, #0
 810225a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810225c:	4b14      	ldr	r3, [pc, #80]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 810225e:	2200      	movs	r2, #0
 8102260:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8102262:	4b13      	ldr	r3, [pc, #76]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102264:	2200      	movs	r2, #0
 8102266:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8102268:	4b11      	ldr	r3, [pc, #68]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 810226a:	2200      	movs	r2, #0
 810226c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810226e:	4b10      	ldr	r3, [pc, #64]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102270:	2200      	movs	r2, #0
 8102272:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8102274:	480e      	ldr	r0, [pc, #56]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102276:	f001 ffd5 	bl	8104224 <HAL_DMA_Init>
 810227a:	4603      	mov	r3, r0
 810227c:	2b00      	cmp	r3, #0
 810227e:	d001      	beq.n	8102284 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8102280:	f7ff f94a 	bl	8101518 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	4a0a      	ldr	r2, [pc, #40]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 8102288:	67da      	str	r2, [r3, #124]	@ 0x7c
 810228a:	4a09      	ldr	r2, [pc, #36]	@ (81022b0 <HAL_UART_MspInit+0x1e4>)
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8102290:	bf00      	nop
 8102292:	37f8      	adds	r7, #248	@ 0xf8
 8102294:	46bd      	mov	sp, r7
 8102296:	bd80      	pop	{r7, pc}
 8102298:	40007c00 	.word	0x40007c00
 810229c:	58024400 	.word	0x58024400
 81022a0:	58022400 	.word	0x58022400
 81022a4:	40011000 	.word	0x40011000
 81022a8:	10000878 	.word	0x10000878
 81022ac:	40020010 	.word	0x40020010
 81022b0:	100008f0 	.word	0x100008f0
 81022b4:	40020028 	.word	0x40020028

081022b8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81022b8:	b580      	push	{r7, lr}
 81022ba:	b0c2      	sub	sp, #264	@ 0x108
 81022bc:	af00      	add	r7, sp, #0
 81022be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81022c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81022c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81022c8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81022cc:	2200      	movs	r2, #0
 81022ce:	601a      	str	r2, [r3, #0]
 81022d0:	605a      	str	r2, [r3, #4]
 81022d2:	609a      	str	r2, [r3, #8]
 81022d4:	60da      	str	r2, [r3, #12]
 81022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81022dc:	22c8      	movs	r2, #200	@ 0xc8
 81022de:	2100      	movs	r1, #0
 81022e0:	4618      	mov	r0, r3
 81022e2:	f00c f887 	bl	810e3f4 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81022e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81022ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	4a79      	ldr	r2, [pc, #484]	@ (81024d8 <HAL_PCD_MspInit+0x220>)
 81022f4:	4293      	cmp	r3, r2
 81022f6:	f040 80ea 	bne.w	81024ce <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81022fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81022fe:	f04f 0300 	mov.w	r3, #0
 8102302:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8102306:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810230a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810230e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102312:	4618      	mov	r0, r3
 8102314:	f004 f812 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8102318:	4603      	mov	r3, r0
 810231a:	2b00      	cmp	r3, #0
 810231c:	d001      	beq.n	8102322 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 810231e:	f7ff f8fb 	bl	8101518 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8102322:	f003 fd69 	bl	8105df8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102326:	4b6d      	ldr	r3, [pc, #436]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810232c:	4a6b      	ldr	r2, [pc, #428]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 810232e:	f043 0302 	orr.w	r3, r3, #2
 8102332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102336:	4b69      	ldr	r3, [pc, #420]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810233c:	f003 0302 	and.w	r3, r3, #2
 8102340:	627b      	str	r3, [r7, #36]	@ 0x24
 8102342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102344:	4b65      	ldr	r3, [pc, #404]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810234a:	4a64      	ldr	r2, [pc, #400]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 810234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102354:	4b61      	ldr	r3, [pc, #388]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810235e:	623b      	str	r3, [r7, #32]
 8102360:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102362:	4b5e      	ldr	r3, [pc, #376]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102368:	4a5c      	ldr	r2, [pc, #368]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 810236a:	f043 0304 	orr.w	r3, r3, #4
 810236e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102372:	4b5a      	ldr	r3, [pc, #360]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102378:	f003 0304 	and.w	r3, r3, #4
 810237c:	61fb      	str	r3, [r7, #28]
 810237e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8102380:	4b56      	ldr	r3, [pc, #344]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102386:	4a55      	ldr	r2, [pc, #340]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810238c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102390:	4b52      	ldr	r3, [pc, #328]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810239a:	61bb      	str	r3, [r7, #24]
 810239c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810239e:	4b4f      	ldr	r3, [pc, #316]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023a4:	4a4d      	ldr	r2, [pc, #308]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81023a6:	f043 0301 	orr.w	r3, r3, #1
 81023aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023ae:	4b4b      	ldr	r3, [pc, #300]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023b4:	f003 0301 	and.w	r3, r3, #1
 81023b8:	617b      	str	r3, [r7, #20]
 81023ba:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81023bc:	f643 4323 	movw	r3, #15395	@ 0x3c23
 81023c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023c4:	2302      	movs	r3, #2
 81023c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023ca:	2300      	movs	r3, #0
 81023cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81023d0:	2302      	movs	r3, #2
 81023d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81023d6:	230a      	movs	r3, #10
 81023d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023dc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81023e0:	4619      	mov	r1, r3
 81023e2:	483f      	ldr	r0, [pc, #252]	@ (81024e0 <HAL_PCD_MspInit+0x228>)
 81023e4:	f003 f8e8 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81023e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81023ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023f0:	2302      	movs	r3, #2
 81023f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023f6:	2300      	movs	r3, #0
 81023f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81023fc:	2302      	movs	r3, #2
 81023fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102402:	230a      	movs	r3, #10
 8102404:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8102408:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810240c:	4619      	mov	r1, r3
 810240e:	4835      	ldr	r0, [pc, #212]	@ (81024e4 <HAL_PCD_MspInit+0x22c>)
 8102410:	f003 f8d2 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8102414:	2301      	movs	r3, #1
 8102416:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810241a:	2302      	movs	r3, #2
 810241c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102420:	2300      	movs	r3, #0
 8102422:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102426:	2302      	movs	r3, #2
 8102428:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810242c:	230a      	movs	r3, #10
 810242e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8102432:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102436:	4619      	mov	r1, r3
 8102438:	482b      	ldr	r0, [pc, #172]	@ (81024e8 <HAL_PCD_MspInit+0x230>)
 810243a:	f003 f8bd 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 810243e:	2310      	movs	r3, #16
 8102440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102444:	2302      	movs	r3, #2
 8102446:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810244a:	2300      	movs	r3, #0
 810244c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102450:	2302      	movs	r3, #2
 8102452:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102456:	230a      	movs	r3, #10
 8102458:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 810245c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102460:	4619      	mov	r1, r3
 8102462:	4822      	ldr	r0, [pc, #136]	@ (81024ec <HAL_PCD_MspInit+0x234>)
 8102464:	f003 f8a8 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8102468:	2328      	movs	r3, #40	@ 0x28
 810246a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810246e:	2302      	movs	r3, #2
 8102470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102474:	2300      	movs	r3, #0
 8102476:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810247a:	2302      	movs	r3, #2
 810247c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102480:	230a      	movs	r3, #10
 8102482:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102486:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810248a:	4619      	mov	r1, r3
 810248c:	4818      	ldr	r0, [pc, #96]	@ (81024f0 <HAL_PCD_MspInit+0x238>)
 810248e:	f003 f893 	bl	81055b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8102492:	4b12      	ldr	r3, [pc, #72]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 8102494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102498:	4a10      	ldr	r2, [pc, #64]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 810249a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810249e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81024a2:	4b0e      	ldr	r3, [pc, #56]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81024a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81024ac:	613b      	str	r3, [r7, #16]
 81024ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81024b0:	4b0a      	ldr	r3, [pc, #40]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81024b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81024b6:	4a09      	ldr	r2, [pc, #36]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81024b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81024bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81024c0:	4b06      	ldr	r3, [pc, #24]	@ (81024dc <HAL_PCD_MspInit+0x224>)
 81024c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81024c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81024ca:	60fb      	str	r3, [r7, #12]
 81024cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 81024ce:	bf00      	nop
 81024d0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81024d4:	46bd      	mov	sp, r7
 81024d6:	bd80      	pop	{r7, pc}
 81024d8:	40040000 	.word	0x40040000
 81024dc:	58024400 	.word	0x58024400
 81024e0:	58020400 	.word	0x58020400
 81024e4:	58022000 	.word	0x58022000
 81024e8:	58020800 	.word	0x58020800
 81024ec:	58021c00 	.word	0x58021c00
 81024f0:	58020000 	.word	0x58020000

081024f4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 81024f4:	b580      	push	{r7, lr}
 81024f6:	b0ba      	sub	sp, #232	@ 0xe8
 81024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 81024fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81024fe:	2200      	movs	r2, #0
 8102500:	601a      	str	r2, [r3, #0]
 8102502:	605a      	str	r2, [r3, #4]
 8102504:	609a      	str	r2, [r3, #8]
 8102506:	60da      	str	r2, [r3, #12]
 8102508:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 810250a:	4b5c      	ldr	r3, [pc, #368]	@ (810267c <HAL_FMC_MspInit+0x188>)
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	2b00      	cmp	r3, #0
 8102510:	f040 80b0 	bne.w	8102674 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8102514:	4b59      	ldr	r3, [pc, #356]	@ (810267c <HAL_FMC_MspInit+0x188>)
 8102516:	2201      	movs	r2, #1
 8102518:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810251a:	f107 0308 	add.w	r3, r7, #8
 810251e:	22c8      	movs	r2, #200	@ 0xc8
 8102520:	2100      	movs	r1, #0
 8102522:	4618      	mov	r0, r3
 8102524:	f00b ff66 	bl	810e3f4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8102528:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810252c:	f04f 0300 	mov.w	r3, #0
 8102530:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8102534:	2300      	movs	r3, #0
 8102536:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102538:	f107 0308 	add.w	r3, r7, #8
 810253c:	4618      	mov	r0, r3
 810253e:	f003 fefd 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 8102542:	4603      	mov	r3, r0
 8102544:	2b00      	cmp	r3, #0
 8102546:	d001      	beq.n	810254c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8102548:	f7fe ffe6 	bl	8101518 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 810254c:	4b4c      	ldr	r3, [pc, #304]	@ (8102680 <HAL_FMC_MspInit+0x18c>)
 810254e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102552:	4a4b      	ldr	r2, [pc, #300]	@ (8102680 <HAL_FMC_MspInit+0x18c>)
 8102554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8102558:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 810255c:	4b48      	ldr	r3, [pc, #288]	@ (8102680 <HAL_FMC_MspInit+0x18c>)
 810255e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102566:	607b      	str	r3, [r7, #4]
 8102568:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 810256a:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 810256e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102572:	2302      	movs	r3, #2
 8102574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102578:	2300      	movs	r3, #0
 810257a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810257e:	2303      	movs	r3, #3
 8102580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102584:	230c      	movs	r3, #12
 8102586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810258a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810258e:	4619      	mov	r1, r3
 8102590:	483c      	ldr	r0, [pc, #240]	@ (8102684 <HAL_FMC_MspInit+0x190>)
 8102592:	f003 f811 	bl	81055b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8102596:	f64f 7383 	movw	r3, #65411	@ 0xff83
 810259a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810259e:	2302      	movs	r3, #2
 81025a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025a4:	2300      	movs	r3, #0
 81025a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81025aa:	2303      	movs	r3, #3
 81025ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81025b0:	230c      	movs	r3, #12
 81025b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81025b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81025ba:	4619      	mov	r1, r3
 81025bc:	4832      	ldr	r0, [pc, #200]	@ (8102688 <HAL_FMC_MspInit+0x194>)
 81025be:	f002 fffb 	bl	81055b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 81025c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 81025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025ca:	2302      	movs	r3, #2
 81025cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025d0:	2300      	movs	r3, #0
 81025d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81025d6:	2303      	movs	r3, #3
 81025d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81025dc:	230c      	movs	r3, #12
 81025de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81025e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81025e6:	4619      	mov	r1, r3
 81025e8:	4828      	ldr	r0, [pc, #160]	@ (810268c <HAL_FMC_MspInit+0x198>)
 81025ea:	f002 ffe5 	bl	81055b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 81025ee:	f248 1317 	movw	r3, #33047	@ 0x8117
 81025f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025f6:	2302      	movs	r3, #2
 81025f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025fc:	2300      	movs	r3, #0
 81025fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102602:	2303      	movs	r3, #3
 8102604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102608:	230c      	movs	r3, #12
 810260a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810260e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102612:	4619      	mov	r1, r3
 8102614:	481e      	ldr	r0, [pc, #120]	@ (8102690 <HAL_FMC_MspInit+0x19c>)
 8102616:	f002 ffcf 	bl	81055b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 810261a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 810261e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102622:	2302      	movs	r3, #2
 8102624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102628:	2300      	movs	r3, #0
 810262a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810262e:	2303      	movs	r3, #3
 8102630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102634:	230c      	movs	r3, #12
 8102636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810263a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810263e:	4619      	mov	r1, r3
 8102640:	4814      	ldr	r0, [pc, #80]	@ (8102694 <HAL_FMC_MspInit+0x1a0>)
 8102642:	f002 ffb9 	bl	81055b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 8102646:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810264a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810264e:	2302      	movs	r3, #2
 8102650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102654:	2300      	movs	r3, #0
 8102656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810265a:	2303      	movs	r3, #3
 810265c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102660:	230c      	movs	r3, #12
 8102662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8102666:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810266a:	4619      	mov	r1, r3
 810266c:	480a      	ldr	r0, [pc, #40]	@ (8102698 <HAL_FMC_MspInit+0x1a4>)
 810266e:	f002 ffa3 	bl	81055b8 <HAL_GPIO_Init>
 8102672:	e000      	b.n	8102676 <HAL_FMC_MspInit+0x182>
    return;
 8102674:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8102676:	37e8      	adds	r7, #232	@ 0xe8
 8102678:	46bd      	mov	sp, r7
 810267a:	bd80      	pop	{r7, pc}
 810267c:	10000e98 	.word	0x10000e98
 8102680:	58024400 	.word	0x58024400
 8102684:	58022000 	.word	0x58022000
 8102688:	58021000 	.word	0x58021000
 810268c:	58021c00 	.word	0x58021c00
 8102690:	58021800 	.word	0x58021800
 8102694:	58020c00 	.word	0x58020c00
 8102698:	58021400 	.word	0x58021400

0810269c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 810269c:	b580      	push	{r7, lr}
 810269e:	b082      	sub	sp, #8
 81026a0:	af00      	add	r7, sp, #0
 81026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81026a4:	f7ff ff26 	bl	81024f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81026a8:	bf00      	nop
 81026aa:	3708      	adds	r7, #8
 81026ac:	46bd      	mov	sp, r7
 81026ae:	bd80      	pop	{r7, pc}

081026b0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81026b0:	b580      	push	{r7, lr}
 81026b2:	b0bc      	sub	sp, #240	@ 0xf0
 81026b4:	af00      	add	r7, sp, #0
 81026b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81026b8:	f107 0310 	add.w	r3, r7, #16
 81026bc:	22c8      	movs	r2, #200	@ 0xc8
 81026be:	2100      	movs	r1, #0
 81026c0:	4618      	mov	r0, r3
 81026c2:	f00b fe97 	bl	810e3f4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	4a4f      	ldr	r2, [pc, #316]	@ (8102808 <HAL_SAI_MspInit+0x158>)
 81026cc:	4293      	cmp	r3, r2
 81026ce:	d153      	bne.n	8102778 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81026d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81026d4:	f04f 0300 	mov.w	r3, #0
 81026d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81026dc:	2300      	movs	r3, #0
 81026de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81026e0:	f107 0310 	add.w	r3, r7, #16
 81026e4:	4618      	mov	r0, r3
 81026e6:	f003 fe29 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 81026ea:	4603      	mov	r3, r0
 81026ec:	2b00      	cmp	r3, #0
 81026ee:	d001      	beq.n	81026f4 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 81026f0:	f7fe ff12 	bl	8101518 <Error_Handler>
    }

    if (SAI1_client == 0)
 81026f4:	4b45      	ldr	r3, [pc, #276]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	2b00      	cmp	r3, #0
 81026fa:	d10e      	bne.n	810271a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81026fc:	4b44      	ldr	r3, [pc, #272]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 81026fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102702:	4a43      	ldr	r2, [pc, #268]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 8102704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8102708:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810270c:	4b40      	ldr	r3, [pc, #256]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 810270e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102716:	60fb      	str	r3, [r7, #12]
 8102718:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810271a:	4b3c      	ldr	r3, [pc, #240]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	3301      	adds	r3, #1
 8102720:	4a3a      	ldr	r2, [pc, #232]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 8102722:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102724:	2370      	movs	r3, #112	@ 0x70
 8102726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810272a:	2302      	movs	r3, #2
 810272c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102730:	2300      	movs	r3, #0
 8102732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102736:	2300      	movs	r3, #0
 8102738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810273c:	2306      	movs	r3, #6
 810273e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102742:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102746:	4619      	mov	r1, r3
 8102748:	4832      	ldr	r0, [pc, #200]	@ (8102814 <HAL_SAI_MspInit+0x164>)
 810274a:	f002 ff35 	bl	81055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 810274e:	2380      	movs	r3, #128	@ 0x80
 8102750:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102754:	2302      	movs	r3, #2
 8102756:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810275a:	2300      	movs	r3, #0
 810275c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102760:	2300      	movs	r3, #0
 8102762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102766:	2306      	movs	r3, #6
 8102768:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 810276c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102770:	4619      	mov	r1, r3
 8102772:	4829      	ldr	r0, [pc, #164]	@ (8102818 <HAL_SAI_MspInit+0x168>)
 8102774:	f002 ff20 	bl	81055b8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	4a27      	ldr	r2, [pc, #156]	@ (810281c <HAL_SAI_MspInit+0x16c>)
 810277e:	4293      	cmp	r3, r2
 8102780:	d13e      	bne.n	8102800 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102786:	f04f 0300 	mov.w	r3, #0
 810278a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 810278e:	2300      	movs	r3, #0
 8102790:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102792:	f107 0310 	add.w	r3, r7, #16
 8102796:	4618      	mov	r0, r3
 8102798:	f003 fdd0 	bl	810633c <HAL_RCCEx_PeriphCLKConfig>
 810279c:	4603      	mov	r3, r0
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d001      	beq.n	81027a6 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81027a2:	f7fe feb9 	bl	8101518 <Error_Handler>
    }

      if (SAI1_client == 0)
 81027a6:	4b19      	ldr	r3, [pc, #100]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d10e      	bne.n	81027cc <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81027ae:	4b18      	ldr	r3, [pc, #96]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 81027b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81027b4:	4a16      	ldr	r2, [pc, #88]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 81027b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81027ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81027be:	4b14      	ldr	r3, [pc, #80]	@ (8102810 <HAL_SAI_MspInit+0x160>)
 81027c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81027c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81027c8:	60bb      	str	r3, [r7, #8]
 81027ca:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 81027cc:	4b0f      	ldr	r3, [pc, #60]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	3301      	adds	r3, #1
 81027d2:	4a0e      	ldr	r2, [pc, #56]	@ (810280c <HAL_SAI_MspInit+0x15c>)
 81027d4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81027d6:	2308      	movs	r3, #8
 81027d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027dc:	2302      	movs	r3, #2
 81027de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027e2:	2300      	movs	r3, #0
 81027e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027e8:	2300      	movs	r3, #0
 81027ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81027ee:	2306      	movs	r3, #6
 81027f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 81027f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81027f8:	4619      	mov	r1, r3
 81027fa:	4806      	ldr	r0, [pc, #24]	@ (8102814 <HAL_SAI_MspInit+0x164>)
 81027fc:	f002 fedc 	bl	81055b8 <HAL_GPIO_Init>

    }
}
 8102800:	bf00      	nop
 8102802:	37f0      	adds	r7, #240	@ 0xf0
 8102804:	46bd      	mov	sp, r7
 8102806:	bd80      	pop	{r7, pc}
 8102808:	40015804 	.word	0x40015804
 810280c:	10000e9c 	.word	0x10000e9c
 8102810:	58024400 	.word	0x58024400
 8102814:	58021000 	.word	0x58021000
 8102818:	58021800 	.word	0x58021800
 810281c:	40015824 	.word	0x40015824

08102820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102820:	b480      	push	{r7}
 8102822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102824:	bf00      	nop
 8102826:	e7fd      	b.n	8102824 <NMI_Handler+0x4>

08102828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102828:	b480      	push	{r7}
 810282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810282c:	bf00      	nop
 810282e:	e7fd      	b.n	810282c <HardFault_Handler+0x4>

08102830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102830:	b480      	push	{r7}
 8102832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102834:	bf00      	nop
 8102836:	e7fd      	b.n	8102834 <MemManage_Handler+0x4>

08102838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102838:	b480      	push	{r7}
 810283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810283c:	bf00      	nop
 810283e:	e7fd      	b.n	810283c <BusFault_Handler+0x4>

08102840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102840:	b480      	push	{r7}
 8102842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102844:	bf00      	nop
 8102846:	e7fd      	b.n	8102844 <UsageFault_Handler+0x4>

08102848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102848:	b480      	push	{r7}
 810284a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810284c:	bf00      	nop
 810284e:	46bd      	mov	sp, r7
 8102850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102854:	4770      	bx	lr

08102856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102856:	b480      	push	{r7}
 8102858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810285a:	bf00      	nop
 810285c:	46bd      	mov	sp, r7
 810285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102862:	4770      	bx	lr

08102864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102864:	b480      	push	{r7}
 8102866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102868:	bf00      	nop
 810286a:	46bd      	mov	sp, r7
 810286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102870:	4770      	bx	lr

08102872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102872:	b580      	push	{r7, lr}
 8102874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102876:	f000 f977 	bl	8102b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810287a:	bf00      	nop
 810287c:	bd80      	pop	{r7, pc}
	...

08102880 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102880:	b580      	push	{r7, lr}
 8102882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102884:	4802      	ldr	r0, [pc, #8]	@ (8102890 <CEC_IRQHandler+0x10>)
 8102886:	f001 faaf 	bl	8103de8 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810288a:	bf00      	nop
 810288c:	bd80      	pop	{r7, pc}
 810288e:	bf00      	nop
 8102890:	100002f8 	.word	0x100002f8

08102894 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102894:	b580      	push	{r7, lr}
 8102896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102898:	f003 f8d2 	bl	8105a40 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810289c:	bf00      	nop
 810289e:	bd80      	pop	{r7, pc}

081028a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81028a0:	b580      	push	{r7, lr}
 81028a2:	b086      	sub	sp, #24
 81028a4:	af00      	add	r7, sp, #0
 81028a6:	60f8      	str	r0, [r7, #12]
 81028a8:	60b9      	str	r1, [r7, #8]
 81028aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81028ac:	2300      	movs	r3, #0
 81028ae:	617b      	str	r3, [r7, #20]
 81028b0:	e00a      	b.n	81028c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81028b2:	f3af 8000 	nop.w
 81028b6:	4601      	mov	r1, r0
 81028b8:	68bb      	ldr	r3, [r7, #8]
 81028ba:	1c5a      	adds	r2, r3, #1
 81028bc:	60ba      	str	r2, [r7, #8]
 81028be:	b2ca      	uxtb	r2, r1
 81028c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81028c2:	697b      	ldr	r3, [r7, #20]
 81028c4:	3301      	adds	r3, #1
 81028c6:	617b      	str	r3, [r7, #20]
 81028c8:	697a      	ldr	r2, [r7, #20]
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	429a      	cmp	r2, r3
 81028ce:	dbf0      	blt.n	81028b2 <_read+0x12>
  }

  return len;
 81028d0:	687b      	ldr	r3, [r7, #4]
}
 81028d2:	4618      	mov	r0, r3
 81028d4:	3718      	adds	r7, #24
 81028d6:	46bd      	mov	sp, r7
 81028d8:	bd80      	pop	{r7, pc}

081028da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81028da:	b580      	push	{r7, lr}
 81028dc:	b086      	sub	sp, #24
 81028de:	af00      	add	r7, sp, #0
 81028e0:	60f8      	str	r0, [r7, #12]
 81028e2:	60b9      	str	r1, [r7, #8]
 81028e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81028e6:	2300      	movs	r3, #0
 81028e8:	617b      	str	r3, [r7, #20]
 81028ea:	e009      	b.n	8102900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81028ec:	68bb      	ldr	r3, [r7, #8]
 81028ee:	1c5a      	adds	r2, r3, #1
 81028f0:	60ba      	str	r2, [r7, #8]
 81028f2:	781b      	ldrb	r3, [r3, #0]
 81028f4:	4618      	mov	r0, r3
 81028f6:	f7fe fdfd 	bl	81014f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81028fa:	697b      	ldr	r3, [r7, #20]
 81028fc:	3301      	adds	r3, #1
 81028fe:	617b      	str	r3, [r7, #20]
 8102900:	697a      	ldr	r2, [r7, #20]
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	429a      	cmp	r2, r3
 8102906:	dbf1      	blt.n	81028ec <_write+0x12>
  }
  return len;
 8102908:	687b      	ldr	r3, [r7, #4]
}
 810290a:	4618      	mov	r0, r3
 810290c:	3718      	adds	r7, #24
 810290e:	46bd      	mov	sp, r7
 8102910:	bd80      	pop	{r7, pc}

08102912 <_close>:

int _close(int file)
{
 8102912:	b480      	push	{r7}
 8102914:	b083      	sub	sp, #12
 8102916:	af00      	add	r7, sp, #0
 8102918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810291a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810291e:	4618      	mov	r0, r3
 8102920:	370c      	adds	r7, #12
 8102922:	46bd      	mov	sp, r7
 8102924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102928:	4770      	bx	lr

0810292a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810292a:	b480      	push	{r7}
 810292c:	b083      	sub	sp, #12
 810292e:	af00      	add	r7, sp, #0
 8102930:	6078      	str	r0, [r7, #4]
 8102932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102934:	683b      	ldr	r3, [r7, #0]
 8102936:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810293a:	605a      	str	r2, [r3, #4]
  return 0;
 810293c:	2300      	movs	r3, #0
}
 810293e:	4618      	mov	r0, r3
 8102940:	370c      	adds	r7, #12
 8102942:	46bd      	mov	sp, r7
 8102944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102948:	4770      	bx	lr

0810294a <_isatty>:

int _isatty(int file)
{
 810294a:	b480      	push	{r7}
 810294c:	b083      	sub	sp, #12
 810294e:	af00      	add	r7, sp, #0
 8102950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102952:	2301      	movs	r3, #1
}
 8102954:	4618      	mov	r0, r3
 8102956:	370c      	adds	r7, #12
 8102958:	46bd      	mov	sp, r7
 810295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810295e:	4770      	bx	lr

08102960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102960:	b480      	push	{r7}
 8102962:	b085      	sub	sp, #20
 8102964:	af00      	add	r7, sp, #0
 8102966:	60f8      	str	r0, [r7, #12]
 8102968:	60b9      	str	r1, [r7, #8]
 810296a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810296c:	2300      	movs	r3, #0
}
 810296e:	4618      	mov	r0, r3
 8102970:	3714      	adds	r7, #20
 8102972:	46bd      	mov	sp, r7
 8102974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102978:	4770      	bx	lr
	...

0810297c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810297c:	b580      	push	{r7, lr}
 810297e:	b086      	sub	sp, #24
 8102980:	af00      	add	r7, sp, #0
 8102982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102984:	4a14      	ldr	r2, [pc, #80]	@ (81029d8 <_sbrk+0x5c>)
 8102986:	4b15      	ldr	r3, [pc, #84]	@ (81029dc <_sbrk+0x60>)
 8102988:	1ad3      	subs	r3, r2, r3
 810298a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810298c:	697b      	ldr	r3, [r7, #20]
 810298e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102990:	4b13      	ldr	r3, [pc, #76]	@ (81029e0 <_sbrk+0x64>)
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	2b00      	cmp	r3, #0
 8102996:	d102      	bne.n	810299e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102998:	4b11      	ldr	r3, [pc, #68]	@ (81029e0 <_sbrk+0x64>)
 810299a:	4a12      	ldr	r2, [pc, #72]	@ (81029e4 <_sbrk+0x68>)
 810299c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810299e:	4b10      	ldr	r3, [pc, #64]	@ (81029e0 <_sbrk+0x64>)
 81029a0:	681a      	ldr	r2, [r3, #0]
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	4413      	add	r3, r2
 81029a6:	693a      	ldr	r2, [r7, #16]
 81029a8:	429a      	cmp	r2, r3
 81029aa:	d207      	bcs.n	81029bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 81029ac:	f00b fd70 	bl	810e490 <__errno>
 81029b0:	4603      	mov	r3, r0
 81029b2:	220c      	movs	r2, #12
 81029b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81029b6:	f04f 33ff 	mov.w	r3, #4294967295
 81029ba:	e009      	b.n	81029d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81029bc:	4b08      	ldr	r3, [pc, #32]	@ (81029e0 <_sbrk+0x64>)
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81029c2:	4b07      	ldr	r3, [pc, #28]	@ (81029e0 <_sbrk+0x64>)
 81029c4:	681a      	ldr	r2, [r3, #0]
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	4413      	add	r3, r2
 81029ca:	4a05      	ldr	r2, [pc, #20]	@ (81029e0 <_sbrk+0x64>)
 81029cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81029ce:	68fb      	ldr	r3, [r7, #12]
}
 81029d0:	4618      	mov	r0, r3
 81029d2:	3718      	adds	r7, #24
 81029d4:	46bd      	mov	sp, r7
 81029d6:	bd80      	pop	{r7, pc}
 81029d8:	10048000 	.word	0x10048000
 81029dc:	00000400 	.word	0x00000400
 81029e0:	10000ea0 	.word	0x10000ea0
 81029e4:	10000ff8 	.word	0x10000ff8

081029e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81029e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8102a24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81029ec:	f7fd fe22 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81029f0:	f7fd fe08 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81029f4:	480c      	ldr	r0, [pc, #48]	@ (8102a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81029f6:	490d      	ldr	r1, [pc, #52]	@ (8102a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81029f8:	4a0d      	ldr	r2, [pc, #52]	@ (8102a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81029fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81029fc:	e002      	b.n	8102a04 <LoopCopyDataInit>

081029fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81029fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102a02:	3304      	adds	r3, #4

08102a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102a08:	d3f9      	bcc.n	81029fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8102a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8102a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102a10:	e001      	b.n	8102a16 <LoopFillZerobss>

08102a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102a14:	3204      	adds	r2, #4

08102a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102a18:	d3fb      	bcc.n	8102a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102a1a:	f00b fd3f 	bl	810e49c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102a1e:	f7fd fe21 	bl	8100664 <main>
  bx  lr
 8102a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102a24:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102a28:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102a2c:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8102a30:	0810e9e8 	.word	0x0810e9e8
  ldr r2, =_sbss
 8102a34:	1000012c 	.word	0x1000012c
  ldr r4, =_ebss
 8102a38:	10000ff4 	.word	0x10000ff4

08102a3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102a3c:	e7fe      	b.n	8102a3c <ADC3_IRQHandler>
	...

08102a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102a40:	b580      	push	{r7, lr}
 8102a42:	b082      	sub	sp, #8
 8102a44:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102a46:	4b28      	ldr	r3, [pc, #160]	@ (8102ae8 <HAL_Init+0xa8>)
 8102a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102a4c:	4a26      	ldr	r2, [pc, #152]	@ (8102ae8 <HAL_Init+0xa8>)
 8102a4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102a52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102a56:	4b24      	ldr	r3, [pc, #144]	@ (8102ae8 <HAL_Init+0xa8>)
 8102a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102a60:	603b      	str	r3, [r7, #0]
 8102a62:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a64:	4b21      	ldr	r3, [pc, #132]	@ (8102aec <HAL_Init+0xac>)
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102a6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102a70:	4a1e      	ldr	r2, [pc, #120]	@ (8102aec <HAL_Init+0xac>)
 8102a72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102a76:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102a78:	4b1c      	ldr	r3, [pc, #112]	@ (8102aec <HAL_Init+0xac>)
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8102aec <HAL_Init+0xac>)
 8102a7e:	f043 0301 	orr.w	r3, r3, #1
 8102a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a84:	2003      	movs	r0, #3
 8102a86:	f001 fb7b 	bl	8104180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a8a:	f003 fa7f 	bl	8105f8c <HAL_RCC_GetSysClockFreq>
 8102a8e:	4602      	mov	r2, r0
 8102a90:	4b15      	ldr	r3, [pc, #84]	@ (8102ae8 <HAL_Init+0xa8>)
 8102a92:	699b      	ldr	r3, [r3, #24]
 8102a94:	0a1b      	lsrs	r3, r3, #8
 8102a96:	f003 030f 	and.w	r3, r3, #15
 8102a9a:	4915      	ldr	r1, [pc, #84]	@ (8102af0 <HAL_Init+0xb0>)
 8102a9c:	5ccb      	ldrb	r3, [r1, r3]
 8102a9e:	f003 031f 	and.w	r3, r3, #31
 8102aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8102aa6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8102ae8 <HAL_Init+0xa8>)
 8102aaa:	699b      	ldr	r3, [r3, #24]
 8102aac:	f003 030f 	and.w	r3, r3, #15
 8102ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8102af0 <HAL_Init+0xb0>)
 8102ab2:	5cd3      	ldrb	r3, [r2, r3]
 8102ab4:	f003 031f 	and.w	r3, r3, #31
 8102ab8:	687a      	ldr	r2, [r7, #4]
 8102aba:	fa22 f303 	lsr.w	r3, r2, r3
 8102abe:	4a0d      	ldr	r2, [pc, #52]	@ (8102af4 <HAL_Init+0xb4>)
 8102ac0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8102af4 <HAL_Init+0xb4>)
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8102af8 <HAL_Init+0xb8>)
 8102ac8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102aca:	2000      	movs	r0, #0
 8102acc:	f000 f816 	bl	8102afc <HAL_InitTick>
 8102ad0:	4603      	mov	r3, r0
 8102ad2:	2b00      	cmp	r3, #0
 8102ad4:	d001      	beq.n	8102ada <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102ad6:	2301      	movs	r3, #1
 8102ad8:	e002      	b.n	8102ae0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102ada:	f7fe fd23 	bl	8101524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102ade:	2300      	movs	r3, #0
}
 8102ae0:	4618      	mov	r0, r3
 8102ae2:	3708      	adds	r7, #8
 8102ae4:	46bd      	mov	sp, r7
 8102ae6:	bd80      	pop	{r7, pc}
 8102ae8:	58024400 	.word	0x58024400
 8102aec:	40024400 	.word	0x40024400
 8102af0:	0810e998 	.word	0x0810e998
 8102af4:	10000004 	.word	0x10000004
 8102af8:	10000000 	.word	0x10000000

08102afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102afc:	b580      	push	{r7, lr}
 8102afe:	b082      	sub	sp, #8
 8102b00:	af00      	add	r7, sp, #0
 8102b02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102b04:	4b15      	ldr	r3, [pc, #84]	@ (8102b5c <HAL_InitTick+0x60>)
 8102b06:	781b      	ldrb	r3, [r3, #0]
 8102b08:	2b00      	cmp	r3, #0
 8102b0a:	d101      	bne.n	8102b10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102b0c:	2301      	movs	r3, #1
 8102b0e:	e021      	b.n	8102b54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102b10:	4b13      	ldr	r3, [pc, #76]	@ (8102b60 <HAL_InitTick+0x64>)
 8102b12:	681a      	ldr	r2, [r3, #0]
 8102b14:	4b11      	ldr	r3, [pc, #68]	@ (8102b5c <HAL_InitTick+0x60>)
 8102b16:	781b      	ldrb	r3, [r3, #0]
 8102b18:	4619      	mov	r1, r3
 8102b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8102b26:	4618      	mov	r0, r3
 8102b28:	f001 fb5d 	bl	81041e6 <HAL_SYSTICK_Config>
 8102b2c:	4603      	mov	r3, r0
 8102b2e:	2b00      	cmp	r3, #0
 8102b30:	d001      	beq.n	8102b36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102b32:	2301      	movs	r3, #1
 8102b34:	e00e      	b.n	8102b54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	2b0f      	cmp	r3, #15
 8102b3a:	d80a      	bhi.n	8102b52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102b3c:	2200      	movs	r2, #0
 8102b3e:	6879      	ldr	r1, [r7, #4]
 8102b40:	f04f 30ff 	mov.w	r0, #4294967295
 8102b44:	f001 fb27 	bl	8104196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102b48:	4a06      	ldr	r2, [pc, #24]	@ (8102b64 <HAL_InitTick+0x68>)
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102b4e:	2300      	movs	r3, #0
 8102b50:	e000      	b.n	8102b54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102b52:	2301      	movs	r3, #1
}
 8102b54:	4618      	mov	r0, r3
 8102b56:	3708      	adds	r7, #8
 8102b58:	46bd      	mov	sp, r7
 8102b5a:	bd80      	pop	{r7, pc}
 8102b5c:	1000000c 	.word	0x1000000c
 8102b60:	10000000 	.word	0x10000000
 8102b64:	10000008 	.word	0x10000008

08102b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102b68:	b480      	push	{r7}
 8102b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102b6c:	4b06      	ldr	r3, [pc, #24]	@ (8102b88 <HAL_IncTick+0x20>)
 8102b6e:	781b      	ldrb	r3, [r3, #0]
 8102b70:	461a      	mov	r2, r3
 8102b72:	4b06      	ldr	r3, [pc, #24]	@ (8102b8c <HAL_IncTick+0x24>)
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4413      	add	r3, r2
 8102b78:	4a04      	ldr	r2, [pc, #16]	@ (8102b8c <HAL_IncTick+0x24>)
 8102b7a:	6013      	str	r3, [r2, #0]
}
 8102b7c:	bf00      	nop
 8102b7e:	46bd      	mov	sp, r7
 8102b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b84:	4770      	bx	lr
 8102b86:	bf00      	nop
 8102b88:	1000000c 	.word	0x1000000c
 8102b8c:	10000ea4 	.word	0x10000ea4

08102b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102b90:	b480      	push	{r7}
 8102b92:	af00      	add	r7, sp, #0
  return uwTick;
 8102b94:	4b03      	ldr	r3, [pc, #12]	@ (8102ba4 <HAL_GetTick+0x14>)
 8102b96:	681b      	ldr	r3, [r3, #0]
}
 8102b98:	4618      	mov	r0, r3
 8102b9a:	46bd      	mov	sp, r7
 8102b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba0:	4770      	bx	lr
 8102ba2:	bf00      	nop
 8102ba4:	10000ea4 	.word	0x10000ea4

08102ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102ba8:	b580      	push	{r7, lr}
 8102baa:	b084      	sub	sp, #16
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102bb0:	f7ff ffee 	bl	8102b90 <HAL_GetTick>
 8102bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102bba:	68fb      	ldr	r3, [r7, #12]
 8102bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bc0:	d005      	beq.n	8102bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8102bec <HAL_Delay+0x44>)
 8102bc4:	781b      	ldrb	r3, [r3, #0]
 8102bc6:	461a      	mov	r2, r3
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	4413      	add	r3, r2
 8102bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102bce:	bf00      	nop
 8102bd0:	f7ff ffde 	bl	8102b90 <HAL_GetTick>
 8102bd4:	4602      	mov	r2, r0
 8102bd6:	68bb      	ldr	r3, [r7, #8]
 8102bd8:	1ad3      	subs	r3, r2, r3
 8102bda:	68fa      	ldr	r2, [r7, #12]
 8102bdc:	429a      	cmp	r2, r3
 8102bde:	d8f7      	bhi.n	8102bd0 <HAL_Delay+0x28>
  {
  }
}
 8102be0:	bf00      	nop
 8102be2:	bf00      	nop
 8102be4:	3710      	adds	r7, #16
 8102be6:	46bd      	mov	sp, r7
 8102be8:	bd80      	pop	{r7, pc}
 8102bea:	bf00      	nop
 8102bec:	1000000c 	.word	0x1000000c

08102bf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102bf0:	b480      	push	{r7}
 8102bf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102bf4:	4b03      	ldr	r3, [pc, #12]	@ (8102c04 <HAL_GetREVID+0x14>)
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	0c1b      	lsrs	r3, r3, #16
}
 8102bfa:	4618      	mov	r0, r3
 8102bfc:	46bd      	mov	sp, r7
 8102bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c02:	4770      	bx	lr
 8102c04:	5c001000 	.word	0x5c001000

08102c08 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102c08:	b480      	push	{r7}
 8102c0a:	b083      	sub	sp, #12
 8102c0c:	af00      	add	r7, sp, #0
 8102c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102c10:	4b06      	ldr	r3, [pc, #24]	@ (8102c2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102c12:	685b      	ldr	r3, [r3, #4]
 8102c14:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8102c18:	4904      	ldr	r1, [pc, #16]	@ (8102c2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	4313      	orrs	r3, r2
 8102c1e:	604b      	str	r3, [r1, #4]
}
 8102c20:	bf00      	nop
 8102c22:	370c      	adds	r7, #12
 8102c24:	46bd      	mov	sp, r7
 8102c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c2a:	4770      	bx	lr
 8102c2c:	58000400 	.word	0x58000400

08102c30 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102c30:	b480      	push	{r7}
 8102c32:	b083      	sub	sp, #12
 8102c34:	af00      	add	r7, sp, #0
 8102c36:	6078      	str	r0, [r7, #4]
 8102c38:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102c3a:	4b07      	ldr	r3, [pc, #28]	@ (8102c58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102c3c:	685a      	ldr	r2, [r3, #4]
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	43db      	mvns	r3, r3
 8102c42:	401a      	ands	r2, r3
 8102c44:	4904      	ldr	r1, [pc, #16]	@ (8102c58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102c46:	683b      	ldr	r3, [r7, #0]
 8102c48:	4313      	orrs	r3, r2
 8102c4a:	604b      	str	r3, [r1, #4]
}
 8102c4c:	bf00      	nop
 8102c4e:	370c      	adds	r7, #12
 8102c50:	46bd      	mov	sp, r7
 8102c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c56:	4770      	bx	lr
 8102c58:	58000400 	.word	0x58000400

08102c5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102c5c:	b480      	push	{r7}
 8102c5e:	b083      	sub	sp, #12
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	6078      	str	r0, [r7, #4]
 8102c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	689b      	ldr	r3, [r3, #8]
 8102c6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102c6e:	683b      	ldr	r3, [r7, #0]
 8102c70:	431a      	orrs	r2, r3
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	609a      	str	r2, [r3, #8]
}
 8102c76:	bf00      	nop
 8102c78:	370c      	adds	r7, #12
 8102c7a:	46bd      	mov	sp, r7
 8102c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c80:	4770      	bx	lr

08102c82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102c82:	b480      	push	{r7}
 8102c84:	b083      	sub	sp, #12
 8102c86:	af00      	add	r7, sp, #0
 8102c88:	6078      	str	r0, [r7, #4]
 8102c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	689b      	ldr	r3, [r3, #8]
 8102c90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102c94:	683b      	ldr	r3, [r7, #0]
 8102c96:	431a      	orrs	r2, r3
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	609a      	str	r2, [r3, #8]
}
 8102c9c:	bf00      	nop
 8102c9e:	370c      	adds	r7, #12
 8102ca0:	46bd      	mov	sp, r7
 8102ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ca6:	4770      	bx	lr

08102ca8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102ca8:	b480      	push	{r7}
 8102caa:	b083      	sub	sp, #12
 8102cac:	af00      	add	r7, sp, #0
 8102cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	689b      	ldr	r3, [r3, #8]
 8102cb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102cb8:	4618      	mov	r0, r3
 8102cba:	370c      	adds	r7, #12
 8102cbc:	46bd      	mov	sp, r7
 8102cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc2:	4770      	bx	lr

08102cc4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8102cc4:	b480      	push	{r7}
 8102cc6:	b087      	sub	sp, #28
 8102cc8:	af00      	add	r7, sp, #0
 8102cca:	6078      	str	r0, [r7, #4]
 8102ccc:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8102cce:	683b      	ldr	r3, [r7, #0]
 8102cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d107      	bne.n	8102ce8 <LL_ADC_SetChannelPreselection+0x24>
 8102cd8:	683b      	ldr	r3, [r7, #0]
 8102cda:	0e9b      	lsrs	r3, r3, #26
 8102cdc:	f003 031f 	and.w	r3, r3, #31
 8102ce0:	2201      	movs	r2, #1
 8102ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8102ce6:	e015      	b.n	8102d14 <LL_ADC_SetChannelPreselection+0x50>
 8102ce8:	683b      	ldr	r3, [r7, #0]
 8102cea:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cec:	693b      	ldr	r3, [r7, #16]
 8102cee:	fa93 f3a3 	rbit	r3, r3
 8102cf2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102cf8:	697b      	ldr	r3, [r7, #20]
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d101      	bne.n	8102d02 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8102cfe:	2320      	movs	r3, #32
 8102d00:	e003      	b.n	8102d0a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8102d02:	697b      	ldr	r3, [r7, #20]
 8102d04:	fab3 f383 	clz	r3, r3
 8102d08:	b2db      	uxtb	r3, r3
 8102d0a:	f003 031f 	and.w	r3, r3, #31
 8102d0e:	2201      	movs	r2, #1
 8102d10:	fa02 f303 	lsl.w	r3, r2, r3
 8102d14:	687a      	ldr	r2, [r7, #4]
 8102d16:	69d2      	ldr	r2, [r2, #28]
 8102d18:	431a      	orrs	r2, r3
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8102d1e:	bf00      	nop
 8102d20:	371c      	adds	r7, #28
 8102d22:	46bd      	mov	sp, r7
 8102d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d28:	4770      	bx	lr

08102d2a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102d2a:	b480      	push	{r7}
 8102d2c:	b087      	sub	sp, #28
 8102d2e:	af00      	add	r7, sp, #0
 8102d30:	60f8      	str	r0, [r7, #12]
 8102d32:	60b9      	str	r1, [r7, #8]
 8102d34:	607a      	str	r2, [r7, #4]
 8102d36:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d38:	68fb      	ldr	r3, [r7, #12]
 8102d3a:	3360      	adds	r3, #96	@ 0x60
 8102d3c:	461a      	mov	r2, r3
 8102d3e:	68bb      	ldr	r3, [r7, #8]
 8102d40:	009b      	lsls	r3, r3, #2
 8102d42:	4413      	add	r3, r2
 8102d44:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102d46:	697b      	ldr	r3, [r7, #20]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102d54:	683b      	ldr	r3, [r7, #0]
 8102d56:	430b      	orrs	r3, r1
 8102d58:	431a      	orrs	r2, r3
 8102d5a:	697b      	ldr	r3, [r7, #20]
 8102d5c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102d5e:	bf00      	nop
 8102d60:	371c      	adds	r7, #28
 8102d62:	46bd      	mov	sp, r7
 8102d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d68:	4770      	bx	lr

08102d6a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102d6a:	b480      	push	{r7}
 8102d6c:	b085      	sub	sp, #20
 8102d6e:	af00      	add	r7, sp, #0
 8102d70:	60f8      	str	r0, [r7, #12]
 8102d72:	60b9      	str	r1, [r7, #8]
 8102d74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	691b      	ldr	r3, [r3, #16]
 8102d7a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102d7e:	68bb      	ldr	r3, [r7, #8]
 8102d80:	f003 031f 	and.w	r3, r3, #31
 8102d84:	6879      	ldr	r1, [r7, #4]
 8102d86:	fa01 f303 	lsl.w	r3, r1, r3
 8102d8a:	431a      	orrs	r2, r3
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	611a      	str	r2, [r3, #16]
}
 8102d90:	bf00      	nop
 8102d92:	3714      	adds	r7, #20
 8102d94:	46bd      	mov	sp, r7
 8102d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9a:	4770      	bx	lr

08102d9c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102d9c:	b480      	push	{r7}
 8102d9e:	b087      	sub	sp, #28
 8102da0:	af00      	add	r7, sp, #0
 8102da2:	60f8      	str	r0, [r7, #12]
 8102da4:	60b9      	str	r1, [r7, #8]
 8102da6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102da8:	68fb      	ldr	r3, [r7, #12]
 8102daa:	3360      	adds	r3, #96	@ 0x60
 8102dac:	461a      	mov	r2, r3
 8102dae:	68bb      	ldr	r3, [r7, #8]
 8102db0:	009b      	lsls	r3, r3, #2
 8102db2:	4413      	add	r3, r2
 8102db4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102db6:	697b      	ldr	r3, [r7, #20]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	431a      	orrs	r2, r3
 8102dc2:	697b      	ldr	r3, [r7, #20]
 8102dc4:	601a      	str	r2, [r3, #0]
  }
}
 8102dc6:	bf00      	nop
 8102dc8:	371c      	adds	r7, #28
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd0:	4770      	bx	lr

08102dd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102dd2:	b480      	push	{r7}
 8102dd4:	b087      	sub	sp, #28
 8102dd6:	af00      	add	r7, sp, #0
 8102dd8:	60f8      	str	r0, [r7, #12]
 8102dda:	60b9      	str	r1, [r7, #8]
 8102ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	3330      	adds	r3, #48	@ 0x30
 8102de2:	461a      	mov	r2, r3
 8102de4:	68bb      	ldr	r3, [r7, #8]
 8102de6:	0a1b      	lsrs	r3, r3, #8
 8102de8:	009b      	lsls	r3, r3, #2
 8102dea:	f003 030c 	and.w	r3, r3, #12
 8102dee:	4413      	add	r3, r2
 8102df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102df2:	697b      	ldr	r3, [r7, #20]
 8102df4:	681a      	ldr	r2, [r3, #0]
 8102df6:	68bb      	ldr	r3, [r7, #8]
 8102df8:	f003 031f 	and.w	r3, r3, #31
 8102dfc:	211f      	movs	r1, #31
 8102dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8102e02:	43db      	mvns	r3, r3
 8102e04:	401a      	ands	r2, r3
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	0e9b      	lsrs	r3, r3, #26
 8102e0a:	f003 011f 	and.w	r1, r3, #31
 8102e0e:	68bb      	ldr	r3, [r7, #8]
 8102e10:	f003 031f 	and.w	r3, r3, #31
 8102e14:	fa01 f303 	lsl.w	r3, r1, r3
 8102e18:	431a      	orrs	r2, r3
 8102e1a:	697b      	ldr	r3, [r7, #20]
 8102e1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102e1e:	bf00      	nop
 8102e20:	371c      	adds	r7, #28
 8102e22:	46bd      	mov	sp, r7
 8102e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e28:	4770      	bx	lr

08102e2a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102e2a:	b480      	push	{r7}
 8102e2c:	b087      	sub	sp, #28
 8102e2e:	af00      	add	r7, sp, #0
 8102e30:	60f8      	str	r0, [r7, #12]
 8102e32:	60b9      	str	r1, [r7, #8]
 8102e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102e36:	68fb      	ldr	r3, [r7, #12]
 8102e38:	3314      	adds	r3, #20
 8102e3a:	461a      	mov	r2, r3
 8102e3c:	68bb      	ldr	r3, [r7, #8]
 8102e3e:	0e5b      	lsrs	r3, r3, #25
 8102e40:	009b      	lsls	r3, r3, #2
 8102e42:	f003 0304 	and.w	r3, r3, #4
 8102e46:	4413      	add	r3, r2
 8102e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102e4a:	697b      	ldr	r3, [r7, #20]
 8102e4c:	681a      	ldr	r2, [r3, #0]
 8102e4e:	68bb      	ldr	r3, [r7, #8]
 8102e50:	0d1b      	lsrs	r3, r3, #20
 8102e52:	f003 031f 	and.w	r3, r3, #31
 8102e56:	2107      	movs	r1, #7
 8102e58:	fa01 f303 	lsl.w	r3, r1, r3
 8102e5c:	43db      	mvns	r3, r3
 8102e5e:	401a      	ands	r2, r3
 8102e60:	68bb      	ldr	r3, [r7, #8]
 8102e62:	0d1b      	lsrs	r3, r3, #20
 8102e64:	f003 031f 	and.w	r3, r3, #31
 8102e68:	6879      	ldr	r1, [r7, #4]
 8102e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8102e6e:	431a      	orrs	r2, r3
 8102e70:	697b      	ldr	r3, [r7, #20]
 8102e72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102e74:	bf00      	nop
 8102e76:	371c      	adds	r7, #28
 8102e78:	46bd      	mov	sp, r7
 8102e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7e:	4770      	bx	lr

08102e80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102e80:	b480      	push	{r7}
 8102e82:	b085      	sub	sp, #20
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	60f8      	str	r0, [r7, #12]
 8102e88:	60b9      	str	r1, [r7, #8]
 8102e8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102e8c:	68fb      	ldr	r3, [r7, #12]
 8102e8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102e92:	68bb      	ldr	r3, [r7, #8]
 8102e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e98:	43db      	mvns	r3, r3
 8102e9a:	401a      	ands	r2, r3
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	f003 0318 	and.w	r3, r3, #24
 8102ea2:	4908      	ldr	r1, [pc, #32]	@ (8102ec4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102ea4:	40d9      	lsrs	r1, r3
 8102ea6:	68bb      	ldr	r3, [r7, #8]
 8102ea8:	400b      	ands	r3, r1
 8102eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102eae:	431a      	orrs	r2, r3
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102eb6:	bf00      	nop
 8102eb8:	3714      	adds	r7, #20
 8102eba:	46bd      	mov	sp, r7
 8102ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec0:	4770      	bx	lr
 8102ec2:	bf00      	nop
 8102ec4:	000fffff 	.word	0x000fffff

08102ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102ec8:	b480      	push	{r7}
 8102eca:	b083      	sub	sp, #12
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	689b      	ldr	r3, [r3, #8]
 8102ed4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8102ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102edc:	687a      	ldr	r2, [r7, #4]
 8102ede:	6093      	str	r3, [r2, #8]
}
 8102ee0:	bf00      	nop
 8102ee2:	370c      	adds	r7, #12
 8102ee4:	46bd      	mov	sp, r7
 8102ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eea:	4770      	bx	lr

08102eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8102eec:	b480      	push	{r7}
 8102eee:	b083      	sub	sp, #12
 8102ef0:	af00      	add	r7, sp, #0
 8102ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	689b      	ldr	r3, [r3, #8]
 8102ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f00:	d101      	bne.n	8102f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102f02:	2301      	movs	r3, #1
 8102f04:	e000      	b.n	8102f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102f06:	2300      	movs	r3, #0
}
 8102f08:	4618      	mov	r0, r3
 8102f0a:	370c      	adds	r7, #12
 8102f0c:	46bd      	mov	sp, r7
 8102f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f12:	4770      	bx	lr

08102f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102f14:	b480      	push	{r7}
 8102f16:	b083      	sub	sp, #12
 8102f18:	af00      	add	r7, sp, #0
 8102f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	689b      	ldr	r3, [r3, #8]
 8102f20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102f28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102f30:	bf00      	nop
 8102f32:	370c      	adds	r7, #12
 8102f34:	46bd      	mov	sp, r7
 8102f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f3a:	4770      	bx	lr

08102f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8102f3c:	b480      	push	{r7}
 8102f3e:	b083      	sub	sp, #12
 8102f40:	af00      	add	r7, sp, #0
 8102f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	689b      	ldr	r3, [r3, #8]
 8102f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102f50:	d101      	bne.n	8102f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102f52:	2301      	movs	r3, #1
 8102f54:	e000      	b.n	8102f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102f56:	2300      	movs	r3, #0
}
 8102f58:	4618      	mov	r0, r3
 8102f5a:	370c      	adds	r7, #12
 8102f5c:	46bd      	mov	sp, r7
 8102f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f62:	4770      	bx	lr

08102f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8102f64:	b480      	push	{r7}
 8102f66:	b083      	sub	sp, #12
 8102f68:	af00      	add	r7, sp, #0
 8102f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	689b      	ldr	r3, [r3, #8]
 8102f70:	f003 0301 	and.w	r3, r3, #1
 8102f74:	2b01      	cmp	r3, #1
 8102f76:	d101      	bne.n	8102f7c <LL_ADC_IsEnabled+0x18>
 8102f78:	2301      	movs	r3, #1
 8102f7a:	e000      	b.n	8102f7e <LL_ADC_IsEnabled+0x1a>
 8102f7c:	2300      	movs	r3, #0
}
 8102f7e:	4618      	mov	r0, r3
 8102f80:	370c      	adds	r7, #12
 8102f82:	46bd      	mov	sp, r7
 8102f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f88:	4770      	bx	lr

08102f8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102f8a:	b480      	push	{r7}
 8102f8c:	b083      	sub	sp, #12
 8102f8e:	af00      	add	r7, sp, #0
 8102f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	689b      	ldr	r3, [r3, #8]
 8102f96:	f003 0304 	and.w	r3, r3, #4
 8102f9a:	2b04      	cmp	r3, #4
 8102f9c:	d101      	bne.n	8102fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102f9e:	2301      	movs	r3, #1
 8102fa0:	e000      	b.n	8102fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102fa2:	2300      	movs	r3, #0
}
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	370c      	adds	r7, #12
 8102fa8:	46bd      	mov	sp, r7
 8102faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fae:	4770      	bx	lr

08102fb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102fb0:	b480      	push	{r7}
 8102fb2:	b083      	sub	sp, #12
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	689b      	ldr	r3, [r3, #8]
 8102fbc:	f003 0308 	and.w	r3, r3, #8
 8102fc0:	2b08      	cmp	r3, #8
 8102fc2:	d101      	bne.n	8102fc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102fc4:	2301      	movs	r3, #1
 8102fc6:	e000      	b.n	8102fca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102fc8:	2300      	movs	r3, #0
}
 8102fca:	4618      	mov	r0, r3
 8102fcc:	370c      	adds	r7, #12
 8102fce:	46bd      	mov	sp, r7
 8102fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd4:	4770      	bx	lr
	...

08102fd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102fd8:	b590      	push	{r4, r7, lr}
 8102fda:	b089      	sub	sp, #36	@ 0x24
 8102fdc:	af00      	add	r7, sp, #0
 8102fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102fe0:	2300      	movs	r3, #0
 8102fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102fe4:	2300      	movs	r3, #0
 8102fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d101      	bne.n	8102ff2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102fee:	2301      	movs	r3, #1
 8102ff0:	e18f      	b.n	8103312 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	68db      	ldr	r3, [r3, #12]
 8102ff6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d109      	bne.n	8103014 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8103000:	6878      	ldr	r0, [r7, #4]
 8103002:	f7fe faaf 	bl	8101564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	2200      	movs	r2, #0
 810300a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	2200      	movs	r2, #0
 8103010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4618      	mov	r0, r3
 810301a:	f7ff ff67 	bl	8102eec <LL_ADC_IsDeepPowerDownEnabled>
 810301e:	4603      	mov	r3, r0
 8103020:	2b00      	cmp	r3, #0
 8103022:	d004      	beq.n	810302e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	4618      	mov	r0, r3
 810302a:	f7ff ff4d 	bl	8102ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	4618      	mov	r0, r3
 8103034:	f7ff ff82 	bl	8102f3c <LL_ADC_IsInternalRegulatorEnabled>
 8103038:	4603      	mov	r3, r0
 810303a:	2b00      	cmp	r3, #0
 810303c:	d114      	bne.n	8103068 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4618      	mov	r0, r3
 8103044:	f7ff ff66 	bl	8102f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103048:	4b88      	ldr	r3, [pc, #544]	@ (810326c <HAL_ADC_Init+0x294>)
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	099b      	lsrs	r3, r3, #6
 810304e:	4a88      	ldr	r2, [pc, #544]	@ (8103270 <HAL_ADC_Init+0x298>)
 8103050:	fba2 2303 	umull	r2, r3, r2, r3
 8103054:	099b      	lsrs	r3, r3, #6
 8103056:	3301      	adds	r3, #1
 8103058:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810305a:	e002      	b.n	8103062 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810305c:	68bb      	ldr	r3, [r7, #8]
 810305e:	3b01      	subs	r3, #1
 8103060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103062:	68bb      	ldr	r3, [r7, #8]
 8103064:	2b00      	cmp	r3, #0
 8103066:	d1f9      	bne.n	810305c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	4618      	mov	r0, r3
 810306e:	f7ff ff65 	bl	8102f3c <LL_ADC_IsInternalRegulatorEnabled>
 8103072:	4603      	mov	r3, r0
 8103074:	2b00      	cmp	r3, #0
 8103076:	d10d      	bne.n	8103094 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810307c:	f043 0210 	orr.w	r2, r3, #16
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103088:	f043 0201 	orr.w	r2, r3, #1
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8103090:	2301      	movs	r3, #1
 8103092:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	4618      	mov	r0, r3
 810309a:	f7ff ff76 	bl	8102f8a <LL_ADC_REG_IsConversionOngoing>
 810309e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030a4:	f003 0310 	and.w	r3, r3, #16
 81030a8:	2b00      	cmp	r3, #0
 81030aa:	f040 8129 	bne.w	8103300 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81030ae:	697b      	ldr	r3, [r7, #20]
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	f040 8125 	bne.w	8103300 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030ba:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81030be:	f043 0202 	orr.w	r2, r3, #2
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	4618      	mov	r0, r3
 81030cc:	f7ff ff4a 	bl	8102f64 <LL_ADC_IsEnabled>
 81030d0:	4603      	mov	r3, r0
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	d136      	bne.n	8103144 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a66      	ldr	r2, [pc, #408]	@ (8103274 <HAL_ADC_Init+0x29c>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d004      	beq.n	81030ea <HAL_ADC_Init+0x112>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a64      	ldr	r2, [pc, #400]	@ (8103278 <HAL_ADC_Init+0x2a0>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d10e      	bne.n	8103108 <HAL_ADC_Init+0x130>
 81030ea:	4862      	ldr	r0, [pc, #392]	@ (8103274 <HAL_ADC_Init+0x29c>)
 81030ec:	f7ff ff3a 	bl	8102f64 <LL_ADC_IsEnabled>
 81030f0:	4604      	mov	r4, r0
 81030f2:	4861      	ldr	r0, [pc, #388]	@ (8103278 <HAL_ADC_Init+0x2a0>)
 81030f4:	f7ff ff36 	bl	8102f64 <LL_ADC_IsEnabled>
 81030f8:	4603      	mov	r3, r0
 81030fa:	4323      	orrs	r3, r4
 81030fc:	2b00      	cmp	r3, #0
 81030fe:	bf0c      	ite	eq
 8103100:	2301      	moveq	r3, #1
 8103102:	2300      	movne	r3, #0
 8103104:	b2db      	uxtb	r3, r3
 8103106:	e008      	b.n	810311a <HAL_ADC_Init+0x142>
 8103108:	485c      	ldr	r0, [pc, #368]	@ (810327c <HAL_ADC_Init+0x2a4>)
 810310a:	f7ff ff2b 	bl	8102f64 <LL_ADC_IsEnabled>
 810310e:	4603      	mov	r3, r0
 8103110:	2b00      	cmp	r3, #0
 8103112:	bf0c      	ite	eq
 8103114:	2301      	moveq	r3, #1
 8103116:	2300      	movne	r3, #0
 8103118:	b2db      	uxtb	r3, r3
 810311a:	2b00      	cmp	r3, #0
 810311c:	d012      	beq.n	8103144 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a54      	ldr	r2, [pc, #336]	@ (8103274 <HAL_ADC_Init+0x29c>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d004      	beq.n	8103132 <HAL_ADC_Init+0x15a>
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	4a52      	ldr	r2, [pc, #328]	@ (8103278 <HAL_ADC_Init+0x2a0>)
 810312e:	4293      	cmp	r3, r2
 8103130:	d101      	bne.n	8103136 <HAL_ADC_Init+0x15e>
 8103132:	4a53      	ldr	r2, [pc, #332]	@ (8103280 <HAL_ADC_Init+0x2a8>)
 8103134:	e000      	b.n	8103138 <HAL_ADC_Init+0x160>
 8103136:	4a53      	ldr	r2, [pc, #332]	@ (8103284 <HAL_ADC_Init+0x2ac>)
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	685b      	ldr	r3, [r3, #4]
 810313c:	4619      	mov	r1, r3
 810313e:	4610      	mov	r0, r2
 8103140:	f7ff fd8c 	bl	8102c5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103144:	f7ff fd54 	bl	8102bf0 <HAL_GetREVID>
 8103148:	4603      	mov	r3, r0
 810314a:	f241 0203 	movw	r2, #4099	@ 0x1003
 810314e:	4293      	cmp	r3, r2
 8103150:	d914      	bls.n	810317c <HAL_ADC_Init+0x1a4>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	689b      	ldr	r3, [r3, #8]
 8103156:	2b10      	cmp	r3, #16
 8103158:	d110      	bne.n	810317c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	7d5b      	ldrb	r3, [r3, #21]
 810315e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103164:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810316a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	7f1b      	ldrb	r3, [r3, #28]
 8103170:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103172:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103174:	f043 030c 	orr.w	r3, r3, #12
 8103178:	61bb      	str	r3, [r7, #24]
 810317a:	e00d      	b.n	8103198 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	7d5b      	ldrb	r3, [r3, #21]
 8103180:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103186:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810318c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	7f1b      	ldrb	r3, [r3, #28]
 8103192:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103194:	4313      	orrs	r3, r2
 8103196:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	7f1b      	ldrb	r3, [r3, #28]
 810319c:	2b01      	cmp	r3, #1
 810319e:	d106      	bne.n	81031ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	6a1b      	ldr	r3, [r3, #32]
 81031a4:	3b01      	subs	r3, #1
 81031a6:	045b      	lsls	r3, r3, #17
 81031a8:	69ba      	ldr	r2, [r7, #24]
 81031aa:	4313      	orrs	r3, r2
 81031ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81031b2:	2b00      	cmp	r3, #0
 81031b4:	d009      	beq.n	81031ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81031ba:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81031c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81031c4:	69ba      	ldr	r2, [r7, #24]
 81031c6:	4313      	orrs	r3, r2
 81031c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	68da      	ldr	r2, [r3, #12]
 81031d0:	4b2d      	ldr	r3, [pc, #180]	@ (8103288 <HAL_ADC_Init+0x2b0>)
 81031d2:	4013      	ands	r3, r2
 81031d4:	687a      	ldr	r2, [r7, #4]
 81031d6:	6812      	ldr	r2, [r2, #0]
 81031d8:	69b9      	ldr	r1, [r7, #24]
 81031da:	430b      	orrs	r3, r1
 81031dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	4618      	mov	r0, r3
 81031e4:	f7ff fed1 	bl	8102f8a <LL_ADC_REG_IsConversionOngoing>
 81031e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	4618      	mov	r0, r3
 81031f0:	f7ff fede 	bl	8102fb0 <LL_ADC_INJ_IsConversionOngoing>
 81031f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81031f6:	693b      	ldr	r3, [r7, #16]
 81031f8:	2b00      	cmp	r3, #0
 81031fa:	d15f      	bne.n	81032bc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81031fc:	68fb      	ldr	r3, [r7, #12]
 81031fe:	2b00      	cmp	r3, #0
 8103200:	d15c      	bne.n	81032bc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	7d1b      	ldrb	r3, [r3, #20]
 8103206:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 810320c:	4313      	orrs	r3, r2
 810320e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103210:	687b      	ldr	r3, [r7, #4]
 8103212:	681b      	ldr	r3, [r3, #0]
 8103214:	68db      	ldr	r3, [r3, #12]
 8103216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810321a:	f023 0303 	bic.w	r3, r3, #3
 810321e:	687a      	ldr	r2, [r7, #4]
 8103220:	6812      	ldr	r2, [r2, #0]
 8103222:	69b9      	ldr	r1, [r7, #24]
 8103224:	430b      	orrs	r3, r1
 8103226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810322e:	2b01      	cmp	r3, #1
 8103230:	d12e      	bne.n	8103290 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103236:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	691a      	ldr	r2, [r3, #16]
 810323e:	4b13      	ldr	r3, [pc, #76]	@ (810328c <HAL_ADC_Init+0x2b4>)
 8103240:	4013      	ands	r3, r2
 8103242:	687a      	ldr	r2, [r7, #4]
 8103244:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8103246:	3a01      	subs	r2, #1
 8103248:	0411      	lsls	r1, r2, #16
 810324a:	687a      	ldr	r2, [r7, #4]
 810324c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 810324e:	4311      	orrs	r1, r2
 8103250:	687a      	ldr	r2, [r7, #4]
 8103252:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103254:	4311      	orrs	r1, r2
 8103256:	687a      	ldr	r2, [r7, #4]
 8103258:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810325a:	430a      	orrs	r2, r1
 810325c:	431a      	orrs	r2, r3
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	f042 0201 	orr.w	r2, r2, #1
 8103266:	611a      	str	r2, [r3, #16]
 8103268:	e01a      	b.n	81032a0 <HAL_ADC_Init+0x2c8>
 810326a:	bf00      	nop
 810326c:	10000000 	.word	0x10000000
 8103270:	053e2d63 	.word	0x053e2d63
 8103274:	40022000 	.word	0x40022000
 8103278:	40022100 	.word	0x40022100
 810327c:	58026000 	.word	0x58026000
 8103280:	40022300 	.word	0x40022300
 8103284:	58026300 	.word	0x58026300
 8103288:	fff0c003 	.word	0xfff0c003
 810328c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	691a      	ldr	r2, [r3, #16]
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	f022 0201 	bic.w	r2, r2, #1
 810329e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	691b      	ldr	r3, [r3, #16]
 81032a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	430a      	orrs	r2, r1
 81032b4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81032b6:	6878      	ldr	r0, [r7, #4]
 81032b8:	f000 fb20 	bl	81038fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	68db      	ldr	r3, [r3, #12]
 81032c0:	2b01      	cmp	r3, #1
 81032c2:	d10c      	bne.n	81032de <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81032ca:	f023 010f 	bic.w	r1, r3, #15
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	699b      	ldr	r3, [r3, #24]
 81032d2:	1e5a      	subs	r2, r3, #1
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	681b      	ldr	r3, [r3, #0]
 81032d8:	430a      	orrs	r2, r1
 81032da:	631a      	str	r2, [r3, #48]	@ 0x30
 81032dc:	e007      	b.n	81032ee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	f022 020f 	bic.w	r2, r2, #15
 81032ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032f2:	f023 0303 	bic.w	r3, r3, #3
 81032f6:	f043 0201 	orr.w	r2, r3, #1
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	655a      	str	r2, [r3, #84]	@ 0x54
 81032fe:	e007      	b.n	8103310 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103304:	f043 0210 	orr.w	r2, r3, #16
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810330c:	2301      	movs	r3, #1
 810330e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103310:	7ffb      	ldrb	r3, [r7, #31]
}
 8103312:	4618      	mov	r0, r3
 8103314:	3724      	adds	r7, #36	@ 0x24
 8103316:	46bd      	mov	sp, r7
 8103318:	bd90      	pop	{r4, r7, pc}
 810331a:	bf00      	nop

0810331c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810331c:	b590      	push	{r4, r7, lr}
 810331e:	b08d      	sub	sp, #52	@ 0x34
 8103320:	af00      	add	r7, sp, #0
 8103322:	6078      	str	r0, [r7, #4]
 8103324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103326:	2300      	movs	r3, #0
 8103328:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810332c:	2300      	movs	r3, #0
 810332e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103330:	683b      	ldr	r3, [r7, #0]
 8103332:	68db      	ldr	r3, [r3, #12]
 8103334:	4a65      	ldr	r2, [pc, #404]	@ (81034cc <HAL_ADC_ConfigChannel+0x1b0>)
 8103336:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810333e:	2b01      	cmp	r3, #1
 8103340:	d101      	bne.n	8103346 <HAL_ADC_ConfigChannel+0x2a>
 8103342:	2302      	movs	r3, #2
 8103344:	e2c7      	b.n	81038d6 <HAL_ADC_ConfigChannel+0x5ba>
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	2201      	movs	r2, #1
 810334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4618      	mov	r0, r3
 8103354:	f7ff fe19 	bl	8102f8a <LL_ADC_REG_IsConversionOngoing>
 8103358:	4603      	mov	r3, r0
 810335a:	2b00      	cmp	r3, #0
 810335c:	f040 82ac 	bne.w	81038b8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8103360:	683b      	ldr	r3, [r7, #0]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	2b00      	cmp	r3, #0
 8103366:	db2c      	blt.n	81033c2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103368:	683b      	ldr	r3, [r7, #0]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103370:	2b00      	cmp	r3, #0
 8103372:	d108      	bne.n	8103386 <HAL_ADC_ConfigChannel+0x6a>
 8103374:	683b      	ldr	r3, [r7, #0]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	0e9b      	lsrs	r3, r3, #26
 810337a:	f003 031f 	and.w	r3, r3, #31
 810337e:	2201      	movs	r2, #1
 8103380:	fa02 f303 	lsl.w	r3, r2, r3
 8103384:	e016      	b.n	81033b4 <HAL_ADC_ConfigChannel+0x98>
 8103386:	683b      	ldr	r3, [r7, #0]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810338c:	697b      	ldr	r3, [r7, #20]
 810338e:	fa93 f3a3 	rbit	r3, r3
 8103392:	613b      	str	r3, [r7, #16]
  return result;
 8103394:	693b      	ldr	r3, [r7, #16]
 8103396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8103398:	69bb      	ldr	r3, [r7, #24]
 810339a:	2b00      	cmp	r3, #0
 810339c:	d101      	bne.n	81033a2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 810339e:	2320      	movs	r3, #32
 81033a0:	e003      	b.n	81033aa <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 81033a2:	69bb      	ldr	r3, [r7, #24]
 81033a4:	fab3 f383 	clz	r3, r3
 81033a8:	b2db      	uxtb	r3, r3
 81033aa:	f003 031f 	and.w	r3, r3, #31
 81033ae:	2201      	movs	r2, #1
 81033b0:	fa02 f303 	lsl.w	r3, r2, r3
 81033b4:	687a      	ldr	r2, [r7, #4]
 81033b6:	6812      	ldr	r2, [r2, #0]
 81033b8:	69d1      	ldr	r1, [r2, #28]
 81033ba:	687a      	ldr	r2, [r7, #4]
 81033bc:	6812      	ldr	r2, [r2, #0]
 81033be:	430b      	orrs	r3, r1
 81033c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	6818      	ldr	r0, [r3, #0]
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	6859      	ldr	r1, [r3, #4]
 81033ca:	683b      	ldr	r3, [r7, #0]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	461a      	mov	r2, r3
 81033d0:	f7ff fcff 	bl	8102dd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4618      	mov	r0, r3
 81033da:	f7ff fdd6 	bl	8102f8a <LL_ADC_REG_IsConversionOngoing>
 81033de:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4618      	mov	r0, r3
 81033e6:	f7ff fde3 	bl	8102fb0 <LL_ADC_INJ_IsConversionOngoing>
 81033ea:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	f040 80b8 	bne.w	8103564 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	f040 80b4 	bne.w	8103564 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	6818      	ldr	r0, [r3, #0]
 8103400:	683b      	ldr	r3, [r7, #0]
 8103402:	6819      	ldr	r1, [r3, #0]
 8103404:	683b      	ldr	r3, [r7, #0]
 8103406:	689b      	ldr	r3, [r3, #8]
 8103408:	461a      	mov	r2, r3
 810340a:	f7ff fd0e 	bl	8102e2a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810340e:	4b30      	ldr	r3, [pc, #192]	@ (81034d0 <HAL_ADC_ConfigChannel+0x1b4>)
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810341a:	d10b      	bne.n	8103434 <HAL_ADC_ConfigChannel+0x118>
 810341c:	683b      	ldr	r3, [r7, #0]
 810341e:	695a      	ldr	r2, [r3, #20]
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	68db      	ldr	r3, [r3, #12]
 8103426:	089b      	lsrs	r3, r3, #2
 8103428:	f003 0307 	and.w	r3, r3, #7
 810342c:	005b      	lsls	r3, r3, #1
 810342e:	fa02 f303 	lsl.w	r3, r2, r3
 8103432:	e01d      	b.n	8103470 <HAL_ADC_ConfigChannel+0x154>
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	68db      	ldr	r3, [r3, #12]
 810343a:	f003 0310 	and.w	r3, r3, #16
 810343e:	2b00      	cmp	r3, #0
 8103440:	d10b      	bne.n	810345a <HAL_ADC_ConfigChannel+0x13e>
 8103442:	683b      	ldr	r3, [r7, #0]
 8103444:	695a      	ldr	r2, [r3, #20]
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	68db      	ldr	r3, [r3, #12]
 810344c:	089b      	lsrs	r3, r3, #2
 810344e:	f003 0307 	and.w	r3, r3, #7
 8103452:	005b      	lsls	r3, r3, #1
 8103454:	fa02 f303 	lsl.w	r3, r2, r3
 8103458:	e00a      	b.n	8103470 <HAL_ADC_ConfigChannel+0x154>
 810345a:	683b      	ldr	r3, [r7, #0]
 810345c:	695a      	ldr	r2, [r3, #20]
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	68db      	ldr	r3, [r3, #12]
 8103464:	089b      	lsrs	r3, r3, #2
 8103466:	f003 0304 	and.w	r3, r3, #4
 810346a:	005b      	lsls	r3, r3, #1
 810346c:	fa02 f303 	lsl.w	r3, r2, r3
 8103470:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103472:	683b      	ldr	r3, [r7, #0]
 8103474:	691b      	ldr	r3, [r3, #16]
 8103476:	2b04      	cmp	r3, #4
 8103478:	d02c      	beq.n	81034d4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	6818      	ldr	r0, [r3, #0]
 810347e:	683b      	ldr	r3, [r7, #0]
 8103480:	6919      	ldr	r1, [r3, #16]
 8103482:	683b      	ldr	r3, [r7, #0]
 8103484:	681a      	ldr	r2, [r3, #0]
 8103486:	6a3b      	ldr	r3, [r7, #32]
 8103488:	f7ff fc4f 	bl	8102d2a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6818      	ldr	r0, [r3, #0]
 8103490:	683b      	ldr	r3, [r7, #0]
 8103492:	6919      	ldr	r1, [r3, #16]
 8103494:	683b      	ldr	r3, [r7, #0]
 8103496:	7e5b      	ldrb	r3, [r3, #25]
 8103498:	2b01      	cmp	r3, #1
 810349a:	d102      	bne.n	81034a2 <HAL_ADC_ConfigChannel+0x186>
 810349c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81034a0:	e000      	b.n	81034a4 <HAL_ADC_ConfigChannel+0x188>
 81034a2:	2300      	movs	r3, #0
 81034a4:	461a      	mov	r2, r3
 81034a6:	f7ff fc79 	bl	8102d9c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	6818      	ldr	r0, [r3, #0]
 81034ae:	683b      	ldr	r3, [r7, #0]
 81034b0:	6919      	ldr	r1, [r3, #16]
 81034b2:	683b      	ldr	r3, [r7, #0]
 81034b4:	7e1b      	ldrb	r3, [r3, #24]
 81034b6:	2b01      	cmp	r3, #1
 81034b8:	d102      	bne.n	81034c0 <HAL_ADC_ConfigChannel+0x1a4>
 81034ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81034be:	e000      	b.n	81034c2 <HAL_ADC_ConfigChannel+0x1a6>
 81034c0:	2300      	movs	r3, #0
 81034c2:	461a      	mov	r2, r3
 81034c4:	f7ff fc51 	bl	8102d6a <LL_ADC_SetDataRightShift>
 81034c8:	e04c      	b.n	8103564 <HAL_ADC_ConfigChannel+0x248>
 81034ca:	bf00      	nop
 81034cc:	47ff0000 	.word	0x47ff0000
 81034d0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81034da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81034de:	683b      	ldr	r3, [r7, #0]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	069b      	lsls	r3, r3, #26
 81034e4:	429a      	cmp	r2, r3
 81034e6:	d107      	bne.n	81034f8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81034f6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81034fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103502:	683b      	ldr	r3, [r7, #0]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	069b      	lsls	r3, r3, #26
 8103508:	429a      	cmp	r2, r3
 810350a:	d107      	bne.n	810351c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	681b      	ldr	r3, [r3, #0]
 8103510:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810351a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103522:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103526:	683b      	ldr	r3, [r7, #0]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	069b      	lsls	r3, r3, #26
 810352c:	429a      	cmp	r2, r3
 810352e:	d107      	bne.n	8103540 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810353e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810354a:	683b      	ldr	r3, [r7, #0]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	069b      	lsls	r3, r3, #26
 8103550:	429a      	cmp	r2, r3
 8103552:	d107      	bne.n	8103564 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103562:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4618      	mov	r0, r3
 810356a:	f7ff fcfb 	bl	8102f64 <LL_ADC_IsEnabled>
 810356e:	4603      	mov	r3, r0
 8103570:	2b00      	cmp	r3, #0
 8103572:	f040 81aa 	bne.w	81038ca <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	6818      	ldr	r0, [r3, #0]
 810357a:	683b      	ldr	r3, [r7, #0]
 810357c:	6819      	ldr	r1, [r3, #0]
 810357e:	683b      	ldr	r3, [r7, #0]
 8103580:	68db      	ldr	r3, [r3, #12]
 8103582:	461a      	mov	r2, r3
 8103584:	f7ff fc7c 	bl	8102e80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103588:	683b      	ldr	r3, [r7, #0]
 810358a:	68db      	ldr	r3, [r3, #12]
 810358c:	4a87      	ldr	r2, [pc, #540]	@ (81037ac <HAL_ADC_ConfigChannel+0x490>)
 810358e:	4293      	cmp	r3, r2
 8103590:	f040 809a 	bne.w	81036c8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681a      	ldr	r2, [r3, #0]
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	4984      	ldr	r1, [pc, #528]	@ (81037b0 <HAL_ADC_ConfigChannel+0x494>)
 810359e:	428b      	cmp	r3, r1
 81035a0:	d147      	bne.n	8103632 <HAL_ADC_ConfigChannel+0x316>
 81035a2:	683b      	ldr	r3, [r7, #0]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	4983      	ldr	r1, [pc, #524]	@ (81037b4 <HAL_ADC_ConfigChannel+0x498>)
 81035a8:	428b      	cmp	r3, r1
 81035aa:	d040      	beq.n	810362e <HAL_ADC_ConfigChannel+0x312>
 81035ac:	683b      	ldr	r3, [r7, #0]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	4981      	ldr	r1, [pc, #516]	@ (81037b8 <HAL_ADC_ConfigChannel+0x49c>)
 81035b2:	428b      	cmp	r3, r1
 81035b4:	d039      	beq.n	810362a <HAL_ADC_ConfigChannel+0x30e>
 81035b6:	683b      	ldr	r3, [r7, #0]
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	4980      	ldr	r1, [pc, #512]	@ (81037bc <HAL_ADC_ConfigChannel+0x4a0>)
 81035bc:	428b      	cmp	r3, r1
 81035be:	d032      	beq.n	8103626 <HAL_ADC_ConfigChannel+0x30a>
 81035c0:	683b      	ldr	r3, [r7, #0]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	497e      	ldr	r1, [pc, #504]	@ (81037c0 <HAL_ADC_ConfigChannel+0x4a4>)
 81035c6:	428b      	cmp	r3, r1
 81035c8:	d02b      	beq.n	8103622 <HAL_ADC_ConfigChannel+0x306>
 81035ca:	683b      	ldr	r3, [r7, #0]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	497d      	ldr	r1, [pc, #500]	@ (81037c4 <HAL_ADC_ConfigChannel+0x4a8>)
 81035d0:	428b      	cmp	r3, r1
 81035d2:	d024      	beq.n	810361e <HAL_ADC_ConfigChannel+0x302>
 81035d4:	683b      	ldr	r3, [r7, #0]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	497b      	ldr	r1, [pc, #492]	@ (81037c8 <HAL_ADC_ConfigChannel+0x4ac>)
 81035da:	428b      	cmp	r3, r1
 81035dc:	d01d      	beq.n	810361a <HAL_ADC_ConfigChannel+0x2fe>
 81035de:	683b      	ldr	r3, [r7, #0]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	497a      	ldr	r1, [pc, #488]	@ (81037cc <HAL_ADC_ConfigChannel+0x4b0>)
 81035e4:	428b      	cmp	r3, r1
 81035e6:	d016      	beq.n	8103616 <HAL_ADC_ConfigChannel+0x2fa>
 81035e8:	683b      	ldr	r3, [r7, #0]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	4978      	ldr	r1, [pc, #480]	@ (81037d0 <HAL_ADC_ConfigChannel+0x4b4>)
 81035ee:	428b      	cmp	r3, r1
 81035f0:	d00f      	beq.n	8103612 <HAL_ADC_ConfigChannel+0x2f6>
 81035f2:	683b      	ldr	r3, [r7, #0]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4977      	ldr	r1, [pc, #476]	@ (81037d4 <HAL_ADC_ConfigChannel+0x4b8>)
 81035f8:	428b      	cmp	r3, r1
 81035fa:	d008      	beq.n	810360e <HAL_ADC_ConfigChannel+0x2f2>
 81035fc:	683b      	ldr	r3, [r7, #0]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	4975      	ldr	r1, [pc, #468]	@ (81037d8 <HAL_ADC_ConfigChannel+0x4bc>)
 8103602:	428b      	cmp	r3, r1
 8103604:	d101      	bne.n	810360a <HAL_ADC_ConfigChannel+0x2ee>
 8103606:	4b75      	ldr	r3, [pc, #468]	@ (81037dc <HAL_ADC_ConfigChannel+0x4c0>)
 8103608:	e05a      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810360a:	2300      	movs	r3, #0
 810360c:	e058      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810360e:	4b74      	ldr	r3, [pc, #464]	@ (81037e0 <HAL_ADC_ConfigChannel+0x4c4>)
 8103610:	e056      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 8103612:	4b74      	ldr	r3, [pc, #464]	@ (81037e4 <HAL_ADC_ConfigChannel+0x4c8>)
 8103614:	e054      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 8103616:	4b6e      	ldr	r3, [pc, #440]	@ (81037d0 <HAL_ADC_ConfigChannel+0x4b4>)
 8103618:	e052      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810361a:	4b6c      	ldr	r3, [pc, #432]	@ (81037cc <HAL_ADC_ConfigChannel+0x4b0>)
 810361c:	e050      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810361e:	4b72      	ldr	r3, [pc, #456]	@ (81037e8 <HAL_ADC_ConfigChannel+0x4cc>)
 8103620:	e04e      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 8103622:	4b72      	ldr	r3, [pc, #456]	@ (81037ec <HAL_ADC_ConfigChannel+0x4d0>)
 8103624:	e04c      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 8103626:	4b72      	ldr	r3, [pc, #456]	@ (81037f0 <HAL_ADC_ConfigChannel+0x4d4>)
 8103628:	e04a      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810362a:	4b72      	ldr	r3, [pc, #456]	@ (81037f4 <HAL_ADC_ConfigChannel+0x4d8>)
 810362c:	e048      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810362e:	2301      	movs	r3, #1
 8103630:	e046      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	4970      	ldr	r1, [pc, #448]	@ (81037f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8103638:	428b      	cmp	r3, r1
 810363a:	d140      	bne.n	81036be <HAL_ADC_ConfigChannel+0x3a2>
 810363c:	683b      	ldr	r3, [r7, #0]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	495c      	ldr	r1, [pc, #368]	@ (81037b4 <HAL_ADC_ConfigChannel+0x498>)
 8103642:	428b      	cmp	r3, r1
 8103644:	d039      	beq.n	81036ba <HAL_ADC_ConfigChannel+0x39e>
 8103646:	683b      	ldr	r3, [r7, #0]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	495b      	ldr	r1, [pc, #364]	@ (81037b8 <HAL_ADC_ConfigChannel+0x49c>)
 810364c:	428b      	cmp	r3, r1
 810364e:	d032      	beq.n	81036b6 <HAL_ADC_ConfigChannel+0x39a>
 8103650:	683b      	ldr	r3, [r7, #0]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	4959      	ldr	r1, [pc, #356]	@ (81037bc <HAL_ADC_ConfigChannel+0x4a0>)
 8103656:	428b      	cmp	r3, r1
 8103658:	d02b      	beq.n	81036b2 <HAL_ADC_ConfigChannel+0x396>
 810365a:	683b      	ldr	r3, [r7, #0]
 810365c:	681b      	ldr	r3, [r3, #0]
 810365e:	4958      	ldr	r1, [pc, #352]	@ (81037c0 <HAL_ADC_ConfigChannel+0x4a4>)
 8103660:	428b      	cmp	r3, r1
 8103662:	d024      	beq.n	81036ae <HAL_ADC_ConfigChannel+0x392>
 8103664:	683b      	ldr	r3, [r7, #0]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	4956      	ldr	r1, [pc, #344]	@ (81037c4 <HAL_ADC_ConfigChannel+0x4a8>)
 810366a:	428b      	cmp	r3, r1
 810366c:	d01d      	beq.n	81036aa <HAL_ADC_ConfigChannel+0x38e>
 810366e:	683b      	ldr	r3, [r7, #0]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	4955      	ldr	r1, [pc, #340]	@ (81037c8 <HAL_ADC_ConfigChannel+0x4ac>)
 8103674:	428b      	cmp	r3, r1
 8103676:	d016      	beq.n	81036a6 <HAL_ADC_ConfigChannel+0x38a>
 8103678:	683b      	ldr	r3, [r7, #0]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	4953      	ldr	r1, [pc, #332]	@ (81037cc <HAL_ADC_ConfigChannel+0x4b0>)
 810367e:	428b      	cmp	r3, r1
 8103680:	d00f      	beq.n	81036a2 <HAL_ADC_ConfigChannel+0x386>
 8103682:	683b      	ldr	r3, [r7, #0]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	4952      	ldr	r1, [pc, #328]	@ (81037d0 <HAL_ADC_ConfigChannel+0x4b4>)
 8103688:	428b      	cmp	r3, r1
 810368a:	d008      	beq.n	810369e <HAL_ADC_ConfigChannel+0x382>
 810368c:	683b      	ldr	r3, [r7, #0]
 810368e:	681b      	ldr	r3, [r3, #0]
 8103690:	4951      	ldr	r1, [pc, #324]	@ (81037d8 <HAL_ADC_ConfigChannel+0x4bc>)
 8103692:	428b      	cmp	r3, r1
 8103694:	d101      	bne.n	810369a <HAL_ADC_ConfigChannel+0x37e>
 8103696:	4b51      	ldr	r3, [pc, #324]	@ (81037dc <HAL_ADC_ConfigChannel+0x4c0>)
 8103698:	e012      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810369a:	2300      	movs	r3, #0
 810369c:	e010      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 810369e:	4b51      	ldr	r3, [pc, #324]	@ (81037e4 <HAL_ADC_ConfigChannel+0x4c8>)
 81036a0:	e00e      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036a2:	4b4b      	ldr	r3, [pc, #300]	@ (81037d0 <HAL_ADC_ConfigChannel+0x4b4>)
 81036a4:	e00c      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036a6:	4b49      	ldr	r3, [pc, #292]	@ (81037cc <HAL_ADC_ConfigChannel+0x4b0>)
 81036a8:	e00a      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036aa:	4b4f      	ldr	r3, [pc, #316]	@ (81037e8 <HAL_ADC_ConfigChannel+0x4cc>)
 81036ac:	e008      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036ae:	4b4f      	ldr	r3, [pc, #316]	@ (81037ec <HAL_ADC_ConfigChannel+0x4d0>)
 81036b0:	e006      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036b2:	4b4f      	ldr	r3, [pc, #316]	@ (81037f0 <HAL_ADC_ConfigChannel+0x4d4>)
 81036b4:	e004      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036b6:	4b4f      	ldr	r3, [pc, #316]	@ (81037f4 <HAL_ADC_ConfigChannel+0x4d8>)
 81036b8:	e002      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036ba:	2301      	movs	r3, #1
 81036bc:	e000      	b.n	81036c0 <HAL_ADC_ConfigChannel+0x3a4>
 81036be:	2300      	movs	r3, #0
 81036c0:	4619      	mov	r1, r3
 81036c2:	4610      	mov	r0, r2
 81036c4:	f7ff fafe 	bl	8102cc4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81036c8:	683b      	ldr	r3, [r7, #0]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	f280 80fc 	bge.w	81038ca <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	4a36      	ldr	r2, [pc, #216]	@ (81037b0 <HAL_ADC_ConfigChannel+0x494>)
 81036d8:	4293      	cmp	r3, r2
 81036da:	d004      	beq.n	81036e6 <HAL_ADC_ConfigChannel+0x3ca>
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	4a45      	ldr	r2, [pc, #276]	@ (81037f8 <HAL_ADC_ConfigChannel+0x4dc>)
 81036e2:	4293      	cmp	r3, r2
 81036e4:	d101      	bne.n	81036ea <HAL_ADC_ConfigChannel+0x3ce>
 81036e6:	4b45      	ldr	r3, [pc, #276]	@ (81037fc <HAL_ADC_ConfigChannel+0x4e0>)
 81036e8:	e000      	b.n	81036ec <HAL_ADC_ConfigChannel+0x3d0>
 81036ea:	4b45      	ldr	r3, [pc, #276]	@ (8103800 <HAL_ADC_ConfigChannel+0x4e4>)
 81036ec:	4618      	mov	r0, r3
 81036ee:	f7ff fadb 	bl	8102ca8 <LL_ADC_GetCommonPathInternalCh>
 81036f2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	4a2d      	ldr	r2, [pc, #180]	@ (81037b0 <HAL_ADC_ConfigChannel+0x494>)
 81036fa:	4293      	cmp	r3, r2
 81036fc:	d004      	beq.n	8103708 <HAL_ADC_ConfigChannel+0x3ec>
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	4a3d      	ldr	r2, [pc, #244]	@ (81037f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8103704:	4293      	cmp	r3, r2
 8103706:	d10e      	bne.n	8103726 <HAL_ADC_ConfigChannel+0x40a>
 8103708:	4829      	ldr	r0, [pc, #164]	@ (81037b0 <HAL_ADC_ConfigChannel+0x494>)
 810370a:	f7ff fc2b 	bl	8102f64 <LL_ADC_IsEnabled>
 810370e:	4604      	mov	r4, r0
 8103710:	4839      	ldr	r0, [pc, #228]	@ (81037f8 <HAL_ADC_ConfigChannel+0x4dc>)
 8103712:	f7ff fc27 	bl	8102f64 <LL_ADC_IsEnabled>
 8103716:	4603      	mov	r3, r0
 8103718:	4323      	orrs	r3, r4
 810371a:	2b00      	cmp	r3, #0
 810371c:	bf0c      	ite	eq
 810371e:	2301      	moveq	r3, #1
 8103720:	2300      	movne	r3, #0
 8103722:	b2db      	uxtb	r3, r3
 8103724:	e008      	b.n	8103738 <HAL_ADC_ConfigChannel+0x41c>
 8103726:	4837      	ldr	r0, [pc, #220]	@ (8103804 <HAL_ADC_ConfigChannel+0x4e8>)
 8103728:	f7ff fc1c 	bl	8102f64 <LL_ADC_IsEnabled>
 810372c:	4603      	mov	r3, r0
 810372e:	2b00      	cmp	r3, #0
 8103730:	bf0c      	ite	eq
 8103732:	2301      	moveq	r3, #1
 8103734:	2300      	movne	r3, #0
 8103736:	b2db      	uxtb	r3, r3
 8103738:	2b00      	cmp	r3, #0
 810373a:	f000 80b3 	beq.w	81038a4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a31      	ldr	r2, [pc, #196]	@ (8103808 <HAL_ADC_ConfigChannel+0x4ec>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d165      	bne.n	8103814 <HAL_ADC_ConfigChannel+0x4f8>
 8103748:	69fb      	ldr	r3, [r7, #28]
 810374a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810374e:	2b00      	cmp	r3, #0
 8103750:	d160      	bne.n	8103814 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	4a2b      	ldr	r2, [pc, #172]	@ (8103804 <HAL_ADC_ConfigChannel+0x4e8>)
 8103758:	4293      	cmp	r3, r2
 810375a:	f040 80b6 	bne.w	81038ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	4a13      	ldr	r2, [pc, #76]	@ (81037b0 <HAL_ADC_ConfigChannel+0x494>)
 8103764:	4293      	cmp	r3, r2
 8103766:	d004      	beq.n	8103772 <HAL_ADC_ConfigChannel+0x456>
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	681b      	ldr	r3, [r3, #0]
 810376c:	4a22      	ldr	r2, [pc, #136]	@ (81037f8 <HAL_ADC_ConfigChannel+0x4dc>)
 810376e:	4293      	cmp	r3, r2
 8103770:	d101      	bne.n	8103776 <HAL_ADC_ConfigChannel+0x45a>
 8103772:	4a22      	ldr	r2, [pc, #136]	@ (81037fc <HAL_ADC_ConfigChannel+0x4e0>)
 8103774:	e000      	b.n	8103778 <HAL_ADC_ConfigChannel+0x45c>
 8103776:	4a22      	ldr	r2, [pc, #136]	@ (8103800 <HAL_ADC_ConfigChannel+0x4e4>)
 8103778:	69fb      	ldr	r3, [r7, #28]
 810377a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810377e:	4619      	mov	r1, r3
 8103780:	4610      	mov	r0, r2
 8103782:	f7ff fa7e 	bl	8102c82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103786:	4b21      	ldr	r3, [pc, #132]	@ (810380c <HAL_ADC_ConfigChannel+0x4f0>)
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	099b      	lsrs	r3, r3, #6
 810378c:	4a20      	ldr	r2, [pc, #128]	@ (8103810 <HAL_ADC_ConfigChannel+0x4f4>)
 810378e:	fba2 2303 	umull	r2, r3, r2, r3
 8103792:	099b      	lsrs	r3, r3, #6
 8103794:	3301      	adds	r3, #1
 8103796:	005b      	lsls	r3, r3, #1
 8103798:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 810379a:	e002      	b.n	81037a2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 810379c:	68fb      	ldr	r3, [r7, #12]
 810379e:	3b01      	subs	r3, #1
 81037a0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 81037a2:	68fb      	ldr	r3, [r7, #12]
 81037a4:	2b00      	cmp	r3, #0
 81037a6:	d1f9      	bne.n	810379c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81037a8:	e08f      	b.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
 81037aa:	bf00      	nop
 81037ac:	47ff0000 	.word	0x47ff0000
 81037b0:	40022000 	.word	0x40022000
 81037b4:	04300002 	.word	0x04300002
 81037b8:	08600004 	.word	0x08600004
 81037bc:	0c900008 	.word	0x0c900008
 81037c0:	10c00010 	.word	0x10c00010
 81037c4:	14f00020 	.word	0x14f00020
 81037c8:	2a000400 	.word	0x2a000400
 81037cc:	2e300800 	.word	0x2e300800
 81037d0:	32601000 	.word	0x32601000
 81037d4:	43210000 	.word	0x43210000
 81037d8:	4b840000 	.word	0x4b840000
 81037dc:	4fb80000 	.word	0x4fb80000
 81037e0:	47520000 	.word	0x47520000
 81037e4:	36902000 	.word	0x36902000
 81037e8:	25b00200 	.word	0x25b00200
 81037ec:	21800100 	.word	0x21800100
 81037f0:	1d500080 	.word	0x1d500080
 81037f4:	19200040 	.word	0x19200040
 81037f8:	40022100 	.word	0x40022100
 81037fc:	40022300 	.word	0x40022300
 8103800:	58026300 	.word	0x58026300
 8103804:	58026000 	.word	0x58026000
 8103808:	cb840000 	.word	0xcb840000
 810380c:	10000000 	.word	0x10000000
 8103810:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103814:	683b      	ldr	r3, [r7, #0]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	4a31      	ldr	r2, [pc, #196]	@ (81038e0 <HAL_ADC_ConfigChannel+0x5c4>)
 810381a:	4293      	cmp	r3, r2
 810381c:	d11e      	bne.n	810385c <HAL_ADC_ConfigChannel+0x540>
 810381e:	69fb      	ldr	r3, [r7, #28]
 8103820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8103824:	2b00      	cmp	r3, #0
 8103826:	d119      	bne.n	810385c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	4a2d      	ldr	r2, [pc, #180]	@ (81038e4 <HAL_ADC_ConfigChannel+0x5c8>)
 810382e:	4293      	cmp	r3, r2
 8103830:	d14b      	bne.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a2c      	ldr	r2, [pc, #176]	@ (81038e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d004      	beq.n	8103846 <HAL_ADC_ConfigChannel+0x52a>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a2a      	ldr	r2, [pc, #168]	@ (81038ec <HAL_ADC_ConfigChannel+0x5d0>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d101      	bne.n	810384a <HAL_ADC_ConfigChannel+0x52e>
 8103846:	4a2a      	ldr	r2, [pc, #168]	@ (81038f0 <HAL_ADC_ConfigChannel+0x5d4>)
 8103848:	e000      	b.n	810384c <HAL_ADC_ConfigChannel+0x530>
 810384a:	4a2a      	ldr	r2, [pc, #168]	@ (81038f4 <HAL_ADC_ConfigChannel+0x5d8>)
 810384c:	69fb      	ldr	r3, [r7, #28]
 810384e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103852:	4619      	mov	r1, r3
 8103854:	4610      	mov	r0, r2
 8103856:	f7ff fa14 	bl	8102c82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810385a:	e036      	b.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810385c:	683b      	ldr	r3, [r7, #0]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4a25      	ldr	r2, [pc, #148]	@ (81038f8 <HAL_ADC_ConfigChannel+0x5dc>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d131      	bne.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
 8103866:	69fb      	ldr	r3, [r7, #28]
 8103868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810386c:	2b00      	cmp	r3, #0
 810386e:	d12c      	bne.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a1b      	ldr	r2, [pc, #108]	@ (81038e4 <HAL_ADC_ConfigChannel+0x5c8>)
 8103876:	4293      	cmp	r3, r2
 8103878:	d127      	bne.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	4a1a      	ldr	r2, [pc, #104]	@ (81038e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8103880:	4293      	cmp	r3, r2
 8103882:	d004      	beq.n	810388e <HAL_ADC_ConfigChannel+0x572>
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	4a18      	ldr	r2, [pc, #96]	@ (81038ec <HAL_ADC_ConfigChannel+0x5d0>)
 810388a:	4293      	cmp	r3, r2
 810388c:	d101      	bne.n	8103892 <HAL_ADC_ConfigChannel+0x576>
 810388e:	4a18      	ldr	r2, [pc, #96]	@ (81038f0 <HAL_ADC_ConfigChannel+0x5d4>)
 8103890:	e000      	b.n	8103894 <HAL_ADC_ConfigChannel+0x578>
 8103892:	4a18      	ldr	r2, [pc, #96]	@ (81038f4 <HAL_ADC_ConfigChannel+0x5d8>)
 8103894:	69fb      	ldr	r3, [r7, #28]
 8103896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810389a:	4619      	mov	r1, r3
 810389c:	4610      	mov	r0, r2
 810389e:	f7ff f9f0 	bl	8102c82 <LL_ADC_SetCommonPathInternalCh>
 81038a2:	e012      	b.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038a8:	f043 0220 	orr.w	r2, r3, #32
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81038b0:	2301      	movs	r3, #1
 81038b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81038b6:	e008      	b.n	81038ca <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038bc:	f043 0220 	orr.w	r2, r3, #32
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81038c4:	2301      	movs	r3, #1
 81038c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	2200      	movs	r2, #0
 81038ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81038d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 81038d6:	4618      	mov	r0, r3
 81038d8:	3734      	adds	r7, #52	@ 0x34
 81038da:	46bd      	mov	sp, r7
 81038dc:	bd90      	pop	{r4, r7, pc}
 81038de:	bf00      	nop
 81038e0:	c7520000 	.word	0xc7520000
 81038e4:	58026000 	.word	0x58026000
 81038e8:	40022000 	.word	0x40022000
 81038ec:	40022100 	.word	0x40022100
 81038f0:	40022300 	.word	0x40022300
 81038f4:	58026300 	.word	0x58026300
 81038f8:	cfb80000 	.word	0xcfb80000

081038fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81038fc:	b580      	push	{r7, lr}
 81038fe:	b084      	sub	sp, #16
 8103900:	af00      	add	r7, sp, #0
 8103902:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	4a7a      	ldr	r2, [pc, #488]	@ (8103af4 <ADC_ConfigureBoostMode+0x1f8>)
 810390a:	4293      	cmp	r3, r2
 810390c:	d004      	beq.n	8103918 <ADC_ConfigureBoostMode+0x1c>
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	681b      	ldr	r3, [r3, #0]
 8103912:	4a79      	ldr	r2, [pc, #484]	@ (8103af8 <ADC_ConfigureBoostMode+0x1fc>)
 8103914:	4293      	cmp	r3, r2
 8103916:	d109      	bne.n	810392c <ADC_ConfigureBoostMode+0x30>
 8103918:	4b78      	ldr	r3, [pc, #480]	@ (8103afc <ADC_ConfigureBoostMode+0x200>)
 810391a:	689b      	ldr	r3, [r3, #8]
 810391c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103920:	2b00      	cmp	r3, #0
 8103922:	bf14      	ite	ne
 8103924:	2301      	movne	r3, #1
 8103926:	2300      	moveq	r3, #0
 8103928:	b2db      	uxtb	r3, r3
 810392a:	e008      	b.n	810393e <ADC_ConfigureBoostMode+0x42>
 810392c:	4b74      	ldr	r3, [pc, #464]	@ (8103b00 <ADC_ConfigureBoostMode+0x204>)
 810392e:	689b      	ldr	r3, [r3, #8]
 8103930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103934:	2b00      	cmp	r3, #0
 8103936:	bf14      	ite	ne
 8103938:	2301      	movne	r3, #1
 810393a:	2300      	moveq	r3, #0
 810393c:	b2db      	uxtb	r3, r3
 810393e:	2b00      	cmp	r3, #0
 8103940:	d01c      	beq.n	810397c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103942:	f002 fc9d 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 8103946:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	685b      	ldr	r3, [r3, #4]
 810394c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103950:	d010      	beq.n	8103974 <ADC_ConfigureBoostMode+0x78>
 8103952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103956:	d873      	bhi.n	8103a40 <ADC_ConfigureBoostMode+0x144>
 8103958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810395c:	d002      	beq.n	8103964 <ADC_ConfigureBoostMode+0x68>
 810395e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103962:	d16d      	bne.n	8103a40 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	685b      	ldr	r3, [r3, #4]
 8103968:	0c1b      	lsrs	r3, r3, #16
 810396a:	68fa      	ldr	r2, [r7, #12]
 810396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103970:	60fb      	str	r3, [r7, #12]
        break;
 8103972:	e068      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103974:	68fb      	ldr	r3, [r7, #12]
 8103976:	089b      	lsrs	r3, r3, #2
 8103978:	60fb      	str	r3, [r7, #12]
        break;
 810397a:	e064      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810397c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103980:	f04f 0100 	mov.w	r1, #0
 8103984:	f003 ff24 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8103988:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	685b      	ldr	r3, [r3, #4]
 810398e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103992:	d051      	beq.n	8103a38 <ADC_ConfigureBoostMode+0x13c>
 8103994:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103998:	d854      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 810399a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 810399e:	d047      	beq.n	8103a30 <ADC_ConfigureBoostMode+0x134>
 81039a0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81039a4:	d84e      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039a6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81039aa:	d03d      	beq.n	8103a28 <ADC_ConfigureBoostMode+0x12c>
 81039ac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81039b0:	d848      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81039b6:	d033      	beq.n	8103a20 <ADC_ConfigureBoostMode+0x124>
 81039b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81039bc:	d842      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039be:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81039c2:	d029      	beq.n	8103a18 <ADC_ConfigureBoostMode+0x11c>
 81039c4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81039c8:	d83c      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81039ce:	d01a      	beq.n	8103a06 <ADC_ConfigureBoostMode+0x10a>
 81039d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81039d4:	d836      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81039da:	d014      	beq.n	8103a06 <ADC_ConfigureBoostMode+0x10a>
 81039dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81039e0:	d830      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81039e6:	d00e      	beq.n	8103a06 <ADC_ConfigureBoostMode+0x10a>
 81039e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81039ec:	d82a      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81039f2:	d008      	beq.n	8103a06 <ADC_ConfigureBoostMode+0x10a>
 81039f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81039f8:	d824      	bhi.n	8103a44 <ADC_ConfigureBoostMode+0x148>
 81039fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81039fe:	d002      	beq.n	8103a06 <ADC_ConfigureBoostMode+0x10a>
 8103a00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103a04:	d11e      	bne.n	8103a44 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	685b      	ldr	r3, [r3, #4]
 8103a0a:	0c9b      	lsrs	r3, r3, #18
 8103a0c:	005b      	lsls	r3, r3, #1
 8103a0e:	68fa      	ldr	r2, [r7, #12]
 8103a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a14:	60fb      	str	r3, [r7, #12]
        break;
 8103a16:	e016      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103a18:	68fb      	ldr	r3, [r7, #12]
 8103a1a:	091b      	lsrs	r3, r3, #4
 8103a1c:	60fb      	str	r3, [r7, #12]
        break;
 8103a1e:	e012      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103a20:	68fb      	ldr	r3, [r7, #12]
 8103a22:	095b      	lsrs	r3, r3, #5
 8103a24:	60fb      	str	r3, [r7, #12]
        break;
 8103a26:	e00e      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103a28:	68fb      	ldr	r3, [r7, #12]
 8103a2a:	099b      	lsrs	r3, r3, #6
 8103a2c:	60fb      	str	r3, [r7, #12]
        break;
 8103a2e:	e00a      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103a30:	68fb      	ldr	r3, [r7, #12]
 8103a32:	09db      	lsrs	r3, r3, #7
 8103a34:	60fb      	str	r3, [r7, #12]
        break;
 8103a36:	e006      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103a38:	68fb      	ldr	r3, [r7, #12]
 8103a3a:	0a1b      	lsrs	r3, r3, #8
 8103a3c:	60fb      	str	r3, [r7, #12]
        break;
 8103a3e:	e002      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103a40:	bf00      	nop
 8103a42:	e000      	b.n	8103a46 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103a44:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103a46:	f7ff f8d3 	bl	8102bf0 <HAL_GetREVID>
 8103a4a:	4603      	mov	r3, r0
 8103a4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d815      	bhi.n	8103a80 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103a54:	68fb      	ldr	r3, [r7, #12]
 8103a56:	4a2b      	ldr	r2, [pc, #172]	@ (8103b04 <ADC_ConfigureBoostMode+0x208>)
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d908      	bls.n	8103a6e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	689a      	ldr	r2, [r3, #8]
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103a6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103a6c:	e03e      	b.n	8103aec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	689a      	ldr	r2, [r3, #8]
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103a7c:	609a      	str	r2, [r3, #8]
}
 8103a7e:	e035      	b.n	8103aec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103a80:	68fb      	ldr	r3, [r7, #12]
 8103a82:	085b      	lsrs	r3, r3, #1
 8103a84:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103a86:	68fb      	ldr	r3, [r7, #12]
 8103a88:	4a1f      	ldr	r2, [pc, #124]	@ (8103b08 <ADC_ConfigureBoostMode+0x20c>)
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d808      	bhi.n	8103aa0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	689a      	ldr	r2, [r3, #8]
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8103a9c:	609a      	str	r2, [r3, #8]
}
 8103a9e:	e025      	b.n	8103aec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103aa0:	68fb      	ldr	r3, [r7, #12]
 8103aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8103b0c <ADC_ConfigureBoostMode+0x210>)
 8103aa4:	4293      	cmp	r3, r2
 8103aa6:	d80a      	bhi.n	8103abe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	689b      	ldr	r3, [r3, #8]
 8103aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103aba:	609a      	str	r2, [r3, #8]
}
 8103abc:	e016      	b.n	8103aec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103abe:	68fb      	ldr	r3, [r7, #12]
 8103ac0:	4a13      	ldr	r2, [pc, #76]	@ (8103b10 <ADC_ConfigureBoostMode+0x214>)
 8103ac2:	4293      	cmp	r3, r2
 8103ac4:	d80a      	bhi.n	8103adc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	689b      	ldr	r3, [r3, #8]
 8103acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103ad8:	609a      	str	r2, [r3, #8]
}
 8103ada:	e007      	b.n	8103aec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	689a      	ldr	r2, [r3, #8]
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8103aea:	609a      	str	r2, [r3, #8]
}
 8103aec:	bf00      	nop
 8103aee:	3710      	adds	r7, #16
 8103af0:	46bd      	mov	sp, r7
 8103af2:	bd80      	pop	{r7, pc}
 8103af4:	40022000 	.word	0x40022000
 8103af8:	40022100 	.word	0x40022100
 8103afc:	40022300 	.word	0x40022300
 8103b00:	58026300 	.word	0x58026300
 8103b04:	01312d00 	.word	0x01312d00
 8103b08:	005f5e10 	.word	0x005f5e10
 8103b0c:	00bebc20 	.word	0x00bebc20
 8103b10:	017d7840 	.word	0x017d7840

08103b14 <LL_ADC_IsEnabled>:
{
 8103b14:	b480      	push	{r7}
 8103b16:	b083      	sub	sp, #12
 8103b18:	af00      	add	r7, sp, #0
 8103b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	689b      	ldr	r3, [r3, #8]
 8103b20:	f003 0301 	and.w	r3, r3, #1
 8103b24:	2b01      	cmp	r3, #1
 8103b26:	d101      	bne.n	8103b2c <LL_ADC_IsEnabled+0x18>
 8103b28:	2301      	movs	r3, #1
 8103b2a:	e000      	b.n	8103b2e <LL_ADC_IsEnabled+0x1a>
 8103b2c:	2300      	movs	r3, #0
}
 8103b2e:	4618      	mov	r0, r3
 8103b30:	370c      	adds	r7, #12
 8103b32:	46bd      	mov	sp, r7
 8103b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b38:	4770      	bx	lr

08103b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8103b3a:	b480      	push	{r7}
 8103b3c:	b083      	sub	sp, #12
 8103b3e:	af00      	add	r7, sp, #0
 8103b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	689b      	ldr	r3, [r3, #8]
 8103b46:	f003 0304 	and.w	r3, r3, #4
 8103b4a:	2b04      	cmp	r3, #4
 8103b4c:	d101      	bne.n	8103b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103b4e:	2301      	movs	r3, #1
 8103b50:	e000      	b.n	8103b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103b52:	2300      	movs	r3, #0
}
 8103b54:	4618      	mov	r0, r3
 8103b56:	370c      	adds	r7, #12
 8103b58:	46bd      	mov	sp, r7
 8103b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b5e:	4770      	bx	lr

08103b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103b60:	b590      	push	{r4, r7, lr}
 8103b62:	b09f      	sub	sp, #124	@ 0x7c
 8103b64:	af00      	add	r7, sp, #0
 8103b66:	6078      	str	r0, [r7, #4]
 8103b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103b6a:	2300      	movs	r3, #0
 8103b6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103b76:	2b01      	cmp	r3, #1
 8103b78:	d101      	bne.n	8103b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103b7a:	2302      	movs	r3, #2
 8103b7c:	e0c4      	b.n	8103d08 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	2201      	movs	r2, #1
 8103b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103b86:	2300      	movs	r3, #0
 8103b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103b8a:	2300      	movs	r3, #0
 8103b8c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a5f      	ldr	r2, [pc, #380]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d102      	bne.n	8103b9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103b98:	4b5e      	ldr	r3, [pc, #376]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103b9a:	60bb      	str	r3, [r7, #8]
 8103b9c:	e001      	b.n	8103ba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103b9e:	2300      	movs	r3, #0
 8103ba0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103ba2:	68bb      	ldr	r3, [r7, #8]
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	d10b      	bne.n	8103bc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103bac:	f043 0220 	orr.w	r2, r3, #32
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	2200      	movs	r2, #0
 8103bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8103bbc:	2301      	movs	r3, #1
 8103bbe:	e0a3      	b.n	8103d08 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103bc0:	68bb      	ldr	r3, [r7, #8]
 8103bc2:	4618      	mov	r0, r3
 8103bc4:	f7ff ffb9 	bl	8103b3a <LL_ADC_REG_IsConversionOngoing>
 8103bc8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f7ff ffb3 	bl	8103b3a <LL_ADC_REG_IsConversionOngoing>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	f040 8085 	bne.w	8103ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	f040 8081 	bne.w	8103ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a49      	ldr	r2, [pc, #292]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d004      	beq.n	8103bf8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	4a48      	ldr	r2, [pc, #288]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d101      	bne.n	8103bfc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103bf8:	4b47      	ldr	r3, [pc, #284]	@ (8103d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103bfa:	e000      	b.n	8103bfe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103bfc:	4b47      	ldr	r3, [pc, #284]	@ (8103d1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c00:	683b      	ldr	r3, [r7, #0]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d03b      	beq.n	8103c80 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c0a:	689b      	ldr	r3, [r3, #8]
 8103c0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103c10:	683b      	ldr	r3, [r7, #0]
 8103c12:	685b      	ldr	r3, [r3, #4]
 8103c14:	431a      	orrs	r2, r3
 8103c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c18:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c20:	4293      	cmp	r3, r2
 8103c22:	d004      	beq.n	8103c2e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	4a3a      	ldr	r2, [pc, #232]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d10e      	bne.n	8103c4c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103c2e:	4838      	ldr	r0, [pc, #224]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c30:	f7ff ff70 	bl	8103b14 <LL_ADC_IsEnabled>
 8103c34:	4604      	mov	r4, r0
 8103c36:	4837      	ldr	r0, [pc, #220]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c38:	f7ff ff6c 	bl	8103b14 <LL_ADC_IsEnabled>
 8103c3c:	4603      	mov	r3, r0
 8103c3e:	4323      	orrs	r3, r4
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	bf0c      	ite	eq
 8103c44:	2301      	moveq	r3, #1
 8103c46:	2300      	movne	r3, #0
 8103c48:	b2db      	uxtb	r3, r3
 8103c4a:	e008      	b.n	8103c5e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103c4c:	4834      	ldr	r0, [pc, #208]	@ (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103c4e:	f7ff ff61 	bl	8103b14 <LL_ADC_IsEnabled>
 8103c52:	4603      	mov	r3, r0
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	bf0c      	ite	eq
 8103c58:	2301      	moveq	r3, #1
 8103c5a:	2300      	movne	r3, #0
 8103c5c:	b2db      	uxtb	r3, r3
 8103c5e:	2b00      	cmp	r3, #0
 8103c60:	d04b      	beq.n	8103cfa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c64:	689b      	ldr	r3, [r3, #8]
 8103c66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103c6a:	f023 030f 	bic.w	r3, r3, #15
 8103c6e:	683a      	ldr	r2, [r7, #0]
 8103c70:	6811      	ldr	r1, [r2, #0]
 8103c72:	683a      	ldr	r2, [r7, #0]
 8103c74:	6892      	ldr	r2, [r2, #8]
 8103c76:	430a      	orrs	r2, r1
 8103c78:	431a      	orrs	r2, r3
 8103c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c7c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103c7e:	e03c      	b.n	8103cfa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c82:	689b      	ldr	r3, [r3, #8]
 8103c84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103c8a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a1f      	ldr	r2, [pc, #124]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d004      	beq.n	8103ca0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d10e      	bne.n	8103cbe <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103ca0:	481b      	ldr	r0, [pc, #108]	@ (8103d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103ca2:	f7ff ff37 	bl	8103b14 <LL_ADC_IsEnabled>
 8103ca6:	4604      	mov	r4, r0
 8103ca8:	481a      	ldr	r0, [pc, #104]	@ (8103d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103caa:	f7ff ff33 	bl	8103b14 <LL_ADC_IsEnabled>
 8103cae:	4603      	mov	r3, r0
 8103cb0:	4323      	orrs	r3, r4
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	bf0c      	ite	eq
 8103cb6:	2301      	moveq	r3, #1
 8103cb8:	2300      	movne	r3, #0
 8103cba:	b2db      	uxtb	r3, r3
 8103cbc:	e008      	b.n	8103cd0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103cbe:	4818      	ldr	r0, [pc, #96]	@ (8103d20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103cc0:	f7ff ff28 	bl	8103b14 <LL_ADC_IsEnabled>
 8103cc4:	4603      	mov	r3, r0
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	bf0c      	ite	eq
 8103cca:	2301      	moveq	r3, #1
 8103ccc:	2300      	movne	r3, #0
 8103cce:	b2db      	uxtb	r3, r3
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d012      	beq.n	8103cfa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103cd6:	689b      	ldr	r3, [r3, #8]
 8103cd8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103cdc:	f023 030f 	bic.w	r3, r3, #15
 8103ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103ce2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103ce4:	e009      	b.n	8103cfa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103cea:	f043 0220 	orr.w	r2, r3, #32
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103cf2:	2301      	movs	r3, #1
 8103cf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103cf8:	e000      	b.n	8103cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103cfa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	2200      	movs	r2, #0
 8103d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103d04:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103d08:	4618      	mov	r0, r3
 8103d0a:	377c      	adds	r7, #124	@ 0x7c
 8103d0c:	46bd      	mov	sp, r7
 8103d0e:	bd90      	pop	{r4, r7, pc}
 8103d10:	40022000 	.word	0x40022000
 8103d14:	40022100 	.word	0x40022100
 8103d18:	40022300 	.word	0x40022300
 8103d1c:	58026300 	.word	0x58026300
 8103d20:	58026000 	.word	0x58026000

08103d24 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103d24:	b580      	push	{r7, lr}
 8103d26:	b082      	sub	sp, #8
 8103d28:	af00      	add	r7, sp, #0
 8103d2a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d003      	beq.n	8103d3a <HAL_CEC_Init+0x16>
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d36:	2b00      	cmp	r3, #0
 8103d38:	d101      	bne.n	8103d3e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103d3a:	2301      	movs	r3, #1
 8103d3c:	e050      	b.n	8103de0 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d106      	bne.n	8103d54 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	2200      	movs	r2, #0
 8103d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103d4e:	6878      	ldr	r0, [r7, #4]
 8103d50:	f7fd fd48 	bl	81017e4 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	2224      	movs	r2, #36	@ 0x24
 8103d58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	681a      	ldr	r2, [r3, #0]
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	f022 0201 	bic.w	r2, r2, #1
 8103d68:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	685a      	ldr	r2, [r3, #4]
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	689b      	ldr	r3, [r3, #8]
 8103d72:	431a      	orrs	r2, r3
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	68db      	ldr	r3, [r3, #12]
 8103d78:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103d7e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	695b      	ldr	r3, [r3, #20]
 8103d84:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103d8a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103d90:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8103d96:	041b      	lsls	r3, r3, #16
 8103d98:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103da4:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103da6:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	695b      	ldr	r3, [r3, #20]
 8103dae:	687a      	ldr	r2, [r7, #4]
 8103db0:	6812      	ldr	r2, [r2, #0]
 8103db2:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103db6:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103dba:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	681a      	ldr	r2, [r3, #0]
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	f042 0201 	orr.w	r2, r2, #1
 8103dca:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	2200      	movs	r2, #0
 8103dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	2220      	movs	r2, #32
 8103dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	2220      	movs	r2, #32
 8103ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8103dde:	2300      	movs	r3, #0
}
 8103de0:	4618      	mov	r0, r3
 8103de2:	3708      	adds	r7, #8
 8103de4:	46bd      	mov	sp, r7
 8103de6:	bd80      	pop	{r7, pc}

08103de8 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103de8:	b580      	push	{r7, lr}
 8103dea:	b084      	sub	sp, #16
 8103dec:	af00      	add	r7, sp, #0
 8103dee:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	691b      	ldr	r3, [r3, #16]
 8103df6:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8103df8:	68fb      	ldr	r3, [r7, #12]
 8103dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103dfe:	2b00      	cmp	r3, #0
 8103e00:	d00a      	beq.n	8103e18 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	2280      	movs	r2, #128	@ 0x80
 8103e06:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	691a      	ldr	r2, [r3, #16]
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103e16:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8103e18:	68fb      	ldr	r3, [r7, #12]
 8103e1a:	f003 0301 	and.w	r3, r3, #1
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d01c      	beq.n	8103e5c <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	2222      	movs	r2, #34	@ 0x22
 8103e26:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103e2c:	3301      	adds	r3, #1
 8103e2e:	b29a      	uxth	r2, r3
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	68da      	ldr	r2, [r3, #12]
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e3e:	b2d2      	uxtb	r2, r2
 8103e40:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e46:	1c5a      	adds	r2, r3, #1
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	691a      	ldr	r2, [r3, #16]
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	f042 0201 	orr.w	r2, r2, #1
 8103e5a:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	f003 0302 	and.w	r3, r3, #2
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d01e      	beq.n	8103ea4 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	691a      	ldr	r2, [r3, #16]
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	f042 0202 	orr.w	r2, r2, #2
 8103e74:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	2220      	movs	r2, #32
 8103e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	2200      	movs	r2, #0
 8103e80:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103e8a:	425b      	negs	r3, r3
 8103e8c:	441a      	add	r2, r3
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103e96:	4619      	mov	r1, r3
 8103e98:	6878      	ldr	r0, [r7, #4]
 8103e9a:	f000 f88c 	bl	8103fb6 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	2200      	movs	r2, #0
 8103ea2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d024      	beq.n	8103ef8 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103eb2:	3b01      	subs	r3, #1
 8103eb4:	b29a      	uxth	r2, r3
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	d107      	bne.n	8103ed2 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	681a      	ldr	r2, [r3, #0]
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	f042 0204 	orr.w	r2, r2, #4
 8103ed0:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ed6:	781a      	ldrb	r2, [r3, #0]
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ee2:	1c5a      	adds	r2, r3, #1
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	691a      	ldr	r2, [r3, #16]
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103ef6:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8103ef8:	68fb      	ldr	r3, [r7, #12]
 8103efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103efe:	2b00      	cmp	r3, #0
 8103f00:	d014      	beq.n	8103f2c <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	691a      	ldr	r2, [r3, #16]
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103f10:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	2220      	movs	r2, #32
 8103f16:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	2200      	movs	r2, #0
 8103f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	2200      	movs	r2, #0
 8103f24:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103f26:	6878      	ldr	r0, [r7, #4]
 8103f28:	f000 f83b 	bl	8103fa2 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8103f2c:	68fa      	ldr	r2, [r7, #12]
 8103f2e:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8103f32:	4013      	ands	r3, r2
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d030      	beq.n	8103f9a <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	68fa      	ldr	r2, [r7, #12]
 8103f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	691b      	ldr	r3, [r3, #16]
 8103f44:	687a      	ldr	r2, [r7, #4]
 8103f46:	6812      	ldr	r2, [r2, #0]
 8103f48:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8103f4c:	f043 031c 	orr.w	r3, r3, #28
 8103f50:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	d00e      	beq.n	8103f7a <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103f64:	425b      	negs	r3, r3
 8103f66:	441a      	add	r2, r3
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2200      	movs	r2, #0
 8103f70:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	2220      	movs	r2, #32
 8103f76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103f78:	e00c      	b.n	8103f94 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8103f7a:	68fb      	ldr	r3, [r7, #12]
 8103f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d107      	bne.n	8103f94 <HAL_CEC_IRQHandler+0x1ac>
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d002      	beq.n	8103f94 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	2220      	movs	r2, #32
 8103f92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103f94:	6878      	ldr	r0, [r7, #4]
 8103f96:	f000 f819 	bl	8103fcc <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8103f9a:	bf00      	nop
 8103f9c:	3710      	adds	r7, #16
 8103f9e:	46bd      	mov	sp, r7
 8103fa0:	bd80      	pop	{r7, pc}

08103fa2 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103fa2:	b480      	push	{r7}
 8103fa4:	b083      	sub	sp, #12
 8103fa6:	af00      	add	r7, sp, #0
 8103fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8103faa:	bf00      	nop
 8103fac:	370c      	adds	r7, #12
 8103fae:	46bd      	mov	sp, r7
 8103fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fb4:	4770      	bx	lr

08103fb6 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103fb6:	b480      	push	{r7}
 8103fb8:	b083      	sub	sp, #12
 8103fba:	af00      	add	r7, sp, #0
 8103fbc:	6078      	str	r0, [r7, #4]
 8103fbe:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103fc0:	bf00      	nop
 8103fc2:	370c      	adds	r7, #12
 8103fc4:	46bd      	mov	sp, r7
 8103fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fca:	4770      	bx	lr

08103fcc <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8103fcc:	b480      	push	{r7}
 8103fce:	b083      	sub	sp, #12
 8103fd0:	af00      	add	r7, sp, #0
 8103fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103fd4:	bf00      	nop
 8103fd6:	370c      	adds	r7, #12
 8103fd8:	46bd      	mov	sp, r7
 8103fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fde:	4770      	bx	lr

08103fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103fe0:	b480      	push	{r7}
 8103fe2:	b085      	sub	sp, #20
 8103fe4:	af00      	add	r7, sp, #0
 8103fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	f003 0307 	and.w	r3, r3, #7
 8103fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8104024 <__NVIC_SetPriorityGrouping+0x44>)
 8103ff2:	68db      	ldr	r3, [r3, #12]
 8103ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103ff6:	68ba      	ldr	r2, [r7, #8]
 8103ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103ffc:	4013      	ands	r3, r2
 8103ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104000:	68fb      	ldr	r3, [r7, #12]
 8104002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104004:	68bb      	ldr	r3, [r7, #8]
 8104006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810400c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104012:	4a04      	ldr	r2, [pc, #16]	@ (8104024 <__NVIC_SetPriorityGrouping+0x44>)
 8104014:	68bb      	ldr	r3, [r7, #8]
 8104016:	60d3      	str	r3, [r2, #12]
}
 8104018:	bf00      	nop
 810401a:	3714      	adds	r7, #20
 810401c:	46bd      	mov	sp, r7
 810401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104022:	4770      	bx	lr
 8104024:	e000ed00 	.word	0xe000ed00

08104028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104028:	b480      	push	{r7}
 810402a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810402c:	4b04      	ldr	r3, [pc, #16]	@ (8104040 <__NVIC_GetPriorityGrouping+0x18>)
 810402e:	68db      	ldr	r3, [r3, #12]
 8104030:	0a1b      	lsrs	r3, r3, #8
 8104032:	f003 0307 	and.w	r3, r3, #7
}
 8104036:	4618      	mov	r0, r3
 8104038:	46bd      	mov	sp, r7
 810403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810403e:	4770      	bx	lr
 8104040:	e000ed00 	.word	0xe000ed00

08104044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104044:	b480      	push	{r7}
 8104046:	b083      	sub	sp, #12
 8104048:	af00      	add	r7, sp, #0
 810404a:	4603      	mov	r3, r0
 810404c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810404e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104052:	2b00      	cmp	r3, #0
 8104054:	db0b      	blt.n	810406e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104056:	88fb      	ldrh	r3, [r7, #6]
 8104058:	f003 021f 	and.w	r2, r3, #31
 810405c:	4907      	ldr	r1, [pc, #28]	@ (810407c <__NVIC_EnableIRQ+0x38>)
 810405e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104062:	095b      	lsrs	r3, r3, #5
 8104064:	2001      	movs	r0, #1
 8104066:	fa00 f202 	lsl.w	r2, r0, r2
 810406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810406e:	bf00      	nop
 8104070:	370c      	adds	r7, #12
 8104072:	46bd      	mov	sp, r7
 8104074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104078:	4770      	bx	lr
 810407a:	bf00      	nop
 810407c:	e000e100 	.word	0xe000e100

08104080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104080:	b480      	push	{r7}
 8104082:	b083      	sub	sp, #12
 8104084:	af00      	add	r7, sp, #0
 8104086:	4603      	mov	r3, r0
 8104088:	6039      	str	r1, [r7, #0]
 810408a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104090:	2b00      	cmp	r3, #0
 8104092:	db0a      	blt.n	81040aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104094:	683b      	ldr	r3, [r7, #0]
 8104096:	b2da      	uxtb	r2, r3
 8104098:	490c      	ldr	r1, [pc, #48]	@ (81040cc <__NVIC_SetPriority+0x4c>)
 810409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810409e:	0112      	lsls	r2, r2, #4
 81040a0:	b2d2      	uxtb	r2, r2
 81040a2:	440b      	add	r3, r1
 81040a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81040a8:	e00a      	b.n	81040c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81040aa:	683b      	ldr	r3, [r7, #0]
 81040ac:	b2da      	uxtb	r2, r3
 81040ae:	4908      	ldr	r1, [pc, #32]	@ (81040d0 <__NVIC_SetPriority+0x50>)
 81040b0:	88fb      	ldrh	r3, [r7, #6]
 81040b2:	f003 030f 	and.w	r3, r3, #15
 81040b6:	3b04      	subs	r3, #4
 81040b8:	0112      	lsls	r2, r2, #4
 81040ba:	b2d2      	uxtb	r2, r2
 81040bc:	440b      	add	r3, r1
 81040be:	761a      	strb	r2, [r3, #24]
}
 81040c0:	bf00      	nop
 81040c2:	370c      	adds	r7, #12
 81040c4:	46bd      	mov	sp, r7
 81040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ca:	4770      	bx	lr
 81040cc:	e000e100 	.word	0xe000e100
 81040d0:	e000ed00 	.word	0xe000ed00

081040d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81040d4:	b480      	push	{r7}
 81040d6:	b089      	sub	sp, #36	@ 0x24
 81040d8:	af00      	add	r7, sp, #0
 81040da:	60f8      	str	r0, [r7, #12]
 81040dc:	60b9      	str	r1, [r7, #8]
 81040de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	f003 0307 	and.w	r3, r3, #7
 81040e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81040e8:	69fb      	ldr	r3, [r7, #28]
 81040ea:	f1c3 0307 	rsb	r3, r3, #7
 81040ee:	2b04      	cmp	r3, #4
 81040f0:	bf28      	it	cs
 81040f2:	2304      	movcs	r3, #4
 81040f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81040f6:	69fb      	ldr	r3, [r7, #28]
 81040f8:	3304      	adds	r3, #4
 81040fa:	2b06      	cmp	r3, #6
 81040fc:	d902      	bls.n	8104104 <NVIC_EncodePriority+0x30>
 81040fe:	69fb      	ldr	r3, [r7, #28]
 8104100:	3b03      	subs	r3, #3
 8104102:	e000      	b.n	8104106 <NVIC_EncodePriority+0x32>
 8104104:	2300      	movs	r3, #0
 8104106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104108:	f04f 32ff 	mov.w	r2, #4294967295
 810410c:	69bb      	ldr	r3, [r7, #24]
 810410e:	fa02 f303 	lsl.w	r3, r2, r3
 8104112:	43da      	mvns	r2, r3
 8104114:	68bb      	ldr	r3, [r7, #8]
 8104116:	401a      	ands	r2, r3
 8104118:	697b      	ldr	r3, [r7, #20]
 810411a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810411c:	f04f 31ff 	mov.w	r1, #4294967295
 8104120:	697b      	ldr	r3, [r7, #20]
 8104122:	fa01 f303 	lsl.w	r3, r1, r3
 8104126:	43d9      	mvns	r1, r3
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810412c:	4313      	orrs	r3, r2
         );
}
 810412e:	4618      	mov	r0, r3
 8104130:	3724      	adds	r7, #36	@ 0x24
 8104132:	46bd      	mov	sp, r7
 8104134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104138:	4770      	bx	lr
	...

0810413c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810413c:	b580      	push	{r7, lr}
 810413e:	b082      	sub	sp, #8
 8104140:	af00      	add	r7, sp, #0
 8104142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	3b01      	subs	r3, #1
 8104148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810414c:	d301      	bcc.n	8104152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810414e:	2301      	movs	r3, #1
 8104150:	e00f      	b.n	8104172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104152:	4a0a      	ldr	r2, [pc, #40]	@ (810417c <SysTick_Config+0x40>)
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	3b01      	subs	r3, #1
 8104158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810415a:	210f      	movs	r1, #15
 810415c:	f04f 30ff 	mov.w	r0, #4294967295
 8104160:	f7ff ff8e 	bl	8104080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104164:	4b05      	ldr	r3, [pc, #20]	@ (810417c <SysTick_Config+0x40>)
 8104166:	2200      	movs	r2, #0
 8104168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810416a:	4b04      	ldr	r3, [pc, #16]	@ (810417c <SysTick_Config+0x40>)
 810416c:	2207      	movs	r2, #7
 810416e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104170:	2300      	movs	r3, #0
}
 8104172:	4618      	mov	r0, r3
 8104174:	3708      	adds	r7, #8
 8104176:	46bd      	mov	sp, r7
 8104178:	bd80      	pop	{r7, pc}
 810417a:	bf00      	nop
 810417c:	e000e010 	.word	0xe000e010

08104180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104180:	b580      	push	{r7, lr}
 8104182:	b082      	sub	sp, #8
 8104184:	af00      	add	r7, sp, #0
 8104186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104188:	6878      	ldr	r0, [r7, #4]
 810418a:	f7ff ff29 	bl	8103fe0 <__NVIC_SetPriorityGrouping>
}
 810418e:	bf00      	nop
 8104190:	3708      	adds	r7, #8
 8104192:	46bd      	mov	sp, r7
 8104194:	bd80      	pop	{r7, pc}

08104196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104196:	b580      	push	{r7, lr}
 8104198:	b086      	sub	sp, #24
 810419a:	af00      	add	r7, sp, #0
 810419c:	4603      	mov	r3, r0
 810419e:	60b9      	str	r1, [r7, #8]
 81041a0:	607a      	str	r2, [r7, #4]
 81041a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81041a4:	f7ff ff40 	bl	8104028 <__NVIC_GetPriorityGrouping>
 81041a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81041aa:	687a      	ldr	r2, [r7, #4]
 81041ac:	68b9      	ldr	r1, [r7, #8]
 81041ae:	6978      	ldr	r0, [r7, #20]
 81041b0:	f7ff ff90 	bl	81040d4 <NVIC_EncodePriority>
 81041b4:	4602      	mov	r2, r0
 81041b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81041ba:	4611      	mov	r1, r2
 81041bc:	4618      	mov	r0, r3
 81041be:	f7ff ff5f 	bl	8104080 <__NVIC_SetPriority>
}
 81041c2:	bf00      	nop
 81041c4:	3718      	adds	r7, #24
 81041c6:	46bd      	mov	sp, r7
 81041c8:	bd80      	pop	{r7, pc}

081041ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81041ca:	b580      	push	{r7, lr}
 81041cc:	b082      	sub	sp, #8
 81041ce:	af00      	add	r7, sp, #0
 81041d0:	4603      	mov	r3, r0
 81041d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81041d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041d8:	4618      	mov	r0, r3
 81041da:	f7ff ff33 	bl	8104044 <__NVIC_EnableIRQ>
}
 81041de:	bf00      	nop
 81041e0:	3708      	adds	r7, #8
 81041e2:	46bd      	mov	sp, r7
 81041e4:	bd80      	pop	{r7, pc}

081041e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81041e6:	b580      	push	{r7, lr}
 81041e8:	b082      	sub	sp, #8
 81041ea:	af00      	add	r7, sp, #0
 81041ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81041ee:	6878      	ldr	r0, [r7, #4]
 81041f0:	f7ff ffa4 	bl	810413c <SysTick_Config>
 81041f4:	4603      	mov	r3, r0
}
 81041f6:	4618      	mov	r0, r3
 81041f8:	3708      	adds	r7, #8
 81041fa:	46bd      	mov	sp, r7
 81041fc:	bd80      	pop	{r7, pc}
	...

08104200 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104200:	b480      	push	{r7}
 8104202:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104204:	4b06      	ldr	r3, [pc, #24]	@ (8104220 <HAL_GetCurrentCPUID+0x20>)
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810420c:	2b70      	cmp	r3, #112	@ 0x70
 810420e:	d101      	bne.n	8104214 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8104210:	2303      	movs	r3, #3
 8104212:	e000      	b.n	8104216 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8104214:	2301      	movs	r3, #1
  }
}
 8104216:	4618      	mov	r0, r3
 8104218:	46bd      	mov	sp, r7
 810421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810421e:	4770      	bx	lr
 8104220:	e000ed00 	.word	0xe000ed00

08104224 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8104224:	b580      	push	{r7, lr}
 8104226:	b086      	sub	sp, #24
 8104228:	af00      	add	r7, sp, #0
 810422a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 810422c:	f7fe fcb0 	bl	8102b90 <HAL_GetTick>
 8104230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	2b00      	cmp	r3, #0
 8104236:	d101      	bne.n	810423c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104238:	2301      	movs	r3, #1
 810423a:	e314      	b.n	8104866 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	4a66      	ldr	r2, [pc, #408]	@ (81043dc <HAL_DMA_Init+0x1b8>)
 8104242:	4293      	cmp	r3, r2
 8104244:	d04a      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	4a65      	ldr	r2, [pc, #404]	@ (81043e0 <HAL_DMA_Init+0x1bc>)
 810424c:	4293      	cmp	r3, r2
 810424e:	d045      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	4a63      	ldr	r2, [pc, #396]	@ (81043e4 <HAL_DMA_Init+0x1c0>)
 8104256:	4293      	cmp	r3, r2
 8104258:	d040      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	4a62      	ldr	r2, [pc, #392]	@ (81043e8 <HAL_DMA_Init+0x1c4>)
 8104260:	4293      	cmp	r3, r2
 8104262:	d03b      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	681b      	ldr	r3, [r3, #0]
 8104268:	4a60      	ldr	r2, [pc, #384]	@ (81043ec <HAL_DMA_Init+0x1c8>)
 810426a:	4293      	cmp	r3, r2
 810426c:	d036      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	4a5f      	ldr	r2, [pc, #380]	@ (81043f0 <HAL_DMA_Init+0x1cc>)
 8104274:	4293      	cmp	r3, r2
 8104276:	d031      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	4a5d      	ldr	r2, [pc, #372]	@ (81043f4 <HAL_DMA_Init+0x1d0>)
 810427e:	4293      	cmp	r3, r2
 8104280:	d02c      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	4a5c      	ldr	r2, [pc, #368]	@ (81043f8 <HAL_DMA_Init+0x1d4>)
 8104288:	4293      	cmp	r3, r2
 810428a:	d027      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	4a5a      	ldr	r2, [pc, #360]	@ (81043fc <HAL_DMA_Init+0x1d8>)
 8104292:	4293      	cmp	r3, r2
 8104294:	d022      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	4a59      	ldr	r2, [pc, #356]	@ (8104400 <HAL_DMA_Init+0x1dc>)
 810429c:	4293      	cmp	r3, r2
 810429e:	d01d      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	4a57      	ldr	r2, [pc, #348]	@ (8104404 <HAL_DMA_Init+0x1e0>)
 81042a6:	4293      	cmp	r3, r2
 81042a8:	d018      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4a56      	ldr	r2, [pc, #344]	@ (8104408 <HAL_DMA_Init+0x1e4>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d013      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a54      	ldr	r2, [pc, #336]	@ (810440c <HAL_DMA_Init+0x1e8>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d00e      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a53      	ldr	r2, [pc, #332]	@ (8104410 <HAL_DMA_Init+0x1ec>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d009      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a51      	ldr	r2, [pc, #324]	@ (8104414 <HAL_DMA_Init+0x1f0>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d004      	beq.n	81042dc <HAL_DMA_Init+0xb8>
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	4a50      	ldr	r2, [pc, #320]	@ (8104418 <HAL_DMA_Init+0x1f4>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d101      	bne.n	81042e0 <HAL_DMA_Init+0xbc>
 81042dc:	2301      	movs	r3, #1
 81042de:	e000      	b.n	81042e2 <HAL_DMA_Init+0xbe>
 81042e0:	2300      	movs	r3, #0
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	f000 813b 	beq.w	810455e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	2202      	movs	r2, #2
 81042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	2200      	movs	r2, #0
 81042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	4a37      	ldr	r2, [pc, #220]	@ (81043dc <HAL_DMA_Init+0x1b8>)
 81042fe:	4293      	cmp	r3, r2
 8104300:	d04a      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4a36      	ldr	r2, [pc, #216]	@ (81043e0 <HAL_DMA_Init+0x1bc>)
 8104308:	4293      	cmp	r3, r2
 810430a:	d045      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	4a34      	ldr	r2, [pc, #208]	@ (81043e4 <HAL_DMA_Init+0x1c0>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d040      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	4a33      	ldr	r2, [pc, #204]	@ (81043e8 <HAL_DMA_Init+0x1c4>)
 810431c:	4293      	cmp	r3, r2
 810431e:	d03b      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	4a31      	ldr	r2, [pc, #196]	@ (81043ec <HAL_DMA_Init+0x1c8>)
 8104326:	4293      	cmp	r3, r2
 8104328:	d036      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	4a30      	ldr	r2, [pc, #192]	@ (81043f0 <HAL_DMA_Init+0x1cc>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d031      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	4a2e      	ldr	r2, [pc, #184]	@ (81043f4 <HAL_DMA_Init+0x1d0>)
 810433a:	4293      	cmp	r3, r2
 810433c:	d02c      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a2d      	ldr	r2, [pc, #180]	@ (81043f8 <HAL_DMA_Init+0x1d4>)
 8104344:	4293      	cmp	r3, r2
 8104346:	d027      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	4a2b      	ldr	r2, [pc, #172]	@ (81043fc <HAL_DMA_Init+0x1d8>)
 810434e:	4293      	cmp	r3, r2
 8104350:	d022      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	4a2a      	ldr	r2, [pc, #168]	@ (8104400 <HAL_DMA_Init+0x1dc>)
 8104358:	4293      	cmp	r3, r2
 810435a:	d01d      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	4a28      	ldr	r2, [pc, #160]	@ (8104404 <HAL_DMA_Init+0x1e0>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d018      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	4a27      	ldr	r2, [pc, #156]	@ (8104408 <HAL_DMA_Init+0x1e4>)
 810436c:	4293      	cmp	r3, r2
 810436e:	d013      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	4a25      	ldr	r2, [pc, #148]	@ (810440c <HAL_DMA_Init+0x1e8>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d00e      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	4a24      	ldr	r2, [pc, #144]	@ (8104410 <HAL_DMA_Init+0x1ec>)
 8104380:	4293      	cmp	r3, r2
 8104382:	d009      	beq.n	8104398 <HAL_DMA_Init+0x174>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a22      	ldr	r2, [pc, #136]	@ (8104414 <HAL_DMA_Init+0x1f0>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d004      	beq.n	8104398 <HAL_DMA_Init+0x174>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a21      	ldr	r2, [pc, #132]	@ (8104418 <HAL_DMA_Init+0x1f4>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d108      	bne.n	81043aa <HAL_DMA_Init+0x186>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	681a      	ldr	r2, [r3, #0]
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	f022 0201 	bic.w	r2, r2, #1
 81043a6:	601a      	str	r2, [r3, #0]
 81043a8:	e007      	b.n	81043ba <HAL_DMA_Init+0x196>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	681a      	ldr	r2, [r3, #0]
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	f022 0201 	bic.w	r2, r2, #1
 81043b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81043ba:	e02f      	b.n	810441c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81043bc:	f7fe fbe8 	bl	8102b90 <HAL_GetTick>
 81043c0:	4602      	mov	r2, r0
 81043c2:	693b      	ldr	r3, [r7, #16]
 81043c4:	1ad3      	subs	r3, r2, r3
 81043c6:	2b05      	cmp	r3, #5
 81043c8:	d928      	bls.n	810441c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	2220      	movs	r2, #32
 81043ce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	2203      	movs	r2, #3
 81043d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 81043d8:	2301      	movs	r3, #1
 81043da:	e244      	b.n	8104866 <HAL_DMA_Init+0x642>
 81043dc:	40020010 	.word	0x40020010
 81043e0:	40020028 	.word	0x40020028
 81043e4:	40020040 	.word	0x40020040
 81043e8:	40020058 	.word	0x40020058
 81043ec:	40020070 	.word	0x40020070
 81043f0:	40020088 	.word	0x40020088
 81043f4:	400200a0 	.word	0x400200a0
 81043f8:	400200b8 	.word	0x400200b8
 81043fc:	40020410 	.word	0x40020410
 8104400:	40020428 	.word	0x40020428
 8104404:	40020440 	.word	0x40020440
 8104408:	40020458 	.word	0x40020458
 810440c:	40020470 	.word	0x40020470
 8104410:	40020488 	.word	0x40020488
 8104414:	400204a0 	.word	0x400204a0
 8104418:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	f003 0301 	and.w	r3, r3, #1
 8104426:	2b00      	cmp	r3, #0
 8104428:	d1c8      	bne.n	81043bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8104432:	697a      	ldr	r2, [r7, #20]
 8104434:	4b84      	ldr	r3, [pc, #528]	@ (8104648 <HAL_DMA_Init+0x424>)
 8104436:	4013      	ands	r3, r2
 8104438:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8104442:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	691b      	ldr	r3, [r3, #16]
 8104448:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810444e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	699b      	ldr	r3, [r3, #24]
 8104454:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810445a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	6a1b      	ldr	r3, [r3, #32]
 8104460:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8104462:	697a      	ldr	r2, [r7, #20]
 8104464:	4313      	orrs	r3, r2
 8104466:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810446c:	2b04      	cmp	r3, #4
 810446e:	d107      	bne.n	8104480 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104478:	4313      	orrs	r3, r2
 810447a:	697a      	ldr	r2, [r7, #20]
 810447c:	4313      	orrs	r3, r2
 810447e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104480:	4b72      	ldr	r3, [pc, #456]	@ (810464c <HAL_DMA_Init+0x428>)
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	0c1b      	lsrs	r3, r3, #16
 8104486:	041b      	lsls	r3, r3, #16
 8104488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810448c:	d328      	bcc.n	81044e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	685b      	ldr	r3, [r3, #4]
 8104492:	2b28      	cmp	r3, #40	@ 0x28
 8104494:	d903      	bls.n	810449e <HAL_DMA_Init+0x27a>
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	685b      	ldr	r3, [r3, #4]
 810449a:	2b2e      	cmp	r3, #46	@ 0x2e
 810449c:	d917      	bls.n	81044ce <HAL_DMA_Init+0x2aa>
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	685b      	ldr	r3, [r3, #4]
 81044a2:	2b3e      	cmp	r3, #62	@ 0x3e
 81044a4:	d903      	bls.n	81044ae <HAL_DMA_Init+0x28a>
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	685b      	ldr	r3, [r3, #4]
 81044aa:	2b42      	cmp	r3, #66	@ 0x42
 81044ac:	d90f      	bls.n	81044ce <HAL_DMA_Init+0x2aa>
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	685b      	ldr	r3, [r3, #4]
 81044b2:	2b46      	cmp	r3, #70	@ 0x46
 81044b4:	d903      	bls.n	81044be <HAL_DMA_Init+0x29a>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	685b      	ldr	r3, [r3, #4]
 81044ba:	2b48      	cmp	r3, #72	@ 0x48
 81044bc:	d907      	bls.n	81044ce <HAL_DMA_Init+0x2aa>
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	685b      	ldr	r3, [r3, #4]
 81044c2:	2b4e      	cmp	r3, #78	@ 0x4e
 81044c4:	d905      	bls.n	81044d2 <HAL_DMA_Init+0x2ae>
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	685b      	ldr	r3, [r3, #4]
 81044ca:	2b52      	cmp	r3, #82	@ 0x52
 81044cc:	d801      	bhi.n	81044d2 <HAL_DMA_Init+0x2ae>
 81044ce:	2301      	movs	r3, #1
 81044d0:	e000      	b.n	81044d4 <HAL_DMA_Init+0x2b0>
 81044d2:	2300      	movs	r3, #0
 81044d4:	2b00      	cmp	r3, #0
 81044d6:	d003      	beq.n	81044e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81044d8:	697b      	ldr	r3, [r7, #20]
 81044da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81044de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	697a      	ldr	r2, [r7, #20]
 81044e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	695b      	ldr	r3, [r3, #20]
 81044ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81044f0:	697b      	ldr	r3, [r7, #20]
 81044f2:	f023 0307 	bic.w	r3, r3, #7
 81044f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81044fc:	697a      	ldr	r2, [r7, #20]
 81044fe:	4313      	orrs	r3, r2
 8104500:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104506:	2b04      	cmp	r3, #4
 8104508:	d117      	bne.n	810453a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810450e:	697a      	ldr	r2, [r7, #20]
 8104510:	4313      	orrs	r3, r2
 8104512:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104518:	2b00      	cmp	r3, #0
 810451a:	d00e      	beq.n	810453a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 810451c:	6878      	ldr	r0, [r7, #4]
 810451e:	f000 fa8d 	bl	8104a3c <DMA_CheckFifoParam>
 8104522:	4603      	mov	r3, r0
 8104524:	2b00      	cmp	r3, #0
 8104526:	d008      	beq.n	810453a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	2240      	movs	r2, #64	@ 0x40
 810452c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	2201      	movs	r2, #1
 8104532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8104536:	2301      	movs	r3, #1
 8104538:	e195      	b.n	8104866 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	697a      	ldr	r2, [r7, #20]
 8104540:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104542:	6878      	ldr	r0, [r7, #4]
 8104544:	f000 f9c8 	bl	81048d8 <DMA_CalcBaseAndBitshift>
 8104548:	4603      	mov	r3, r0
 810454a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104550:	f003 031f 	and.w	r3, r3, #31
 8104554:	223f      	movs	r2, #63	@ 0x3f
 8104556:	409a      	lsls	r2, r3
 8104558:	68bb      	ldr	r3, [r7, #8]
 810455a:	609a      	str	r2, [r3, #8]
 810455c:	e0cb      	b.n	81046f6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a3b      	ldr	r2, [pc, #236]	@ (8104650 <HAL_DMA_Init+0x42c>)
 8104564:	4293      	cmp	r3, r2
 8104566:	d022      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	4a39      	ldr	r2, [pc, #228]	@ (8104654 <HAL_DMA_Init+0x430>)
 810456e:	4293      	cmp	r3, r2
 8104570:	d01d      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a38      	ldr	r2, [pc, #224]	@ (8104658 <HAL_DMA_Init+0x434>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d018      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a36      	ldr	r2, [pc, #216]	@ (810465c <HAL_DMA_Init+0x438>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d013      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	4a35      	ldr	r2, [pc, #212]	@ (8104660 <HAL_DMA_Init+0x43c>)
 810458c:	4293      	cmp	r3, r2
 810458e:	d00e      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4a33      	ldr	r2, [pc, #204]	@ (8104664 <HAL_DMA_Init+0x440>)
 8104596:	4293      	cmp	r3, r2
 8104598:	d009      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	4a32      	ldr	r2, [pc, #200]	@ (8104668 <HAL_DMA_Init+0x444>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d004      	beq.n	81045ae <HAL_DMA_Init+0x38a>
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	4a30      	ldr	r2, [pc, #192]	@ (810466c <HAL_DMA_Init+0x448>)
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d101      	bne.n	81045b2 <HAL_DMA_Init+0x38e>
 81045ae:	2301      	movs	r3, #1
 81045b0:	e000      	b.n	81045b4 <HAL_DMA_Init+0x390>
 81045b2:	2300      	movs	r3, #0
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	f000 8095 	beq.w	81046e4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	4a24      	ldr	r2, [pc, #144]	@ (8104650 <HAL_DMA_Init+0x42c>)
 81045c0:	4293      	cmp	r3, r2
 81045c2:	d021      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	4a22      	ldr	r2, [pc, #136]	@ (8104654 <HAL_DMA_Init+0x430>)
 81045ca:	4293      	cmp	r3, r2
 81045cc:	d01c      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	4a21      	ldr	r2, [pc, #132]	@ (8104658 <HAL_DMA_Init+0x434>)
 81045d4:	4293      	cmp	r3, r2
 81045d6:	d017      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	4a1f      	ldr	r2, [pc, #124]	@ (810465c <HAL_DMA_Init+0x438>)
 81045de:	4293      	cmp	r3, r2
 81045e0:	d012      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	4a1e      	ldr	r2, [pc, #120]	@ (8104660 <HAL_DMA_Init+0x43c>)
 81045e8:	4293      	cmp	r3, r2
 81045ea:	d00d      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	4a1c      	ldr	r2, [pc, #112]	@ (8104664 <HAL_DMA_Init+0x440>)
 81045f2:	4293      	cmp	r3, r2
 81045f4:	d008      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	4a1b      	ldr	r2, [pc, #108]	@ (8104668 <HAL_DMA_Init+0x444>)
 81045fc:	4293      	cmp	r3, r2
 81045fe:	d003      	beq.n	8104608 <HAL_DMA_Init+0x3e4>
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	4a19      	ldr	r2, [pc, #100]	@ (810466c <HAL_DMA_Init+0x448>)
 8104606:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	2202      	movs	r2, #2
 810460c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	2200      	movs	r2, #0
 8104614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8104620:	697b      	ldr	r3, [r7, #20]
 8104622:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8104626:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 810462a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	689b      	ldr	r3, [r3, #8]
 8104630:	2b40      	cmp	r3, #64	@ 0x40
 8104632:	d01d      	beq.n	8104670 <HAL_DMA_Init+0x44c>
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	689b      	ldr	r3, [r3, #8]
 8104638:	2b80      	cmp	r3, #128	@ 0x80
 810463a:	d102      	bne.n	8104642 <HAL_DMA_Init+0x41e>
 810463c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104640:	e017      	b.n	8104672 <HAL_DMA_Init+0x44e>
 8104642:	2300      	movs	r3, #0
 8104644:	e015      	b.n	8104672 <HAL_DMA_Init+0x44e>
 8104646:	bf00      	nop
 8104648:	fe10803f 	.word	0xfe10803f
 810464c:	5c001000 	.word	0x5c001000
 8104650:	58025408 	.word	0x58025408
 8104654:	5802541c 	.word	0x5802541c
 8104658:	58025430 	.word	0x58025430
 810465c:	58025444 	.word	0x58025444
 8104660:	58025458 	.word	0x58025458
 8104664:	5802546c 	.word	0x5802546c
 8104668:	58025480 	.word	0x58025480
 810466c:	58025494 	.word	0x58025494
 8104670:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104672:	687a      	ldr	r2, [r7, #4]
 8104674:	68d2      	ldr	r2, [r2, #12]
 8104676:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	691b      	ldr	r3, [r3, #16]
 810467e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	695b      	ldr	r3, [r3, #20]
 8104686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	699b      	ldr	r3, [r3, #24]
 810468e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	69db      	ldr	r3, [r3, #28]
 8104696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	6a1b      	ldr	r3, [r3, #32]
 810469e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81046a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81046a2:	697a      	ldr	r2, [r7, #20]
 81046a4:	4313      	orrs	r3, r2
 81046a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	681b      	ldr	r3, [r3, #0]
 81046ac:	697a      	ldr	r2, [r7, #20]
 81046ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	461a      	mov	r2, r3
 81046b6:	4b6e      	ldr	r3, [pc, #440]	@ (8104870 <HAL_DMA_Init+0x64c>)
 81046b8:	4413      	add	r3, r2
 81046ba:	4a6e      	ldr	r2, [pc, #440]	@ (8104874 <HAL_DMA_Init+0x650>)
 81046bc:	fba2 2303 	umull	r2, r3, r2, r3
 81046c0:	091b      	lsrs	r3, r3, #4
 81046c2:	009a      	lsls	r2, r3, #2
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81046c8:	6878      	ldr	r0, [r7, #4]
 81046ca:	f000 f905 	bl	81048d8 <DMA_CalcBaseAndBitshift>
 81046ce:	4603      	mov	r3, r0
 81046d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81046d6:	f003 031f 	and.w	r3, r3, #31
 81046da:	2201      	movs	r2, #1
 81046dc:	409a      	lsls	r2, r3
 81046de:	68fb      	ldr	r3, [r7, #12]
 81046e0:	605a      	str	r2, [r3, #4]
 81046e2:	e008      	b.n	81046f6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	2240      	movs	r2, #64	@ 0x40
 81046e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	2203      	movs	r2, #3
 81046ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 81046f2:	2301      	movs	r3, #1
 81046f4:	e0b7      	b.n	8104866 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	4a5f      	ldr	r2, [pc, #380]	@ (8104878 <HAL_DMA_Init+0x654>)
 81046fc:	4293      	cmp	r3, r2
 81046fe:	d072      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	4a5d      	ldr	r2, [pc, #372]	@ (810487c <HAL_DMA_Init+0x658>)
 8104706:	4293      	cmp	r3, r2
 8104708:	d06d      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	4a5c      	ldr	r2, [pc, #368]	@ (8104880 <HAL_DMA_Init+0x65c>)
 8104710:	4293      	cmp	r3, r2
 8104712:	d068      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	4a5a      	ldr	r2, [pc, #360]	@ (8104884 <HAL_DMA_Init+0x660>)
 810471a:	4293      	cmp	r3, r2
 810471c:	d063      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	4a59      	ldr	r2, [pc, #356]	@ (8104888 <HAL_DMA_Init+0x664>)
 8104724:	4293      	cmp	r3, r2
 8104726:	d05e      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	4a57      	ldr	r2, [pc, #348]	@ (810488c <HAL_DMA_Init+0x668>)
 810472e:	4293      	cmp	r3, r2
 8104730:	d059      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	4a56      	ldr	r2, [pc, #344]	@ (8104890 <HAL_DMA_Init+0x66c>)
 8104738:	4293      	cmp	r3, r2
 810473a:	d054      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	4a54      	ldr	r2, [pc, #336]	@ (8104894 <HAL_DMA_Init+0x670>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d04f      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a53      	ldr	r2, [pc, #332]	@ (8104898 <HAL_DMA_Init+0x674>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d04a      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a51      	ldr	r2, [pc, #324]	@ (810489c <HAL_DMA_Init+0x678>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d045      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a50      	ldr	r2, [pc, #320]	@ (81048a0 <HAL_DMA_Init+0x67c>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d040      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a4e      	ldr	r2, [pc, #312]	@ (81048a4 <HAL_DMA_Init+0x680>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d03b      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a4d      	ldr	r2, [pc, #308]	@ (81048a8 <HAL_DMA_Init+0x684>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d036      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a4b      	ldr	r2, [pc, #300]	@ (81048ac <HAL_DMA_Init+0x688>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d031      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a4a      	ldr	r2, [pc, #296]	@ (81048b0 <HAL_DMA_Init+0x68c>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d02c      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a48      	ldr	r2, [pc, #288]	@ (81048b4 <HAL_DMA_Init+0x690>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d027      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a47      	ldr	r2, [pc, #284]	@ (81048b8 <HAL_DMA_Init+0x694>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d022      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a45      	ldr	r2, [pc, #276]	@ (81048bc <HAL_DMA_Init+0x698>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d01d      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a44      	ldr	r2, [pc, #272]	@ (81048c0 <HAL_DMA_Init+0x69c>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d018      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a42      	ldr	r2, [pc, #264]	@ (81048c4 <HAL_DMA_Init+0x6a0>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d013      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a41      	ldr	r2, [pc, #260]	@ (81048c8 <HAL_DMA_Init+0x6a4>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d00e      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a3f      	ldr	r2, [pc, #252]	@ (81048cc <HAL_DMA_Init+0x6a8>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d009      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a3e      	ldr	r2, [pc, #248]	@ (81048d0 <HAL_DMA_Init+0x6ac>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d004      	beq.n	81047e6 <HAL_DMA_Init+0x5c2>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a3c      	ldr	r2, [pc, #240]	@ (81048d4 <HAL_DMA_Init+0x6b0>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d101      	bne.n	81047ea <HAL_DMA_Init+0x5c6>
 81047e6:	2301      	movs	r3, #1
 81047e8:	e000      	b.n	81047ec <HAL_DMA_Init+0x5c8>
 81047ea:	2300      	movs	r3, #0
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	d032      	beq.n	8104856 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81047f0:	6878      	ldr	r0, [r7, #4]
 81047f2:	f000 f99f 	bl	8104b34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	689b      	ldr	r3, [r3, #8]
 81047fa:	2b80      	cmp	r3, #128	@ 0x80
 81047fc:	d102      	bne.n	8104804 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	2200      	movs	r2, #0
 8104802:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	685a      	ldr	r2, [r3, #4]
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810480c:	b2d2      	uxtb	r2, r2
 810480e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104814:	687a      	ldr	r2, [r7, #4]
 8104816:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104818:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	685b      	ldr	r3, [r3, #4]
 810481e:	2b00      	cmp	r3, #0
 8104820:	d010      	beq.n	8104844 <HAL_DMA_Init+0x620>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	685b      	ldr	r3, [r3, #4]
 8104826:	2b08      	cmp	r3, #8
 8104828:	d80c      	bhi.n	8104844 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810482a:	6878      	ldr	r0, [r7, #4]
 810482c:	f000 fa1c 	bl	8104c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104834:	2200      	movs	r2, #0
 8104836:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810483c:	687a      	ldr	r2, [r7, #4]
 810483e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8104840:	605a      	str	r2, [r3, #4]
 8104842:	e008      	b.n	8104856 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	2200      	movs	r2, #0
 8104848:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	2200      	movs	r2, #0
 810484e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	2200      	movs	r2, #0
 8104854:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	2200      	movs	r2, #0
 810485a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	2201      	movs	r2, #1
 8104860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8104864:	2300      	movs	r3, #0
}
 8104866:	4618      	mov	r0, r3
 8104868:	3718      	adds	r7, #24
 810486a:	46bd      	mov	sp, r7
 810486c:	bd80      	pop	{r7, pc}
 810486e:	bf00      	nop
 8104870:	a7fdabf8 	.word	0xa7fdabf8
 8104874:	cccccccd 	.word	0xcccccccd
 8104878:	40020010 	.word	0x40020010
 810487c:	40020028 	.word	0x40020028
 8104880:	40020040 	.word	0x40020040
 8104884:	40020058 	.word	0x40020058
 8104888:	40020070 	.word	0x40020070
 810488c:	40020088 	.word	0x40020088
 8104890:	400200a0 	.word	0x400200a0
 8104894:	400200b8 	.word	0x400200b8
 8104898:	40020410 	.word	0x40020410
 810489c:	40020428 	.word	0x40020428
 81048a0:	40020440 	.word	0x40020440
 81048a4:	40020458 	.word	0x40020458
 81048a8:	40020470 	.word	0x40020470
 81048ac:	40020488 	.word	0x40020488
 81048b0:	400204a0 	.word	0x400204a0
 81048b4:	400204b8 	.word	0x400204b8
 81048b8:	58025408 	.word	0x58025408
 81048bc:	5802541c 	.word	0x5802541c
 81048c0:	58025430 	.word	0x58025430
 81048c4:	58025444 	.word	0x58025444
 81048c8:	58025458 	.word	0x58025458
 81048cc:	5802546c 	.word	0x5802546c
 81048d0:	58025480 	.word	0x58025480
 81048d4:	58025494 	.word	0x58025494

081048d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81048d8:	b480      	push	{r7}
 81048da:	b085      	sub	sp, #20
 81048dc:	af00      	add	r7, sp, #0
 81048de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	4a43      	ldr	r2, [pc, #268]	@ (81049f4 <DMA_CalcBaseAndBitshift+0x11c>)
 81048e6:	4293      	cmp	r3, r2
 81048e8:	d04a      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	681b      	ldr	r3, [r3, #0]
 81048ee:	4a42      	ldr	r2, [pc, #264]	@ (81049f8 <DMA_CalcBaseAndBitshift+0x120>)
 81048f0:	4293      	cmp	r3, r2
 81048f2:	d045      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	681b      	ldr	r3, [r3, #0]
 81048f8:	4a40      	ldr	r2, [pc, #256]	@ (81049fc <DMA_CalcBaseAndBitshift+0x124>)
 81048fa:	4293      	cmp	r3, r2
 81048fc:	d040      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	4a3f      	ldr	r2, [pc, #252]	@ (8104a00 <DMA_CalcBaseAndBitshift+0x128>)
 8104904:	4293      	cmp	r3, r2
 8104906:	d03b      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	4a3d      	ldr	r2, [pc, #244]	@ (8104a04 <DMA_CalcBaseAndBitshift+0x12c>)
 810490e:	4293      	cmp	r3, r2
 8104910:	d036      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	4a3c      	ldr	r2, [pc, #240]	@ (8104a08 <DMA_CalcBaseAndBitshift+0x130>)
 8104918:	4293      	cmp	r3, r2
 810491a:	d031      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	4a3a      	ldr	r2, [pc, #232]	@ (8104a0c <DMA_CalcBaseAndBitshift+0x134>)
 8104922:	4293      	cmp	r3, r2
 8104924:	d02c      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	4a39      	ldr	r2, [pc, #228]	@ (8104a10 <DMA_CalcBaseAndBitshift+0x138>)
 810492c:	4293      	cmp	r3, r2
 810492e:	d027      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	4a37      	ldr	r2, [pc, #220]	@ (8104a14 <DMA_CalcBaseAndBitshift+0x13c>)
 8104936:	4293      	cmp	r3, r2
 8104938:	d022      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 810493a:	687b      	ldr	r3, [r7, #4]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	4a36      	ldr	r2, [pc, #216]	@ (8104a18 <DMA_CalcBaseAndBitshift+0x140>)
 8104940:	4293      	cmp	r3, r2
 8104942:	d01d      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	4a34      	ldr	r2, [pc, #208]	@ (8104a1c <DMA_CalcBaseAndBitshift+0x144>)
 810494a:	4293      	cmp	r3, r2
 810494c:	d018      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	4a33      	ldr	r2, [pc, #204]	@ (8104a20 <DMA_CalcBaseAndBitshift+0x148>)
 8104954:	4293      	cmp	r3, r2
 8104956:	d013      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	4a31      	ldr	r2, [pc, #196]	@ (8104a24 <DMA_CalcBaseAndBitshift+0x14c>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d00e      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a30      	ldr	r2, [pc, #192]	@ (8104a28 <DMA_CalcBaseAndBitshift+0x150>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d009      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a2e      	ldr	r2, [pc, #184]	@ (8104a2c <DMA_CalcBaseAndBitshift+0x154>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d004      	beq.n	8104980 <DMA_CalcBaseAndBitshift+0xa8>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	4a2d      	ldr	r2, [pc, #180]	@ (8104a30 <DMA_CalcBaseAndBitshift+0x158>)
 810497c:	4293      	cmp	r3, r2
 810497e:	d101      	bne.n	8104984 <DMA_CalcBaseAndBitshift+0xac>
 8104980:	2301      	movs	r3, #1
 8104982:	e000      	b.n	8104986 <DMA_CalcBaseAndBitshift+0xae>
 8104984:	2300      	movs	r3, #0
 8104986:	2b00      	cmp	r3, #0
 8104988:	d026      	beq.n	81049d8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	b2db      	uxtb	r3, r3
 8104990:	3b10      	subs	r3, #16
 8104992:	4a28      	ldr	r2, [pc, #160]	@ (8104a34 <DMA_CalcBaseAndBitshift+0x15c>)
 8104994:	fba2 2303 	umull	r2, r3, r2, r3
 8104998:	091b      	lsrs	r3, r3, #4
 810499a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	f003 0307 	and.w	r3, r3, #7
 81049a2:	4a25      	ldr	r2, [pc, #148]	@ (8104a38 <DMA_CalcBaseAndBitshift+0x160>)
 81049a4:	5cd3      	ldrb	r3, [r2, r3]
 81049a6:	461a      	mov	r2, r3
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	2b03      	cmp	r3, #3
 81049b0:	d909      	bls.n	81049c6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 81049ba:	f023 0303 	bic.w	r3, r3, #3
 81049be:	1d1a      	adds	r2, r3, #4
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	659a      	str	r2, [r3, #88]	@ 0x58
 81049c4:	e00e      	b.n	81049e4 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 81049ce:	f023 0303 	bic.w	r3, r3, #3
 81049d2:	687a      	ldr	r2, [r7, #4]
 81049d4:	6593      	str	r3, [r2, #88]	@ 0x58
 81049d6:	e005      	b.n	81049e4 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 81049e8:	4618      	mov	r0, r3
 81049ea:	3714      	adds	r7, #20
 81049ec:	46bd      	mov	sp, r7
 81049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f2:	4770      	bx	lr
 81049f4:	40020010 	.word	0x40020010
 81049f8:	40020028 	.word	0x40020028
 81049fc:	40020040 	.word	0x40020040
 8104a00:	40020058 	.word	0x40020058
 8104a04:	40020070 	.word	0x40020070
 8104a08:	40020088 	.word	0x40020088
 8104a0c:	400200a0 	.word	0x400200a0
 8104a10:	400200b8 	.word	0x400200b8
 8104a14:	40020410 	.word	0x40020410
 8104a18:	40020428 	.word	0x40020428
 8104a1c:	40020440 	.word	0x40020440
 8104a20:	40020458 	.word	0x40020458
 8104a24:	40020470 	.word	0x40020470
 8104a28:	40020488 	.word	0x40020488
 8104a2c:	400204a0 	.word	0x400204a0
 8104a30:	400204b8 	.word	0x400204b8
 8104a34:	aaaaaaab 	.word	0xaaaaaaab
 8104a38:	0810e9a8 	.word	0x0810e9a8

08104a3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8104a3c:	b480      	push	{r7}
 8104a3e:	b085      	sub	sp, #20
 8104a40:	af00      	add	r7, sp, #0
 8104a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104a44:	2300      	movs	r3, #0
 8104a46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	699b      	ldr	r3, [r3, #24]
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d120      	bne.n	8104a92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a54:	2b03      	cmp	r3, #3
 8104a56:	d858      	bhi.n	8104b0a <DMA_CheckFifoParam+0xce>
 8104a58:	a201      	add	r2, pc, #4	@ (adr r2, 8104a60 <DMA_CheckFifoParam+0x24>)
 8104a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a5e:	bf00      	nop
 8104a60:	08104a71 	.word	0x08104a71
 8104a64:	08104a83 	.word	0x08104a83
 8104a68:	08104a71 	.word	0x08104a71
 8104a6c:	08104b0b 	.word	0x08104b0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d048      	beq.n	8104b0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104a7c:	2301      	movs	r3, #1
 8104a7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a80:	e045      	b.n	8104b0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104a8a:	d142      	bne.n	8104b12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104a8c:	2301      	movs	r3, #1
 8104a8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104a90:	e03f      	b.n	8104b12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	699b      	ldr	r3, [r3, #24]
 8104a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104a9a:	d123      	bne.n	8104ae4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104aa0:	2b03      	cmp	r3, #3
 8104aa2:	d838      	bhi.n	8104b16 <DMA_CheckFifoParam+0xda>
 8104aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8104aac <DMA_CheckFifoParam+0x70>)
 8104aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104aaa:	bf00      	nop
 8104aac:	08104abd 	.word	0x08104abd
 8104ab0:	08104ac3 	.word	0x08104ac3
 8104ab4:	08104abd 	.word	0x08104abd
 8104ab8:	08104ad5 	.word	0x08104ad5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104abc:	2301      	movs	r3, #1
 8104abe:	73fb      	strb	r3, [r7, #15]
        break;
 8104ac0:	e030      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ac6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	d025      	beq.n	8104b1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104ace:	2301      	movs	r3, #1
 8104ad0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104ad2:	e022      	b.n	8104b1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ad8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104adc:	d11f      	bne.n	8104b1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104ade:	2301      	movs	r3, #1
 8104ae0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104ae2:	e01c      	b.n	8104b1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ae8:	2b02      	cmp	r3, #2
 8104aea:	d902      	bls.n	8104af2 <DMA_CheckFifoParam+0xb6>
 8104aec:	2b03      	cmp	r3, #3
 8104aee:	d003      	beq.n	8104af8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104af0:	e018      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104af2:	2301      	movs	r3, #1
 8104af4:	73fb      	strb	r3, [r7, #15]
        break;
 8104af6:	e015      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	d00e      	beq.n	8104b22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104b04:	2301      	movs	r3, #1
 8104b06:	73fb      	strb	r3, [r7, #15]
    break;
 8104b08:	e00b      	b.n	8104b22 <DMA_CheckFifoParam+0xe6>
        break;
 8104b0a:	bf00      	nop
 8104b0c:	e00a      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        break;
 8104b0e:	bf00      	nop
 8104b10:	e008      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        break;
 8104b12:	bf00      	nop
 8104b14:	e006      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        break;
 8104b16:	bf00      	nop
 8104b18:	e004      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        break;
 8104b1a:	bf00      	nop
 8104b1c:	e002      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
        break;
 8104b1e:	bf00      	nop
 8104b20:	e000      	b.n	8104b24 <DMA_CheckFifoParam+0xe8>
    break;
 8104b22:	bf00      	nop
    }
  }

  return status;
 8104b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8104b26:	4618      	mov	r0, r3
 8104b28:	3714      	adds	r7, #20
 8104b2a:	46bd      	mov	sp, r7
 8104b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b30:	4770      	bx	lr
 8104b32:	bf00      	nop

08104b34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104b34:	b480      	push	{r7}
 8104b36:	b085      	sub	sp, #20
 8104b38:	af00      	add	r7, sp, #0
 8104b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	681b      	ldr	r3, [r3, #0]
 8104b46:	4a3a      	ldr	r2, [pc, #232]	@ (8104c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104b48:	4293      	cmp	r3, r2
 8104b4a:	d022      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	4a38      	ldr	r2, [pc, #224]	@ (8104c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104b52:	4293      	cmp	r3, r2
 8104b54:	d01d      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	4a37      	ldr	r2, [pc, #220]	@ (8104c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104b5c:	4293      	cmp	r3, r2
 8104b5e:	d018      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	4a35      	ldr	r2, [pc, #212]	@ (8104c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104b66:	4293      	cmp	r3, r2
 8104b68:	d013      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	4a34      	ldr	r2, [pc, #208]	@ (8104c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104b70:	4293      	cmp	r3, r2
 8104b72:	d00e      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	4a32      	ldr	r2, [pc, #200]	@ (8104c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104b7a:	4293      	cmp	r3, r2
 8104b7c:	d009      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	681b      	ldr	r3, [r3, #0]
 8104b82:	4a31      	ldr	r2, [pc, #196]	@ (8104c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104b84:	4293      	cmp	r3, r2
 8104b86:	d004      	beq.n	8104b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8104c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d101      	bne.n	8104b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104b92:	2301      	movs	r3, #1
 8104b94:	e000      	b.n	8104b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104b96:	2300      	movs	r3, #0
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d01c      	beq.n	8104bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	b2db      	uxtb	r3, r3
 8104ba2:	3b08      	subs	r3, #8
 8104ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8104c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8104baa:	091b      	lsrs	r3, r3, #4
 8104bac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8104bb4:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8104bb8:	009b      	lsls	r3, r3, #2
 8104bba:	461a      	mov	r2, r3
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	4a24      	ldr	r2, [pc, #144]	@ (8104c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104bc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	f003 031f 	and.w	r3, r3, #31
 8104bcc:	2201      	movs	r2, #1
 8104bce:	409a      	lsls	r2, r3
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104bd4:	e026      	b.n	8104c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	b2db      	uxtb	r3, r3
 8104bdc:	3b10      	subs	r3, #16
 8104bde:	4a1e      	ldr	r2, [pc, #120]	@ (8104c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104be0:	fba2 2303 	umull	r2, r3, r2, r3
 8104be4:	091b      	lsrs	r3, r3, #4
 8104be6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104be8:	68bb      	ldr	r3, [r7, #8]
 8104bea:	4a1c      	ldr	r2, [pc, #112]	@ (8104c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104bec:	4293      	cmp	r3, r2
 8104bee:	d806      	bhi.n	8104bfe <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104bf0:	68bb      	ldr	r3, [r7, #8]
 8104bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8104c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d902      	bls.n	8104bfe <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	3308      	adds	r3, #8
 8104bfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8104c04:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8104c08:	009b      	lsls	r3, r3, #2
 8104c0a:	461a      	mov	r2, r3
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	4a14      	ldr	r2, [pc, #80]	@ (8104c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104c14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	f003 031f 	and.w	r3, r3, #31
 8104c1c:	2201      	movs	r2, #1
 8104c1e:	409a      	lsls	r2, r3
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8104c24:	bf00      	nop
 8104c26:	3714      	adds	r7, #20
 8104c28:	46bd      	mov	sp, r7
 8104c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c2e:	4770      	bx	lr
 8104c30:	58025408 	.word	0x58025408
 8104c34:	5802541c 	.word	0x5802541c
 8104c38:	58025430 	.word	0x58025430
 8104c3c:	58025444 	.word	0x58025444
 8104c40:	58025458 	.word	0x58025458
 8104c44:	5802546c 	.word	0x5802546c
 8104c48:	58025480 	.word	0x58025480
 8104c4c:	58025494 	.word	0x58025494
 8104c50:	cccccccd 	.word	0xcccccccd
 8104c54:	58025880 	.word	0x58025880
 8104c58:	aaaaaaab 	.word	0xaaaaaaab
 8104c5c:	400204b8 	.word	0x400204b8
 8104c60:	4002040f 	.word	0x4002040f
 8104c64:	40020880 	.word	0x40020880

08104c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104c68:	b480      	push	{r7}
 8104c6a:	b085      	sub	sp, #20
 8104c6c:	af00      	add	r7, sp, #0
 8104c6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	685b      	ldr	r3, [r3, #4]
 8104c74:	b2db      	uxtb	r3, r3
 8104c76:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	2b00      	cmp	r3, #0
 8104c7c:	d04a      	beq.n	8104d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104c7e:	68fb      	ldr	r3, [r7, #12]
 8104c80:	2b08      	cmp	r3, #8
 8104c82:	d847      	bhi.n	8104d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	4a25      	ldr	r2, [pc, #148]	@ (8104d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104c8a:	4293      	cmp	r3, r2
 8104c8c:	d022      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	4a24      	ldr	r2, [pc, #144]	@ (8104d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104c94:	4293      	cmp	r3, r2
 8104c96:	d01d      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	4a22      	ldr	r2, [pc, #136]	@ (8104d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104c9e:	4293      	cmp	r3, r2
 8104ca0:	d018      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	4a21      	ldr	r2, [pc, #132]	@ (8104d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104ca8:	4293      	cmp	r3, r2
 8104caa:	d013      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8104d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104cb2:	4293      	cmp	r3, r2
 8104cb4:	d00e      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	4a1e      	ldr	r2, [pc, #120]	@ (8104d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104cbc:	4293      	cmp	r3, r2
 8104cbe:	d009      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8104d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d004      	beq.n	8104cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	4a1b      	ldr	r2, [pc, #108]	@ (8104d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104cd0:	4293      	cmp	r3, r2
 8104cd2:	d101      	bne.n	8104cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104cd4:	2301      	movs	r3, #1
 8104cd6:	e000      	b.n	8104cda <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104cd8:	2300      	movs	r3, #0
 8104cda:	2b00      	cmp	r3, #0
 8104cdc:	d00a      	beq.n	8104cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104cde:	68fa      	ldr	r2, [r7, #12]
 8104ce0:	4b17      	ldr	r3, [pc, #92]	@ (8104d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104ce2:	4413      	add	r3, r2
 8104ce4:	009b      	lsls	r3, r3, #2
 8104ce6:	461a      	mov	r2, r3
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	4a15      	ldr	r2, [pc, #84]	@ (8104d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104cf0:	671a      	str	r2, [r3, #112]	@ 0x70
 8104cf2:	e009      	b.n	8104d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104cf4:	68fa      	ldr	r2, [r7, #12]
 8104cf6:	4b14      	ldr	r3, [pc, #80]	@ (8104d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104cf8:	4413      	add	r3, r2
 8104cfa:	009b      	lsls	r3, r3, #2
 8104cfc:	461a      	mov	r2, r3
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	4a11      	ldr	r2, [pc, #68]	@ (8104d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104d06:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	3b01      	subs	r3, #1
 8104d0c:	2201      	movs	r2, #1
 8104d0e:	409a      	lsls	r2, r3
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8104d14:	bf00      	nop
 8104d16:	3714      	adds	r7, #20
 8104d18:	46bd      	mov	sp, r7
 8104d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d1e:	4770      	bx	lr
 8104d20:	58025408 	.word	0x58025408
 8104d24:	5802541c 	.word	0x5802541c
 8104d28:	58025430 	.word	0x58025430
 8104d2c:	58025444 	.word	0x58025444
 8104d30:	58025458 	.word	0x58025458
 8104d34:	5802546c 	.word	0x5802546c
 8104d38:	58025480 	.word	0x58025480
 8104d3c:	58025494 	.word	0x58025494
 8104d40:	1600963f 	.word	0x1600963f
 8104d44:	58025940 	.word	0x58025940
 8104d48:	1000823f 	.word	0x1000823f
 8104d4c:	40020940 	.word	0x40020940

08104d50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8104d50:	b580      	push	{r7, lr}
 8104d52:	b084      	sub	sp, #16
 8104d54:	af00      	add	r7, sp, #0
 8104d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	2b00      	cmp	r3, #0
 8104d5c:	d101      	bne.n	8104d62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8104d5e:	2301      	movs	r3, #1
 8104d60:	e0e7      	b.n	8104f32 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104d68:	2b00      	cmp	r3, #0
 8104d6a:	d106      	bne.n	8104d7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	2220      	movs	r2, #32
 8104d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104d74:	6878      	ldr	r0, [r7, #4]
 8104d76:	f7fc fc89 	bl	810168c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104d7a:	4b70      	ldr	r3, [pc, #448]	@ (8104f3c <HAL_ETH_Init+0x1ec>)
 8104d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104d80:	4a6e      	ldr	r2, [pc, #440]	@ (8104f3c <HAL_ETH_Init+0x1ec>)
 8104d82:	f043 0302 	orr.w	r3, r3, #2
 8104d86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8104f3c <HAL_ETH_Init+0x1ec>)
 8104d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104d90:	f003 0302 	and.w	r3, r3, #2
 8104d94:	60bb      	str	r3, [r7, #8]
 8104d96:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	7a1b      	ldrb	r3, [r3, #8]
 8104d9c:	2b00      	cmp	r3, #0
 8104d9e:	d103      	bne.n	8104da8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8104da0:	2000      	movs	r0, #0
 8104da2:	f7fd ff31 	bl	8102c08 <HAL_SYSCFG_ETHInterfaceSelect>
 8104da6:	e003      	b.n	8104db0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8104da8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8104dac:	f7fd ff2c 	bl	8102c08 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8104db0:	4b63      	ldr	r3, [pc, #396]	@ (8104f40 <HAL_ETH_Init+0x1f0>)
 8104db2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	687a      	ldr	r2, [r7, #4]
 8104dc0:	6812      	ldr	r2, [r2, #0]
 8104dc2:	f043 0301 	orr.w	r3, r3, #1
 8104dc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104dca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104dcc:	f7fd fee0 	bl	8102b90 <HAL_GetTick>
 8104dd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104dd2:	e011      	b.n	8104df8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104dd4:	f7fd fedc 	bl	8102b90 <HAL_GetTick>
 8104dd8:	4602      	mov	r2, r0
 8104dda:	68fb      	ldr	r3, [r7, #12]
 8104ddc:	1ad3      	subs	r3, r2, r3
 8104dde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8104de2:	d909      	bls.n	8104df8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	2204      	movs	r2, #4
 8104de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	22e0      	movs	r2, #224	@ 0xe0
 8104df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8104df4:	2301      	movs	r3, #1
 8104df6:	e09c      	b.n	8104f32 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	f003 0301 	and.w	r3, r3, #1
 8104e06:	2b00      	cmp	r3, #0
 8104e08:	d1e4      	bne.n	8104dd4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8104e0a:	6878      	ldr	r0, [r7, #4]
 8104e0c:	f000 f89e 	bl	8104f4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8104e10:	f001 fa36 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 8104e14:	4603      	mov	r3, r0
 8104e16:	4a4b      	ldr	r2, [pc, #300]	@ (8104f44 <HAL_ETH_Init+0x1f4>)
 8104e18:	fba2 2303 	umull	r2, r3, r2, r3
 8104e1c:	0c9a      	lsrs	r2, r3, #18
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	3a01      	subs	r2, #1
 8104e24:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8104e28:	6878      	ldr	r0, [r7, #4]
 8104e2a:	f000 fa81 	bl	8105330 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104e36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8104e3a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8104e3e:	687a      	ldr	r2, [r7, #4]
 8104e40:	6812      	ldr	r2, [r2, #0]
 8104e42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104e46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104e4a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	695b      	ldr	r3, [r3, #20]
 8104e52:	f003 0303 	and.w	r3, r3, #3
 8104e56:	2b00      	cmp	r3, #0
 8104e58:	d009      	beq.n	8104e6e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	2201      	movs	r2, #1
 8104e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104e62:	687b      	ldr	r3, [r7, #4]
 8104e64:	22e0      	movs	r2, #224	@ 0xe0
 8104e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8104e6a:	2301      	movs	r3, #1
 8104e6c:	e061      	b.n	8104f32 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104e76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104e7a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8104e7e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8104e82:	687a      	ldr	r2, [r7, #4]
 8104e84:	6952      	ldr	r2, [r2, #20]
 8104e86:	0051      	lsls	r1, r2, #1
 8104e88:	687a      	ldr	r2, [r7, #4]
 8104e8a:	6812      	ldr	r2, [r2, #0]
 8104e8c:	430b      	orrs	r3, r1
 8104e8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104e92:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8104e96:	6878      	ldr	r0, [r7, #4]
 8104e98:	f000 fae7 	bl	810546a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104e9c:	6878      	ldr	r0, [r7, #4]
 8104e9e:	f000 fb2d 	bl	81054fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	685b      	ldr	r3, [r3, #4]
 8104ea6:	3305      	adds	r3, #5
 8104ea8:	781b      	ldrb	r3, [r3, #0]
 8104eaa:	021a      	lsls	r2, r3, #8
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	685b      	ldr	r3, [r3, #4]
 8104eb0:	3304      	adds	r3, #4
 8104eb2:	781b      	ldrb	r3, [r3, #0]
 8104eb4:	4619      	mov	r1, r3
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	430a      	orrs	r2, r1
 8104ebc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	685b      	ldr	r3, [r3, #4]
 8104ec4:	3303      	adds	r3, #3
 8104ec6:	781b      	ldrb	r3, [r3, #0]
 8104ec8:	061a      	lsls	r2, r3, #24
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	685b      	ldr	r3, [r3, #4]
 8104ece:	3302      	adds	r3, #2
 8104ed0:	781b      	ldrb	r3, [r3, #0]
 8104ed2:	041b      	lsls	r3, r3, #16
 8104ed4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	685b      	ldr	r3, [r3, #4]
 8104eda:	3301      	adds	r3, #1
 8104edc:	781b      	ldrb	r3, [r3, #0]
 8104ede:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104ee0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	685b      	ldr	r3, [r3, #4]
 8104ee6:	781b      	ldrb	r3, [r3, #0]
 8104ee8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104eee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104ef0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681a      	ldr	r2, [r3, #0]
 8104f00:	4b11      	ldr	r3, [pc, #68]	@ (8104f48 <HAL_ETH_Init+0x1f8>)
 8104f02:	430b      	orrs	r3, r1
 8104f04:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8104f10:	687a      	ldr	r2, [r7, #4]
 8104f12:	6812      	ldr	r2, [r2, #0]
 8104f14:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8104f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8104f1c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	2200      	movs	r2, #0
 8104f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	2210      	movs	r2, #16
 8104f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104f30:	2300      	movs	r3, #0
}
 8104f32:	4618      	mov	r0, r3
 8104f34:	3710      	adds	r7, #16
 8104f36:	46bd      	mov	sp, r7
 8104f38:	bd80      	pop	{r7, pc}
 8104f3a:	bf00      	nop
 8104f3c:	58024400 	.word	0x58024400
 8104f40:	58000400 	.word	0x58000400
 8104f44:	431bde83 	.word	0x431bde83
 8104f48:	0c020060 	.word	0x0c020060

08104f4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8104f4c:	b580      	push	{r7, lr}
 8104f4e:	b084      	sub	sp, #16
 8104f50:	af00      	add	r7, sp, #0
 8104f52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	681b      	ldr	r3, [r3, #0]
 8104f58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8104f5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104f64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8104f66:	f001 f98b 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 8104f6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8104f6c:	68bb      	ldr	r3, [r7, #8]
 8104f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8104fd8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8104f70:	4293      	cmp	r3, r2
 8104f72:	d804      	bhi.n	8104f7e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8104f74:	68fb      	ldr	r3, [r7, #12]
 8104f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8104f7a:	60fb      	str	r3, [r7, #12]
 8104f7c:	e022      	b.n	8104fc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8104f7e:	68bb      	ldr	r3, [r7, #8]
 8104f80:	4a16      	ldr	r2, [pc, #88]	@ (8104fdc <HAL_ETH_SetMDIOClockRange+0x90>)
 8104f82:	4293      	cmp	r3, r2
 8104f84:	d204      	bcs.n	8104f90 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8104f8c:	60fb      	str	r3, [r7, #12]
 8104f8e:	e019      	b.n	8104fc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8104f90:	68bb      	ldr	r3, [r7, #8]
 8104f92:	4a13      	ldr	r2, [pc, #76]	@ (8104fe0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8104f94:	4293      	cmp	r3, r2
 8104f96:	d915      	bls.n	8104fc4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8104f98:	68bb      	ldr	r3, [r7, #8]
 8104f9a:	4a12      	ldr	r2, [pc, #72]	@ (8104fe4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8104f9c:	4293      	cmp	r3, r2
 8104f9e:	d804      	bhi.n	8104faa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104fa6:	60fb      	str	r3, [r7, #12]
 8104fa8:	e00c      	b.n	8104fc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8104faa:	68bb      	ldr	r3, [r7, #8]
 8104fac:	4a0e      	ldr	r2, [pc, #56]	@ (8104fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8104fae:	4293      	cmp	r3, r2
 8104fb0:	d804      	bhi.n	8104fbc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8104fb8:	60fb      	str	r3, [r7, #12]
 8104fba:	e003      	b.n	8104fc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8104fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	681b      	ldr	r3, [r3, #0]
 8104fc8:	68fa      	ldr	r2, [r7, #12]
 8104fca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8104fce:	bf00      	nop
 8104fd0:	3710      	adds	r7, #16
 8104fd2:	46bd      	mov	sp, r7
 8104fd4:	bd80      	pop	{r7, pc}
 8104fd6:	bf00      	nop
 8104fd8:	02160ebf 	.word	0x02160ebf
 8104fdc:	03938700 	.word	0x03938700
 8104fe0:	05f5e0ff 	.word	0x05f5e0ff
 8104fe4:	08f0d17f 	.word	0x08f0d17f
 8104fe8:	0ee6b27f 	.word	0x0ee6b27f

08104fec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8104fec:	b480      	push	{r7}
 8104fee:	b085      	sub	sp, #20
 8104ff0:	af00      	add	r7, sp, #0
 8104ff2:	6078      	str	r0, [r7, #4]
 8104ff4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8104ff6:	683b      	ldr	r3, [r7, #0]
 8104ff8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8104ffa:	683b      	ldr	r3, [r7, #0]
 8104ffc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8104ffe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8105000:	683b      	ldr	r3, [r7, #0]
 8105002:	791b      	ldrb	r3, [r3, #4]
 8105004:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8105006:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105008:	683b      	ldr	r3, [r7, #0]
 810500a:	7b1b      	ldrb	r3, [r3, #12]
 810500c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810500e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8105010:	683b      	ldr	r3, [r7, #0]
 8105012:	7b5b      	ldrb	r3, [r3, #13]
 8105014:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105016:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105018:	683b      	ldr	r3, [r7, #0]
 810501a:	7b9b      	ldrb	r3, [r3, #14]
 810501c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810501e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105020:	683b      	ldr	r3, [r7, #0]
 8105022:	7bdb      	ldrb	r3, [r3, #15]
 8105024:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105026:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8105028:	683a      	ldr	r2, [r7, #0]
 810502a:	7c12      	ldrb	r2, [r2, #16]
 810502c:	2a00      	cmp	r2, #0
 810502e:	d102      	bne.n	8105036 <ETH_SetMACConfig+0x4a>
 8105030:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8105034:	e000      	b.n	8105038 <ETH_SetMACConfig+0x4c>
 8105036:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105038:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810503a:	683a      	ldr	r2, [r7, #0]
 810503c:	7c52      	ldrb	r2, [r2, #17]
 810503e:	2a00      	cmp	r2, #0
 8105040:	d102      	bne.n	8105048 <ETH_SetMACConfig+0x5c>
 8105042:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8105046:	e000      	b.n	810504a <ETH_SetMACConfig+0x5e>
 8105048:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810504a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810504c:	683b      	ldr	r3, [r7, #0]
 810504e:	7c9b      	ldrb	r3, [r3, #18]
 8105050:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105052:	431a      	orrs	r2, r3
               macconf->Speed |
 8105054:	683b      	ldr	r3, [r7, #0]
 8105056:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8105058:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810505a:	683b      	ldr	r3, [r7, #0]
 810505c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810505e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105060:	683b      	ldr	r3, [r7, #0]
 8105062:	7f1b      	ldrb	r3, [r3, #28]
 8105064:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8105066:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105068:	683b      	ldr	r3, [r7, #0]
 810506a:	7f5b      	ldrb	r3, [r3, #29]
 810506c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810506e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105070:	683a      	ldr	r2, [r7, #0]
 8105072:	7f92      	ldrb	r2, [r2, #30]
 8105074:	2a00      	cmp	r2, #0
 8105076:	d102      	bne.n	810507e <ETH_SetMACConfig+0x92>
 8105078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810507c:	e000      	b.n	8105080 <ETH_SetMACConfig+0x94>
 810507e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105080:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105082:	683b      	ldr	r3, [r7, #0]
 8105084:	7fdb      	ldrb	r3, [r3, #31]
 8105086:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105088:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810508a:	683a      	ldr	r2, [r7, #0]
 810508c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8105090:	2a00      	cmp	r2, #0
 8105092:	d102      	bne.n	810509a <ETH_SetMACConfig+0xae>
 8105094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105098:	e000      	b.n	810509c <ETH_SetMACConfig+0xb0>
 810509a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810509c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810509e:	683b      	ldr	r3, [r7, #0]
 81050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81050a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81050a4:	683b      	ldr	r3, [r7, #0]
 81050a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81050aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81050ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81050ae:	683b      	ldr	r3, [r7, #0]
 81050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 81050b2:	4313      	orrs	r3, r2
 81050b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	681a      	ldr	r2, [r3, #0]
 81050bc:	4b57      	ldr	r3, [pc, #348]	@ (810521c <ETH_SetMACConfig+0x230>)
 81050be:	4013      	ands	r3, r2
 81050c0:	687a      	ldr	r2, [r7, #4]
 81050c2:	6812      	ldr	r2, [r2, #0]
 81050c4:	68f9      	ldr	r1, [r7, #12]
 81050c6:	430b      	orrs	r3, r1
 81050c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81050ca:	683b      	ldr	r3, [r7, #0]
 81050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81050ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81050d0:	683b      	ldr	r3, [r7, #0]
 81050d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81050d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81050d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81050da:	683b      	ldr	r3, [r7, #0]
 81050dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81050e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81050e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81050e4:	683b      	ldr	r3, [r7, #0]
 81050e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81050ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81050ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81050ee:	683a      	ldr	r2, [r7, #0]
 81050f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 81050f4:	2a00      	cmp	r2, #0
 81050f6:	d102      	bne.n	81050fe <ETH_SetMACConfig+0x112>
 81050f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81050fc:	e000      	b.n	8105100 <ETH_SetMACConfig+0x114>
 81050fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105100:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8105102:	683b      	ldr	r3, [r7, #0]
 8105104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8105106:	4313      	orrs	r3, r2
 8105108:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	685a      	ldr	r2, [r3, #4]
 8105110:	4b43      	ldr	r3, [pc, #268]	@ (8105220 <ETH_SetMACConfig+0x234>)
 8105112:	4013      	ands	r3, r2
 8105114:	687a      	ldr	r2, [r7, #4]
 8105116:	6812      	ldr	r2, [r2, #0]
 8105118:	68f9      	ldr	r1, [r7, #12]
 810511a:	430b      	orrs	r3, r1
 810511c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810511e:	683b      	ldr	r3, [r7, #0]
 8105120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105124:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8105126:	683b      	ldr	r3, [r7, #0]
 8105128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810512a:	4313      	orrs	r3, r2
 810512c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	68db      	ldr	r3, [r3, #12]
 8105134:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8105138:	f023 0301 	bic.w	r3, r3, #1
 810513c:	687a      	ldr	r2, [r7, #4]
 810513e:	6812      	ldr	r2, [r2, #0]
 8105140:	68f9      	ldr	r1, [r7, #12]
 8105142:	430b      	orrs	r3, r1
 8105144:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105146:	683b      	ldr	r3, [r7, #0]
 8105148:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810514c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810514e:	683b      	ldr	r3, [r7, #0]
 8105150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105152:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8105154:	683a      	ldr	r2, [r7, #0]
 8105156:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810515a:	2a00      	cmp	r2, #0
 810515c:	d101      	bne.n	8105162 <ETH_SetMACConfig+0x176>
 810515e:	2280      	movs	r2, #128	@ 0x80
 8105160:	e000      	b.n	8105164 <ETH_SetMACConfig+0x178>
 8105162:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8105164:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8105166:	683b      	ldr	r3, [r7, #0]
 8105168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810516a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810516c:	4313      	orrs	r3, r2
 810516e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105176:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810517a:	4013      	ands	r3, r2
 810517c:	687a      	ldr	r2, [r7, #4]
 810517e:	6812      	ldr	r2, [r2, #0]
 8105180:	68f9      	ldr	r1, [r7, #12]
 8105182:	430b      	orrs	r3, r1
 8105184:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105186:	683b      	ldr	r3, [r7, #0]
 8105188:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810518c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810518e:	683b      	ldr	r3, [r7, #0]
 8105190:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8105194:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105196:	4313      	orrs	r3, r2
 8105198:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81051a2:	f023 0103 	bic.w	r1, r3, #3
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	68fa      	ldr	r2, [r7, #12]
 81051ac:	430a      	orrs	r2, r1
 81051ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81051ba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 81051be:	683b      	ldr	r3, [r7, #0]
 81051c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	430a      	orrs	r2, r1
 81051c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81051cc:	683b      	ldr	r3, [r7, #0]
 81051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81051d0:	683a      	ldr	r2, [r7, #0]
 81051d2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 81051d6:	2a00      	cmp	r2, #0
 81051d8:	d101      	bne.n	81051de <ETH_SetMACConfig+0x1f2>
 81051da:	2240      	movs	r2, #64	@ 0x40
 81051dc:	e000      	b.n	81051e0 <ETH_SetMACConfig+0x1f4>
 81051de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81051e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81051e2:	683b      	ldr	r3, [r7, #0]
 81051e4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81051e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81051ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81051ec:	683b      	ldr	r3, [r7, #0]
 81051ee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 81051f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81051f4:	4313      	orrs	r3, r2
 81051f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105200:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	68fa      	ldr	r2, [r7, #12]
 810520a:	430a      	orrs	r2, r1
 810520c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8105210:	bf00      	nop
 8105212:	3714      	adds	r7, #20
 8105214:	46bd      	mov	sp, r7
 8105216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810521a:	4770      	bx	lr
 810521c:	00048083 	.word	0x00048083
 8105220:	c0f88000 	.word	0xc0f88000

08105224 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8105224:	b480      	push	{r7}
 8105226:	b085      	sub	sp, #20
 8105228:	af00      	add	r7, sp, #0
 810522a:	6078      	str	r0, [r7, #4]
 810522c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810522e:	687b      	ldr	r3, [r7, #4]
 8105230:	681b      	ldr	r3, [r3, #0]
 8105232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810523c:	f023 0302 	bic.w	r3, r3, #2
 8105240:	683a      	ldr	r2, [r7, #0]
 8105242:	6811      	ldr	r1, [r2, #0]
 8105244:	687a      	ldr	r2, [r7, #4]
 8105246:	6812      	ldr	r2, [r2, #0]
 8105248:	430b      	orrs	r3, r1
 810524a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810524e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105250:	683b      	ldr	r3, [r7, #0]
 8105252:	791b      	ldrb	r3, [r3, #4]
 8105254:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8105256:	683b      	ldr	r3, [r7, #0]
 8105258:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810525a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810525c:	683b      	ldr	r3, [r7, #0]
 810525e:	7b1b      	ldrb	r3, [r3, #12]
 8105260:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105262:	4313      	orrs	r3, r2
 8105264:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	681b      	ldr	r3, [r3, #0]
 810526a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810526e:	685b      	ldr	r3, [r3, #4]
 8105270:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8105274:	f023 0301 	bic.w	r3, r3, #1
 8105278:	687a      	ldr	r2, [r7, #4]
 810527a:	6812      	ldr	r2, [r2, #0]
 810527c:	68f9      	ldr	r1, [r7, #12]
 810527e:	430b      	orrs	r3, r1
 8105280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105284:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105286:	683b      	ldr	r3, [r7, #0]
 8105288:	7b5b      	ldrb	r3, [r3, #13]
 810528a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810528c:	683b      	ldr	r3, [r7, #0]
 810528e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105290:	4313      	orrs	r3, r2
 8105292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	681b      	ldr	r3, [r3, #0]
 8105298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810529c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 81052a0:	4b21      	ldr	r3, [pc, #132]	@ (8105328 <ETH_SetDMAConfig+0x104>)
 81052a2:	4013      	ands	r3, r2
 81052a4:	687a      	ldr	r2, [r7, #4]
 81052a6:	6812      	ldr	r2, [r2, #0]
 81052a8:	68f9      	ldr	r1, [r7, #12]
 81052aa:	430b      	orrs	r3, r1
 81052ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81052b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81052b4:	683b      	ldr	r3, [r7, #0]
 81052b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 81052b8:	683b      	ldr	r3, [r7, #0]
 81052ba:	7d1b      	ldrb	r3, [r3, #20]
 81052bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81052be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 81052c0:	683b      	ldr	r3, [r7, #0]
 81052c2:	7f5b      	ldrb	r3, [r3, #29]
 81052c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81052c6:	4313      	orrs	r3, r2
 81052c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81052d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 81052d6:	4b15      	ldr	r3, [pc, #84]	@ (810532c <ETH_SetDMAConfig+0x108>)
 81052d8:	4013      	ands	r3, r2
 81052da:	687a      	ldr	r2, [r7, #4]
 81052dc:	6812      	ldr	r2, [r2, #0]
 81052de:	68f9      	ldr	r1, [r7, #12]
 81052e0:	430b      	orrs	r3, r1
 81052e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81052e6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81052ea:	683b      	ldr	r3, [r7, #0]
 81052ec:	7f1b      	ldrb	r3, [r3, #28]
 81052ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81052f0:	683b      	ldr	r3, [r7, #0]
 81052f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81052f4:	4313      	orrs	r3, r2
 81052f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105300:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8105304:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105308:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810530c:	687a      	ldr	r2, [r7, #4]
 810530e:	6812      	ldr	r2, [r2, #0]
 8105310:	68f9      	ldr	r1, [r7, #12]
 8105312:	430b      	orrs	r3, r1
 8105314:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105318:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810531c:	bf00      	nop
 810531e:	3714      	adds	r7, #20
 8105320:	46bd      	mov	sp, r7
 8105322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105326:	4770      	bx	lr
 8105328:	fffec000 	.word	0xfffec000
 810532c:	ffc0efef 	.word	0xffc0efef

08105330 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8105330:	b580      	push	{r7, lr}
 8105332:	b0a4      	sub	sp, #144	@ 0x90
 8105334:	af00      	add	r7, sp, #0
 8105336:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8105338:	2301      	movs	r3, #1
 810533a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810533e:	2300      	movs	r3, #0
 8105340:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8105342:	2300      	movs	r3, #0
 8105344:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8105348:	2300      	movs	r3, #0
 810534a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810534e:	2301      	movs	r3, #1
 8105350:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8105354:	2301      	movs	r3, #1
 8105356:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810535a:	2301      	movs	r3, #1
 810535c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8105360:	2300      	movs	r3, #0
 8105362:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8105366:	2301      	movs	r3, #1
 8105368:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810536c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105370:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8105372:	2300      	movs	r3, #0
 8105374:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8105378:	2300      	movs	r3, #0
 810537a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810537c:	2300      	movs	r3, #0
 810537e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8105382:	2300      	movs	r3, #0
 8105384:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8105388:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810538c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810538e:	2300      	movs	r3, #0
 8105390:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8105394:	2300      	movs	r3, #0
 8105396:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8105398:	2301      	movs	r3, #1
 810539a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810539e:	2300      	movs	r3, #0
 81053a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81053a4:	2300      	movs	r3, #0
 81053a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81053aa:	2300      	movs	r3, #0
 81053ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 81053ae:	2300      	movs	r3, #0
 81053b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81053b2:	2300      	movs	r3, #0
 81053b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81053b6:	2300      	movs	r3, #0
 81053b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81053bc:	2300      	movs	r3, #0
 81053be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81053c2:	2301      	movs	r3, #1
 81053c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81053c8:	2320      	movs	r3, #32
 81053ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81053ce:	2301      	movs	r3, #1
 81053d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81053d4:	2300      	movs	r3, #0
 81053d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81053da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81053e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81053e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81053e6:	2300      	movs	r3, #0
 81053e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81053ec:	2302      	movs	r3, #2
 81053ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81053f2:	2300      	movs	r3, #0
 81053f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81053f8:	2300      	movs	r3, #0
 81053fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81053fe:	2300      	movs	r3, #0
 8105400:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8105404:	2301      	movs	r3, #1
 8105406:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810540a:	2300      	movs	r3, #0
 810540c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810540e:	2301      	movs	r3, #1
 8105410:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8105414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8105418:	4619      	mov	r1, r3
 810541a:	6878      	ldr	r0, [r7, #4]
 810541c:	f7ff fde6 	bl	8104fec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8105420:	2301      	movs	r3, #1
 8105422:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8105424:	2301      	movs	r3, #1
 8105426:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8105428:	2300      	movs	r3, #0
 810542a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810542c:	2300      	movs	r3, #0
 810542e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8105432:	2300      	movs	r3, #0
 8105434:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8105436:	2300      	movs	r3, #0
 8105438:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810543a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810543e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8105440:	2300      	movs	r3, #0
 8105442:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8105444:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8105448:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810544a:	2300      	movs	r3, #0
 810544c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8105450:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8105454:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8105456:	f107 0308 	add.w	r3, r7, #8
 810545a:	4619      	mov	r1, r3
 810545c:	6878      	ldr	r0, [r7, #4]
 810545e:	f7ff fee1 	bl	8105224 <ETH_SetDMAConfig>
}
 8105462:	bf00      	nop
 8105464:	3790      	adds	r7, #144	@ 0x90
 8105466:	46bd      	mov	sp, r7
 8105468:	bd80      	pop	{r7, pc}

0810546a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810546a:	b480      	push	{r7}
 810546c:	b085      	sub	sp, #20
 810546e:	af00      	add	r7, sp, #0
 8105470:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105472:	2300      	movs	r3, #0
 8105474:	60fb      	str	r3, [r7, #12]
 8105476:	e01d      	b.n	81054b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	68d9      	ldr	r1, [r3, #12]
 810547c:	68fa      	ldr	r2, [r7, #12]
 810547e:	4613      	mov	r3, r2
 8105480:	005b      	lsls	r3, r3, #1
 8105482:	4413      	add	r3, r2
 8105484:	00db      	lsls	r3, r3, #3
 8105486:	440b      	add	r3, r1
 8105488:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810548a:	68bb      	ldr	r3, [r7, #8]
 810548c:	2200      	movs	r2, #0
 810548e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105490:	68bb      	ldr	r3, [r7, #8]
 8105492:	2200      	movs	r2, #0
 8105494:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8105496:	68bb      	ldr	r3, [r7, #8]
 8105498:	2200      	movs	r2, #0
 810549a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 810549c:	68bb      	ldr	r3, [r7, #8]
 810549e:	2200      	movs	r2, #0
 81054a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81054a2:	68b9      	ldr	r1, [r7, #8]
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	68fa      	ldr	r2, [r7, #12]
 81054a8:	3206      	adds	r2, #6
 81054aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	3301      	adds	r3, #1
 81054b2:	60fb      	str	r3, [r7, #12]
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	2b03      	cmp	r3, #3
 81054b8:	d9de      	bls.n	8105478 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	2200      	movs	r2, #0
 81054be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	681b      	ldr	r3, [r3, #0]
 81054c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81054c8:	461a      	mov	r2, r3
 81054ca:	2303      	movs	r3, #3
 81054cc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	68da      	ldr	r2, [r3, #12]
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81054dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	68da      	ldr	r2, [r3, #12]
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81054ec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 81054f0:	bf00      	nop
 81054f2:	3714      	adds	r7, #20
 81054f4:	46bd      	mov	sp, r7
 81054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054fa:	4770      	bx	lr

081054fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81054fc:	b480      	push	{r7}
 81054fe:	b085      	sub	sp, #20
 8105500:	af00      	add	r7, sp, #0
 8105502:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105504:	2300      	movs	r3, #0
 8105506:	60fb      	str	r3, [r7, #12]
 8105508:	e023      	b.n	8105552 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	6919      	ldr	r1, [r3, #16]
 810550e:	68fa      	ldr	r2, [r7, #12]
 8105510:	4613      	mov	r3, r2
 8105512:	005b      	lsls	r3, r3, #1
 8105514:	4413      	add	r3, r2
 8105516:	00db      	lsls	r3, r3, #3
 8105518:	440b      	add	r3, r1
 810551a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810551c:	68bb      	ldr	r3, [r7, #8]
 810551e:	2200      	movs	r2, #0
 8105520:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8105522:	68bb      	ldr	r3, [r7, #8]
 8105524:	2200      	movs	r2, #0
 8105526:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8105528:	68bb      	ldr	r3, [r7, #8]
 810552a:	2200      	movs	r2, #0
 810552c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810552e:	68bb      	ldr	r3, [r7, #8]
 8105530:	2200      	movs	r2, #0
 8105532:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8105534:	68bb      	ldr	r3, [r7, #8]
 8105536:	2200      	movs	r2, #0
 8105538:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810553a:	68bb      	ldr	r3, [r7, #8]
 810553c:	2200      	movs	r2, #0
 810553e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8105540:	68b9      	ldr	r1, [r7, #8]
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	68fa      	ldr	r2, [r7, #12]
 8105546:	3212      	adds	r2, #18
 8105548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810554c:	68fb      	ldr	r3, [r7, #12]
 810554e:	3301      	adds	r3, #1
 8105550:	60fb      	str	r3, [r7, #12]
 8105552:	68fb      	ldr	r3, [r7, #12]
 8105554:	2b03      	cmp	r3, #3
 8105556:	d9d8      	bls.n	810550a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	2200      	movs	r2, #0
 810555c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	2200      	movs	r2, #0
 8105562:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	2200      	movs	r2, #0
 8105568:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	2200      	movs	r2, #0
 810556e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	2200      	movs	r2, #0
 8105574:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810557e:	461a      	mov	r2, r3
 8105580:	2303      	movs	r3, #3
 8105582:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	691a      	ldr	r2, [r3, #16]
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105592:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	691b      	ldr	r3, [r3, #16]
 810559a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81055a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 81055aa:	bf00      	nop
 81055ac:	3714      	adds	r7, #20
 81055ae:	46bd      	mov	sp, r7
 81055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b4:	4770      	bx	lr
	...

081055b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 81055b8:	b480      	push	{r7}
 81055ba:	b089      	sub	sp, #36	@ 0x24
 81055bc:	af00      	add	r7, sp, #0
 81055be:	6078      	str	r0, [r7, #4]
 81055c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81055c2:	2300      	movs	r3, #0
 81055c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81055c6:	4b89      	ldr	r3, [pc, #548]	@ (81057ec <HAL_GPIO_Init+0x234>)
 81055c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81055ca:	e194      	b.n	81058f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81055cc:	683b      	ldr	r3, [r7, #0]
 81055ce:	681a      	ldr	r2, [r3, #0]
 81055d0:	2101      	movs	r1, #1
 81055d2:	69fb      	ldr	r3, [r7, #28]
 81055d4:	fa01 f303 	lsl.w	r3, r1, r3
 81055d8:	4013      	ands	r3, r2
 81055da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81055dc:	693b      	ldr	r3, [r7, #16]
 81055de:	2b00      	cmp	r3, #0
 81055e0:	f000 8186 	beq.w	81058f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81055e4:	683b      	ldr	r3, [r7, #0]
 81055e6:	685b      	ldr	r3, [r3, #4]
 81055e8:	f003 0303 	and.w	r3, r3, #3
 81055ec:	2b01      	cmp	r3, #1
 81055ee:	d005      	beq.n	81055fc <HAL_GPIO_Init+0x44>
 81055f0:	683b      	ldr	r3, [r7, #0]
 81055f2:	685b      	ldr	r3, [r3, #4]
 81055f4:	f003 0303 	and.w	r3, r3, #3
 81055f8:	2b02      	cmp	r3, #2
 81055fa:	d130      	bne.n	810565e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	689b      	ldr	r3, [r3, #8]
 8105600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105602:	69fb      	ldr	r3, [r7, #28]
 8105604:	005b      	lsls	r3, r3, #1
 8105606:	2203      	movs	r2, #3
 8105608:	fa02 f303 	lsl.w	r3, r2, r3
 810560c:	43db      	mvns	r3, r3
 810560e:	69ba      	ldr	r2, [r7, #24]
 8105610:	4013      	ands	r3, r2
 8105612:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105614:	683b      	ldr	r3, [r7, #0]
 8105616:	68da      	ldr	r2, [r3, #12]
 8105618:	69fb      	ldr	r3, [r7, #28]
 810561a:	005b      	lsls	r3, r3, #1
 810561c:	fa02 f303 	lsl.w	r3, r2, r3
 8105620:	69ba      	ldr	r2, [r7, #24]
 8105622:	4313      	orrs	r3, r2
 8105624:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	69ba      	ldr	r2, [r7, #24]
 810562a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	685b      	ldr	r3, [r3, #4]
 8105630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105632:	2201      	movs	r2, #1
 8105634:	69fb      	ldr	r3, [r7, #28]
 8105636:	fa02 f303 	lsl.w	r3, r2, r3
 810563a:	43db      	mvns	r3, r3
 810563c:	69ba      	ldr	r2, [r7, #24]
 810563e:	4013      	ands	r3, r2
 8105640:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105642:	683b      	ldr	r3, [r7, #0]
 8105644:	685b      	ldr	r3, [r3, #4]
 8105646:	091b      	lsrs	r3, r3, #4
 8105648:	f003 0201 	and.w	r2, r3, #1
 810564c:	69fb      	ldr	r3, [r7, #28]
 810564e:	fa02 f303 	lsl.w	r3, r2, r3
 8105652:	69ba      	ldr	r2, [r7, #24]
 8105654:	4313      	orrs	r3, r2
 8105656:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	69ba      	ldr	r2, [r7, #24]
 810565c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810565e:	683b      	ldr	r3, [r7, #0]
 8105660:	685b      	ldr	r3, [r3, #4]
 8105662:	f003 0303 	and.w	r3, r3, #3
 8105666:	2b03      	cmp	r3, #3
 8105668:	d017      	beq.n	810569a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	68db      	ldr	r3, [r3, #12]
 810566e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105670:	69fb      	ldr	r3, [r7, #28]
 8105672:	005b      	lsls	r3, r3, #1
 8105674:	2203      	movs	r2, #3
 8105676:	fa02 f303 	lsl.w	r3, r2, r3
 810567a:	43db      	mvns	r3, r3
 810567c:	69ba      	ldr	r2, [r7, #24]
 810567e:	4013      	ands	r3, r2
 8105680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105682:	683b      	ldr	r3, [r7, #0]
 8105684:	689a      	ldr	r2, [r3, #8]
 8105686:	69fb      	ldr	r3, [r7, #28]
 8105688:	005b      	lsls	r3, r3, #1
 810568a:	fa02 f303 	lsl.w	r3, r2, r3
 810568e:	69ba      	ldr	r2, [r7, #24]
 8105690:	4313      	orrs	r3, r2
 8105692:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	69ba      	ldr	r2, [r7, #24]
 8105698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810569a:	683b      	ldr	r3, [r7, #0]
 810569c:	685b      	ldr	r3, [r3, #4]
 810569e:	f003 0303 	and.w	r3, r3, #3
 81056a2:	2b02      	cmp	r3, #2
 81056a4:	d123      	bne.n	81056ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81056a6:	69fb      	ldr	r3, [r7, #28]
 81056a8:	08da      	lsrs	r2, r3, #3
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	3208      	adds	r2, #8
 81056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81056b4:	69fb      	ldr	r3, [r7, #28]
 81056b6:	f003 0307 	and.w	r3, r3, #7
 81056ba:	009b      	lsls	r3, r3, #2
 81056bc:	220f      	movs	r2, #15
 81056be:	fa02 f303 	lsl.w	r3, r2, r3
 81056c2:	43db      	mvns	r3, r3
 81056c4:	69ba      	ldr	r2, [r7, #24]
 81056c6:	4013      	ands	r3, r2
 81056c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81056ca:	683b      	ldr	r3, [r7, #0]
 81056cc:	691a      	ldr	r2, [r3, #16]
 81056ce:	69fb      	ldr	r3, [r7, #28]
 81056d0:	f003 0307 	and.w	r3, r3, #7
 81056d4:	009b      	lsls	r3, r3, #2
 81056d6:	fa02 f303 	lsl.w	r3, r2, r3
 81056da:	69ba      	ldr	r2, [r7, #24]
 81056dc:	4313      	orrs	r3, r2
 81056de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81056e0:	69fb      	ldr	r3, [r7, #28]
 81056e2:	08da      	lsrs	r2, r3, #3
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	3208      	adds	r2, #8
 81056e8:	69b9      	ldr	r1, [r7, #24]
 81056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	681b      	ldr	r3, [r3, #0]
 81056f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81056f4:	69fb      	ldr	r3, [r7, #28]
 81056f6:	005b      	lsls	r3, r3, #1
 81056f8:	2203      	movs	r2, #3
 81056fa:	fa02 f303 	lsl.w	r3, r2, r3
 81056fe:	43db      	mvns	r3, r3
 8105700:	69ba      	ldr	r2, [r7, #24]
 8105702:	4013      	ands	r3, r2
 8105704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105706:	683b      	ldr	r3, [r7, #0]
 8105708:	685b      	ldr	r3, [r3, #4]
 810570a:	f003 0203 	and.w	r2, r3, #3
 810570e:	69fb      	ldr	r3, [r7, #28]
 8105710:	005b      	lsls	r3, r3, #1
 8105712:	fa02 f303 	lsl.w	r3, r2, r3
 8105716:	69ba      	ldr	r2, [r7, #24]
 8105718:	4313      	orrs	r3, r2
 810571a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	69ba      	ldr	r2, [r7, #24]
 8105720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105722:	683b      	ldr	r3, [r7, #0]
 8105724:	685b      	ldr	r3, [r3, #4]
 8105726:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810572a:	2b00      	cmp	r3, #0
 810572c:	f000 80e0 	beq.w	81058f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105730:	4b2f      	ldr	r3, [pc, #188]	@ (81057f0 <HAL_GPIO_Init+0x238>)
 8105732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105736:	4a2e      	ldr	r2, [pc, #184]	@ (81057f0 <HAL_GPIO_Init+0x238>)
 8105738:	f043 0302 	orr.w	r3, r3, #2
 810573c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105740:	4b2b      	ldr	r3, [pc, #172]	@ (81057f0 <HAL_GPIO_Init+0x238>)
 8105742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105746:	f003 0302 	and.w	r3, r3, #2
 810574a:	60fb      	str	r3, [r7, #12]
 810574c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810574e:	4a29      	ldr	r2, [pc, #164]	@ (81057f4 <HAL_GPIO_Init+0x23c>)
 8105750:	69fb      	ldr	r3, [r7, #28]
 8105752:	089b      	lsrs	r3, r3, #2
 8105754:	3302      	adds	r3, #2
 8105756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810575c:	69fb      	ldr	r3, [r7, #28]
 810575e:	f003 0303 	and.w	r3, r3, #3
 8105762:	009b      	lsls	r3, r3, #2
 8105764:	220f      	movs	r2, #15
 8105766:	fa02 f303 	lsl.w	r3, r2, r3
 810576a:	43db      	mvns	r3, r3
 810576c:	69ba      	ldr	r2, [r7, #24]
 810576e:	4013      	ands	r3, r2
 8105770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	4a20      	ldr	r2, [pc, #128]	@ (81057f8 <HAL_GPIO_Init+0x240>)
 8105776:	4293      	cmp	r3, r2
 8105778:	d052      	beq.n	8105820 <HAL_GPIO_Init+0x268>
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	4a1f      	ldr	r2, [pc, #124]	@ (81057fc <HAL_GPIO_Init+0x244>)
 810577e:	4293      	cmp	r3, r2
 8105780:	d031      	beq.n	81057e6 <HAL_GPIO_Init+0x22e>
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	4a1e      	ldr	r2, [pc, #120]	@ (8105800 <HAL_GPIO_Init+0x248>)
 8105786:	4293      	cmp	r3, r2
 8105788:	d02b      	beq.n	81057e2 <HAL_GPIO_Init+0x22a>
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	4a1d      	ldr	r2, [pc, #116]	@ (8105804 <HAL_GPIO_Init+0x24c>)
 810578e:	4293      	cmp	r3, r2
 8105790:	d025      	beq.n	81057de <HAL_GPIO_Init+0x226>
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	4a1c      	ldr	r2, [pc, #112]	@ (8105808 <HAL_GPIO_Init+0x250>)
 8105796:	4293      	cmp	r3, r2
 8105798:	d01f      	beq.n	81057da <HAL_GPIO_Init+0x222>
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	4a1b      	ldr	r2, [pc, #108]	@ (810580c <HAL_GPIO_Init+0x254>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d019      	beq.n	81057d6 <HAL_GPIO_Init+0x21e>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	4a1a      	ldr	r2, [pc, #104]	@ (8105810 <HAL_GPIO_Init+0x258>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d013      	beq.n	81057d2 <HAL_GPIO_Init+0x21a>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	4a19      	ldr	r2, [pc, #100]	@ (8105814 <HAL_GPIO_Init+0x25c>)
 81057ae:	4293      	cmp	r3, r2
 81057b0:	d00d      	beq.n	81057ce <HAL_GPIO_Init+0x216>
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	4a18      	ldr	r2, [pc, #96]	@ (8105818 <HAL_GPIO_Init+0x260>)
 81057b6:	4293      	cmp	r3, r2
 81057b8:	d007      	beq.n	81057ca <HAL_GPIO_Init+0x212>
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	4a17      	ldr	r2, [pc, #92]	@ (810581c <HAL_GPIO_Init+0x264>)
 81057be:	4293      	cmp	r3, r2
 81057c0:	d101      	bne.n	81057c6 <HAL_GPIO_Init+0x20e>
 81057c2:	2309      	movs	r3, #9
 81057c4:	e02d      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057c6:	230a      	movs	r3, #10
 81057c8:	e02b      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057ca:	2308      	movs	r3, #8
 81057cc:	e029      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057ce:	2307      	movs	r3, #7
 81057d0:	e027      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057d2:	2306      	movs	r3, #6
 81057d4:	e025      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057d6:	2305      	movs	r3, #5
 81057d8:	e023      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057da:	2304      	movs	r3, #4
 81057dc:	e021      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057de:	2303      	movs	r3, #3
 81057e0:	e01f      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057e2:	2302      	movs	r3, #2
 81057e4:	e01d      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057e6:	2301      	movs	r3, #1
 81057e8:	e01b      	b.n	8105822 <HAL_GPIO_Init+0x26a>
 81057ea:	bf00      	nop
 81057ec:	580000c0 	.word	0x580000c0
 81057f0:	58024400 	.word	0x58024400
 81057f4:	58000400 	.word	0x58000400
 81057f8:	58020000 	.word	0x58020000
 81057fc:	58020400 	.word	0x58020400
 8105800:	58020800 	.word	0x58020800
 8105804:	58020c00 	.word	0x58020c00
 8105808:	58021000 	.word	0x58021000
 810580c:	58021400 	.word	0x58021400
 8105810:	58021800 	.word	0x58021800
 8105814:	58021c00 	.word	0x58021c00
 8105818:	58022000 	.word	0x58022000
 810581c:	58022400 	.word	0x58022400
 8105820:	2300      	movs	r3, #0
 8105822:	69fa      	ldr	r2, [r7, #28]
 8105824:	f002 0203 	and.w	r2, r2, #3
 8105828:	0092      	lsls	r2, r2, #2
 810582a:	4093      	lsls	r3, r2
 810582c:	69ba      	ldr	r2, [r7, #24]
 810582e:	4313      	orrs	r3, r2
 8105830:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105832:	4938      	ldr	r1, [pc, #224]	@ (8105914 <HAL_GPIO_Init+0x35c>)
 8105834:	69fb      	ldr	r3, [r7, #28]
 8105836:	089b      	lsrs	r3, r3, #2
 8105838:	3302      	adds	r3, #2
 810583a:	69ba      	ldr	r2, [r7, #24]
 810583c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105848:	693b      	ldr	r3, [r7, #16]
 810584a:	43db      	mvns	r3, r3
 810584c:	69ba      	ldr	r2, [r7, #24]
 810584e:	4013      	ands	r3, r2
 8105850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105852:	683b      	ldr	r3, [r7, #0]
 8105854:	685b      	ldr	r3, [r3, #4]
 8105856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810585a:	2b00      	cmp	r3, #0
 810585c:	d003      	beq.n	8105866 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810585e:	69ba      	ldr	r2, [r7, #24]
 8105860:	693b      	ldr	r3, [r7, #16]
 8105862:	4313      	orrs	r3, r2
 8105864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810586a:	69bb      	ldr	r3, [r7, #24]
 810586c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810586e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105872:	685b      	ldr	r3, [r3, #4]
 8105874:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105876:	693b      	ldr	r3, [r7, #16]
 8105878:	43db      	mvns	r3, r3
 810587a:	69ba      	ldr	r2, [r7, #24]
 810587c:	4013      	ands	r3, r2
 810587e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105880:	683b      	ldr	r3, [r7, #0]
 8105882:	685b      	ldr	r3, [r3, #4]
 8105884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105888:	2b00      	cmp	r3, #0
 810588a:	d003      	beq.n	8105894 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810588c:	69ba      	ldr	r2, [r7, #24]
 810588e:	693b      	ldr	r3, [r7, #16]
 8105890:	4313      	orrs	r3, r2
 8105892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105898:	69bb      	ldr	r3, [r7, #24]
 810589a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810589c:	697b      	ldr	r3, [r7, #20]
 810589e:	685b      	ldr	r3, [r3, #4]
 81058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058a2:	693b      	ldr	r3, [r7, #16]
 81058a4:	43db      	mvns	r3, r3
 81058a6:	69ba      	ldr	r2, [r7, #24]
 81058a8:	4013      	ands	r3, r2
 81058aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81058ac:	683b      	ldr	r3, [r7, #0]
 81058ae:	685b      	ldr	r3, [r3, #4]
 81058b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81058b4:	2b00      	cmp	r3, #0
 81058b6:	d003      	beq.n	81058c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81058b8:	69ba      	ldr	r2, [r7, #24]
 81058ba:	693b      	ldr	r3, [r7, #16]
 81058bc:	4313      	orrs	r3, r2
 81058be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81058c0:	697b      	ldr	r3, [r7, #20]
 81058c2:	69ba      	ldr	r2, [r7, #24]
 81058c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81058c6:	697b      	ldr	r3, [r7, #20]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058cc:	693b      	ldr	r3, [r7, #16]
 81058ce:	43db      	mvns	r3, r3
 81058d0:	69ba      	ldr	r2, [r7, #24]
 81058d2:	4013      	ands	r3, r2
 81058d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81058d6:	683b      	ldr	r3, [r7, #0]
 81058d8:	685b      	ldr	r3, [r3, #4]
 81058da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81058de:	2b00      	cmp	r3, #0
 81058e0:	d003      	beq.n	81058ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81058e2:	69ba      	ldr	r2, [r7, #24]
 81058e4:	693b      	ldr	r3, [r7, #16]
 81058e6:	4313      	orrs	r3, r2
 81058e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81058ea:	697b      	ldr	r3, [r7, #20]
 81058ec:	69ba      	ldr	r2, [r7, #24]
 81058ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81058f0:	69fb      	ldr	r3, [r7, #28]
 81058f2:	3301      	adds	r3, #1
 81058f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81058f6:	683b      	ldr	r3, [r7, #0]
 81058f8:	681a      	ldr	r2, [r3, #0]
 81058fa:	69fb      	ldr	r3, [r7, #28]
 81058fc:	fa22 f303 	lsr.w	r3, r2, r3
 8105900:	2b00      	cmp	r3, #0
 8105902:	f47f ae63 	bne.w	81055cc <HAL_GPIO_Init+0x14>
  }
}
 8105906:	bf00      	nop
 8105908:	bf00      	nop
 810590a:	3724      	adds	r7, #36	@ 0x24
 810590c:	46bd      	mov	sp, r7
 810590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105912:	4770      	bx	lr
 8105914:	58000400 	.word	0x58000400

08105918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105918:	b480      	push	{r7}
 810591a:	b083      	sub	sp, #12
 810591c:	af00      	add	r7, sp, #0
 810591e:	6078      	str	r0, [r7, #4]
 8105920:	460b      	mov	r3, r1
 8105922:	807b      	strh	r3, [r7, #2]
 8105924:	4613      	mov	r3, r2
 8105926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105928:	787b      	ldrb	r3, [r7, #1]
 810592a:	2b00      	cmp	r3, #0
 810592c:	d003      	beq.n	8105936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810592e:	887a      	ldrh	r2, [r7, #2]
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105934:	e003      	b.n	810593e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105936:	887b      	ldrh	r3, [r7, #2]
 8105938:	041a      	lsls	r2, r3, #16
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	619a      	str	r2, [r3, #24]
}
 810593e:	bf00      	nop
 8105940:	370c      	adds	r7, #12
 8105942:	46bd      	mov	sp, r7
 8105944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105948:	4770      	bx	lr

0810594a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810594a:	b480      	push	{r7}
 810594c:	b085      	sub	sp, #20
 810594e:	af00      	add	r7, sp, #0
 8105950:	6078      	str	r0, [r7, #4]
 8105952:	460b      	mov	r3, r1
 8105954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	695b      	ldr	r3, [r3, #20]
 810595a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 810595c:	887a      	ldrh	r2, [r7, #2]
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	4013      	ands	r3, r2
 8105962:	041a      	lsls	r2, r3, #16
 8105964:	68fb      	ldr	r3, [r7, #12]
 8105966:	43d9      	mvns	r1, r3
 8105968:	887b      	ldrh	r3, [r7, #2]
 810596a:	400b      	ands	r3, r1
 810596c:	431a      	orrs	r2, r3
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	619a      	str	r2, [r3, #24]
}
 8105972:	bf00      	nop
 8105974:	3714      	adds	r7, #20
 8105976:	46bd      	mov	sp, r7
 8105978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810597c:	4770      	bx	lr
	...

08105980 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8105980:	b480      	push	{r7}
 8105982:	b083      	sub	sp, #12
 8105984:	af00      	add	r7, sp, #0
 8105986:	6078      	str	r0, [r7, #4]
 8105988:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810598a:	490e      	ldr	r1, [pc, #56]	@ (81059c4 <HAL_HSEM_Take+0x44>)
 810598c:	683b      	ldr	r3, [r7, #0]
 810598e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8105992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105996:	687a      	ldr	r2, [r7, #4]
 8105998:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810599c:	4a09      	ldr	r2, [pc, #36]	@ (81059c4 <HAL_HSEM_Take+0x44>)
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81059a4:	683b      	ldr	r3, [r7, #0]
 81059a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81059aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81059ae:	429a      	cmp	r2, r3
 81059b0:	d101      	bne.n	81059b6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81059b2:	2300      	movs	r3, #0
 81059b4:	e000      	b.n	81059b8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81059b6:	2301      	movs	r3, #1
}
 81059b8:	4618      	mov	r0, r3
 81059ba:	370c      	adds	r7, #12
 81059bc:	46bd      	mov	sp, r7
 81059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059c2:	4770      	bx	lr
 81059c4:	58026400 	.word	0x58026400

081059c8 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 81059c8:	b480      	push	{r7}
 81059ca:	b083      	sub	sp, #12
 81059cc:	af00      	add	r7, sp, #0
 81059ce:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 81059d0:	4a07      	ldr	r2, [pc, #28]	@ (81059f0 <HAL_HSEM_IsSemTaken+0x28>)
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81059d8:	2b00      	cmp	r3, #0
 81059da:	da01      	bge.n	81059e0 <HAL_HSEM_IsSemTaken+0x18>
 81059dc:	2301      	movs	r3, #1
 81059de:	e000      	b.n	81059e2 <HAL_HSEM_IsSemTaken+0x1a>
 81059e0:	2300      	movs	r3, #0
}
 81059e2:	4618      	mov	r0, r3
 81059e4:	370c      	adds	r7, #12
 81059e6:	46bd      	mov	sp, r7
 81059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ec:	4770      	bx	lr
 81059ee:	bf00      	nop
 81059f0:	58026400 	.word	0x58026400

081059f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81059f4:	b480      	push	{r7}
 81059f6:	b083      	sub	sp, #12
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	6078      	str	r0, [r7, #4]
 81059fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81059fe:	4906      	ldr	r1, [pc, #24]	@ (8105a18 <HAL_HSEM_Release+0x24>)
 8105a00:	683b      	ldr	r3, [r7, #0]
 8105a02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8105a0c:	bf00      	nop
 8105a0e:	370c      	adds	r7, #12
 8105a10:	46bd      	mov	sp, r7
 8105a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a16:	4770      	bx	lr
 8105a18:	58026400 	.word	0x58026400

08105a1c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105a1c:	b480      	push	{r7}
 8105a1e:	b083      	sub	sp, #12
 8105a20:	af00      	add	r7, sp, #0
 8105a22:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105a24:	4b05      	ldr	r3, [pc, #20]	@ (8105a3c <HAL_HSEM_ActivateNotification+0x20>)
 8105a26:	681a      	ldr	r2, [r3, #0]
 8105a28:	4904      	ldr	r1, [pc, #16]	@ (8105a3c <HAL_HSEM_ActivateNotification+0x20>)
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	4313      	orrs	r3, r2
 8105a2e:	600b      	str	r3, [r1, #0]
#endif
}
 8105a30:	bf00      	nop
 8105a32:	370c      	adds	r7, #12
 8105a34:	46bd      	mov	sp, r7
 8105a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a3a:	4770      	bx	lr
 8105a3c:	58026510 	.word	0x58026510

08105a40 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8105a40:	b580      	push	{r7, lr}
 8105a42:	b082      	sub	sp, #8
 8105a44:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8105a46:	4b0a      	ldr	r3, [pc, #40]	@ (8105a70 <HAL_HSEM_IRQHandler+0x30>)
 8105a48:	68db      	ldr	r3, [r3, #12]
 8105a4a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8105a4c:	4b08      	ldr	r3, [pc, #32]	@ (8105a70 <HAL_HSEM_IRQHandler+0x30>)
 8105a4e:	681a      	ldr	r2, [r3, #0]
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	43db      	mvns	r3, r3
 8105a54:	4906      	ldr	r1, [pc, #24]	@ (8105a70 <HAL_HSEM_IRQHandler+0x30>)
 8105a56:	4013      	ands	r3, r2
 8105a58:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8105a5a:	4a05      	ldr	r2, [pc, #20]	@ (8105a70 <HAL_HSEM_IRQHandler+0x30>)
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8105a60:	6878      	ldr	r0, [r7, #4]
 8105a62:	f000 f807 	bl	8105a74 <HAL_HSEM_FreeCallback>
}
 8105a66:	bf00      	nop
 8105a68:	3708      	adds	r7, #8
 8105a6a:	46bd      	mov	sp, r7
 8105a6c:	bd80      	pop	{r7, pc}
 8105a6e:	bf00      	nop
 8105a70:	58026510 	.word	0x58026510

08105a74 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8105a74:	b480      	push	{r7}
 8105a76:	b083      	sub	sp, #12
 8105a78:	af00      	add	r7, sp, #0
 8105a7a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8105a7c:	bf00      	nop
 8105a7e:	370c      	adds	r7, #12
 8105a80:	46bd      	mov	sp, r7
 8105a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a86:	4770      	bx	lr

08105a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8105a88:	b580      	push	{r7, lr}
 8105a8a:	b086      	sub	sp, #24
 8105a8c:	af02      	add	r7, sp, #8
 8105a8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	2b00      	cmp	r3, #0
 8105a94:	d101      	bne.n	8105a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8105a96:	2301      	movs	r3, #1
 8105a98:	e0fe      	b.n	8105c98 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8105aa0:	b2db      	uxtb	r3, r3
 8105aa2:	2b00      	cmp	r3, #0
 8105aa4:	d106      	bne.n	8105ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	2200      	movs	r2, #0
 8105aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8105aae:	6878      	ldr	r0, [r7, #4]
 8105ab0:	f7fc fc02 	bl	81022b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	2203      	movs	r2, #3
 8105ab8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	4618      	mov	r0, r3
 8105ac2:	f008 f80a 	bl	810dada <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	6818      	ldr	r0, [r3, #0]
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	7c1a      	ldrb	r2, [r3, #16]
 8105ace:	f88d 2000 	strb.w	r2, [sp]
 8105ad2:	3304      	adds	r3, #4
 8105ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8105ad6:	f007 ff8f 	bl	810d9f8 <USB_CoreInit>
 8105ada:	4603      	mov	r3, r0
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	d005      	beq.n	8105aec <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	2202      	movs	r2, #2
 8105ae4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8105ae8:	2301      	movs	r3, #1
 8105aea:	e0d5      	b.n	8105c98 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	2100      	movs	r1, #0
 8105af2:	4618      	mov	r0, r3
 8105af4:	f008 f802 	bl	810dafc <USB_SetCurrentMode>
 8105af8:	4603      	mov	r3, r0
 8105afa:	2b00      	cmp	r3, #0
 8105afc:	d005      	beq.n	8105b0a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	2202      	movs	r2, #2
 8105b02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8105b06:	2301      	movs	r3, #1
 8105b08:	e0c6      	b.n	8105c98 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105b0a:	2300      	movs	r3, #0
 8105b0c:	73fb      	strb	r3, [r7, #15]
 8105b0e:	e04a      	b.n	8105ba6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8105b10:	7bfa      	ldrb	r2, [r7, #15]
 8105b12:	6879      	ldr	r1, [r7, #4]
 8105b14:	4613      	mov	r3, r2
 8105b16:	00db      	lsls	r3, r3, #3
 8105b18:	4413      	add	r3, r2
 8105b1a:	009b      	lsls	r3, r3, #2
 8105b1c:	440b      	add	r3, r1
 8105b1e:	3315      	adds	r3, #21
 8105b20:	2201      	movs	r2, #1
 8105b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8105b24:	7bfa      	ldrb	r2, [r7, #15]
 8105b26:	6879      	ldr	r1, [r7, #4]
 8105b28:	4613      	mov	r3, r2
 8105b2a:	00db      	lsls	r3, r3, #3
 8105b2c:	4413      	add	r3, r2
 8105b2e:	009b      	lsls	r3, r3, #2
 8105b30:	440b      	add	r3, r1
 8105b32:	3314      	adds	r3, #20
 8105b34:	7bfa      	ldrb	r2, [r7, #15]
 8105b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8105b38:	7bfa      	ldrb	r2, [r7, #15]
 8105b3a:	7bfb      	ldrb	r3, [r7, #15]
 8105b3c:	b298      	uxth	r0, r3
 8105b3e:	6879      	ldr	r1, [r7, #4]
 8105b40:	4613      	mov	r3, r2
 8105b42:	00db      	lsls	r3, r3, #3
 8105b44:	4413      	add	r3, r2
 8105b46:	009b      	lsls	r3, r3, #2
 8105b48:	440b      	add	r3, r1
 8105b4a:	332e      	adds	r3, #46	@ 0x2e
 8105b4c:	4602      	mov	r2, r0
 8105b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8105b50:	7bfa      	ldrb	r2, [r7, #15]
 8105b52:	6879      	ldr	r1, [r7, #4]
 8105b54:	4613      	mov	r3, r2
 8105b56:	00db      	lsls	r3, r3, #3
 8105b58:	4413      	add	r3, r2
 8105b5a:	009b      	lsls	r3, r3, #2
 8105b5c:	440b      	add	r3, r1
 8105b5e:	3318      	adds	r3, #24
 8105b60:	2200      	movs	r2, #0
 8105b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8105b64:	7bfa      	ldrb	r2, [r7, #15]
 8105b66:	6879      	ldr	r1, [r7, #4]
 8105b68:	4613      	mov	r3, r2
 8105b6a:	00db      	lsls	r3, r3, #3
 8105b6c:	4413      	add	r3, r2
 8105b6e:	009b      	lsls	r3, r3, #2
 8105b70:	440b      	add	r3, r1
 8105b72:	331c      	adds	r3, #28
 8105b74:	2200      	movs	r2, #0
 8105b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8105b78:	7bfa      	ldrb	r2, [r7, #15]
 8105b7a:	6879      	ldr	r1, [r7, #4]
 8105b7c:	4613      	mov	r3, r2
 8105b7e:	00db      	lsls	r3, r3, #3
 8105b80:	4413      	add	r3, r2
 8105b82:	009b      	lsls	r3, r3, #2
 8105b84:	440b      	add	r3, r1
 8105b86:	3320      	adds	r3, #32
 8105b88:	2200      	movs	r2, #0
 8105b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8105b8c:	7bfa      	ldrb	r2, [r7, #15]
 8105b8e:	6879      	ldr	r1, [r7, #4]
 8105b90:	4613      	mov	r3, r2
 8105b92:	00db      	lsls	r3, r3, #3
 8105b94:	4413      	add	r3, r2
 8105b96:	009b      	lsls	r3, r3, #2
 8105b98:	440b      	add	r3, r1
 8105b9a:	3324      	adds	r3, #36	@ 0x24
 8105b9c:	2200      	movs	r2, #0
 8105b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105ba0:	7bfb      	ldrb	r3, [r7, #15]
 8105ba2:	3301      	adds	r3, #1
 8105ba4:	73fb      	strb	r3, [r7, #15]
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	791b      	ldrb	r3, [r3, #4]
 8105baa:	7bfa      	ldrb	r2, [r7, #15]
 8105bac:	429a      	cmp	r2, r3
 8105bae:	d3af      	bcc.n	8105b10 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105bb0:	2300      	movs	r3, #0
 8105bb2:	73fb      	strb	r3, [r7, #15]
 8105bb4:	e044      	b.n	8105c40 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8105bb6:	7bfa      	ldrb	r2, [r7, #15]
 8105bb8:	6879      	ldr	r1, [r7, #4]
 8105bba:	4613      	mov	r3, r2
 8105bbc:	00db      	lsls	r3, r3, #3
 8105bbe:	4413      	add	r3, r2
 8105bc0:	009b      	lsls	r3, r3, #2
 8105bc2:	440b      	add	r3, r1
 8105bc4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8105bc8:	2200      	movs	r2, #0
 8105bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8105bcc:	7bfa      	ldrb	r2, [r7, #15]
 8105bce:	6879      	ldr	r1, [r7, #4]
 8105bd0:	4613      	mov	r3, r2
 8105bd2:	00db      	lsls	r3, r3, #3
 8105bd4:	4413      	add	r3, r2
 8105bd6:	009b      	lsls	r3, r3, #2
 8105bd8:	440b      	add	r3, r1
 8105bda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8105bde:	7bfa      	ldrb	r2, [r7, #15]
 8105be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8105be2:	7bfa      	ldrb	r2, [r7, #15]
 8105be4:	6879      	ldr	r1, [r7, #4]
 8105be6:	4613      	mov	r3, r2
 8105be8:	00db      	lsls	r3, r3, #3
 8105bea:	4413      	add	r3, r2
 8105bec:	009b      	lsls	r3, r3, #2
 8105bee:	440b      	add	r3, r1
 8105bf0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8105bf4:	2200      	movs	r2, #0
 8105bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8105bf8:	7bfa      	ldrb	r2, [r7, #15]
 8105bfa:	6879      	ldr	r1, [r7, #4]
 8105bfc:	4613      	mov	r3, r2
 8105bfe:	00db      	lsls	r3, r3, #3
 8105c00:	4413      	add	r3, r2
 8105c02:	009b      	lsls	r3, r3, #2
 8105c04:	440b      	add	r3, r1
 8105c06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8105c0a:	2200      	movs	r2, #0
 8105c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8105c0e:	7bfa      	ldrb	r2, [r7, #15]
 8105c10:	6879      	ldr	r1, [r7, #4]
 8105c12:	4613      	mov	r3, r2
 8105c14:	00db      	lsls	r3, r3, #3
 8105c16:	4413      	add	r3, r2
 8105c18:	009b      	lsls	r3, r3, #2
 8105c1a:	440b      	add	r3, r1
 8105c1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8105c20:	2200      	movs	r2, #0
 8105c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8105c24:	7bfa      	ldrb	r2, [r7, #15]
 8105c26:	6879      	ldr	r1, [r7, #4]
 8105c28:	4613      	mov	r3, r2
 8105c2a:	00db      	lsls	r3, r3, #3
 8105c2c:	4413      	add	r3, r2
 8105c2e:	009b      	lsls	r3, r3, #2
 8105c30:	440b      	add	r3, r1
 8105c32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8105c36:	2200      	movs	r2, #0
 8105c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105c3a:	7bfb      	ldrb	r3, [r7, #15]
 8105c3c:	3301      	adds	r3, #1
 8105c3e:	73fb      	strb	r3, [r7, #15]
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	791b      	ldrb	r3, [r3, #4]
 8105c44:	7bfa      	ldrb	r2, [r7, #15]
 8105c46:	429a      	cmp	r2, r3
 8105c48:	d3b5      	bcc.n	8105bb6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	6818      	ldr	r0, [r3, #0]
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	7c1a      	ldrb	r2, [r3, #16]
 8105c52:	f88d 2000 	strb.w	r2, [sp]
 8105c56:	3304      	adds	r3, #4
 8105c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8105c5a:	f007 ff9b 	bl	810db94 <USB_DevInit>
 8105c5e:	4603      	mov	r3, r0
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d005      	beq.n	8105c70 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2202      	movs	r2, #2
 8105c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8105c6c:	2301      	movs	r3, #1
 8105c6e:	e013      	b.n	8105c98 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	2200      	movs	r2, #0
 8105c74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	2201      	movs	r2, #1
 8105c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	7b1b      	ldrb	r3, [r3, #12]
 8105c82:	2b01      	cmp	r3, #1
 8105c84:	d102      	bne.n	8105c8c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8105c86:	6878      	ldr	r0, [r7, #4]
 8105c88:	f000 f80a 	bl	8105ca0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	4618      	mov	r0, r3
 8105c92:	f008 f956 	bl	810df42 <USB_DevDisconnect>

  return HAL_OK;
 8105c96:	2300      	movs	r3, #0
}
 8105c98:	4618      	mov	r0, r3
 8105c9a:	3710      	adds	r7, #16
 8105c9c:	46bd      	mov	sp, r7
 8105c9e:	bd80      	pop	{r7, pc}

08105ca0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8105ca0:	b480      	push	{r7}
 8105ca2:	b085      	sub	sp, #20
 8105ca4:	af00      	add	r7, sp, #0
 8105ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	2201      	movs	r2, #1
 8105cb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	2200      	movs	r2, #0
 8105cba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8105cbe:	68fb      	ldr	r3, [r7, #12]
 8105cc0:	699b      	ldr	r3, [r3, #24]
 8105cc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8105cca:	68fb      	ldr	r3, [r7, #12]
 8105ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105cd2:	f043 0303 	orr.w	r3, r3, #3
 8105cd6:	68fa      	ldr	r2, [r7, #12]
 8105cd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8105cda:	2300      	movs	r3, #0
}
 8105cdc:	4618      	mov	r0, r3
 8105cde:	3714      	adds	r7, #20
 8105ce0:	46bd      	mov	sp, r7
 8105ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce6:	4770      	bx	lr

08105ce8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105ce8:	b580      	push	{r7, lr}
 8105cea:	b084      	sub	sp, #16
 8105cec:	af00      	add	r7, sp, #0
 8105cee:	60f8      	str	r0, [r7, #12]
 8105cf0:	460b      	mov	r3, r1
 8105cf2:	607a      	str	r2, [r7, #4]
 8105cf4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105cf6:	4b37      	ldr	r3, [pc, #220]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	f023 0201 	bic.w	r2, r3, #1
 8105cfe:	4935      	ldr	r1, [pc, #212]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d00:	68fb      	ldr	r3, [r7, #12]
 8105d02:	4313      	orrs	r3, r2
 8105d04:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d123      	bne.n	8105d54 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105d0c:	f7fe fa78 	bl	8104200 <HAL_GetCurrentCPUID>
 8105d10:	4603      	mov	r3, r0
 8105d12:	2b03      	cmp	r3, #3
 8105d14:	d158      	bne.n	8105dc8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105d16:	4b2f      	ldr	r3, [pc, #188]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d18:	691b      	ldr	r3, [r3, #16]
 8105d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d1c:	f023 0301 	bic.w	r3, r3, #1
 8105d20:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d22:	4b2d      	ldr	r3, [pc, #180]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d24:	691b      	ldr	r3, [r3, #16]
 8105d26:	4a2c      	ldr	r2, [pc, #176]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d28:	f043 0304 	orr.w	r3, r3, #4
 8105d2c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105d2e:	f3bf 8f4f 	dsb	sy
}
 8105d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105d34:	f3bf 8f6f 	isb	sy
}
 8105d38:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105d3a:	7afb      	ldrb	r3, [r7, #11]
 8105d3c:	2b01      	cmp	r3, #1
 8105d3e:	d101      	bne.n	8105d44 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d40:	bf30      	wfi
 8105d42:	e000      	b.n	8105d46 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d44:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d46:	4b24      	ldr	r3, [pc, #144]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d48:	691b      	ldr	r3, [r3, #16]
 8105d4a:	4a23      	ldr	r2, [pc, #140]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d4c:	f023 0304 	bic.w	r3, r3, #4
 8105d50:	6113      	str	r3, [r2, #16]
 8105d52:	e03c      	b.n	8105dce <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	2b01      	cmp	r3, #1
 8105d58:	d123      	bne.n	8105da2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105d5a:	f7fe fa51 	bl	8104200 <HAL_GetCurrentCPUID>
 8105d5e:	4603      	mov	r3, r0
 8105d60:	2b01      	cmp	r3, #1
 8105d62:	d133      	bne.n	8105dcc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105d64:	4b1b      	ldr	r3, [pc, #108]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d66:	695b      	ldr	r3, [r3, #20]
 8105d68:	4a1a      	ldr	r2, [pc, #104]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d6a:	f023 0302 	bic.w	r3, r3, #2
 8105d6e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d70:	4b19      	ldr	r3, [pc, #100]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d72:	691b      	ldr	r3, [r3, #16]
 8105d74:	4a18      	ldr	r2, [pc, #96]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d76:	f043 0304 	orr.w	r3, r3, #4
 8105d7a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105d7c:	f3bf 8f4f 	dsb	sy
}
 8105d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105d82:	f3bf 8f6f 	isb	sy
}
 8105d86:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105d88:	7afb      	ldrb	r3, [r7, #11]
 8105d8a:	2b01      	cmp	r3, #1
 8105d8c:	d101      	bne.n	8105d92 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d8e:	bf30      	wfi
 8105d90:	e000      	b.n	8105d94 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d92:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d94:	4b10      	ldr	r3, [pc, #64]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d96:	691b      	ldr	r3, [r3, #16]
 8105d98:	4a0f      	ldr	r2, [pc, #60]	@ (8105dd8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d9a:	f023 0304 	bic.w	r3, r3, #4
 8105d9e:	6113      	str	r3, [r2, #16]
 8105da0:	e015      	b.n	8105dce <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105da2:	f7fe fa2d 	bl	8104200 <HAL_GetCurrentCPUID>
 8105da6:	4603      	mov	r3, r0
 8105da8:	2b03      	cmp	r3, #3
 8105daa:	d106      	bne.n	8105dba <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105dac:	4b09      	ldr	r3, [pc, #36]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105dae:	691b      	ldr	r3, [r3, #16]
 8105db0:	4a08      	ldr	r2, [pc, #32]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105db2:	f023 0304 	bic.w	r3, r3, #4
 8105db6:	6113      	str	r3, [r2, #16]
 8105db8:	e009      	b.n	8105dce <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105dba:	4b06      	ldr	r3, [pc, #24]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105dbc:	695b      	ldr	r3, [r3, #20]
 8105dbe:	4a05      	ldr	r2, [pc, #20]	@ (8105dd4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105dc0:	f023 0304 	bic.w	r3, r3, #4
 8105dc4:	6153      	str	r3, [r2, #20]
 8105dc6:	e002      	b.n	8105dce <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105dc8:	bf00      	nop
 8105dca:	e000      	b.n	8105dce <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105dcc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105dce:	3710      	adds	r7, #16
 8105dd0:	46bd      	mov	sp, r7
 8105dd2:	bd80      	pop	{r7, pc}
 8105dd4:	58024800 	.word	0x58024800
 8105dd8:	e000ed00 	.word	0xe000ed00

08105ddc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105ddc:	b580      	push	{r7, lr}
 8105dde:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105de0:	f7fe fa0e 	bl	8104200 <HAL_GetCurrentCPUID>
 8105de4:	4603      	mov	r3, r0
 8105de6:	2b03      	cmp	r3, #3
 8105de8:	d101      	bne.n	8105dee <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105dea:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105dec:	e001      	b.n	8105df2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105dee:	bf40      	sev
    __WFE ();
 8105df0:	bf20      	wfe
}
 8105df2:	bf00      	nop
 8105df4:	bd80      	pop	{r7, pc}
	...

08105df8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8105df8:	b480      	push	{r7}
 8105dfa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8105dfc:	4b05      	ldr	r3, [pc, #20]	@ (8105e14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105dfe:	68db      	ldr	r3, [r3, #12]
 8105e00:	4a04      	ldr	r2, [pc, #16]	@ (8105e14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105e06:	60d3      	str	r3, [r2, #12]
}
 8105e08:	bf00      	nop
 8105e0a:	46bd      	mov	sp, r7
 8105e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e10:	4770      	bx	lr
 8105e12:	bf00      	nop
 8105e14:	58024800 	.word	0x58024800

08105e18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8105e18:	b580      	push	{r7, lr}
 8105e1a:	b086      	sub	sp, #24
 8105e1c:	af02      	add	r7, sp, #8
 8105e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8105e20:	f7fc feb6 	bl	8102b90 <HAL_GetTick>
 8105e24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	2b00      	cmp	r3, #0
 8105e2a:	d101      	bne.n	8105e30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8105e2c:	2301      	movs	r3, #1
 8105e2e:	e061      	b.n	8105ef4 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105e36:	b2db      	uxtb	r3, r3
 8105e38:	2b00      	cmp	r3, #0
 8105e3a:	d107      	bne.n	8105e4c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8105e3c:	6878      	ldr	r0, [r7, #4]
 8105e3e:	f7fb fd43 	bl	81018c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8105e42:	f241 3188 	movw	r1, #5000	@ 0x1388
 8105e46:	6878      	ldr	r0, [r7, #4]
 8105e48:	f000 f85a 	bl	8105f00 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8105e4c:	687b      	ldr	r3, [r7, #4]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	689b      	ldr	r3, [r3, #8]
 8105e5a:	3b01      	subs	r3, #1
 8105e5c:	021a      	lsls	r2, r3, #8
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	681b      	ldr	r3, [r3, #0]
 8105e62:	430a      	orrs	r2, r1
 8105e64:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105e6a:	9300      	str	r3, [sp, #0]
 8105e6c:	68fb      	ldr	r3, [r7, #12]
 8105e6e:	2200      	movs	r2, #0
 8105e70:	2120      	movs	r1, #32
 8105e72:	6878      	ldr	r0, [r7, #4]
 8105e74:	f000 f852 	bl	8105f1c <QSPI_WaitFlagStateUntilTimeout>
 8105e78:	4603      	mov	r3, r0
 8105e7a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8105e7c:	7afb      	ldrb	r3, [r7, #11]
 8105e7e:	2b00      	cmp	r3, #0
 8105e80:	d137      	bne.n	8105ef2 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105e8c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8105e90:	687a      	ldr	r2, [r7, #4]
 8105e92:	6852      	ldr	r2, [r2, #4]
 8105e94:	0611      	lsls	r1, r2, #24
 8105e96:	687a      	ldr	r2, [r7, #4]
 8105e98:	68d2      	ldr	r2, [r2, #12]
 8105e9a:	4311      	orrs	r1, r2
 8105e9c:	687a      	ldr	r2, [r7, #4]
 8105e9e:	69d2      	ldr	r2, [r2, #28]
 8105ea0:	4311      	orrs	r1, r2
 8105ea2:	687a      	ldr	r2, [r7, #4]
 8105ea4:	6a12      	ldr	r2, [r2, #32]
 8105ea6:	4311      	orrs	r1, r2
 8105ea8:	687a      	ldr	r2, [r7, #4]
 8105eaa:	6812      	ldr	r2, [r2, #0]
 8105eac:	430b      	orrs	r3, r1
 8105eae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	685a      	ldr	r2, [r3, #4]
 8105eb6:	4b11      	ldr	r3, [pc, #68]	@ (8105efc <HAL_QSPI_Init+0xe4>)
 8105eb8:	4013      	ands	r3, r2
 8105eba:	687a      	ldr	r2, [r7, #4]
 8105ebc:	6912      	ldr	r2, [r2, #16]
 8105ebe:	0411      	lsls	r1, r2, #16
 8105ec0:	687a      	ldr	r2, [r7, #4]
 8105ec2:	6952      	ldr	r2, [r2, #20]
 8105ec4:	4311      	orrs	r1, r2
 8105ec6:	687a      	ldr	r2, [r7, #4]
 8105ec8:	6992      	ldr	r2, [r2, #24]
 8105eca:	4311      	orrs	r1, r2
 8105ecc:	687a      	ldr	r2, [r7, #4]
 8105ece:	6812      	ldr	r2, [r2, #0]
 8105ed0:	430b      	orrs	r3, r1
 8105ed2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	681a      	ldr	r2, [r3, #0]
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	f042 0201 	orr.w	r2, r2, #1
 8105ee2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	2200      	movs	r2, #0
 8105ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	2201      	movs	r2, #1
 8105eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8105ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8105ef4:	4618      	mov	r0, r3
 8105ef6:	3710      	adds	r7, #16
 8105ef8:	46bd      	mov	sp, r7
 8105efa:	bd80      	pop	{r7, pc}
 8105efc:	ffe0f8fe 	.word	0xffe0f8fe

08105f00 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8105f00:	b480      	push	{r7}
 8105f02:	b083      	sub	sp, #12
 8105f04:	af00      	add	r7, sp, #0
 8105f06:	6078      	str	r0, [r7, #4]
 8105f08:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	683a      	ldr	r2, [r7, #0]
 8105f0e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8105f10:	bf00      	nop
 8105f12:	370c      	adds	r7, #12
 8105f14:	46bd      	mov	sp, r7
 8105f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f1a:	4770      	bx	lr

08105f1c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8105f1c:	b580      	push	{r7, lr}
 8105f1e:	b084      	sub	sp, #16
 8105f20:	af00      	add	r7, sp, #0
 8105f22:	60f8      	str	r0, [r7, #12]
 8105f24:	60b9      	str	r1, [r7, #8]
 8105f26:	603b      	str	r3, [r7, #0]
 8105f28:	4613      	mov	r3, r2
 8105f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105f2c:	e01a      	b.n	8105f64 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105f2e:	69bb      	ldr	r3, [r7, #24]
 8105f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105f34:	d016      	beq.n	8105f64 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105f36:	f7fc fe2b 	bl	8102b90 <HAL_GetTick>
 8105f3a:	4602      	mov	r2, r0
 8105f3c:	683b      	ldr	r3, [r7, #0]
 8105f3e:	1ad3      	subs	r3, r2, r3
 8105f40:	69ba      	ldr	r2, [r7, #24]
 8105f42:	429a      	cmp	r2, r3
 8105f44:	d302      	bcc.n	8105f4c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8105f46:	69bb      	ldr	r3, [r7, #24]
 8105f48:	2b00      	cmp	r3, #0
 8105f4a:	d10b      	bne.n	8105f64 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	2204      	movs	r2, #4
 8105f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8105f54:	68fb      	ldr	r3, [r7, #12]
 8105f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f58:	f043 0201 	orr.w	r2, r3, #1
 8105f5c:	68fb      	ldr	r3, [r7, #12]
 8105f5e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8105f60:	2301      	movs	r3, #1
 8105f62:	e00e      	b.n	8105f82 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	689a      	ldr	r2, [r3, #8]
 8105f6a:	68bb      	ldr	r3, [r7, #8]
 8105f6c:	4013      	ands	r3, r2
 8105f6e:	2b00      	cmp	r3, #0
 8105f70:	bf14      	ite	ne
 8105f72:	2301      	movne	r3, #1
 8105f74:	2300      	moveq	r3, #0
 8105f76:	b2db      	uxtb	r3, r3
 8105f78:	461a      	mov	r2, r3
 8105f7a:	79fb      	ldrb	r3, [r7, #7]
 8105f7c:	429a      	cmp	r2, r3
 8105f7e:	d1d6      	bne.n	8105f2e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105f80:	2300      	movs	r3, #0
}
 8105f82:	4618      	mov	r0, r3
 8105f84:	3710      	adds	r7, #16
 8105f86:	46bd      	mov	sp, r7
 8105f88:	bd80      	pop	{r7, pc}
	...

08105f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105f8c:	b480      	push	{r7}
 8105f8e:	b089      	sub	sp, #36	@ 0x24
 8105f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105f92:	4bb3      	ldr	r3, [pc, #716]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f94:	691b      	ldr	r3, [r3, #16]
 8105f96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105f9a:	2b18      	cmp	r3, #24
 8105f9c:	f200 8155 	bhi.w	810624a <HAL_RCC_GetSysClockFreq+0x2be>
 8105fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8105fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fa6:	bf00      	nop
 8105fa8:	0810600d 	.word	0x0810600d
 8105fac:	0810624b 	.word	0x0810624b
 8105fb0:	0810624b 	.word	0x0810624b
 8105fb4:	0810624b 	.word	0x0810624b
 8105fb8:	0810624b 	.word	0x0810624b
 8105fbc:	0810624b 	.word	0x0810624b
 8105fc0:	0810624b 	.word	0x0810624b
 8105fc4:	0810624b 	.word	0x0810624b
 8105fc8:	08106033 	.word	0x08106033
 8105fcc:	0810624b 	.word	0x0810624b
 8105fd0:	0810624b 	.word	0x0810624b
 8105fd4:	0810624b 	.word	0x0810624b
 8105fd8:	0810624b 	.word	0x0810624b
 8105fdc:	0810624b 	.word	0x0810624b
 8105fe0:	0810624b 	.word	0x0810624b
 8105fe4:	0810624b 	.word	0x0810624b
 8105fe8:	08106039 	.word	0x08106039
 8105fec:	0810624b 	.word	0x0810624b
 8105ff0:	0810624b 	.word	0x0810624b
 8105ff4:	0810624b 	.word	0x0810624b
 8105ff8:	0810624b 	.word	0x0810624b
 8105ffc:	0810624b 	.word	0x0810624b
 8106000:	0810624b 	.word	0x0810624b
 8106004:	0810624b 	.word	0x0810624b
 8106008:	0810603f 	.word	0x0810603f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810600c:	4b94      	ldr	r3, [pc, #592]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	f003 0320 	and.w	r3, r3, #32
 8106014:	2b00      	cmp	r3, #0
 8106016:	d009      	beq.n	810602c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106018:	4b91      	ldr	r3, [pc, #580]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	08db      	lsrs	r3, r3, #3
 810601e:	f003 0303 	and.w	r3, r3, #3
 8106022:	4a90      	ldr	r2, [pc, #576]	@ (8106264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106024:	fa22 f303 	lsr.w	r3, r2, r3
 8106028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810602a:	e111      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810602c:	4b8d      	ldr	r3, [pc, #564]	@ (8106264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810602e:	61bb      	str	r3, [r7, #24]
      break;
 8106030:	e10e      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106032:	4b8d      	ldr	r3, [pc, #564]	@ (8106268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106034:	61bb      	str	r3, [r7, #24]
      break;
 8106036:	e10b      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106038:	4b8c      	ldr	r3, [pc, #560]	@ (810626c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810603a:	61bb      	str	r3, [r7, #24]
      break;
 810603c:	e108      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810603e:	4b88      	ldr	r3, [pc, #544]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106042:	f003 0303 	and.w	r3, r3, #3
 8106046:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106048:	4b85      	ldr	r3, [pc, #532]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810604c:	091b      	lsrs	r3, r3, #4
 810604e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106052:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106054:	4b82      	ldr	r3, [pc, #520]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106058:	f003 0301 	and.w	r3, r3, #1
 810605c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810605e:	4b80      	ldr	r3, [pc, #512]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106062:	08db      	lsrs	r3, r3, #3
 8106064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106068:	68fa      	ldr	r2, [r7, #12]
 810606a:	fb02 f303 	mul.w	r3, r2, r3
 810606e:	ee07 3a90 	vmov	s15, r3
 8106072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106076:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810607a:	693b      	ldr	r3, [r7, #16]
 810607c:	2b00      	cmp	r3, #0
 810607e:	f000 80e1 	beq.w	8106244 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8106082:	697b      	ldr	r3, [r7, #20]
 8106084:	2b02      	cmp	r3, #2
 8106086:	f000 8083 	beq.w	8106190 <HAL_RCC_GetSysClockFreq+0x204>
 810608a:	697b      	ldr	r3, [r7, #20]
 810608c:	2b02      	cmp	r3, #2
 810608e:	f200 80a1 	bhi.w	81061d4 <HAL_RCC_GetSysClockFreq+0x248>
 8106092:	697b      	ldr	r3, [r7, #20]
 8106094:	2b00      	cmp	r3, #0
 8106096:	d003      	beq.n	81060a0 <HAL_RCC_GetSysClockFreq+0x114>
 8106098:	697b      	ldr	r3, [r7, #20]
 810609a:	2b01      	cmp	r3, #1
 810609c:	d056      	beq.n	810614c <HAL_RCC_GetSysClockFreq+0x1c0>
 810609e:	e099      	b.n	81061d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81060a0:	4b6f      	ldr	r3, [pc, #444]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	f003 0320 	and.w	r3, r3, #32
 81060a8:	2b00      	cmp	r3, #0
 81060aa:	d02d      	beq.n	8106108 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81060ac:	4b6c      	ldr	r3, [pc, #432]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	08db      	lsrs	r3, r3, #3
 81060b2:	f003 0303 	and.w	r3, r3, #3
 81060b6:	4a6b      	ldr	r2, [pc, #428]	@ (8106264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81060b8:	fa22 f303 	lsr.w	r3, r2, r3
 81060bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	ee07 3a90 	vmov	s15, r3
 81060c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060c8:	693b      	ldr	r3, [r7, #16]
 81060ca:	ee07 3a90 	vmov	s15, r3
 81060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060d6:	4b62      	ldr	r3, [pc, #392]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060de:	ee07 3a90 	vmov	s15, r3
 81060e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81060ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106270 <HAL_RCC_GetSysClockFreq+0x2e4>
 81060ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106102:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106106:	e087      	b.n	8106218 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106108:	693b      	ldr	r3, [r7, #16]
 810610a:	ee07 3a90 	vmov	s15, r3
 810610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106112:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810611a:	4b51      	ldr	r3, [pc, #324]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106122:	ee07 3a90 	vmov	s15, r3
 8106126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810612a:	ed97 6a02 	vldr	s12, [r7, #8]
 810612e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810613a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810614a:	e065      	b.n	8106218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810614c:	693b      	ldr	r3, [r7, #16]
 810614e:	ee07 3a90 	vmov	s15, r3
 8106152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106156:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106278 <HAL_RCC_GetSysClockFreq+0x2ec>
 810615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810615e:	4b40      	ldr	r3, [pc, #256]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106166:	ee07 3a90 	vmov	s15, r3
 810616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810616e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106172:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810617e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106186:	ee67 7a27 	vmul.f32	s15, s14, s15
 810618a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810618e:	e043      	b.n	8106218 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106190:	693b      	ldr	r3, [r7, #16]
 8106192:	ee07 3a90 	vmov	s15, r3
 8106196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810619a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810627c <HAL_RCC_GetSysClockFreq+0x2f0>
 810619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061a2:	4b2f      	ldr	r3, [pc, #188]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061aa:	ee07 3a90 	vmov	s15, r3
 81061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81061b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106270 <HAL_RCC_GetSysClockFreq+0x2e4>
 81061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81061d2:	e021      	b.n	8106218 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81061d4:	693b      	ldr	r3, [r7, #16]
 81061d6:	ee07 3a90 	vmov	s15, r3
 81061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106278 <HAL_RCC_GetSysClockFreq+0x2ec>
 81061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061e6:	4b1e      	ldr	r3, [pc, #120]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061ee:	ee07 3a90 	vmov	s15, r3
 81061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81061fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106270 <HAL_RCC_GetSysClockFreq+0x2e4>
 81061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106216:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106218:	4b11      	ldr	r3, [pc, #68]	@ (8106260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810621c:	0a5b      	lsrs	r3, r3, #9
 810621e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106222:	3301      	adds	r3, #1
 8106224:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106226:	683b      	ldr	r3, [r7, #0]
 8106228:	ee07 3a90 	vmov	s15, r3
 810622c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106230:	edd7 6a07 	vldr	s13, [r7, #28]
 8106234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810623c:	ee17 3a90 	vmov	r3, s15
 8106240:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106242:	e005      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106244:	2300      	movs	r3, #0
 8106246:	61bb      	str	r3, [r7, #24]
      break;
 8106248:	e002      	b.n	8106250 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810624a:	4b07      	ldr	r3, [pc, #28]	@ (8106268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810624c:	61bb      	str	r3, [r7, #24]
      break;
 810624e:	bf00      	nop
  }

  return sysclockfreq;
 8106250:	69bb      	ldr	r3, [r7, #24]
}
 8106252:	4618      	mov	r0, r3
 8106254:	3724      	adds	r7, #36	@ 0x24
 8106256:	46bd      	mov	sp, r7
 8106258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810625c:	4770      	bx	lr
 810625e:	bf00      	nop
 8106260:	58024400 	.word	0x58024400
 8106264:	03d09000 	.word	0x03d09000
 8106268:	003d0900 	.word	0x003d0900
 810626c:	017d7840 	.word	0x017d7840
 8106270:	46000000 	.word	0x46000000
 8106274:	4c742400 	.word	0x4c742400
 8106278:	4a742400 	.word	0x4a742400
 810627c:	4bbebc20 	.word	0x4bbebc20

08106280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106280:	b580      	push	{r7, lr}
 8106282:	b082      	sub	sp, #8
 8106284:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106286:	f7ff fe81 	bl	8105f8c <HAL_RCC_GetSysClockFreq>
 810628a:	4602      	mov	r2, r0
 810628c:	4b11      	ldr	r3, [pc, #68]	@ (81062d4 <HAL_RCC_GetHCLKFreq+0x54>)
 810628e:	699b      	ldr	r3, [r3, #24]
 8106290:	0a1b      	lsrs	r3, r3, #8
 8106292:	f003 030f 	and.w	r3, r3, #15
 8106296:	4910      	ldr	r1, [pc, #64]	@ (81062d8 <HAL_RCC_GetHCLKFreq+0x58>)
 8106298:	5ccb      	ldrb	r3, [r1, r3]
 810629a:	f003 031f 	and.w	r3, r3, #31
 810629e:	fa22 f303 	lsr.w	r3, r2, r3
 81062a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81062a4:	4b0b      	ldr	r3, [pc, #44]	@ (81062d4 <HAL_RCC_GetHCLKFreq+0x54>)
 81062a6:	699b      	ldr	r3, [r3, #24]
 81062a8:	f003 030f 	and.w	r3, r3, #15
 81062ac:	4a0a      	ldr	r2, [pc, #40]	@ (81062d8 <HAL_RCC_GetHCLKFreq+0x58>)
 81062ae:	5cd3      	ldrb	r3, [r2, r3]
 81062b0:	f003 031f 	and.w	r3, r3, #31
 81062b4:	687a      	ldr	r2, [r7, #4]
 81062b6:	fa22 f303 	lsr.w	r3, r2, r3
 81062ba:	4a08      	ldr	r2, [pc, #32]	@ (81062dc <HAL_RCC_GetHCLKFreq+0x5c>)
 81062bc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81062be:	4b07      	ldr	r3, [pc, #28]	@ (81062dc <HAL_RCC_GetHCLKFreq+0x5c>)
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	4a07      	ldr	r2, [pc, #28]	@ (81062e0 <HAL_RCC_GetHCLKFreq+0x60>)
 81062c4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81062c6:	4b05      	ldr	r3, [pc, #20]	@ (81062dc <HAL_RCC_GetHCLKFreq+0x5c>)
 81062c8:	681b      	ldr	r3, [r3, #0]
}
 81062ca:	4618      	mov	r0, r3
 81062cc:	3708      	adds	r7, #8
 81062ce:	46bd      	mov	sp, r7
 81062d0:	bd80      	pop	{r7, pc}
 81062d2:	bf00      	nop
 81062d4:	58024400 	.word	0x58024400
 81062d8:	0810e998 	.word	0x0810e998
 81062dc:	10000004 	.word	0x10000004
 81062e0:	10000000 	.word	0x10000000

081062e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81062e4:	b580      	push	{r7, lr}
 81062e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81062e8:	f7ff ffca 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 81062ec:	4602      	mov	r2, r0
 81062ee:	4b06      	ldr	r3, [pc, #24]	@ (8106308 <HAL_RCC_GetPCLK1Freq+0x24>)
 81062f0:	69db      	ldr	r3, [r3, #28]
 81062f2:	091b      	lsrs	r3, r3, #4
 81062f4:	f003 0307 	and.w	r3, r3, #7
 81062f8:	4904      	ldr	r1, [pc, #16]	@ (810630c <HAL_RCC_GetPCLK1Freq+0x28>)
 81062fa:	5ccb      	ldrb	r3, [r1, r3]
 81062fc:	f003 031f 	and.w	r3, r3, #31
 8106300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106304:	4618      	mov	r0, r3
 8106306:	bd80      	pop	{r7, pc}
 8106308:	58024400 	.word	0x58024400
 810630c:	0810e998 	.word	0x0810e998

08106310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106310:	b580      	push	{r7, lr}
 8106312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106314:	f7ff ffb4 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 8106318:	4602      	mov	r2, r0
 810631a:	4b06      	ldr	r3, [pc, #24]	@ (8106334 <HAL_RCC_GetPCLK2Freq+0x24>)
 810631c:	69db      	ldr	r3, [r3, #28]
 810631e:	0a1b      	lsrs	r3, r3, #8
 8106320:	f003 0307 	and.w	r3, r3, #7
 8106324:	4904      	ldr	r1, [pc, #16]	@ (8106338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106326:	5ccb      	ldrb	r3, [r1, r3]
 8106328:	f003 031f 	and.w	r3, r3, #31
 810632c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106330:	4618      	mov	r0, r3
 8106332:	bd80      	pop	{r7, pc}
 8106334:	58024400 	.word	0x58024400
 8106338:	0810e998 	.word	0x0810e998

0810633c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810633c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106340:	b0cc      	sub	sp, #304	@ 0x130
 8106342:	af00      	add	r7, sp, #0
 8106344:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106348:	2300      	movs	r3, #0
 810634a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810634e:	2300      	movs	r3, #0
 8106350:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106358:	e9d3 2300 	ldrd	r2, r3, [r3]
 810635c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106360:	2500      	movs	r5, #0
 8106362:	ea54 0305 	orrs.w	r3, r4, r5
 8106366:	d049      	beq.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810636c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810636e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106372:	d02f      	beq.n	81063d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106378:	d828      	bhi.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810637a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810637e:	d01a      	beq.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106384:	d822      	bhi.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106386:	2b00      	cmp	r3, #0
 8106388:	d003      	beq.n	8106392 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810638a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810638e:	d007      	beq.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106390:	e01c      	b.n	81063cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106392:	4bb8      	ldr	r3, [pc, #736]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106396:	4ab7      	ldr	r2, [pc, #732]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810639c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810639e:	e01a      	b.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81063a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063a4:	3308      	adds	r3, #8
 81063a6:	2102      	movs	r1, #2
 81063a8:	4618      	mov	r0, r3
 81063aa:	f002 fba1 	bl	8108af0 <RCCEx_PLL2_Config>
 81063ae:	4603      	mov	r3, r0
 81063b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81063b4:	e00f      	b.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81063b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ba:	3328      	adds	r3, #40	@ 0x28
 81063bc:	2102      	movs	r1, #2
 81063be:	4618      	mov	r0, r3
 81063c0:	f002 fc48 	bl	8108c54 <RCCEx_PLL3_Config>
 81063c4:	4603      	mov	r3, r0
 81063c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81063ca:	e004      	b.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81063cc:	2301      	movs	r3, #1
 81063ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81063d2:	e000      	b.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81063d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81063da:	2b00      	cmp	r3, #0
 81063dc:	d10a      	bne.n	81063f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81063de:	4ba5      	ldr	r3, [pc, #660]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81063e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81063e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81063ec:	4aa1      	ldr	r2, [pc, #644]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063ee:	430b      	orrs	r3, r1
 81063f0:	6513      	str	r3, [r2, #80]	@ 0x50
 81063f2:	e003      	b.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81063f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81063fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106404:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8106408:	f04f 0900 	mov.w	r9, #0
 810640c:	ea58 0309 	orrs.w	r3, r8, r9
 8106410:	d047      	beq.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106418:	2b04      	cmp	r3, #4
 810641a:	d82a      	bhi.n	8106472 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810641c:	a201      	add	r2, pc, #4	@ (adr r2, 8106424 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106422:	bf00      	nop
 8106424:	08106439 	.word	0x08106439
 8106428:	08106447 	.word	0x08106447
 810642c:	0810645d 	.word	0x0810645d
 8106430:	0810647b 	.word	0x0810647b
 8106434:	0810647b 	.word	0x0810647b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106438:	4b8e      	ldr	r3, [pc, #568]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810643c:	4a8d      	ldr	r2, [pc, #564]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810643e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106444:	e01a      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810644a:	3308      	adds	r3, #8
 810644c:	2100      	movs	r1, #0
 810644e:	4618      	mov	r0, r3
 8106450:	f002 fb4e 	bl	8108af0 <RCCEx_PLL2_Config>
 8106454:	4603      	mov	r3, r0
 8106456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810645a:	e00f      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810645c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106460:	3328      	adds	r3, #40	@ 0x28
 8106462:	2100      	movs	r1, #0
 8106464:	4618      	mov	r0, r3
 8106466:	f002 fbf5 	bl	8108c54 <RCCEx_PLL3_Config>
 810646a:	4603      	mov	r3, r0
 810646c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106470:	e004      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106472:	2301      	movs	r3, #1
 8106474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106478:	e000      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810647a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810647c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106480:	2b00      	cmp	r3, #0
 8106482:	d10a      	bne.n	810649a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106484:	4b7b      	ldr	r3, [pc, #492]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106488:	f023 0107 	bic.w	r1, r3, #7
 810648c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106492:	4a78      	ldr	r2, [pc, #480]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106494:	430b      	orrs	r3, r1
 8106496:	6513      	str	r3, [r2, #80]	@ 0x50
 8106498:	e003      	b.n	81064a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810649a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810649e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81064a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81064ae:	f04f 0b00 	mov.w	fp, #0
 81064b2:	ea5a 030b 	orrs.w	r3, sl, fp
 81064b6:	d04c      	beq.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81064b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81064be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81064c2:	d030      	beq.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81064c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81064c8:	d829      	bhi.n	810651e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81064ca:	2bc0      	cmp	r3, #192	@ 0xc0
 81064cc:	d02d      	beq.n	810652a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81064ce:	2bc0      	cmp	r3, #192	@ 0xc0
 81064d0:	d825      	bhi.n	810651e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81064d2:	2b80      	cmp	r3, #128	@ 0x80
 81064d4:	d018      	beq.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81064d6:	2b80      	cmp	r3, #128	@ 0x80
 81064d8:	d821      	bhi.n	810651e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81064da:	2b00      	cmp	r3, #0
 81064dc:	d002      	beq.n	81064e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81064de:	2b40      	cmp	r3, #64	@ 0x40
 81064e0:	d007      	beq.n	81064f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81064e2:	e01c      	b.n	810651e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064e4:	4b63      	ldr	r3, [pc, #396]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064e8:	4a62      	ldr	r2, [pc, #392]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81064ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81064ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81064f0:	e01c      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81064f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064f6:	3308      	adds	r3, #8
 81064f8:	2100      	movs	r1, #0
 81064fa:	4618      	mov	r0, r3
 81064fc:	f002 faf8 	bl	8108af0 <RCCEx_PLL2_Config>
 8106500:	4603      	mov	r3, r0
 8106502:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106506:	e011      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810650c:	3328      	adds	r3, #40	@ 0x28
 810650e:	2100      	movs	r1, #0
 8106510:	4618      	mov	r0, r3
 8106512:	f002 fb9f 	bl	8108c54 <RCCEx_PLL3_Config>
 8106516:	4603      	mov	r3, r0
 8106518:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810651c:	e006      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810651e:	2301      	movs	r3, #1
 8106520:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106524:	e002      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8106526:	bf00      	nop
 8106528:	e000      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810652a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810652c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106530:	2b00      	cmp	r3, #0
 8106532:	d10a      	bne.n	810654a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106534:	4b4f      	ldr	r3, [pc, #316]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106538:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810653c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106542:	4a4c      	ldr	r2, [pc, #304]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106544:	430b      	orrs	r3, r1
 8106546:	6513      	str	r3, [r2, #80]	@ 0x50
 8106548:	e003      	b.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810654a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810654e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106556:	e9d3 2300 	ldrd	r2, r3, [r3]
 810655a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810655e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8106562:	2300      	movs	r3, #0
 8106564:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8106568:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810656c:	460b      	mov	r3, r1
 810656e:	4313      	orrs	r3, r2
 8106570:	d053      	beq.n	810661a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810657a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810657e:	d035      	beq.n	81065ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106580:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106584:	d82e      	bhi.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106586:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810658a:	d031      	beq.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810658c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106590:	d828      	bhi.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106596:	d01a      	beq.n	81065ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810659c:	d822      	bhi.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810659e:	2b00      	cmp	r3, #0
 81065a0:	d003      	beq.n	81065aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81065a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81065a6:	d007      	beq.n	81065b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81065a8:	e01c      	b.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065aa:	4b32      	ldr	r3, [pc, #200]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ae:	4a31      	ldr	r2, [pc, #196]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81065b6:	e01c      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81065b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065bc:	3308      	adds	r3, #8
 81065be:	2100      	movs	r1, #0
 81065c0:	4618      	mov	r0, r3
 81065c2:	f002 fa95 	bl	8108af0 <RCCEx_PLL2_Config>
 81065c6:	4603      	mov	r3, r0
 81065c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81065cc:	e011      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81065ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065d2:	3328      	adds	r3, #40	@ 0x28
 81065d4:	2100      	movs	r1, #0
 81065d6:	4618      	mov	r0, r3
 81065d8:	f002 fb3c 	bl	8108c54 <RCCEx_PLL3_Config>
 81065dc:	4603      	mov	r3, r0
 81065de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81065e2:	e006      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81065e4:	2301      	movs	r3, #1
 81065e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81065ea:	e002      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81065ec:	bf00      	nop
 81065ee:	e000      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d10b      	bne.n	8106612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81065fa:	4b1e      	ldr	r3, [pc, #120]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81065fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81065fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8106602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810660a:	4a1a      	ldr	r2, [pc, #104]	@ (8106674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810660c:	430b      	orrs	r3, r1
 810660e:	6593      	str	r3, [r2, #88]	@ 0x58
 8106610:	e003      	b.n	810661a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810661a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106622:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8106626:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810662a:	2300      	movs	r3, #0
 810662c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8106630:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8106634:	460b      	mov	r3, r1
 8106636:	4313      	orrs	r3, r2
 8106638:	d056      	beq.n	81066e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810663a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810663e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106646:	d038      	beq.n	81066ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810664c:	d831      	bhi.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810664e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106652:	d034      	beq.n	81066be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106658:	d82b      	bhi.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810665a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810665e:	d01d      	beq.n	810669c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106664:	d825      	bhi.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106666:	2b00      	cmp	r3, #0
 8106668:	d006      	beq.n	8106678 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810666a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810666e:	d00a      	beq.n	8106686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106670:	e01f      	b.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106672:	bf00      	nop
 8106674:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106678:	4ba2      	ldr	r3, [pc, #648]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810667c:	4aa1      	ldr	r2, [pc, #644]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810667e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106684:	e01c      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810668a:	3308      	adds	r3, #8
 810668c:	2100      	movs	r1, #0
 810668e:	4618      	mov	r0, r3
 8106690:	f002 fa2e 	bl	8108af0 <RCCEx_PLL2_Config>
 8106694:	4603      	mov	r3, r0
 8106696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810669a:	e011      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810669c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066a0:	3328      	adds	r3, #40	@ 0x28
 81066a2:	2100      	movs	r1, #0
 81066a4:	4618      	mov	r0, r3
 81066a6:	f002 fad5 	bl	8108c54 <RCCEx_PLL3_Config>
 81066aa:	4603      	mov	r3, r0
 81066ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81066b0:	e006      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81066b2:	2301      	movs	r3, #1
 81066b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81066b8:	e002      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81066ba:	bf00      	nop
 81066bc:	e000      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81066be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066c4:	2b00      	cmp	r3, #0
 81066c6:	d10b      	bne.n	81066e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81066c8:	4b8e      	ldr	r3, [pc, #568]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81066cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81066d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81066d8:	4a8a      	ldr	r2, [pc, #552]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066da:	430b      	orrs	r3, r1
 81066dc:	6593      	str	r3, [r2, #88]	@ 0x58
 81066de:	e003      	b.n	81066e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81066e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81066f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81066f8:	2300      	movs	r3, #0
 81066fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81066fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8106702:	460b      	mov	r3, r1
 8106704:	4313      	orrs	r3, r2
 8106706:	d03a      	beq.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810670c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810670e:	2b30      	cmp	r3, #48	@ 0x30
 8106710:	d01f      	beq.n	8106752 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106712:	2b30      	cmp	r3, #48	@ 0x30
 8106714:	d819      	bhi.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106716:	2b20      	cmp	r3, #32
 8106718:	d00c      	beq.n	8106734 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810671a:	2b20      	cmp	r3, #32
 810671c:	d815      	bhi.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810671e:	2b00      	cmp	r3, #0
 8106720:	d019      	beq.n	8106756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106722:	2b10      	cmp	r3, #16
 8106724:	d111      	bne.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106726:	4b77      	ldr	r3, [pc, #476]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810672a:	4a76      	ldr	r2, [pc, #472]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810672c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106732:	e011      	b.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106738:	3308      	adds	r3, #8
 810673a:	2102      	movs	r1, #2
 810673c:	4618      	mov	r0, r3
 810673e:	f002 f9d7 	bl	8108af0 <RCCEx_PLL2_Config>
 8106742:	4603      	mov	r3, r0
 8106744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106748:	e006      	b.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810674a:	2301      	movs	r3, #1
 810674c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106750:	e002      	b.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106752:	bf00      	nop
 8106754:	e000      	b.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106758:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810675c:	2b00      	cmp	r3, #0
 810675e:	d10a      	bne.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106760:	4b68      	ldr	r3, [pc, #416]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106764:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810676c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810676e:	4a65      	ldr	r2, [pc, #404]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106770:	430b      	orrs	r3, r1
 8106772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106774:	e003      	b.n	810677e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810677a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810677e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106786:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810678a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810678e:	2300      	movs	r3, #0
 8106790:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106794:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106798:	460b      	mov	r3, r1
 810679a:	4313      	orrs	r3, r2
 810679c:	d051      	beq.n	8106842 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810679e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81067a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81067a8:	d035      	beq.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81067aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81067ae:	d82e      	bhi.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81067b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81067b4:	d031      	beq.n	810681a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81067b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81067ba:	d828      	bhi.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81067bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81067c0:	d01a      	beq.n	81067f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81067c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81067c6:	d822      	bhi.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81067c8:	2b00      	cmp	r3, #0
 81067ca:	d003      	beq.n	81067d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81067cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81067d0:	d007      	beq.n	81067e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81067d2:	e01c      	b.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067d4:	4b4b      	ldr	r3, [pc, #300]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067d8:	4a4a      	ldr	r2, [pc, #296]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81067da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81067de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81067e0:	e01c      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067e6:	3308      	adds	r3, #8
 81067e8:	2100      	movs	r1, #0
 81067ea:	4618      	mov	r0, r3
 81067ec:	f002 f980 	bl	8108af0 <RCCEx_PLL2_Config>
 81067f0:	4603      	mov	r3, r0
 81067f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81067f6:	e011      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81067f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067fc:	3328      	adds	r3, #40	@ 0x28
 81067fe:	2100      	movs	r1, #0
 8106800:	4618      	mov	r0, r3
 8106802:	f002 fa27 	bl	8108c54 <RCCEx_PLL3_Config>
 8106806:	4603      	mov	r3, r0
 8106808:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810680c:	e006      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810680e:	2301      	movs	r3, #1
 8106810:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106814:	e002      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106816:	bf00      	nop
 8106818:	e000      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810681a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810681c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106820:	2b00      	cmp	r3, #0
 8106822:	d10a      	bne.n	810683a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106824:	4b37      	ldr	r3, [pc, #220]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106828:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810682c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106832:	4a34      	ldr	r2, [pc, #208]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106834:	430b      	orrs	r3, r1
 8106836:	6513      	str	r3, [r2, #80]	@ 0x50
 8106838:	e003      	b.n	8106842 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810683a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810683e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106846:	e9d3 2300 	ldrd	r2, r3, [r3]
 810684a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810684e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8106852:	2300      	movs	r3, #0
 8106854:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8106858:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810685c:	460b      	mov	r3, r1
 810685e:	4313      	orrs	r3, r2
 8106860:	d056      	beq.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810686c:	d033      	beq.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810686e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106872:	d82c      	bhi.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106878:	d02f      	beq.n	81068da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810687a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810687e:	d826      	bhi.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106884:	d02b      	beq.n	81068de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810688a:	d820      	bhi.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 810688c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106890:	d012      	beq.n	81068b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106896:	d81a      	bhi.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106898:	2b00      	cmp	r3, #0
 810689a:	d022      	beq.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810689c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81068a0:	d115      	bne.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81068a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068a6:	3308      	adds	r3, #8
 81068a8:	2101      	movs	r1, #1
 81068aa:	4618      	mov	r0, r3
 81068ac:	f002 f920 	bl	8108af0 <RCCEx_PLL2_Config>
 81068b0:	4603      	mov	r3, r0
 81068b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81068b6:	e015      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068bc:	3328      	adds	r3, #40	@ 0x28
 81068be:	2101      	movs	r1, #1
 81068c0:	4618      	mov	r0, r3
 81068c2:	f002 f9c7 	bl	8108c54 <RCCEx_PLL3_Config>
 81068c6:	4603      	mov	r3, r0
 81068c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81068cc:	e00a      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068ce:	2301      	movs	r3, #1
 81068d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81068d4:	e006      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81068d6:	bf00      	nop
 81068d8:	e004      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81068da:	bf00      	nop
 81068dc:	e002      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81068de:	bf00      	nop
 81068e0:	e000      	b.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81068e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068e8:	2b00      	cmp	r3, #0
 81068ea:	d10d      	bne.n	8106908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81068ec:	4b05      	ldr	r3, [pc, #20]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81068f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81068fa:	4a02      	ldr	r2, [pc, #8]	@ (8106904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81068fc:	430b      	orrs	r3, r1
 81068fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8106900:	e006      	b.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106902:	bf00      	nop
 8106904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106908:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810690c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106918:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810691c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106920:	2300      	movs	r3, #0
 8106922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106926:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810692a:	460b      	mov	r3, r1
 810692c:	4313      	orrs	r3, r2
 810692e:	d055      	beq.n	81069dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810693c:	d033      	beq.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810693e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106942:	d82c      	bhi.n	810699e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106948:	d02f      	beq.n	81069aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810694e:	d826      	bhi.n	810699e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106954:	d02b      	beq.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810695a:	d820      	bhi.n	810699e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810695c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106960:	d012      	beq.n	8106988 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106966:	d81a      	bhi.n	810699e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106968:	2b00      	cmp	r3, #0
 810696a:	d022      	beq.n	81069b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810696c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106970:	d115      	bne.n	810699e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106976:	3308      	adds	r3, #8
 8106978:	2101      	movs	r1, #1
 810697a:	4618      	mov	r0, r3
 810697c:	f002 f8b8 	bl	8108af0 <RCCEx_PLL2_Config>
 8106980:	4603      	mov	r3, r0
 8106982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106986:	e015      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810698c:	3328      	adds	r3, #40	@ 0x28
 810698e:	2101      	movs	r1, #1
 8106990:	4618      	mov	r0, r3
 8106992:	f002 f95f 	bl	8108c54 <RCCEx_PLL3_Config>
 8106996:	4603      	mov	r3, r0
 8106998:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810699c:	e00a      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810699e:	2301      	movs	r3, #1
 81069a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81069a4:	e006      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81069a6:	bf00      	nop
 81069a8:	e004      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81069aa:	bf00      	nop
 81069ac:	e002      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81069ae:	bf00      	nop
 81069b0:	e000      	b.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81069b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069b8:	2b00      	cmp	r3, #0
 81069ba:	d10b      	bne.n	81069d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81069bc:	4bb7      	ldr	r3, [pc, #732]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81069c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81069c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81069cc:	4ab3      	ldr	r2, [pc, #716]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81069ce:	430b      	orrs	r3, r1
 81069d0:	6593      	str	r3, [r2, #88]	@ 0x58
 81069d2:	e003      	b.n	81069dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81069dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069e4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81069e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81069ec:	2300      	movs	r3, #0
 81069ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81069f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81069f6:	460b      	mov	r3, r1
 81069f8:	4313      	orrs	r3, r2
 81069fa:	d02a      	beq.n	8106a52 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81069fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a02:	2b00      	cmp	r3, #0
 8106a04:	d011      	beq.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8106a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a0a:	d10a      	bne.n	8106a22 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a10:	3308      	adds	r3, #8
 8106a12:	2101      	movs	r1, #1
 8106a14:	4618      	mov	r0, r3
 8106a16:	f002 f86b 	bl	8108af0 <RCCEx_PLL2_Config>
 8106a1a:	4603      	mov	r3, r0
 8106a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8106a20:	e004      	b.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a22:	2301      	movs	r3, #1
 8106a24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a28:	e000      	b.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8106a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a30:	2b00      	cmp	r3, #0
 8106a32:	d10a      	bne.n	8106a4a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8106a34:	4b99      	ldr	r3, [pc, #612]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a42:	4a96      	ldr	r2, [pc, #600]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a44:	430b      	orrs	r3, r1
 8106a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106a48:	e003      	b.n	8106a52 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a5a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106a62:	2300      	movs	r3, #0
 8106a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106a68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106a6c:	460b      	mov	r3, r1
 8106a6e:	4313      	orrs	r3, r2
 8106a70:	d037      	beq.n	8106ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106a7c:	d00e      	beq.n	8106a9c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8106a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106a82:	d816      	bhi.n	8106ab2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8106a84:	2b00      	cmp	r3, #0
 8106a86:	d018      	beq.n	8106aba <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8106a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106a8c:	d111      	bne.n	8106ab2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a8e:	4b83      	ldr	r3, [pc, #524]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a92:	4a82      	ldr	r2, [pc, #520]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106a9a:	e00f      	b.n	8106abc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106aa0:	3308      	adds	r3, #8
 8106aa2:	2101      	movs	r1, #1
 8106aa4:	4618      	mov	r0, r3
 8106aa6:	f002 f823 	bl	8108af0 <RCCEx_PLL2_Config>
 8106aaa:	4603      	mov	r3, r0
 8106aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106ab0:	e004      	b.n	8106abc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ab2:	2301      	movs	r3, #1
 8106ab4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106ab8:	e000      	b.n	8106abc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8106aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106abc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	d10a      	bne.n	8106ada <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106ac4:	4b75      	ldr	r3, [pc, #468]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ac8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106ad2:	4a72      	ldr	r2, [pc, #456]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106ad4:	430b      	orrs	r3, r1
 8106ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8106ad8:	e003      	b.n	8106ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ade:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106aea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106aee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106af2:	2300      	movs	r3, #0
 8106af4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106af8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106afc:	460b      	mov	r3, r1
 8106afe:	4313      	orrs	r3, r2
 8106b00:	d03a      	beq.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106b08:	2b03      	cmp	r3, #3
 8106b0a:	d81d      	bhi.n	8106b48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8106b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8106b14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8106b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b12:	bf00      	nop
 8106b14:	08106b51 	.word	0x08106b51
 8106b18:	08106b25 	.word	0x08106b25
 8106b1c:	08106b33 	.word	0x08106b33
 8106b20:	08106b51 	.word	0x08106b51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b24:	4b5d      	ldr	r3, [pc, #372]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b28:	4a5c      	ldr	r2, [pc, #368]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106b30:	e00f      	b.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b36:	3308      	adds	r3, #8
 8106b38:	2102      	movs	r1, #2
 8106b3a:	4618      	mov	r0, r3
 8106b3c:	f001 ffd8 	bl	8108af0 <RCCEx_PLL2_Config>
 8106b40:	4603      	mov	r3, r0
 8106b42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106b46:	e004      	b.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106b48:	2301      	movs	r3, #1
 8106b4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106b4e:	e000      	b.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8106b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b56:	2b00      	cmp	r3, #0
 8106b58:	d10a      	bne.n	8106b70 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106b5a:	4b50      	ldr	r3, [pc, #320]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106b5e:	f023 0103 	bic.w	r1, r3, #3
 8106b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106b68:	4a4c      	ldr	r2, [pc, #304]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106b6a:	430b      	orrs	r3, r1
 8106b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106b6e:	e003      	b.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106b88:	2300      	movs	r3, #0
 8106b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106b8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106b92:	460b      	mov	r3, r1
 8106b94:	4313      	orrs	r3, r2
 8106b96:	f000 80a0 	beq.w	8106cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106b9a:	4b41      	ldr	r3, [pc, #260]	@ (8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	4a40      	ldr	r2, [pc, #256]	@ (8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106ba6:	f7fb fff3 	bl	8102b90 <HAL_GetTick>
 8106baa:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106bae:	e00b      	b.n	8106bc8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106bb0:	f7fb ffee 	bl	8102b90 <HAL_GetTick>
 8106bb4:	4602      	mov	r2, r0
 8106bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106bba:	1ad3      	subs	r3, r2, r3
 8106bbc:	2b64      	cmp	r3, #100	@ 0x64
 8106bbe:	d903      	bls.n	8106bc8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8106bc0:	2303      	movs	r3, #3
 8106bc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106bc6:	e005      	b.n	8106bd4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106bc8:	4b35      	ldr	r3, [pc, #212]	@ (8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106bd0:	2b00      	cmp	r3, #0
 8106bd2:	d0ed      	beq.n	8106bb0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8106bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106bd8:	2b00      	cmp	r3, #0
 8106bda:	d17a      	bne.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106be8:	4053      	eors	r3, r2
 8106bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106bee:	2b00      	cmp	r3, #0
 8106bf0:	d015      	beq.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106bfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106bfe:	4b27      	ldr	r3, [pc, #156]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c02:	4a26      	ldr	r2, [pc, #152]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106c08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106c0a:	4b24      	ldr	r3, [pc, #144]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c0e:	4a23      	ldr	r2, [pc, #140]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106c14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106c16:	4a21      	ldr	r2, [pc, #132]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8106c1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106c2a:	d118      	bne.n	8106c5e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106c2c:	f7fb ffb0 	bl	8102b90 <HAL_GetTick>
 8106c30:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106c34:	e00d      	b.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106c36:	f7fb ffab 	bl	8102b90 <HAL_GetTick>
 8106c3a:	4602      	mov	r2, r0
 8106c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8106c40:	1ad2      	subs	r2, r2, r3
 8106c42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106c46:	429a      	cmp	r2, r3
 8106c48:	d903      	bls.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8106c4a:	2303      	movs	r3, #3
 8106c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8106c50:	e005      	b.n	8106c5e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106c52:	4b12      	ldr	r3, [pc, #72]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c56:	f003 0302 	and.w	r3, r3, #2
 8106c5a:	2b00      	cmp	r3, #0
 8106c5c:	d0eb      	beq.n	8106c36 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8106c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106c62:	2b00      	cmp	r3, #0
 8106c64:	d130      	bne.n	8106cc8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106c76:	d115      	bne.n	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8106c78:	4b08      	ldr	r3, [pc, #32]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c7a:	691b      	ldr	r3, [r3, #16]
 8106c7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106c88:	091b      	lsrs	r3, r3, #4
 8106c8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106c8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106c92:	4a02      	ldr	r2, [pc, #8]	@ (8106c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106c94:	430b      	orrs	r3, r1
 8106c96:	6113      	str	r3, [r2, #16]
 8106c98:	e00a      	b.n	8106cb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8106c9a:	bf00      	nop
 8106c9c:	58024400 	.word	0x58024400
 8106ca0:	58024800 	.word	0x58024800
 8106ca4:	4bd4      	ldr	r3, [pc, #848]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106ca6:	691b      	ldr	r3, [r3, #16]
 8106ca8:	4ad3      	ldr	r2, [pc, #844]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106caa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106cae:	6113      	str	r3, [r2, #16]
 8106cb0:	4bd1      	ldr	r3, [pc, #836]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106cb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106cc0:	4acd      	ldr	r2, [pc, #820]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106cc2:	430b      	orrs	r3, r1
 8106cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8106cc6:	e008      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106cc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ccc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8106cd0:	e003      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cd6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ce2:	f002 0301 	and.w	r3, r2, #1
 8106ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106cea:	2300      	movs	r3, #0
 8106cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106cf4:	460b      	mov	r3, r1
 8106cf6:	4313      	orrs	r3, r2
 8106cf8:	f000 808b 	beq.w	8106e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106d04:	2b28      	cmp	r3, #40	@ 0x28
 8106d06:	d86b      	bhi.n	8106de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8106d08:	a201      	add	r2, pc, #4	@ (adr r2, 8106d10 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8106d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d0e:	bf00      	nop
 8106d10:	08106de9 	.word	0x08106de9
 8106d14:	08106de1 	.word	0x08106de1
 8106d18:	08106de1 	.word	0x08106de1
 8106d1c:	08106de1 	.word	0x08106de1
 8106d20:	08106de1 	.word	0x08106de1
 8106d24:	08106de1 	.word	0x08106de1
 8106d28:	08106de1 	.word	0x08106de1
 8106d2c:	08106de1 	.word	0x08106de1
 8106d30:	08106db5 	.word	0x08106db5
 8106d34:	08106de1 	.word	0x08106de1
 8106d38:	08106de1 	.word	0x08106de1
 8106d3c:	08106de1 	.word	0x08106de1
 8106d40:	08106de1 	.word	0x08106de1
 8106d44:	08106de1 	.word	0x08106de1
 8106d48:	08106de1 	.word	0x08106de1
 8106d4c:	08106de1 	.word	0x08106de1
 8106d50:	08106dcb 	.word	0x08106dcb
 8106d54:	08106de1 	.word	0x08106de1
 8106d58:	08106de1 	.word	0x08106de1
 8106d5c:	08106de1 	.word	0x08106de1
 8106d60:	08106de1 	.word	0x08106de1
 8106d64:	08106de1 	.word	0x08106de1
 8106d68:	08106de1 	.word	0x08106de1
 8106d6c:	08106de1 	.word	0x08106de1
 8106d70:	08106de9 	.word	0x08106de9
 8106d74:	08106de1 	.word	0x08106de1
 8106d78:	08106de1 	.word	0x08106de1
 8106d7c:	08106de1 	.word	0x08106de1
 8106d80:	08106de1 	.word	0x08106de1
 8106d84:	08106de1 	.word	0x08106de1
 8106d88:	08106de1 	.word	0x08106de1
 8106d8c:	08106de1 	.word	0x08106de1
 8106d90:	08106de9 	.word	0x08106de9
 8106d94:	08106de1 	.word	0x08106de1
 8106d98:	08106de1 	.word	0x08106de1
 8106d9c:	08106de1 	.word	0x08106de1
 8106da0:	08106de1 	.word	0x08106de1
 8106da4:	08106de1 	.word	0x08106de1
 8106da8:	08106de1 	.word	0x08106de1
 8106dac:	08106de1 	.word	0x08106de1
 8106db0:	08106de9 	.word	0x08106de9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106db8:	3308      	adds	r3, #8
 8106dba:	2101      	movs	r1, #1
 8106dbc:	4618      	mov	r0, r3
 8106dbe:	f001 fe97 	bl	8108af0 <RCCEx_PLL2_Config>
 8106dc2:	4603      	mov	r3, r0
 8106dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106dc8:	e00f      	b.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dce:	3328      	adds	r3, #40	@ 0x28
 8106dd0:	2101      	movs	r1, #1
 8106dd2:	4618      	mov	r0, r3
 8106dd4:	f001 ff3e 	bl	8108c54 <RCCEx_PLL3_Config>
 8106dd8:	4603      	mov	r3, r0
 8106dda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106dde:	e004      	b.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106de0:	2301      	movs	r3, #1
 8106de2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106de6:	e000      	b.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8106de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106dee:	2b00      	cmp	r3, #0
 8106df0:	d10b      	bne.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106df2:	4b81      	ldr	r3, [pc, #516]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106df6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106e02:	4a7d      	ldr	r2, [pc, #500]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106e04:	430b      	orrs	r3, r1
 8106e06:	6553      	str	r3, [r2, #84]	@ 0x54
 8106e08:	e003      	b.n	8106e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e1a:	f002 0302 	and.w	r3, r2, #2
 8106e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106e22:	2300      	movs	r3, #0
 8106e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106e28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106e2c:	460b      	mov	r3, r1
 8106e2e:	4313      	orrs	r3, r2
 8106e30:	d042      	beq.n	8106eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106e38:	2b05      	cmp	r3, #5
 8106e3a:	d825      	bhi.n	8106e88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8106e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8106e44 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8106e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e42:	bf00      	nop
 8106e44:	08106e91 	.word	0x08106e91
 8106e48:	08106e5d 	.word	0x08106e5d
 8106e4c:	08106e73 	.word	0x08106e73
 8106e50:	08106e91 	.word	0x08106e91
 8106e54:	08106e91 	.word	0x08106e91
 8106e58:	08106e91 	.word	0x08106e91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e60:	3308      	adds	r3, #8
 8106e62:	2101      	movs	r1, #1
 8106e64:	4618      	mov	r0, r3
 8106e66:	f001 fe43 	bl	8108af0 <RCCEx_PLL2_Config>
 8106e6a:	4603      	mov	r3, r0
 8106e6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106e70:	e00f      	b.n	8106e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e76:	3328      	adds	r3, #40	@ 0x28
 8106e78:	2101      	movs	r1, #1
 8106e7a:	4618      	mov	r0, r3
 8106e7c:	f001 feea 	bl	8108c54 <RCCEx_PLL3_Config>
 8106e80:	4603      	mov	r3, r0
 8106e82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106e86:	e004      	b.n	8106e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e88:	2301      	movs	r3, #1
 8106e8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106e8e:	e000      	b.n	8106e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8106e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d10a      	bne.n	8106eb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106e9a:	4b57      	ldr	r3, [pc, #348]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106e9e:	f023 0107 	bic.w	r1, r3, #7
 8106ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106ea8:	4a53      	ldr	r2, [pc, #332]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106eaa:	430b      	orrs	r3, r1
 8106eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8106eae:	e003      	b.n	8106eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106eb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106eb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ec0:	f002 0304 	and.w	r3, r2, #4
 8106ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106ec8:	2300      	movs	r3, #0
 8106eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106ece:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106ed2:	460b      	mov	r3, r1
 8106ed4:	4313      	orrs	r3, r2
 8106ed6:	d044      	beq.n	8106f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106ee0:	2b05      	cmp	r3, #5
 8106ee2:	d825      	bhi.n	8106f30 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8106eec <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8106ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eea:	bf00      	nop
 8106eec:	08106f39 	.word	0x08106f39
 8106ef0:	08106f05 	.word	0x08106f05
 8106ef4:	08106f1b 	.word	0x08106f1b
 8106ef8:	08106f39 	.word	0x08106f39
 8106efc:	08106f39 	.word	0x08106f39
 8106f00:	08106f39 	.word	0x08106f39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f08:	3308      	adds	r3, #8
 8106f0a:	2101      	movs	r1, #1
 8106f0c:	4618      	mov	r0, r3
 8106f0e:	f001 fdef 	bl	8108af0 <RCCEx_PLL2_Config>
 8106f12:	4603      	mov	r3, r0
 8106f14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106f18:	e00f      	b.n	8106f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f1e:	3328      	adds	r3, #40	@ 0x28
 8106f20:	2101      	movs	r1, #1
 8106f22:	4618      	mov	r0, r3
 8106f24:	f001 fe96 	bl	8108c54 <RCCEx_PLL3_Config>
 8106f28:	4603      	mov	r3, r0
 8106f2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106f2e:	e004      	b.n	8106f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f30:	2301      	movs	r3, #1
 8106f32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106f36:	e000      	b.n	8106f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8106f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d10b      	bne.n	8106f5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106f42:	4b2d      	ldr	r3, [pc, #180]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106f46:	f023 0107 	bic.w	r1, r3, #7
 8106f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106f52:	4a29      	ldr	r2, [pc, #164]	@ (8106ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106f54:	430b      	orrs	r3, r1
 8106f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8106f58:	e003      	b.n	8106f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f6a:	f002 0320 	and.w	r3, r2, #32
 8106f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8106f72:	2300      	movs	r3, #0
 8106f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106f7c:	460b      	mov	r3, r1
 8106f7e:	4313      	orrs	r3, r2
 8106f80:	d057      	beq.n	8107032 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106f8e:	d035      	beq.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8106f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106f94:	d82c      	bhi.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106f9a:	d031      	beq.n	8107000 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8106f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106fa0:	d826      	bhi.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106fa6:	d02d      	beq.n	8107004 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8106fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106fac:	d820      	bhi.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106fb2:	d012      	beq.n	8106fda <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8106fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106fb8:	d81a      	bhi.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d024      	beq.n	8107008 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8106fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106fc2:	d115      	bne.n	8106ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fc8:	3308      	adds	r3, #8
 8106fca:	2100      	movs	r1, #0
 8106fcc:	4618      	mov	r0, r3
 8106fce:	f001 fd8f 	bl	8108af0 <RCCEx_PLL2_Config>
 8106fd2:	4603      	mov	r3, r0
 8106fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106fd8:	e017      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fde:	3328      	adds	r3, #40	@ 0x28
 8106fe0:	2102      	movs	r1, #2
 8106fe2:	4618      	mov	r0, r3
 8106fe4:	f001 fe36 	bl	8108c54 <RCCEx_PLL3_Config>
 8106fe8:	4603      	mov	r3, r0
 8106fea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106fee:	e00c      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ff0:	2301      	movs	r3, #1
 8106ff2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106ff6:	e008      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8106ff8:	58024400 	.word	0x58024400
        break;
 8106ffc:	bf00      	nop
 8106ffe:	e004      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107000:	bf00      	nop
 8107002:	e002      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107004:	bf00      	nop
 8107006:	e000      	b.n	810700a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107008:	bf00      	nop
    }

    if (ret == HAL_OK)
 810700a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810700e:	2b00      	cmp	r3, #0
 8107010:	d10b      	bne.n	810702a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107012:	4bc2      	ldr	r3, [pc, #776]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810701a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810701e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107022:	4abe      	ldr	r2, [pc, #760]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107024:	430b      	orrs	r3, r1
 8107026:	6553      	str	r3, [r2, #84]	@ 0x54
 8107028:	e003      	b.n	8107032 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810702a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810702e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107036:	e9d3 2300 	ldrd	r2, r3, [r3]
 810703a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810703e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107042:	2300      	movs	r3, #0
 8107044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107048:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810704c:	460b      	mov	r3, r1
 810704e:	4313      	orrs	r3, r2
 8107050:	d055      	beq.n	81070fe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810705a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810705e:	d033      	beq.n	81070c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8107060:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107064:	d82c      	bhi.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810706a:	d02f      	beq.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810706c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107070:	d826      	bhi.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107076:	d02b      	beq.n	81070d0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8107078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810707c:	d820      	bhi.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810707e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107082:	d012      	beq.n	81070aa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8107084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107088:	d81a      	bhi.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810708a:	2b00      	cmp	r3, #0
 810708c:	d022      	beq.n	81070d4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810708e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107092:	d115      	bne.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107098:	3308      	adds	r3, #8
 810709a:	2100      	movs	r1, #0
 810709c:	4618      	mov	r0, r3
 810709e:	f001 fd27 	bl	8108af0 <RCCEx_PLL2_Config>
 81070a2:	4603      	mov	r3, r0
 81070a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81070a8:	e015      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81070aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070ae:	3328      	adds	r3, #40	@ 0x28
 81070b0:	2102      	movs	r1, #2
 81070b2:	4618      	mov	r0, r3
 81070b4:	f001 fdce 	bl	8108c54 <RCCEx_PLL3_Config>
 81070b8:	4603      	mov	r3, r0
 81070ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81070be:	e00a      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070c0:	2301      	movs	r3, #1
 81070c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81070c6:	e006      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81070c8:	bf00      	nop
 81070ca:	e004      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81070cc:	bf00      	nop
 81070ce:	e002      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81070d0:	bf00      	nop
 81070d2:	e000      	b.n	81070d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81070d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81070da:	2b00      	cmp	r3, #0
 81070dc:	d10b      	bne.n	81070f6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81070de:	4b8f      	ldr	r3, [pc, #572]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81070e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81070ee:	4a8b      	ldr	r2, [pc, #556]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81070f0:	430b      	orrs	r3, r1
 81070f2:	6593      	str	r3, [r2, #88]	@ 0x58
 81070f4:	e003      	b.n	81070fe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81070fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81070fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107106:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810710a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810710e:	2300      	movs	r3, #0
 8107110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8107114:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107118:	460b      	mov	r3, r1
 810711a:	4313      	orrs	r3, r2
 810711c:	d055      	beq.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810711e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107126:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810712a:	d033      	beq.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810712c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107130:	d82c      	bhi.n	810718c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107136:	d02f      	beq.n	8107198 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8107138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810713c:	d826      	bhi.n	810718c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810713e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107142:	d02b      	beq.n	810719c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8107144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107148:	d820      	bhi.n	810718c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810714a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810714e:	d012      	beq.n	8107176 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8107150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107154:	d81a      	bhi.n	810718c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107156:	2b00      	cmp	r3, #0
 8107158:	d022      	beq.n	81071a0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810715a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810715e:	d115      	bne.n	810718c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107164:	3308      	adds	r3, #8
 8107166:	2100      	movs	r1, #0
 8107168:	4618      	mov	r0, r3
 810716a:	f001 fcc1 	bl	8108af0 <RCCEx_PLL2_Config>
 810716e:	4603      	mov	r3, r0
 8107170:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107174:	e015      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810717a:	3328      	adds	r3, #40	@ 0x28
 810717c:	2102      	movs	r1, #2
 810717e:	4618      	mov	r0, r3
 8107180:	f001 fd68 	bl	8108c54 <RCCEx_PLL3_Config>
 8107184:	4603      	mov	r3, r0
 8107186:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810718a:	e00a      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810718c:	2301      	movs	r3, #1
 810718e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107192:	e006      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107194:	bf00      	nop
 8107196:	e004      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107198:	bf00      	nop
 810719a:	e002      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810719c:	bf00      	nop
 810719e:	e000      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81071a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81071a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071a6:	2b00      	cmp	r3, #0
 81071a8:	d10b      	bne.n	81071c2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81071aa:	4b5c      	ldr	r3, [pc, #368]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071ae:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81071b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81071ba:	4a58      	ldr	r2, [pc, #352]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81071bc:	430b      	orrs	r3, r1
 81071be:	6593      	str	r3, [r2, #88]	@ 0x58
 81071c0:	e003      	b.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81071ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071d2:	f002 0308 	and.w	r3, r2, #8
 81071d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81071da:	2300      	movs	r3, #0
 81071dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81071e0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81071e4:	460b      	mov	r3, r1
 81071e6:	4313      	orrs	r3, r2
 81071e8:	d01e      	beq.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81071ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81071f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81071f6:	d10c      	bne.n	8107212 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81071f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071fc:	3328      	adds	r3, #40	@ 0x28
 81071fe:	2102      	movs	r1, #2
 8107200:	4618      	mov	r0, r3
 8107202:	f001 fd27 	bl	8108c54 <RCCEx_PLL3_Config>
 8107206:	4603      	mov	r3, r0
 8107208:	2b00      	cmp	r3, #0
 810720a:	d002      	beq.n	8107212 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810720c:	2301      	movs	r3, #1
 810720e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107212:	4b42      	ldr	r3, [pc, #264]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810721a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107222:	4a3e      	ldr	r2, [pc, #248]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107224:	430b      	orrs	r3, r1
 8107226:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107230:	f002 0310 	and.w	r3, r2, #16
 8107234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107238:	2300      	movs	r3, #0
 810723a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810723e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107242:	460b      	mov	r3, r1
 8107244:	4313      	orrs	r3, r2
 8107246:	d01e      	beq.n	8107286 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810724c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107254:	d10c      	bne.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810725a:	3328      	adds	r3, #40	@ 0x28
 810725c:	2102      	movs	r1, #2
 810725e:	4618      	mov	r0, r3
 8107260:	f001 fcf8 	bl	8108c54 <RCCEx_PLL3_Config>
 8107264:	4603      	mov	r3, r0
 8107266:	2b00      	cmp	r3, #0
 8107268:	d002      	beq.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810726a:	2301      	movs	r3, #1
 810726c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107270:	4b2a      	ldr	r3, [pc, #168]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107274:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810727c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107280:	4a26      	ldr	r2, [pc, #152]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107282:	430b      	orrs	r3, r1
 8107284:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810728e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107296:	2300      	movs	r3, #0
 8107298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810729c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81072a0:	460b      	mov	r3, r1
 81072a2:	4313      	orrs	r3, r2
 81072a4:	d040      	beq.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81072a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81072ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072b2:	d022      	beq.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 81072b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072b8:	d81b      	bhi.n	81072f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81072ba:	2b00      	cmp	r3, #0
 81072bc:	d003      	beq.n	81072c6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81072be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81072c2:	d00b      	beq.n	81072dc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81072c4:	e015      	b.n	81072f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81072c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072ca:	3308      	adds	r3, #8
 81072cc:	2100      	movs	r1, #0
 81072ce:	4618      	mov	r0, r3
 81072d0:	f001 fc0e 	bl	8108af0 <RCCEx_PLL2_Config>
 81072d4:	4603      	mov	r3, r0
 81072d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81072da:	e00f      	b.n	81072fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81072dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072e0:	3328      	adds	r3, #40	@ 0x28
 81072e2:	2102      	movs	r1, #2
 81072e4:	4618      	mov	r0, r3
 81072e6:	f001 fcb5 	bl	8108c54 <RCCEx_PLL3_Config>
 81072ea:	4603      	mov	r3, r0
 81072ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81072f0:	e004      	b.n	81072fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072f2:	2301      	movs	r3, #1
 81072f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81072f8:	e000      	b.n	81072fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81072fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107300:	2b00      	cmp	r3, #0
 8107302:	d10d      	bne.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107304:	4b05      	ldr	r3, [pc, #20]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107308:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810730c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107314:	4a01      	ldr	r2, [pc, #4]	@ (810731c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107316:	430b      	orrs	r3, r1
 8107318:	6593      	str	r3, [r2, #88]	@ 0x58
 810731a:	e005      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810731c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107320:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107324:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107330:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107336:	2300      	movs	r3, #0
 8107338:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810733a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810733e:	460b      	mov	r3, r1
 8107340:	4313      	orrs	r3, r2
 8107342:	d03b      	beq.n	81073bc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810734c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107350:	d01f      	beq.n	8107392 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8107352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107356:	d818      	bhi.n	810738a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8107358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810735c:	d003      	beq.n	8107366 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810735e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107362:	d007      	beq.n	8107374 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8107364:	e011      	b.n	810738a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107366:	4b64      	ldr	r3, [pc, #400]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810736a:	4a63      	ldr	r2, [pc, #396]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810736c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107372:	e00f      	b.n	8107394 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107378:	3328      	adds	r3, #40	@ 0x28
 810737a:	2101      	movs	r1, #1
 810737c:	4618      	mov	r0, r3
 810737e:	f001 fc69 	bl	8108c54 <RCCEx_PLL3_Config>
 8107382:	4603      	mov	r3, r0
 8107384:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8107388:	e004      	b.n	8107394 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810738a:	2301      	movs	r3, #1
 810738c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107390:	e000      	b.n	8107394 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8107392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107394:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107398:	2b00      	cmp	r3, #0
 810739a:	d10b      	bne.n	81073b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810739c:	4b56      	ldr	r3, [pc, #344]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810739e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81073a0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81073a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81073ac:	4a52      	ldr	r2, [pc, #328]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073ae:	430b      	orrs	r3, r1
 81073b0:	6553      	str	r3, [r2, #84]	@ 0x54
 81073b2:	e003      	b.n	81073bc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81073bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073c4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81073c8:	673b      	str	r3, [r7, #112]	@ 0x70
 81073ca:	2300      	movs	r3, #0
 81073cc:	677b      	str	r3, [r7, #116]	@ 0x74
 81073ce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81073d2:	460b      	mov	r3, r1
 81073d4:	4313      	orrs	r3, r2
 81073d6:	d031      	beq.n	810743c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81073d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81073de:	2b00      	cmp	r3, #0
 81073e0:	d003      	beq.n	81073ea <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81073e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81073e6:	d007      	beq.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81073e8:	e011      	b.n	810740e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81073ea:	4b43      	ldr	r3, [pc, #268]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81073ee:	4a42      	ldr	r2, [pc, #264]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81073f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81073f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81073f6:	e00e      	b.n	8107416 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81073f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073fc:	3308      	adds	r3, #8
 81073fe:	2102      	movs	r1, #2
 8107400:	4618      	mov	r0, r3
 8107402:	f001 fb75 	bl	8108af0 <RCCEx_PLL2_Config>
 8107406:	4603      	mov	r3, r0
 8107408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810740c:	e003      	b.n	8107416 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810740e:	2301      	movs	r3, #1
 8107410:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810741a:	2b00      	cmp	r3, #0
 810741c:	d10a      	bne.n	8107434 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810741e:	4b36      	ldr	r3, [pc, #216]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810742a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810742c:	4a32      	ldr	r2, [pc, #200]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810742e:	430b      	orrs	r3, r1
 8107430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107432:	e003      	b.n	810743c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107434:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107438:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810743c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107448:	66bb      	str	r3, [r7, #104]	@ 0x68
 810744a:	2300      	movs	r3, #0
 810744c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810744e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8107452:	460b      	mov	r3, r1
 8107454:	4313      	orrs	r3, r2
 8107456:	d00c      	beq.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810745c:	3328      	adds	r3, #40	@ 0x28
 810745e:	2102      	movs	r1, #2
 8107460:	4618      	mov	r0, r3
 8107462:	f001 fbf7 	bl	8108c54 <RCCEx_PLL3_Config>
 8107466:	4603      	mov	r3, r0
 8107468:	2b00      	cmp	r3, #0
 810746a:	d002      	beq.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810746c:	2301      	movs	r3, #1
 810746e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810747a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810747e:	663b      	str	r3, [r7, #96]	@ 0x60
 8107480:	2300      	movs	r3, #0
 8107482:	667b      	str	r3, [r7, #100]	@ 0x64
 8107484:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107488:	460b      	mov	r3, r1
 810748a:	4313      	orrs	r3, r2
 810748c:	d03a      	beq.n	8107504 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810748e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810749a:	d018      	beq.n	81074ce <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810749c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81074a0:	d811      	bhi.n	81074c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81074a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81074a6:	d014      	beq.n	81074d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81074a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81074ac:	d80b      	bhi.n	81074c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81074ae:	2b00      	cmp	r3, #0
 81074b0:	d011      	beq.n	81074d6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81074b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81074b6:	d106      	bne.n	81074c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81074b8:	4b0f      	ldr	r3, [pc, #60]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81074bc:	4a0e      	ldr	r2, [pc, #56]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81074be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81074c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81074c4:	e008      	b.n	81074d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81074c6:	2301      	movs	r3, #1
 81074c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81074cc:	e004      	b.n	81074d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81074ce:	bf00      	nop
 81074d0:	e002      	b.n	81074d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81074d2:	bf00      	nop
 81074d4:	e000      	b.n	81074d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81074dc:	2b00      	cmp	r3, #0
 81074de:	d10d      	bne.n	81074fc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81074e0:	4b05      	ldr	r3, [pc, #20]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81074e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81074e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81074f0:	4a01      	ldr	r2, [pc, #4]	@ (81074f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81074f2:	430b      	orrs	r3, r1
 81074f4:	6553      	str	r3, [r2, #84]	@ 0x54
 81074f6:	e005      	b.n	8107504 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81074f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107500:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107508:	e9d3 2300 	ldrd	r2, r3, [r3]
 810750c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107512:	2300      	movs	r3, #0
 8107514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8107516:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810751a:	460b      	mov	r3, r1
 810751c:	4313      	orrs	r3, r2
 810751e:	d009      	beq.n	8107534 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107520:	4baa      	ldr	r3, [pc, #680]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107524:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810752e:	4aa7      	ldr	r2, [pc, #668]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107530:	430b      	orrs	r3, r1
 8107532:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107538:	e9d3 2300 	ldrd	r2, r3, [r3]
 810753c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107540:	653b      	str	r3, [r7, #80]	@ 0x50
 8107542:	2300      	movs	r3, #0
 8107544:	657b      	str	r3, [r7, #84]	@ 0x54
 8107546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810754a:	460b      	mov	r3, r1
 810754c:	4313      	orrs	r3, r2
 810754e:	d00a      	beq.n	8107566 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107550:	4b9e      	ldr	r3, [pc, #632]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107552:	691b      	ldr	r3, [r3, #16]
 8107554:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8107558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810755c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8107560:	4a9a      	ldr	r2, [pc, #616]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107562:	430b      	orrs	r3, r1
 8107564:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810756e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107574:	2300      	movs	r3, #0
 8107576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107578:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810757c:	460b      	mov	r3, r1
 810757e:	4313      	orrs	r3, r2
 8107580:	d009      	beq.n	8107596 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107582:	4b92      	ldr	r3, [pc, #584]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107586:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810758a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810758e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107590:	4a8e      	ldr	r2, [pc, #568]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107592:	430b      	orrs	r3, r1
 8107594:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810759e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81075a2:	643b      	str	r3, [r7, #64]	@ 0x40
 81075a4:	2300      	movs	r3, #0
 81075a6:	647b      	str	r3, [r7, #68]	@ 0x44
 81075a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81075ac:	460b      	mov	r3, r1
 81075ae:	4313      	orrs	r3, r2
 81075b0:	d00e      	beq.n	81075d0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81075b2:	4b86      	ldr	r3, [pc, #536]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075b4:	691b      	ldr	r3, [r3, #16]
 81075b6:	4a85      	ldr	r2, [pc, #532]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81075bc:	6113      	str	r3, [r2, #16]
 81075be:	4b83      	ldr	r3, [pc, #524]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075c0:	6919      	ldr	r1, [r3, #16]
 81075c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81075ca:	4a80      	ldr	r2, [pc, #512]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075cc:	430b      	orrs	r3, r1
 81075ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81075d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81075dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 81075de:	2300      	movs	r3, #0
 81075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81075e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81075e6:	460b      	mov	r3, r1
 81075e8:	4313      	orrs	r3, r2
 81075ea:	d009      	beq.n	8107600 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81075ec:	4b77      	ldr	r3, [pc, #476]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81075f0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81075f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81075fa:	4a74      	ldr	r2, [pc, #464]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81075fc:	430b      	orrs	r3, r1
 81075fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107608:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810760c:	633b      	str	r3, [r7, #48]	@ 0x30
 810760e:	2300      	movs	r3, #0
 8107610:	637b      	str	r3, [r7, #52]	@ 0x34
 8107612:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8107616:	460b      	mov	r3, r1
 8107618:	4313      	orrs	r3, r2
 810761a:	d00a      	beq.n	8107632 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810761c:	4b6b      	ldr	r3, [pc, #428]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810761e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107620:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8107624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810762c:	4a67      	ldr	r2, [pc, #412]	@ (81077cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810762e:	430b      	orrs	r3, r1
 8107630:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810763a:	2100      	movs	r1, #0
 810763c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810763e:	f003 0301 	and.w	r3, r3, #1
 8107642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107644:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8107648:	460b      	mov	r3, r1
 810764a:	4313      	orrs	r3, r2
 810764c:	d011      	beq.n	8107672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810764e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107652:	3308      	adds	r3, #8
 8107654:	2100      	movs	r1, #0
 8107656:	4618      	mov	r0, r3
 8107658:	f001 fa4a 	bl	8108af0 <RCCEx_PLL2_Config>
 810765c:	4603      	mov	r3, r0
 810765e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107662:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107666:	2b00      	cmp	r3, #0
 8107668:	d003      	beq.n	8107672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810766a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810766e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107676:	e9d3 2300 	ldrd	r2, r3, [r3]
 810767a:	2100      	movs	r1, #0
 810767c:	6239      	str	r1, [r7, #32]
 810767e:	f003 0302 	and.w	r3, r3, #2
 8107682:	627b      	str	r3, [r7, #36]	@ 0x24
 8107684:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107688:	460b      	mov	r3, r1
 810768a:	4313      	orrs	r3, r2
 810768c:	d011      	beq.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810768e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107692:	3308      	adds	r3, #8
 8107694:	2101      	movs	r1, #1
 8107696:	4618      	mov	r0, r3
 8107698:	f001 fa2a 	bl	8108af0 <RCCEx_PLL2_Config>
 810769c:	4603      	mov	r3, r0
 810769e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81076a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	d003      	beq.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81076ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81076b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076ba:	2100      	movs	r1, #0
 81076bc:	61b9      	str	r1, [r7, #24]
 81076be:	f003 0304 	and.w	r3, r3, #4
 81076c2:	61fb      	str	r3, [r7, #28]
 81076c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81076c8:	460b      	mov	r3, r1
 81076ca:	4313      	orrs	r3, r2
 81076cc:	d011      	beq.n	81076f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81076ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076d2:	3308      	adds	r3, #8
 81076d4:	2102      	movs	r1, #2
 81076d6:	4618      	mov	r0, r3
 81076d8:	f001 fa0a 	bl	8108af0 <RCCEx_PLL2_Config>
 81076dc:	4603      	mov	r3, r0
 81076de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81076e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81076e6:	2b00      	cmp	r3, #0
 81076e8:	d003      	beq.n	81076f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81076ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81076f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076fa:	2100      	movs	r1, #0
 81076fc:	6139      	str	r1, [r7, #16]
 81076fe:	f003 0308 	and.w	r3, r3, #8
 8107702:	617b      	str	r3, [r7, #20]
 8107704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8107708:	460b      	mov	r3, r1
 810770a:	4313      	orrs	r3, r2
 810770c:	d011      	beq.n	8107732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810770e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107712:	3328      	adds	r3, #40	@ 0x28
 8107714:	2100      	movs	r1, #0
 8107716:	4618      	mov	r0, r3
 8107718:	f001 fa9c 	bl	8108c54 <RCCEx_PLL3_Config>
 810771c:	4603      	mov	r3, r0
 810771e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8107722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107726:	2b00      	cmp	r3, #0
 8107728:	d003      	beq.n	8107732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810772a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810772e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810773a:	2100      	movs	r1, #0
 810773c:	60b9      	str	r1, [r7, #8]
 810773e:	f003 0310 	and.w	r3, r3, #16
 8107742:	60fb      	str	r3, [r7, #12]
 8107744:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107748:	460b      	mov	r3, r1
 810774a:	4313      	orrs	r3, r2
 810774c:	d011      	beq.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810774e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107752:	3328      	adds	r3, #40	@ 0x28
 8107754:	2101      	movs	r1, #1
 8107756:	4618      	mov	r0, r3
 8107758:	f001 fa7c 	bl	8108c54 <RCCEx_PLL3_Config>
 810775c:	4603      	mov	r3, r0
 810775e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107762:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107766:	2b00      	cmp	r3, #0
 8107768:	d003      	beq.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810776a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810776e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107776:	e9d3 2300 	ldrd	r2, r3, [r3]
 810777a:	2100      	movs	r1, #0
 810777c:	6039      	str	r1, [r7, #0]
 810777e:	f003 0320 	and.w	r3, r3, #32
 8107782:	607b      	str	r3, [r7, #4]
 8107784:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107788:	460b      	mov	r3, r1
 810778a:	4313      	orrs	r3, r2
 810778c:	d011      	beq.n	81077b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810778e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107792:	3328      	adds	r3, #40	@ 0x28
 8107794:	2102      	movs	r1, #2
 8107796:	4618      	mov	r0, r3
 8107798:	f001 fa5c 	bl	8108c54 <RCCEx_PLL3_Config>
 810779c:	4603      	mov	r3, r0
 810779e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81077a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81077a6:	2b00      	cmp	r3, #0
 81077a8:	d003      	beq.n	81077b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81077ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81077b2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81077b6:	2b00      	cmp	r3, #0
 81077b8:	d101      	bne.n	81077be <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81077ba:	2300      	movs	r3, #0
 81077bc:	e000      	b.n	81077c0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81077be:	2301      	movs	r3, #1
}
 81077c0:	4618      	mov	r0, r3
 81077c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81077c6:	46bd      	mov	sp, r7
 81077c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81077cc:	58024400 	.word	0x58024400

081077d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81077d0:	b580      	push	{r7, lr}
 81077d2:	b090      	sub	sp, #64	@ 0x40
 81077d4:	af00      	add	r7, sp, #0
 81077d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81077da:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81077e2:	430b      	orrs	r3, r1
 81077e4:	f040 8094 	bne.w	8107910 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81077e8:	4b9e      	ldr	r3, [pc, #632]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81077ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81077ec:	f003 0307 	and.w	r3, r3, #7
 81077f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81077f4:	2b04      	cmp	r3, #4
 81077f6:	f200 8087 	bhi.w	8107908 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8107800 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107800:	08107815 	.word	0x08107815
 8107804:	0810783d 	.word	0x0810783d
 8107808:	08107865 	.word	0x08107865
 810780c:	08107901 	.word	0x08107901
 8107810:	0810788d 	.word	0x0810788d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107814:	4b93      	ldr	r3, [pc, #588]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810781c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107820:	d108      	bne.n	8107834 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107826:	4618      	mov	r0, r3
 8107828:	f001 f810 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107830:	f000 bd45 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107834:	2300      	movs	r3, #0
 8107836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107838:	f000 bd41 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810783c:	4b89      	ldr	r3, [pc, #548]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107848:	d108      	bne.n	810785c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810784a:	f107 0318 	add.w	r3, r7, #24
 810784e:	4618      	mov	r0, r3
 8107850:	f000 fd54 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107854:	69bb      	ldr	r3, [r7, #24]
 8107856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107858:	f000 bd31 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810785c:	2300      	movs	r3, #0
 810785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107860:	f000 bd2d 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107864:	4b7f      	ldr	r3, [pc, #508]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107866:	681b      	ldr	r3, [r3, #0]
 8107868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810786c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107870:	d108      	bne.n	8107884 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107872:	f107 030c 	add.w	r3, r7, #12
 8107876:	4618      	mov	r0, r3
 8107878:	f000 fe94 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810787c:	68fb      	ldr	r3, [r7, #12]
 810787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107880:	f000 bd1d 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107884:	2300      	movs	r3, #0
 8107886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107888:	f000 bd19 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810788c:	4b75      	ldr	r3, [pc, #468]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107894:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107896:	4b73      	ldr	r3, [pc, #460]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107898:	681b      	ldr	r3, [r3, #0]
 810789a:	f003 0304 	and.w	r3, r3, #4
 810789e:	2b04      	cmp	r3, #4
 81078a0:	d10c      	bne.n	81078bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81078a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d109      	bne.n	81078bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81078a8:	4b6e      	ldr	r3, [pc, #440]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	08db      	lsrs	r3, r3, #3
 81078ae:	f003 0303 	and.w	r3, r3, #3
 81078b2:	4a6d      	ldr	r2, [pc, #436]	@ (8107a68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81078b4:	fa22 f303 	lsr.w	r3, r2, r3
 81078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078ba:	e01f      	b.n	81078fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81078bc:	4b69      	ldr	r3, [pc, #420]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81078c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81078c8:	d106      	bne.n	81078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81078ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81078cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81078d0:	d102      	bne.n	81078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81078d2:	4b66      	ldr	r3, [pc, #408]	@ (8107a6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078d6:	e011      	b.n	81078fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81078d8:	4b62      	ldr	r3, [pc, #392]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81078e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81078e4:	d106      	bne.n	81078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81078e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81078e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078ec:	d102      	bne.n	81078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81078ee:	4b60      	ldr	r3, [pc, #384]	@ (8107a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078f2:	e003      	b.n	81078fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81078f4:	2300      	movs	r3, #0
 81078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81078f8:	f000 bce1 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81078fc:	f000 bcdf 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107900:	4b5c      	ldr	r3, [pc, #368]	@ (8107a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107904:	f000 bcdb 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107908:	2300      	movs	r3, #0
 810790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810790c:	f000 bcd7 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107914:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107918:	430b      	orrs	r3, r1
 810791a:	f040 80ad 	bne.w	8107a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810791e:	4b51      	ldr	r3, [pc, #324]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107922:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8107926:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810792a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810792e:	d056      	beq.n	81079de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107936:	f200 8090 	bhi.w	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810793c:	2bc0      	cmp	r3, #192	@ 0xc0
 810793e:	f000 8088 	beq.w	8107a52 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107944:	2bc0      	cmp	r3, #192	@ 0xc0
 8107946:	f200 8088 	bhi.w	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810794c:	2b80      	cmp	r3, #128	@ 0x80
 810794e:	d032      	beq.n	81079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107952:	2b80      	cmp	r3, #128	@ 0x80
 8107954:	f200 8081 	bhi.w	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810795a:	2b00      	cmp	r3, #0
 810795c:	d003      	beq.n	8107966 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107960:	2b40      	cmp	r3, #64	@ 0x40
 8107962:	d014      	beq.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107964:	e079      	b.n	8107a5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107966:	4b3f      	ldr	r3, [pc, #252]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107968:	681b      	ldr	r3, [r3, #0]
 810796a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810796e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107972:	d108      	bne.n	8107986 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107978:	4618      	mov	r0, r3
 810797a:	f000 ff67 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810797e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107982:	f000 bc9c 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107986:	2300      	movs	r3, #0
 8107988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810798a:	f000 bc98 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810798e:	4b35      	ldr	r3, [pc, #212]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810799a:	d108      	bne.n	81079ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810799c:	f107 0318 	add.w	r3, r7, #24
 81079a0:	4618      	mov	r0, r3
 81079a2:	f000 fcab 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81079a6:	69bb      	ldr	r3, [r7, #24]
 81079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079aa:	f000 bc88 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81079ae:	2300      	movs	r3, #0
 81079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079b2:	f000 bc84 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81079b6:	4b2b      	ldr	r3, [pc, #172]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079b8:	681b      	ldr	r3, [r3, #0]
 81079ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81079be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81079c2:	d108      	bne.n	81079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079c4:	f107 030c 	add.w	r3, r7, #12
 81079c8:	4618      	mov	r0, r3
 81079ca:	f000 fdeb 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079d2:	f000 bc74 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81079d6:	2300      	movs	r3, #0
 81079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079da:	f000 bc70 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81079de:	4b21      	ldr	r3, [pc, #132]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81079e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81079e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81079e8:	4b1e      	ldr	r3, [pc, #120]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	f003 0304 	and.w	r3, r3, #4
 81079f0:	2b04      	cmp	r3, #4
 81079f2:	d10c      	bne.n	8107a0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079f6:	2b00      	cmp	r3, #0
 81079f8:	d109      	bne.n	8107a0e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81079fa:	4b1a      	ldr	r3, [pc, #104]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81079fc:	681b      	ldr	r3, [r3, #0]
 81079fe:	08db      	lsrs	r3, r3, #3
 8107a00:	f003 0303 	and.w	r3, r3, #3
 8107a04:	4a18      	ldr	r2, [pc, #96]	@ (8107a68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107a06:	fa22 f303 	lsr.w	r3, r2, r3
 8107a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a0c:	e01f      	b.n	8107a4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107a0e:	4b15      	ldr	r3, [pc, #84]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a10:	681b      	ldr	r3, [r3, #0]
 8107a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107a1a:	d106      	bne.n	8107a2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a22:	d102      	bne.n	8107a2a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107a24:	4b11      	ldr	r3, [pc, #68]	@ (8107a6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a28:	e011      	b.n	8107a4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8107a64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107a36:	d106      	bne.n	8107a46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a3e:	d102      	bne.n	8107a46 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107a40:	4b0b      	ldr	r3, [pc, #44]	@ (8107a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a44:	e003      	b.n	8107a4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107a46:	2300      	movs	r3, #0
 8107a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107a4a:	f000 bc38 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107a4e:	f000 bc36 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107a52:	4b08      	ldr	r3, [pc, #32]	@ (8107a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a56:	f000 bc32 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107a5a:	2300      	movs	r3, #0
 8107a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a5e:	f000 bc2e 	b.w	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107a62:	bf00      	nop
 8107a64:	58024400 	.word	0x58024400
 8107a68:	03d09000 	.word	0x03d09000
 8107a6c:	003d0900 	.word	0x003d0900
 8107a70:	017d7840 	.word	0x017d7840
 8107a74:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107a7c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107a80:	430b      	orrs	r3, r1
 8107a82:	f040 809c 	bne.w	8107bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107a86:	4b9e      	ldr	r3, [pc, #632]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a8a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107a8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107a96:	d054      	beq.n	8107b42 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107a9e:	f200 808b 	bhi.w	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107aa8:	f000 8083 	beq.w	8107bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107aae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107ab2:	f200 8081 	bhi.w	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107abc:	d02f      	beq.n	8107b1e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107ac4:	d878      	bhi.n	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ac8:	2b00      	cmp	r3, #0
 8107aca:	d004      	beq.n	8107ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107ad2:	d012      	beq.n	8107afa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107ad4:	e070      	b.n	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107ae2:	d107      	bne.n	8107af4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107ae8:	4618      	mov	r0, r3
 8107aea:	f000 feaf 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107af2:	e3e4      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107af4:	2300      	movs	r3, #0
 8107af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107af8:	e3e1      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107afa:	4b81      	ldr	r3, [pc, #516]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b06:	d107      	bne.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b08:	f107 0318 	add.w	r3, r7, #24
 8107b0c:	4618      	mov	r0, r3
 8107b0e:	f000 fbf5 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b12:	69bb      	ldr	r3, [r7, #24]
 8107b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b16:	e3d2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b18:	2300      	movs	r3, #0
 8107b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b1c:	e3cf      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b1e:	4b78      	ldr	r3, [pc, #480]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b2a:	d107      	bne.n	8107b3c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b2c:	f107 030c 	add.w	r3, r7, #12
 8107b30:	4618      	mov	r0, r3
 8107b32:	f000 fd37 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b36:	68fb      	ldr	r3, [r7, #12]
 8107b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b3a:	e3c0      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b3c:	2300      	movs	r3, #0
 8107b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b40:	e3bd      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107b42:	4b6f      	ldr	r3, [pc, #444]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107b46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107b4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b4e:	681b      	ldr	r3, [r3, #0]
 8107b50:	f003 0304 	and.w	r3, r3, #4
 8107b54:	2b04      	cmp	r3, #4
 8107b56:	d10c      	bne.n	8107b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b5a:	2b00      	cmp	r3, #0
 8107b5c:	d109      	bne.n	8107b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107b5e:	4b68      	ldr	r3, [pc, #416]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	08db      	lsrs	r3, r3, #3
 8107b64:	f003 0303 	and.w	r3, r3, #3
 8107b68:	4a66      	ldr	r2, [pc, #408]	@ (8107d04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8107b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107b70:	e01e      	b.n	8107bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107b72:	4b63      	ldr	r3, [pc, #396]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107b7e:	d106      	bne.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107b86:	d102      	bne.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107b88:	4b5f      	ldr	r3, [pc, #380]	@ (8107d08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107b8c:	e010      	b.n	8107bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107b9a:	d106      	bne.n	8107baa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ba2:	d102      	bne.n	8107baa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107ba4:	4b59      	ldr	r3, [pc, #356]	@ (8107d0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107ba8:	e002      	b.n	8107bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107baa:	2300      	movs	r3, #0
 8107bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107bae:	e386      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107bb0:	e385      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107bb2:	4b57      	ldr	r3, [pc, #348]	@ (8107d10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bb6:	e382      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107bb8:	2300      	movs	r3, #0
 8107bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bbc:	e37f      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107bc2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8107bc6:	430b      	orrs	r3, r1
 8107bc8:	f040 80a7 	bne.w	8107d1a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107bd0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107bdc:	d055      	beq.n	8107c8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107be4:	f200 8096 	bhi.w	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107bee:	f000 8084 	beq.w	8107cfa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107bf8:	f200 808c 	bhi.w	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c02:	d030      	beq.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c0a:	f200 8083 	bhi.w	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d004      	beq.n	8107c1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107c1a:	d012      	beq.n	8107c42 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107c1c:	e07a      	b.n	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c1e:	4b38      	ldr	r3, [pc, #224]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c2a:	d107      	bne.n	8107c3c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c30:	4618      	mov	r0, r3
 8107c32:	f000 fe0b 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c3a:	e340      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c3c:	2300      	movs	r3, #0
 8107c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c40:	e33d      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c42:	4b2f      	ldr	r3, [pc, #188]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c4e:	d107      	bne.n	8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c50:	f107 0318 	add.w	r3, r7, #24
 8107c54:	4618      	mov	r0, r3
 8107c56:	f000 fb51 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c5a:	69bb      	ldr	r3, [r7, #24]
 8107c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c5e:	e32e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c60:	2300      	movs	r3, #0
 8107c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c64:	e32b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107c66:	4b26      	ldr	r3, [pc, #152]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c68:	681b      	ldr	r3, [r3, #0]
 8107c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107c72:	d107      	bne.n	8107c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107c74:	f107 030c 	add.w	r3, r7, #12
 8107c78:	4618      	mov	r0, r3
 8107c7a:	f000 fc93 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107c7e:	68fb      	ldr	r3, [r7, #12]
 8107c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c82:	e31c      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c84:	2300      	movs	r3, #0
 8107c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c88:	e319      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107c8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107c92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107c94:	4b1a      	ldr	r3, [pc, #104]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	f003 0304 	and.w	r3, r3, #4
 8107c9c:	2b04      	cmp	r3, #4
 8107c9e:	d10c      	bne.n	8107cba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107ca2:	2b00      	cmp	r3, #0
 8107ca4:	d109      	bne.n	8107cba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ca6:	4b16      	ldr	r3, [pc, #88]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	08db      	lsrs	r3, r3, #3
 8107cac:	f003 0303 	and.w	r3, r3, #3
 8107cb0:	4a14      	ldr	r2, [pc, #80]	@ (8107d04 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8107cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107cb8:	e01e      	b.n	8107cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107cba:	4b11      	ldr	r3, [pc, #68]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107cc6:	d106      	bne.n	8107cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107cce:	d102      	bne.n	8107cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8107d08 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107cd4:	e010      	b.n	8107cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8107d00 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107cde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107ce2:	d106      	bne.n	8107cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107cea:	d102      	bne.n	8107cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107cec:	4b07      	ldr	r3, [pc, #28]	@ (8107d0c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107cf0:	e002      	b.n	8107cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107cf2:	2300      	movs	r3, #0
 8107cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107cf6:	e2e2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107cf8:	e2e1      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107cfa:	4b05      	ldr	r3, [pc, #20]	@ (8107d10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cfe:	e2de      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d00:	58024400 	.word	0x58024400
 8107d04:	03d09000 	.word	0x03d09000
 8107d08:	003d0900 	.word	0x003d0900
 8107d0c:	017d7840 	.word	0x017d7840
 8107d10:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107d14:	2300      	movs	r3, #0
 8107d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d18:	e2d1      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d1e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8107d22:	430b      	orrs	r3, r1
 8107d24:	f040 809c 	bne.w	8107e60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8107d28:	4b93      	ldr	r3, [pc, #588]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d2c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8107d30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107d38:	d054      	beq.n	8107de4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8107d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107d40:	f200 808b 	bhi.w	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107d4a:	f000 8083 	beq.w	8107e54 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8107d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107d54:	f200 8081 	bhi.w	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107d5e:	d02f      	beq.n	8107dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107d66:	d878      	bhi.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d6a:	2b00      	cmp	r3, #0
 8107d6c:	d004      	beq.n	8107d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107d74:	d012      	beq.n	8107d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107d76:	e070      	b.n	8107e5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107d78:	4b7f      	ldr	r3, [pc, #508]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d7a:	681b      	ldr	r3, [r3, #0]
 8107d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107d84:	d107      	bne.n	8107d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107d8a:	4618      	mov	r0, r3
 8107d8c:	f000 fd5e 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d94:	e293      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d96:	2300      	movs	r3, #0
 8107d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d9a:	e290      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107d9c:	4b76      	ldr	r3, [pc, #472]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107da8:	d107      	bne.n	8107dba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107daa:	f107 0318 	add.w	r3, r7, #24
 8107dae:	4618      	mov	r0, r3
 8107db0:	f000 faa4 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107db4:	69bb      	ldr	r3, [r7, #24]
 8107db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107db8:	e281      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dba:	2300      	movs	r3, #0
 8107dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107dbe:	e27e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107dc0:	4b6d      	ldr	r3, [pc, #436]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107dc2:	681b      	ldr	r3, [r3, #0]
 8107dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107dcc:	d107      	bne.n	8107dde <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107dce:	f107 030c 	add.w	r3, r7, #12
 8107dd2:	4618      	mov	r0, r3
 8107dd4:	f000 fbe6 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107dd8:	68fb      	ldr	r3, [r7, #12]
 8107dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ddc:	e26f      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dde:	2300      	movs	r3, #0
 8107de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107de2:	e26c      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107de4:	4b64      	ldr	r3, [pc, #400]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107de8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107dec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107dee:	4b62      	ldr	r3, [pc, #392]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	f003 0304 	and.w	r3, r3, #4
 8107df6:	2b04      	cmp	r3, #4
 8107df8:	d10c      	bne.n	8107e14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107dfc:	2b00      	cmp	r3, #0
 8107dfe:	d109      	bne.n	8107e14 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e00:	4b5d      	ldr	r3, [pc, #372]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	08db      	lsrs	r3, r3, #3
 8107e06:	f003 0303 	and.w	r3, r3, #3
 8107e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8107e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e12:	e01e      	b.n	8107e52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e14:	4b58      	ldr	r3, [pc, #352]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e16:	681b      	ldr	r3, [r3, #0]
 8107e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e20:	d106      	bne.n	8107e30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8107e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107e28:	d102      	bne.n	8107e30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e2a:	4b55      	ldr	r3, [pc, #340]	@ (8107f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e2e:	e010      	b.n	8107e52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e30:	4b51      	ldr	r3, [pc, #324]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e32:	681b      	ldr	r3, [r3, #0]
 8107e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e3c:	d106      	bne.n	8107e4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8107e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e44:	d102      	bne.n	8107e4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107e46:	4b4f      	ldr	r3, [pc, #316]	@ (8107f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e4a:	e002      	b.n	8107e52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107e4c:	2300      	movs	r3, #0
 8107e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107e50:	e235      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107e52:	e234      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107e54:	4b4c      	ldr	r3, [pc, #304]	@ (8107f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8107e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e58:	e231      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107e5a:	2300      	movs	r3, #0
 8107e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e5e:	e22e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107e64:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8107e68:	430b      	orrs	r3, r1
 8107e6a:	f040 808f 	bne.w	8107f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8107e6e:	4b42      	ldr	r3, [pc, #264]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107e72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8107e76:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107e7e:	d06b      	beq.n	8107f58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107e86:	d874      	bhi.n	8107f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107e8e:	d056      	beq.n	8107f3e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107e96:	d86c      	bhi.n	8107f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107e9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107e9e:	d03b      	beq.n	8107f18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ea2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107ea6:	d864      	bhi.n	8107f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107eaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107eae:	d021      	beq.n	8107ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107eb6:	d85c      	bhi.n	8107f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107eba:	2b00      	cmp	r3, #0
 8107ebc:	d004      	beq.n	8107ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107ec4:	d004      	beq.n	8107ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8107ec6:	e054      	b.n	8107f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107ec8:	f7fe fa0c 	bl	81062e4 <HAL_RCC_GetPCLK1Freq>
 8107ecc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107ece:	e1f6      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107ed0:	4b29      	ldr	r3, [pc, #164]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107ed2:	681b      	ldr	r3, [r3, #0]
 8107ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107edc:	d107      	bne.n	8107eee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ede:	f107 0318 	add.w	r3, r7, #24
 8107ee2:	4618      	mov	r0, r3
 8107ee4:	f000 fa0a 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107ee8:	69fb      	ldr	r3, [r7, #28]
 8107eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107eec:	e1e7      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107eee:	2300      	movs	r3, #0
 8107ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ef2:	e1e4      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107ef4:	4b20      	ldr	r3, [pc, #128]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f00:	d107      	bne.n	8107f12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f02:	f107 030c 	add.w	r3, r7, #12
 8107f06:	4618      	mov	r0, r3
 8107f08:	f000 fb4c 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107f0c:	693b      	ldr	r3, [r7, #16]
 8107f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f10:	e1d5      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f12:	2300      	movs	r3, #0
 8107f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f16:	e1d2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107f18:	4b17      	ldr	r3, [pc, #92]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f1a:	681b      	ldr	r3, [r3, #0]
 8107f1c:	f003 0304 	and.w	r3, r3, #4
 8107f20:	2b04      	cmp	r3, #4
 8107f22:	d109      	bne.n	8107f38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f24:	4b14      	ldr	r3, [pc, #80]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f26:	681b      	ldr	r3, [r3, #0]
 8107f28:	08db      	lsrs	r3, r3, #3
 8107f2a:	f003 0303 	and.w	r3, r3, #3
 8107f2e:	4a13      	ldr	r2, [pc, #76]	@ (8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107f30:	fa22 f303 	lsr.w	r3, r2, r3
 8107f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f36:	e1c2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f38:	2300      	movs	r3, #0
 8107f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f3c:	e1bf      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f40:	681b      	ldr	r3, [r3, #0]
 8107f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107f4a:	d102      	bne.n	8107f52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8107f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8107f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f50:	e1b5      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f52:	2300      	movs	r3, #0
 8107f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f56:	e1b2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107f58:	4b07      	ldr	r3, [pc, #28]	@ (8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107f5a:	681b      	ldr	r3, [r3, #0]
 8107f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f64:	d102      	bne.n	8107f6c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107f66:	4b07      	ldr	r3, [pc, #28]	@ (8107f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f6a:	e1a8      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f6c:	2300      	movs	r3, #0
 8107f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f70:	e1a5      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107f72:	2300      	movs	r3, #0
 8107f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f76:	e1a2      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107f78:	58024400 	.word	0x58024400
 8107f7c:	03d09000 	.word	0x03d09000
 8107f80:	003d0900 	.word	0x003d0900
 8107f84:	017d7840 	.word	0x017d7840
 8107f88:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107f90:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8107f94:	430b      	orrs	r3, r1
 8107f96:	d173      	bne.n	8108080 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107f98:	4b9c      	ldr	r3, [pc, #624]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107fa0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107fa8:	d02f      	beq.n	810800a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107fb0:	d863      	bhi.n	810807a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8107fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107fb4:	2b00      	cmp	r3, #0
 8107fb6:	d004      	beq.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107fbe:	d012      	beq.n	8107fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107fc0:	e05b      	b.n	810807a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107fc2:	4b92      	ldr	r3, [pc, #584]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107fce:	d107      	bne.n	8107fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107fd0:	f107 0318 	add.w	r3, r7, #24
 8107fd4:	4618      	mov	r0, r3
 8107fd6:	f000 f991 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107fda:	69bb      	ldr	r3, [r7, #24]
 8107fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107fde:	e16e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107fe0:	2300      	movs	r3, #0
 8107fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107fe4:	e16b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107fe6:	4b89      	ldr	r3, [pc, #548]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107fe8:	681b      	ldr	r3, [r3, #0]
 8107fea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ff2:	d107      	bne.n	8108004 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107ff4:	f107 030c 	add.w	r3, r7, #12
 8107ff8:	4618      	mov	r0, r3
 8107ffa:	f000 fad3 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107ffe:	697b      	ldr	r3, [r7, #20]
 8108000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108002:	e15c      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108004:	2300      	movs	r3, #0
 8108006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108008:	e159      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810800a:	4b80      	ldr	r3, [pc, #512]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810800c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810800e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108012:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108014:	4b7d      	ldr	r3, [pc, #500]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	f003 0304 	and.w	r3, r3, #4
 810801c:	2b04      	cmp	r3, #4
 810801e:	d10c      	bne.n	810803a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8108020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108022:	2b00      	cmp	r3, #0
 8108024:	d109      	bne.n	810803a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108026:	4b79      	ldr	r3, [pc, #484]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108028:	681b      	ldr	r3, [r3, #0]
 810802a:	08db      	lsrs	r3, r3, #3
 810802c:	f003 0303 	and.w	r3, r3, #3
 8108030:	4a77      	ldr	r2, [pc, #476]	@ (8108210 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108032:	fa22 f303 	lsr.w	r3, r2, r3
 8108036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108038:	e01e      	b.n	8108078 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810803a:	4b74      	ldr	r3, [pc, #464]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108046:	d106      	bne.n	8108056 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8108048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810804a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810804e:	d102      	bne.n	8108056 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108050:	4b70      	ldr	r3, [pc, #448]	@ (8108214 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108054:	e010      	b.n	8108078 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108056:	4b6d      	ldr	r3, [pc, #436]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108058:	681b      	ldr	r3, [r3, #0]
 810805a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810805e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108062:	d106      	bne.n	8108072 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8108064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810806a:	d102      	bne.n	8108072 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810806c:	4b6a      	ldr	r3, [pc, #424]	@ (8108218 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108070:	e002      	b.n	8108078 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108072:	2300      	movs	r3, #0
 8108074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108076:	e122      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108078:	e121      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810807a:	2300      	movs	r3, #0
 810807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810807e:	e11e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108084:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8108088:	430b      	orrs	r3, r1
 810808a:	d133      	bne.n	81080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810808c:	4b5f      	ldr	r3, [pc, #380]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810808e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108094:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108098:	2b00      	cmp	r3, #0
 810809a:	d004      	beq.n	81080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810809e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81080a2:	d012      	beq.n	81080ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81080a4:	e023      	b.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81080a6:	4b59      	ldr	r3, [pc, #356]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81080a8:	681b      	ldr	r3, [r3, #0]
 81080aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81080ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81080b2:	d107      	bne.n	81080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81080b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81080b8:	4618      	mov	r0, r3
 81080ba:	f000 fbc7 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81080c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080c2:	e0fc      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080c4:	2300      	movs	r3, #0
 81080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080c8:	e0f9      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81080ca:	4b50      	ldr	r3, [pc, #320]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81080cc:	681b      	ldr	r3, [r3, #0]
 81080ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81080d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81080d6:	d107      	bne.n	81080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81080d8:	f107 0318 	add.w	r3, r7, #24
 81080dc:	4618      	mov	r0, r3
 81080de:	f000 f90d 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81080e2:	6a3b      	ldr	r3, [r7, #32]
 81080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080e6:	e0ea      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080e8:	2300      	movs	r3, #0
 81080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080ec:	e0e7      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81080ee:	2300      	movs	r3, #0
 81080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080f2:	e0e4      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81080f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81080f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81080fc:	430b      	orrs	r3, r1
 81080fe:	f040 808d 	bne.w	810821c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8108102:	4b42      	ldr	r3, [pc, #264]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108106:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810810a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810810e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108112:	d06b      	beq.n	81081ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8108114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810811a:	d874      	bhi.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810811e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108122:	d056      	beq.n	81081d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8108124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810812a:	d86c      	bhi.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810812c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810812e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108132:	d03b      	beq.n	81081ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8108134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810813a:	d864      	bhi.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810813c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810813e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108142:	d021      	beq.n	8108188 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8108144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810814a:	d85c      	bhi.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810814e:	2b00      	cmp	r3, #0
 8108150:	d004      	beq.n	810815c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8108152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108158:	d004      	beq.n	8108164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810815a:	e054      	b.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810815c:	f000 f8b8 	bl	81082d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8108160:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108162:	e0ac      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108164:	4b29      	ldr	r3, [pc, #164]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108166:	681b      	ldr	r3, [r3, #0]
 8108168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810816c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108170:	d107      	bne.n	8108182 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108172:	f107 0318 	add.w	r3, r7, #24
 8108176:	4618      	mov	r0, r3
 8108178:	f000 f8c0 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810817c:	69fb      	ldr	r3, [r7, #28]
 810817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108180:	e09d      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108182:	2300      	movs	r3, #0
 8108184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108186:	e09a      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108188:	4b20      	ldr	r3, [pc, #128]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108194:	d107      	bne.n	81081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108196:	f107 030c 	add.w	r3, r7, #12
 810819a:	4618      	mov	r0, r3
 810819c:	f000 fa02 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81081a0:	693b      	ldr	r3, [r7, #16]
 81081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081a4:	e08b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081a6:	2300      	movs	r3, #0
 81081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081aa:	e088      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81081ac:	4b17      	ldr	r3, [pc, #92]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	f003 0304 	and.w	r3, r3, #4
 81081b4:	2b04      	cmp	r3, #4
 81081b6:	d109      	bne.n	81081cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81081b8:	4b14      	ldr	r3, [pc, #80]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	08db      	lsrs	r3, r3, #3
 81081be:	f003 0303 	and.w	r3, r3, #3
 81081c2:	4a13      	ldr	r2, [pc, #76]	@ (8108210 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81081c4:	fa22 f303 	lsr.w	r3, r2, r3
 81081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081ca:	e078      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081cc:	2300      	movs	r3, #0
 81081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081d0:	e075      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81081d2:	4b0e      	ldr	r3, [pc, #56]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81081da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81081de:	d102      	bne.n	81081e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81081e0:	4b0c      	ldr	r3, [pc, #48]	@ (8108214 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081e4:	e06b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081e6:	2300      	movs	r3, #0
 81081e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081ea:	e068      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81081ec:	4b07      	ldr	r3, [pc, #28]	@ (810820c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81081f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81081f8:	d102      	bne.n	8108200 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81081fa:	4b07      	ldr	r3, [pc, #28]	@ (8108218 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081fe:	e05e      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108200:	2300      	movs	r3, #0
 8108202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108204:	e05b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8108206:	2300      	movs	r3, #0
 8108208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810820a:	e058      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810820c:	58024400 	.word	0x58024400
 8108210:	03d09000 	.word	0x03d09000
 8108214:	003d0900 	.word	0x003d0900
 8108218:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810821c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108220:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8108224:	430b      	orrs	r3, r1
 8108226:	d148      	bne.n	81082ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108228:	4b27      	ldr	r3, [pc, #156]	@ (81082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810822c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108230:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108238:	d02a      	beq.n	8108290 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810823a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810823c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108240:	d838      	bhi.n	81082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108244:	2b00      	cmp	r3, #0
 8108246:	d004      	beq.n	8108252 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810824a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810824e:	d00d      	beq.n	810826c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108250:	e030      	b.n	81082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108252:	4b1d      	ldr	r3, [pc, #116]	@ (81082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810825a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810825e:	d102      	bne.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108260:	4b1a      	ldr	r3, [pc, #104]	@ (81082cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108264:	e02b      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108266:	2300      	movs	r3, #0
 8108268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810826a:	e028      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810826c:	4b16      	ldr	r3, [pc, #88]	@ (81082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810826e:	681b      	ldr	r3, [r3, #0]
 8108270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108278:	d107      	bne.n	810828a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810827a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810827e:	4618      	mov	r0, r3
 8108280:	f000 fae4 	bl	810884c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108288:	e019      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810828a:	2300      	movs	r3, #0
 810828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810828e:	e016      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108290:	4b0d      	ldr	r3, [pc, #52]	@ (81082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108292:	681b      	ldr	r3, [r3, #0]
 8108294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810829c:	d107      	bne.n	81082ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810829e:	f107 0318 	add.w	r3, r7, #24
 81082a2:	4618      	mov	r0, r3
 81082a4:	f000 f82a 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81082a8:	69fb      	ldr	r3, [r7, #28]
 81082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082ac:	e007      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082ae:	2300      	movs	r3, #0
 81082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082b2:	e004      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81082b4:	2300      	movs	r3, #0
 81082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082b8:	e001      	b.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81082ba:	2300      	movs	r3, #0
 81082bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81082be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81082c0:	4618      	mov	r0, r3
 81082c2:	3740      	adds	r7, #64	@ 0x40
 81082c4:	46bd      	mov	sp, r7
 81082c6:	bd80      	pop	{r7, pc}
 81082c8:	58024400 	.word	0x58024400
 81082cc:	017d7840 	.word	0x017d7840

081082d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81082d0:	b580      	push	{r7, lr}
 81082d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81082d4:	f7fd ffd4 	bl	8106280 <HAL_RCC_GetHCLKFreq>
 81082d8:	4602      	mov	r2, r0
 81082da:	4b06      	ldr	r3, [pc, #24]	@ (81082f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81082dc:	6a1b      	ldr	r3, [r3, #32]
 81082de:	091b      	lsrs	r3, r3, #4
 81082e0:	f003 0307 	and.w	r3, r3, #7
 81082e4:	4904      	ldr	r1, [pc, #16]	@ (81082f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81082e6:	5ccb      	ldrb	r3, [r1, r3]
 81082e8:	f003 031f 	and.w	r3, r3, #31
 81082ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81082f0:	4618      	mov	r0, r3
 81082f2:	bd80      	pop	{r7, pc}
 81082f4:	58024400 	.word	0x58024400
 81082f8:	0810e998 	.word	0x0810e998

081082fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81082fc:	b480      	push	{r7}
 81082fe:	b089      	sub	sp, #36	@ 0x24
 8108300:	af00      	add	r7, sp, #0
 8108302:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108304:	4ba1      	ldr	r3, [pc, #644]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108308:	f003 0303 	and.w	r3, r3, #3
 810830c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810830e:	4b9f      	ldr	r3, [pc, #636]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108312:	0b1b      	lsrs	r3, r3, #12
 8108314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108318:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810831a:	4b9c      	ldr	r3, [pc, #624]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810831e:	091b      	lsrs	r3, r3, #4
 8108320:	f003 0301 	and.w	r3, r3, #1
 8108324:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108326:	4b99      	ldr	r3, [pc, #612]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810832a:	08db      	lsrs	r3, r3, #3
 810832c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108330:	693a      	ldr	r2, [r7, #16]
 8108332:	fb02 f303 	mul.w	r3, r2, r3
 8108336:	ee07 3a90 	vmov	s15, r3
 810833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810833e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108342:	697b      	ldr	r3, [r7, #20]
 8108344:	2b00      	cmp	r3, #0
 8108346:	f000 8111 	beq.w	810856c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810834a:	69bb      	ldr	r3, [r7, #24]
 810834c:	2b02      	cmp	r3, #2
 810834e:	f000 8083 	beq.w	8108458 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108352:	69bb      	ldr	r3, [r7, #24]
 8108354:	2b02      	cmp	r3, #2
 8108356:	f200 80a1 	bhi.w	810849c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810835a:	69bb      	ldr	r3, [r7, #24]
 810835c:	2b00      	cmp	r3, #0
 810835e:	d003      	beq.n	8108368 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108360:	69bb      	ldr	r3, [r7, #24]
 8108362:	2b01      	cmp	r3, #1
 8108364:	d056      	beq.n	8108414 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108366:	e099      	b.n	810849c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108368:	4b88      	ldr	r3, [pc, #544]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810836a:	681b      	ldr	r3, [r3, #0]
 810836c:	f003 0320 	and.w	r3, r3, #32
 8108370:	2b00      	cmp	r3, #0
 8108372:	d02d      	beq.n	81083d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108374:	4b85      	ldr	r3, [pc, #532]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108376:	681b      	ldr	r3, [r3, #0]
 8108378:	08db      	lsrs	r3, r3, #3
 810837a:	f003 0303 	and.w	r3, r3, #3
 810837e:	4a84      	ldr	r2, [pc, #528]	@ (8108590 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108380:	fa22 f303 	lsr.w	r3, r2, r3
 8108384:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108386:	68bb      	ldr	r3, [r7, #8]
 8108388:	ee07 3a90 	vmov	s15, r3
 810838c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108390:	697b      	ldr	r3, [r7, #20]
 8108392:	ee07 3a90 	vmov	s15, r3
 8108396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810839e:	4b7b      	ldr	r3, [pc, #492]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083a6:	ee07 3a90 	vmov	s15, r3
 81083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81083b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81083ce:	e087      	b.n	81084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81083d0:	697b      	ldr	r3, [r7, #20]
 81083d2:	ee07 3a90 	vmov	s15, r3
 81083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108598 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81083e2:	4b6a      	ldr	r3, [pc, #424]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81083e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083ea:	ee07 3a90 	vmov	s15, r3
 81083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81083f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810840e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108412:	e065      	b.n	81084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108414:	697b      	ldr	r3, [r7, #20]
 8108416:	ee07 3a90 	vmov	s15, r3
 810841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810841e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810859c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108426:	4b59      	ldr	r3, [pc, #356]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810842e:	ee07 3a90 	vmov	s15, r3
 8108432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108436:	ed97 6a03 	vldr	s12, [r7, #12]
 810843a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108456:	e043      	b.n	81084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108458:	697b      	ldr	r3, [r7, #20]
 810845a:	ee07 3a90 	vmov	s15, r3
 810845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108462:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81085a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810846a:	4b48      	ldr	r3, [pc, #288]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108472:	ee07 3a90 	vmov	s15, r3
 8108476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810847a:	ed97 6a03 	vldr	s12, [r7, #12]
 810847e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810849a:	e021      	b.n	81084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810849c:	697b      	ldr	r3, [r7, #20]
 810849e:	ee07 3a90 	vmov	s15, r3
 81084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810859c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084ae:	4b37      	ldr	r3, [pc, #220]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084b6:	ee07 3a90 	vmov	s15, r3
 81084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084be:	ed97 6a03 	vldr	s12, [r7, #12]
 81084c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81084de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81084e0:	4b2a      	ldr	r3, [pc, #168]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81084e4:	0a5b      	lsrs	r3, r3, #9
 81084e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81084ea:	ee07 3a90 	vmov	s15, r3
 81084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81084f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81084fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81084fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108506:	ee17 2a90 	vmov	r2, s15
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810850e:	4b1f      	ldr	r3, [pc, #124]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108512:	0c1b      	lsrs	r3, r3, #16
 8108514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108518:	ee07 3a90 	vmov	s15, r3
 810851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108528:	edd7 6a07 	vldr	s13, [r7, #28]
 810852c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108534:	ee17 2a90 	vmov	r2, s15
 8108538:	687b      	ldr	r3, [r7, #4]
 810853a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810853c:	4b13      	ldr	r3, [pc, #76]	@ (810858c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108540:	0e1b      	lsrs	r3, r3, #24
 8108542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108546:	ee07 3a90 	vmov	s15, r3
 810854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810854e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108556:	edd7 6a07 	vldr	s13, [r7, #28]
 810855a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810855e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108562:	ee17 2a90 	vmov	r2, s15
 8108566:	687b      	ldr	r3, [r7, #4]
 8108568:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810856a:	e008      	b.n	810857e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	2200      	movs	r2, #0
 8108570:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	2200      	movs	r2, #0
 8108576:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	2200      	movs	r2, #0
 810857c:	609a      	str	r2, [r3, #8]
}
 810857e:	bf00      	nop
 8108580:	3724      	adds	r7, #36	@ 0x24
 8108582:	46bd      	mov	sp, r7
 8108584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108588:	4770      	bx	lr
 810858a:	bf00      	nop
 810858c:	58024400 	.word	0x58024400
 8108590:	03d09000 	.word	0x03d09000
 8108594:	46000000 	.word	0x46000000
 8108598:	4c742400 	.word	0x4c742400
 810859c:	4a742400 	.word	0x4a742400
 81085a0:	4bbebc20 	.word	0x4bbebc20

081085a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81085a4:	b480      	push	{r7}
 81085a6:	b089      	sub	sp, #36	@ 0x24
 81085a8:	af00      	add	r7, sp, #0
 81085aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81085ac:	4ba1      	ldr	r3, [pc, #644]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085b0:	f003 0303 	and.w	r3, r3, #3
 81085b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81085b6:	4b9f      	ldr	r3, [pc, #636]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085ba:	0d1b      	lsrs	r3, r3, #20
 81085bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81085c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81085c2:	4b9c      	ldr	r3, [pc, #624]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81085c6:	0a1b      	lsrs	r3, r3, #8
 81085c8:	f003 0301 	and.w	r3, r3, #1
 81085cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81085ce:	4b99      	ldr	r3, [pc, #612]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81085d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81085d2:	08db      	lsrs	r3, r3, #3
 81085d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81085d8:	693a      	ldr	r2, [r7, #16]
 81085da:	fb02 f303 	mul.w	r3, r2, r3
 81085de:	ee07 3a90 	vmov	s15, r3
 81085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81085ea:	697b      	ldr	r3, [r7, #20]
 81085ec:	2b00      	cmp	r3, #0
 81085ee:	f000 8111 	beq.w	8108814 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81085f2:	69bb      	ldr	r3, [r7, #24]
 81085f4:	2b02      	cmp	r3, #2
 81085f6:	f000 8083 	beq.w	8108700 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81085fa:	69bb      	ldr	r3, [r7, #24]
 81085fc:	2b02      	cmp	r3, #2
 81085fe:	f200 80a1 	bhi.w	8108744 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108602:	69bb      	ldr	r3, [r7, #24]
 8108604:	2b00      	cmp	r3, #0
 8108606:	d003      	beq.n	8108610 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108608:	69bb      	ldr	r3, [r7, #24]
 810860a:	2b01      	cmp	r3, #1
 810860c:	d056      	beq.n	81086bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810860e:	e099      	b.n	8108744 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108610:	4b88      	ldr	r3, [pc, #544]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108612:	681b      	ldr	r3, [r3, #0]
 8108614:	f003 0320 	and.w	r3, r3, #32
 8108618:	2b00      	cmp	r3, #0
 810861a:	d02d      	beq.n	8108678 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810861c:	4b85      	ldr	r3, [pc, #532]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	08db      	lsrs	r3, r3, #3
 8108622:	f003 0303 	and.w	r3, r3, #3
 8108626:	4a84      	ldr	r2, [pc, #528]	@ (8108838 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108628:	fa22 f303 	lsr.w	r3, r2, r3
 810862c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810862e:	68bb      	ldr	r3, [r7, #8]
 8108630:	ee07 3a90 	vmov	s15, r3
 8108634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108638:	697b      	ldr	r3, [r7, #20]
 810863a:	ee07 3a90 	vmov	s15, r3
 810863e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108646:	4b7b      	ldr	r3, [pc, #492]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810864e:	ee07 3a90 	vmov	s15, r3
 8108652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108656:	ed97 6a03 	vldr	s12, [r7, #12]
 810865a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810883c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108676:	e087      	b.n	8108788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108678:	697b      	ldr	r3, [r7, #20]
 810867a:	ee07 3a90 	vmov	s15, r3
 810867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108682:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108840 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8108686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810868a:	4b6a      	ldr	r3, [pc, #424]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810868c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108692:	ee07 3a90 	vmov	s15, r3
 8108696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810869a:	ed97 6a03 	vldr	s12, [r7, #12]
 810869e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810883c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81086ba:	e065      	b.n	8108788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81086bc:	697b      	ldr	r3, [r7, #20]
 81086be:	ee07 3a90 	vmov	s15, r3
 81086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81086ce:	4b59      	ldr	r3, [pc, #356]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81086d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81086d6:	ee07 3a90 	vmov	s15, r3
 81086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086de:	ed97 6a03 	vldr	s12, [r7, #12]
 81086e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810883c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81086fe:	e043      	b.n	8108788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108700:	697b      	ldr	r3, [r7, #20]
 8108702:	ee07 3a90 	vmov	s15, r3
 8108706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810870a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108712:	4b48      	ldr	r3, [pc, #288]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810871a:	ee07 3a90 	vmov	s15, r3
 810871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108722:	ed97 6a03 	vldr	s12, [r7, #12]
 8108726:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810883c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810873e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108742:	e021      	b.n	8108788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108744:	697b      	ldr	r3, [r7, #20]
 8108746:	ee07 3a90 	vmov	s15, r3
 810874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810874e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108756:	4b37      	ldr	r3, [pc, #220]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810875e:	ee07 3a90 	vmov	s15, r3
 8108762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108766:	ed97 6a03 	vldr	s12, [r7, #12]
 810876a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810883c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108786:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108788:	4b2a      	ldr	r3, [pc, #168]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810878c:	0a5b      	lsrs	r3, r3, #9
 810878e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108792:	ee07 3a90 	vmov	s15, r3
 8108796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810879a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810879e:	ee37 7a87 	vadd.f32	s14, s15, s14
 81087a2:	edd7 6a07 	vldr	s13, [r7, #28]
 81087a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81087aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81087ae:	ee17 2a90 	vmov	r2, s15
 81087b2:	687b      	ldr	r3, [r7, #4]
 81087b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81087b6:	4b1f      	ldr	r3, [pc, #124]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087ba:	0c1b      	lsrs	r3, r3, #16
 81087bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81087c0:	ee07 3a90 	vmov	s15, r3
 81087c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81087cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81087d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81087d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81087d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81087dc:	ee17 2a90 	vmov	r2, s15
 81087e0:	687b      	ldr	r3, [r7, #4]
 81087e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81087e4:	4b13      	ldr	r3, [pc, #76]	@ (8108834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087e8:	0e1b      	lsrs	r3, r3, #24
 81087ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81087ee:	ee07 3a90 	vmov	s15, r3
 81087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81087fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81087fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8108802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810880a:	ee17 2a90 	vmov	r2, s15
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108812:	e008      	b.n	8108826 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108814:	687b      	ldr	r3, [r7, #4]
 8108816:	2200      	movs	r2, #0
 8108818:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	2200      	movs	r2, #0
 810881e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108820:	687b      	ldr	r3, [r7, #4]
 8108822:	2200      	movs	r2, #0
 8108824:	609a      	str	r2, [r3, #8]
}
 8108826:	bf00      	nop
 8108828:	3724      	adds	r7, #36	@ 0x24
 810882a:	46bd      	mov	sp, r7
 810882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108830:	4770      	bx	lr
 8108832:	bf00      	nop
 8108834:	58024400 	.word	0x58024400
 8108838:	03d09000 	.word	0x03d09000
 810883c:	46000000 	.word	0x46000000
 8108840:	4c742400 	.word	0x4c742400
 8108844:	4a742400 	.word	0x4a742400
 8108848:	4bbebc20 	.word	0x4bbebc20

0810884c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810884c:	b480      	push	{r7}
 810884e:	b089      	sub	sp, #36	@ 0x24
 8108850:	af00      	add	r7, sp, #0
 8108852:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108854:	4ba0      	ldr	r3, [pc, #640]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108858:	f003 0303 	and.w	r3, r3, #3
 810885c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810885e:	4b9e      	ldr	r3, [pc, #632]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108862:	091b      	lsrs	r3, r3, #4
 8108864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108868:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810886a:	4b9b      	ldr	r3, [pc, #620]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810886e:	f003 0301 	and.w	r3, r3, #1
 8108872:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8108874:	4b98      	ldr	r3, [pc, #608]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108878:	08db      	lsrs	r3, r3, #3
 810887a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810887e:	693a      	ldr	r2, [r7, #16]
 8108880:	fb02 f303 	mul.w	r3, r2, r3
 8108884:	ee07 3a90 	vmov	s15, r3
 8108888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810888c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108890:	697b      	ldr	r3, [r7, #20]
 8108892:	2b00      	cmp	r3, #0
 8108894:	f000 8111 	beq.w	8108aba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108898:	69bb      	ldr	r3, [r7, #24]
 810889a:	2b02      	cmp	r3, #2
 810889c:	f000 8083 	beq.w	81089a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81088a0:	69bb      	ldr	r3, [r7, #24]
 81088a2:	2b02      	cmp	r3, #2
 81088a4:	f200 80a1 	bhi.w	81089ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81088a8:	69bb      	ldr	r3, [r7, #24]
 81088aa:	2b00      	cmp	r3, #0
 81088ac:	d003      	beq.n	81088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81088ae:	69bb      	ldr	r3, [r7, #24]
 81088b0:	2b01      	cmp	r3, #1
 81088b2:	d056      	beq.n	8108962 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81088b4:	e099      	b.n	81089ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81088b6:	4b88      	ldr	r3, [pc, #544]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088b8:	681b      	ldr	r3, [r3, #0]
 81088ba:	f003 0320 	and.w	r3, r3, #32
 81088be:	2b00      	cmp	r3, #0
 81088c0:	d02d      	beq.n	810891e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81088c2:	4b85      	ldr	r3, [pc, #532]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088c4:	681b      	ldr	r3, [r3, #0]
 81088c6:	08db      	lsrs	r3, r3, #3
 81088c8:	f003 0303 	and.w	r3, r3, #3
 81088cc:	4a83      	ldr	r2, [pc, #524]	@ (8108adc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81088ce:	fa22 f303 	lsr.w	r3, r2, r3
 81088d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81088d4:	68bb      	ldr	r3, [r7, #8]
 81088d6:	ee07 3a90 	vmov	s15, r3
 81088da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088de:	697b      	ldr	r3, [r7, #20]
 81088e0:	ee07 3a90 	vmov	s15, r3
 81088e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088ec:	4b7a      	ldr	r3, [pc, #488]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81088ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81088f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088f4:	ee07 3a90 	vmov	s15, r3
 81088f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8108900:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810890c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108918:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810891c:	e087      	b.n	8108a2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810891e:	697b      	ldr	r3, [r7, #20]
 8108920:	ee07 3a90 	vmov	s15, r3
 8108924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108928:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810892c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108930:	4b69      	ldr	r3, [pc, #420]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108938:	ee07 3a90 	vmov	s15, r3
 810893c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108940:	ed97 6a03 	vldr	s12, [r7, #12]
 8108944:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810894c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108950:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108958:	ee67 7a27 	vmul.f32	s15, s14, s15
 810895c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108960:	e065      	b.n	8108a2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108962:	697b      	ldr	r3, [r7, #20]
 8108964:	ee07 3a90 	vmov	s15, r3
 8108968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810896c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108974:	4b58      	ldr	r3, [pc, #352]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810897c:	ee07 3a90 	vmov	s15, r3
 8108980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108984:	ed97 6a03 	vldr	s12, [r7, #12]
 8108988:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810898c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108994:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810899c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089a4:	e043      	b.n	8108a2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81089a6:	697b      	ldr	r3, [r7, #20]
 81089a8:	ee07 3a90 	vmov	s15, r3
 81089ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108aec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81089b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089b8:	4b47      	ldr	r3, [pc, #284]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81089ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81089bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089c0:	ee07 3a90 	vmov	s15, r3
 81089c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81089cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81089d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81089d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089e8:	e021      	b.n	8108a2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81089ea:	697b      	ldr	r3, [r7, #20]
 81089ec:	ee07 3a90 	vmov	s15, r3
 81089f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81089f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089fc:	4b36      	ldr	r3, [pc, #216]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81089fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a04:	ee07 3a90 	vmov	s15, r3
 8108a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a10:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108a32:	0a5b      	lsrs	r3, r3, #9
 8108a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a38:	ee07 3a90 	vmov	s15, r3
 8108a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108a54:	ee17 2a90 	vmov	r2, s15
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108a60:	0c1b      	lsrs	r3, r3, #16
 8108a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a66:	ee07 3a90 	vmov	s15, r3
 8108a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108a82:	ee17 2a90 	vmov	r2, s15
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108a8a:	4b13      	ldr	r3, [pc, #76]	@ (8108ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108a8e:	0e1b      	lsrs	r3, r3, #24
 8108a90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a94:	ee07 3a90 	vmov	s15, r3
 8108a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8108aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108ab0:	ee17 2a90 	vmov	r2, s15
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108ab8:	e008      	b.n	8108acc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108aba:	687b      	ldr	r3, [r7, #4]
 8108abc:	2200      	movs	r2, #0
 8108abe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108ac0:	687b      	ldr	r3, [r7, #4]
 8108ac2:	2200      	movs	r2, #0
 8108ac4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	2200      	movs	r2, #0
 8108aca:	609a      	str	r2, [r3, #8]
}
 8108acc:	bf00      	nop
 8108ace:	3724      	adds	r7, #36	@ 0x24
 8108ad0:	46bd      	mov	sp, r7
 8108ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ad6:	4770      	bx	lr
 8108ad8:	58024400 	.word	0x58024400
 8108adc:	03d09000 	.word	0x03d09000
 8108ae0:	46000000 	.word	0x46000000
 8108ae4:	4c742400 	.word	0x4c742400
 8108ae8:	4a742400 	.word	0x4a742400
 8108aec:	4bbebc20 	.word	0x4bbebc20

08108af0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108af0:	b580      	push	{r7, lr}
 8108af2:	b084      	sub	sp, #16
 8108af4:	af00      	add	r7, sp, #0
 8108af6:	6078      	str	r0, [r7, #4]
 8108af8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108afa:	2300      	movs	r3, #0
 8108afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108afe:	4b54      	ldr	r3, [pc, #336]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b02:	f003 0303 	and.w	r3, r3, #3
 8108b06:	2b03      	cmp	r3, #3
 8108b08:	d101      	bne.n	8108b0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108b0a:	2301      	movs	r3, #1
 8108b0c:	e09b      	b.n	8108c46 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108b0e:	4b50      	ldr	r3, [pc, #320]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b10:	681b      	ldr	r3, [r3, #0]
 8108b12:	4a4f      	ldr	r2, [pc, #316]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108b1a:	f7fa f839 	bl	8102b90 <HAL_GetTick>
 8108b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108b20:	e008      	b.n	8108b34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108b22:	f7fa f835 	bl	8102b90 <HAL_GetTick>
 8108b26:	4602      	mov	r2, r0
 8108b28:	68bb      	ldr	r3, [r7, #8]
 8108b2a:	1ad3      	subs	r3, r2, r3
 8108b2c:	2b02      	cmp	r3, #2
 8108b2e:	d901      	bls.n	8108b34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108b30:	2303      	movs	r3, #3
 8108b32:	e088      	b.n	8108c46 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108b34:	4b46      	ldr	r3, [pc, #280]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b36:	681b      	ldr	r3, [r3, #0]
 8108b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	d1f0      	bne.n	8108b22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108b40:	4b43      	ldr	r3, [pc, #268]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	681b      	ldr	r3, [r3, #0]
 8108b4c:	031b      	lsls	r3, r3, #12
 8108b4e:	4940      	ldr	r1, [pc, #256]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b50:	4313      	orrs	r3, r2
 8108b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	685b      	ldr	r3, [r3, #4]
 8108b58:	3b01      	subs	r3, #1
 8108b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	689b      	ldr	r3, [r3, #8]
 8108b62:	3b01      	subs	r3, #1
 8108b64:	025b      	lsls	r3, r3, #9
 8108b66:	b29b      	uxth	r3, r3
 8108b68:	431a      	orrs	r2, r3
 8108b6a:	687b      	ldr	r3, [r7, #4]
 8108b6c:	68db      	ldr	r3, [r3, #12]
 8108b6e:	3b01      	subs	r3, #1
 8108b70:	041b      	lsls	r3, r3, #16
 8108b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108b76:	431a      	orrs	r2, r3
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	691b      	ldr	r3, [r3, #16]
 8108b7c:	3b01      	subs	r3, #1
 8108b7e:	061b      	lsls	r3, r3, #24
 8108b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108b84:	4932      	ldr	r1, [pc, #200]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b86:	4313      	orrs	r3, r2
 8108b88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108b8a:	4b31      	ldr	r3, [pc, #196]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	695b      	ldr	r3, [r3, #20]
 8108b96:	492e      	ldr	r1, [pc, #184]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b98:	4313      	orrs	r3, r2
 8108b9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ba0:	f023 0220 	bic.w	r2, r3, #32
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	699b      	ldr	r3, [r3, #24]
 8108ba8:	4929      	ldr	r1, [pc, #164]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108baa:	4313      	orrs	r3, r2
 8108bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108bae:	4b28      	ldr	r3, [pc, #160]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bb2:	4a27      	ldr	r2, [pc, #156]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bb4:	f023 0310 	bic.w	r3, r3, #16
 8108bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108bba:	4b25      	ldr	r3, [pc, #148]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108bc2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108bc6:	687a      	ldr	r2, [r7, #4]
 8108bc8:	69d2      	ldr	r2, [r2, #28]
 8108bca:	00d2      	lsls	r2, r2, #3
 8108bcc:	4920      	ldr	r1, [pc, #128]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bce:	4313      	orrs	r3, r2
 8108bd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bd8:	f043 0310 	orr.w	r3, r3, #16
 8108bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108bde:	683b      	ldr	r3, [r7, #0]
 8108be0:	2b00      	cmp	r3, #0
 8108be2:	d106      	bne.n	8108bf2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108be4:	4b1a      	ldr	r3, [pc, #104]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108be8:	4a19      	ldr	r2, [pc, #100]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108bf0:	e00f      	b.n	8108c12 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108bf2:	683b      	ldr	r3, [r7, #0]
 8108bf4:	2b01      	cmp	r3, #1
 8108bf6:	d106      	bne.n	8108c06 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108bf8:	4b15      	ldr	r3, [pc, #84]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bfc:	4a14      	ldr	r2, [pc, #80]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108c04:	e005      	b.n	8108c12 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108c06:	4b12      	ldr	r3, [pc, #72]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c0a:	4a11      	ldr	r2, [pc, #68]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108c12:	4b0f      	ldr	r3, [pc, #60]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	4a0e      	ldr	r2, [pc, #56]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108c18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108c1e:	f7f9 ffb7 	bl	8102b90 <HAL_GetTick>
 8108c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108c24:	e008      	b.n	8108c38 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108c26:	f7f9 ffb3 	bl	8102b90 <HAL_GetTick>
 8108c2a:	4602      	mov	r2, r0
 8108c2c:	68bb      	ldr	r3, [r7, #8]
 8108c2e:	1ad3      	subs	r3, r2, r3
 8108c30:	2b02      	cmp	r3, #2
 8108c32:	d901      	bls.n	8108c38 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108c34:	2303      	movs	r3, #3
 8108c36:	e006      	b.n	8108c46 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108c38:	4b05      	ldr	r3, [pc, #20]	@ (8108c50 <RCCEx_PLL2_Config+0x160>)
 8108c3a:	681b      	ldr	r3, [r3, #0]
 8108c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108c40:	2b00      	cmp	r3, #0
 8108c42:	d0f0      	beq.n	8108c26 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8108c46:	4618      	mov	r0, r3
 8108c48:	3710      	adds	r7, #16
 8108c4a:	46bd      	mov	sp, r7
 8108c4c:	bd80      	pop	{r7, pc}
 8108c4e:	bf00      	nop
 8108c50:	58024400 	.word	0x58024400

08108c54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108c54:	b580      	push	{r7, lr}
 8108c56:	b084      	sub	sp, #16
 8108c58:	af00      	add	r7, sp, #0
 8108c5a:	6078      	str	r0, [r7, #4]
 8108c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108c5e:	2300      	movs	r3, #0
 8108c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108c62:	4b54      	ldr	r3, [pc, #336]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c66:	f003 0303 	and.w	r3, r3, #3
 8108c6a:	2b03      	cmp	r3, #3
 8108c6c:	d101      	bne.n	8108c72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108c6e:	2301      	movs	r3, #1
 8108c70:	e09b      	b.n	8108daa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108c72:	4b50      	ldr	r3, [pc, #320]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108c74:	681b      	ldr	r3, [r3, #0]
 8108c76:	4a4f      	ldr	r2, [pc, #316]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108c7e:	f7f9 ff87 	bl	8102b90 <HAL_GetTick>
 8108c82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108c84:	e008      	b.n	8108c98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108c86:	f7f9 ff83 	bl	8102b90 <HAL_GetTick>
 8108c8a:	4602      	mov	r2, r0
 8108c8c:	68bb      	ldr	r3, [r7, #8]
 8108c8e:	1ad3      	subs	r3, r2, r3
 8108c90:	2b02      	cmp	r3, #2
 8108c92:	d901      	bls.n	8108c98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108c94:	2303      	movs	r3, #3
 8108c96:	e088      	b.n	8108daa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108c98:	4b46      	ldr	r3, [pc, #280]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108c9a:	681b      	ldr	r3, [r3, #0]
 8108c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108ca0:	2b00      	cmp	r3, #0
 8108ca2:	d1f0      	bne.n	8108c86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108ca4:	4b43      	ldr	r3, [pc, #268]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ca8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	681b      	ldr	r3, [r3, #0]
 8108cb0:	051b      	lsls	r3, r3, #20
 8108cb2:	4940      	ldr	r1, [pc, #256]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108cb4:	4313      	orrs	r3, r2
 8108cb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	685b      	ldr	r3, [r3, #4]
 8108cbc:	3b01      	subs	r3, #1
 8108cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	689b      	ldr	r3, [r3, #8]
 8108cc6:	3b01      	subs	r3, #1
 8108cc8:	025b      	lsls	r3, r3, #9
 8108cca:	b29b      	uxth	r3, r3
 8108ccc:	431a      	orrs	r2, r3
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	68db      	ldr	r3, [r3, #12]
 8108cd2:	3b01      	subs	r3, #1
 8108cd4:	041b      	lsls	r3, r3, #16
 8108cd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108cda:	431a      	orrs	r2, r3
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	691b      	ldr	r3, [r3, #16]
 8108ce0:	3b01      	subs	r3, #1
 8108ce2:	061b      	lsls	r3, r3, #24
 8108ce4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108ce8:	4932      	ldr	r1, [pc, #200]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108cea:	4313      	orrs	r3, r2
 8108cec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108cee:	4b31      	ldr	r3, [pc, #196]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108cf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	695b      	ldr	r3, [r3, #20]
 8108cfa:	492e      	ldr	r1, [pc, #184]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108cfc:	4313      	orrs	r3, r2
 8108cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108d00:	4b2c      	ldr	r3, [pc, #176]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	699b      	ldr	r3, [r3, #24]
 8108d0c:	4929      	ldr	r1, [pc, #164]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d0e:	4313      	orrs	r3, r2
 8108d10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108d12:	4b28      	ldr	r3, [pc, #160]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d16:	4a27      	ldr	r2, [pc, #156]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108d1e:	4b25      	ldr	r3, [pc, #148]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108d26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108d2a:	687a      	ldr	r2, [r7, #4]
 8108d2c:	69d2      	ldr	r2, [r2, #28]
 8108d2e:	00d2      	lsls	r2, r2, #3
 8108d30:	4920      	ldr	r1, [pc, #128]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d32:	4313      	orrs	r3, r2
 8108d34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108d36:	4b1f      	ldr	r3, [pc, #124]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108d42:	683b      	ldr	r3, [r7, #0]
 8108d44:	2b00      	cmp	r3, #0
 8108d46:	d106      	bne.n	8108d56 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108d48:	4b1a      	ldr	r3, [pc, #104]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d4c:	4a19      	ldr	r2, [pc, #100]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108d54:	e00f      	b.n	8108d76 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108d56:	683b      	ldr	r3, [r7, #0]
 8108d58:	2b01      	cmp	r3, #1
 8108d5a:	d106      	bne.n	8108d6a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108d5c:	4b15      	ldr	r3, [pc, #84]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d60:	4a14      	ldr	r2, [pc, #80]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108d68:	e005      	b.n	8108d76 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108d6a:	4b12      	ldr	r3, [pc, #72]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d6e:	4a11      	ldr	r2, [pc, #68]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108d76:	4b0f      	ldr	r3, [pc, #60]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108d82:	f7f9 ff05 	bl	8102b90 <HAL_GetTick>
 8108d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108d88:	e008      	b.n	8108d9c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108d8a:	f7f9 ff01 	bl	8102b90 <HAL_GetTick>
 8108d8e:	4602      	mov	r2, r0
 8108d90:	68bb      	ldr	r3, [r7, #8]
 8108d92:	1ad3      	subs	r3, r2, r3
 8108d94:	2b02      	cmp	r3, #2
 8108d96:	d901      	bls.n	8108d9c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108d98:	2303      	movs	r3, #3
 8108d9a:	e006      	b.n	8108daa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108d9c:	4b05      	ldr	r3, [pc, #20]	@ (8108db4 <RCCEx_PLL3_Config+0x160>)
 8108d9e:	681b      	ldr	r3, [r3, #0]
 8108da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108da4:	2b00      	cmp	r3, #0
 8108da6:	d0f0      	beq.n	8108d8a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8108daa:	4618      	mov	r0, r3
 8108dac:	3710      	adds	r7, #16
 8108dae:	46bd      	mov	sp, r7
 8108db0:	bd80      	pop	{r7, pc}
 8108db2:	bf00      	nop
 8108db4:	58024400 	.word	0x58024400

08108db8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8108db8:	b580      	push	{r7, lr}
 8108dba:	b084      	sub	sp, #16
 8108dbc:	af00      	add	r7, sp, #0
 8108dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8108dc0:	2301      	movs	r3, #1
 8108dc2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8108dc4:	687b      	ldr	r3, [r7, #4]
 8108dc6:	2b00      	cmp	r3, #0
 8108dc8:	d073      	beq.n	8108eb2 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8108dd0:	b2db      	uxtb	r3, r3
 8108dd2:	2b00      	cmp	r3, #0
 8108dd4:	d106      	bne.n	8108de4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	2200      	movs	r2, #0
 8108dda:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8108dde:	6878      	ldr	r0, [r7, #4]
 8108de0:	f7f8 fea0 	bl	8101b24 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	2202      	movs	r2, #2
 8108de8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	68db      	ldr	r3, [r3, #12]
 8108df2:	f003 0310 	and.w	r3, r3, #16
 8108df6:	2b10      	cmp	r3, #16
 8108df8:	d052      	beq.n	8108ea0 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	22ca      	movs	r2, #202	@ 0xca
 8108e00:	625a      	str	r2, [r3, #36]	@ 0x24
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	2253      	movs	r2, #83	@ 0x53
 8108e08:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8108e0a:	6878      	ldr	r0, [r7, #4]
 8108e0c:	f000 f87a 	bl	8108f04 <RTC_EnterInitMode>
 8108e10:	4603      	mov	r3, r0
 8108e12:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8108e14:	7bfb      	ldrb	r3, [r7, #15]
 8108e16:	2b00      	cmp	r3, #0
 8108e18:	d126      	bne.n	8108e68 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	681b      	ldr	r3, [r3, #0]
 8108e1e:	689b      	ldr	r3, [r3, #8]
 8108e20:	687a      	ldr	r2, [r7, #4]
 8108e22:	6812      	ldr	r2, [r2, #0]
 8108e24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8108e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8108e2c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	681b      	ldr	r3, [r3, #0]
 8108e32:	6899      	ldr	r1, [r3, #8]
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	685a      	ldr	r2, [r3, #4]
 8108e38:	687b      	ldr	r3, [r7, #4]
 8108e3a:	691b      	ldr	r3, [r3, #16]
 8108e3c:	431a      	orrs	r2, r3
 8108e3e:	687b      	ldr	r3, [r7, #4]
 8108e40:	699b      	ldr	r3, [r3, #24]
 8108e42:	431a      	orrs	r2, r3
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	681b      	ldr	r3, [r3, #0]
 8108e48:	430a      	orrs	r2, r1
 8108e4a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	689b      	ldr	r3, [r3, #8]
 8108e50:	0419      	lsls	r1, r3, #16
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	68da      	ldr	r2, [r3, #12]
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	681b      	ldr	r3, [r3, #0]
 8108e5a:	430a      	orrs	r2, r1
 8108e5c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8108e5e:	6878      	ldr	r0, [r7, #4]
 8108e60:	f000 f884 	bl	8108f6c <RTC_ExitInitMode>
 8108e64:	4603      	mov	r3, r0
 8108e66:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8108e68:	7bfb      	ldrb	r3, [r7, #15]
 8108e6a:	2b00      	cmp	r3, #0
 8108e6c:	d113      	bne.n	8108e96 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	681b      	ldr	r3, [r3, #0]
 8108e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	681b      	ldr	r3, [r3, #0]
 8108e78:	f022 0203 	bic.w	r2, r2, #3
 8108e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	681b      	ldr	r3, [r3, #0]
 8108e82:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	69da      	ldr	r2, [r3, #28]
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	695b      	ldr	r3, [r3, #20]
 8108e8c:	431a      	orrs	r2, r3
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	430a      	orrs	r2, r1
 8108e94:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	681b      	ldr	r3, [r3, #0]
 8108e9a:	22ff      	movs	r2, #255	@ 0xff
 8108e9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8108e9e:	e001      	b.n	8108ea4 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8108ea0:	2300      	movs	r3, #0
 8108ea2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8108ea4:	7bfb      	ldrb	r3, [r7, #15]
 8108ea6:	2b00      	cmp	r3, #0
 8108ea8:	d103      	bne.n	8108eb2 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	2201      	movs	r2, #1
 8108eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8108eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8108eb4:	4618      	mov	r0, r3
 8108eb6:	3710      	adds	r7, #16
 8108eb8:	46bd      	mov	sp, r7
 8108eba:	bd80      	pop	{r7, pc}

08108ebc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8108ebc:	b580      	push	{r7, lr}
 8108ebe:	b084      	sub	sp, #16
 8108ec0:	af00      	add	r7, sp, #0
 8108ec2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	681b      	ldr	r3, [r3, #0]
 8108ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8108f00 <HAL_RTC_WaitForSynchro+0x44>)
 8108eca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8108ecc:	f7f9 fe60 	bl	8102b90 <HAL_GetTick>
 8108ed0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108ed2:	e009      	b.n	8108ee8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8108ed4:	f7f9 fe5c 	bl	8102b90 <HAL_GetTick>
 8108ed8:	4602      	mov	r2, r0
 8108eda:	68fb      	ldr	r3, [r7, #12]
 8108edc:	1ad3      	subs	r3, r2, r3
 8108ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108ee2:	d901      	bls.n	8108ee8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8108ee4:	2303      	movs	r3, #3
 8108ee6:	e007      	b.n	8108ef8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	68db      	ldr	r3, [r3, #12]
 8108eee:	f003 0320 	and.w	r3, r3, #32
 8108ef2:	2b00      	cmp	r3, #0
 8108ef4:	d0ee      	beq.n	8108ed4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8108ef6:	2300      	movs	r3, #0
}
 8108ef8:	4618      	mov	r0, r3
 8108efa:	3710      	adds	r7, #16
 8108efc:	46bd      	mov	sp, r7
 8108efe:	bd80      	pop	{r7, pc}
 8108f00:	0003ff5f 	.word	0x0003ff5f

08108f04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8108f04:	b580      	push	{r7, lr}
 8108f06:	b084      	sub	sp, #16
 8108f08:	af00      	add	r7, sp, #0
 8108f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108f0c:	2300      	movs	r3, #0
 8108f0e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108f10:	687b      	ldr	r3, [r7, #4]
 8108f12:	681b      	ldr	r3, [r3, #0]
 8108f14:	68db      	ldr	r3, [r3, #12]
 8108f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108f1a:	2b00      	cmp	r3, #0
 8108f1c:	d120      	bne.n	8108f60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	681b      	ldr	r3, [r3, #0]
 8108f22:	f04f 32ff 	mov.w	r2, #4294967295
 8108f26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8108f28:	f7f9 fe32 	bl	8102b90 <HAL_GetTick>
 8108f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8108f2e:	e00d      	b.n	8108f4c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8108f30:	f7f9 fe2e 	bl	8102b90 <HAL_GetTick>
 8108f34:	4602      	mov	r2, r0
 8108f36:	68bb      	ldr	r3, [r7, #8]
 8108f38:	1ad3      	subs	r3, r2, r3
 8108f3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108f3e:	d905      	bls.n	8108f4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8108f40:	2303      	movs	r3, #3
 8108f42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	2203      	movs	r2, #3
 8108f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	681b      	ldr	r3, [r3, #0]
 8108f50:	68db      	ldr	r3, [r3, #12]
 8108f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108f56:	2b00      	cmp	r3, #0
 8108f58:	d102      	bne.n	8108f60 <RTC_EnterInitMode+0x5c>
 8108f5a:	7bfb      	ldrb	r3, [r7, #15]
 8108f5c:	2b03      	cmp	r3, #3
 8108f5e:	d1e7      	bne.n	8108f30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8108f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8108f62:	4618      	mov	r0, r3
 8108f64:	3710      	adds	r7, #16
 8108f66:	46bd      	mov	sp, r7
 8108f68:	bd80      	pop	{r7, pc}
	...

08108f6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8108f6c:	b580      	push	{r7, lr}
 8108f6e:	b084      	sub	sp, #16
 8108f70:	af00      	add	r7, sp, #0
 8108f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108f74:	2300      	movs	r3, #0
 8108f76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8108f78:	4b1a      	ldr	r3, [pc, #104]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108f7a:	68db      	ldr	r3, [r3, #12]
 8108f7c:	4a19      	ldr	r2, [pc, #100]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108f82:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8108f84:	4b17      	ldr	r3, [pc, #92]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108f86:	689b      	ldr	r3, [r3, #8]
 8108f88:	f003 0320 	and.w	r3, r3, #32
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	d10c      	bne.n	8108faa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8108f90:	6878      	ldr	r0, [r7, #4]
 8108f92:	f7ff ff93 	bl	8108ebc <HAL_RTC_WaitForSynchro>
 8108f96:	4603      	mov	r3, r0
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d01e      	beq.n	8108fda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	2203      	movs	r2, #3
 8108fa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8108fa4:	2303      	movs	r3, #3
 8108fa6:	73fb      	strb	r3, [r7, #15]
 8108fa8:	e017      	b.n	8108fda <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8108faa:	4b0e      	ldr	r3, [pc, #56]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108fac:	689b      	ldr	r3, [r3, #8]
 8108fae:	4a0d      	ldr	r2, [pc, #52]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108fb0:	f023 0320 	bic.w	r3, r3, #32
 8108fb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8108fb6:	6878      	ldr	r0, [r7, #4]
 8108fb8:	f7ff ff80 	bl	8108ebc <HAL_RTC_WaitForSynchro>
 8108fbc:	4603      	mov	r3, r0
 8108fbe:	2b00      	cmp	r3, #0
 8108fc0:	d005      	beq.n	8108fce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	2203      	movs	r2, #3
 8108fc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8108fca:	2303      	movs	r3, #3
 8108fcc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8108fce:	4b05      	ldr	r3, [pc, #20]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108fd0:	689b      	ldr	r3, [r3, #8]
 8108fd2:	4a04      	ldr	r2, [pc, #16]	@ (8108fe4 <RTC_ExitInitMode+0x78>)
 8108fd4:	f043 0320 	orr.w	r3, r3, #32
 8108fd8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8108fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8108fdc:	4618      	mov	r0, r3
 8108fde:	3710      	adds	r7, #16
 8108fe0:	46bd      	mov	sp, r7
 8108fe2:	bd80      	pop	{r7, pc}
 8108fe4:	58004000 	.word	0x58004000

08108fe8 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8108fe8:	b480      	push	{r7}
 8108fea:	b085      	sub	sp, #20
 8108fec:	af00      	add	r7, sp, #0
 8108fee:	6078      	str	r0, [r7, #4]
 8108ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8108ff8:	2b01      	cmp	r3, #1
 8108ffa:	d101      	bne.n	8109000 <HAL_RTCEx_SetTamper+0x18>
 8108ffc:	2302      	movs	r3, #2
 8108ffe:	e0cc      	b.n	810919a <HAL_RTCEx_SetTamper+0x1b2>
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	2201      	movs	r2, #1
 8109004:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	2202      	movs	r2, #2
 810900c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8109010:	687b      	ldr	r3, [r7, #4]
 8109012:	681b      	ldr	r3, [r3, #0]
 8109014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109016:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8109018:	683b      	ldr	r3, [r7, #0]
 810901a:	681b      	ldr	r3, [r3, #0]
 810901c:	68fa      	ldr	r2, [r7, #12]
 810901e:	4313      	orrs	r3, r2
 8109020:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8109022:	683b      	ldr	r3, [r7, #0]
 8109024:	689b      	ldr	r3, [r3, #8]
 8109026:	2b08      	cmp	r3, #8
 8109028:	d003      	beq.n	8109032 <HAL_RTCEx_SetTamper+0x4a>
 810902a:	683b      	ldr	r3, [r7, #0]
 810902c:	689b      	ldr	r3, [r3, #8]
 810902e:	2b02      	cmp	r3, #2
 8109030:	d106      	bne.n	8109040 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8109032:	683b      	ldr	r3, [r7, #0]
 8109034:	681b      	ldr	r3, [r3, #0]
 8109036:	005b      	lsls	r3, r3, #1
 8109038:	68fa      	ldr	r2, [r7, #12]
 810903a:	4313      	orrs	r3, r2
 810903c:	60fb      	str	r3, [r7, #12]
 810903e:	e006      	b.n	810904e <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8109040:	683b      	ldr	r3, [r7, #0]
 8109042:	681b      	ldr	r3, [r3, #0]
 8109044:	005b      	lsls	r3, r3, #1
 8109046:	43db      	mvns	r3, r3
 8109048:	68fa      	ldr	r2, [r7, #12]
 810904a:	4013      	ands	r3, r2
 810904c:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 810904e:	683b      	ldr	r3, [r7, #0]
 8109050:	68db      	ldr	r3, [r3, #12]
 8109052:	2b00      	cmp	r3, #0
 8109054:	d01e      	beq.n	8109094 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8109056:	683b      	ldr	r3, [r7, #0]
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	f003 0301 	and.w	r3, r3, #1
 810905e:	2b00      	cmp	r3, #0
 8109060:	d003      	beq.n	810906a <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8109062:	68fb      	ldr	r3, [r7, #12]
 8109064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109068:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810906a:	683b      	ldr	r3, [r7, #0]
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	f003 0308 	and.w	r3, r3, #8
 8109072:	2b00      	cmp	r3, #0
 8109074:	d003      	beq.n	810907e <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8109076:	68fb      	ldr	r3, [r7, #12]
 8109078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810907c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810907e:	683b      	ldr	r3, [r7, #0]
 8109080:	681b      	ldr	r3, [r3, #0]
 8109082:	f003 0320 	and.w	r3, r3, #32
 8109086:	2b00      	cmp	r3, #0
 8109088:	d022      	beq.n	81090d0 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 810908a:	68fb      	ldr	r3, [r7, #12]
 810908c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8109090:	60fb      	str	r3, [r7, #12]
 8109092:	e01d      	b.n	81090d0 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8109094:	683b      	ldr	r3, [r7, #0]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	f003 0301 	and.w	r3, r3, #1
 810909c:	2b00      	cmp	r3, #0
 810909e:	d003      	beq.n	81090a8 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 81090a0:	68fb      	ldr	r3, [r7, #12]
 81090a2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 81090a6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81090a8:	683b      	ldr	r3, [r7, #0]
 81090aa:	681b      	ldr	r3, [r3, #0]
 81090ac:	f003 0308 	and.w	r3, r3, #8
 81090b0:	2b00      	cmp	r3, #0
 81090b2:	d003      	beq.n	81090bc <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 81090b4:	68fb      	ldr	r3, [r7, #12]
 81090b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81090ba:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81090bc:	683b      	ldr	r3, [r7, #0]
 81090be:	681b      	ldr	r3, [r3, #0]
 81090c0:	f003 0320 	and.w	r3, r3, #32
 81090c4:	2b00      	cmp	r3, #0
 81090c6:	d003      	beq.n	81090d0 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 81090c8:	68fb      	ldr	r3, [r7, #12]
 81090ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 81090ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 81090d0:	683b      	ldr	r3, [r7, #0]
 81090d2:	691b      	ldr	r3, [r3, #16]
 81090d4:	2b00      	cmp	r3, #0
 81090d6:	d01e      	beq.n	8109116 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81090d8:	683b      	ldr	r3, [r7, #0]
 81090da:	681b      	ldr	r3, [r3, #0]
 81090dc:	f003 0301 	and.w	r3, r3, #1
 81090e0:	2b00      	cmp	r3, #0
 81090e2:	d003      	beq.n	81090ec <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 81090e4:	68fb      	ldr	r3, [r7, #12]
 81090e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81090ea:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81090ec:	683b      	ldr	r3, [r7, #0]
 81090ee:	681b      	ldr	r3, [r3, #0]
 81090f0:	f003 0308 	and.w	r3, r3, #8
 81090f4:	2b00      	cmp	r3, #0
 81090f6:	d003      	beq.n	8109100 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 81090f8:	68fb      	ldr	r3, [r7, #12]
 81090fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81090fe:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8109100:	683b      	ldr	r3, [r7, #0]
 8109102:	681b      	ldr	r3, [r3, #0]
 8109104:	f003 0320 	and.w	r3, r3, #32
 8109108:	2b00      	cmp	r3, #0
 810910a:	d022      	beq.n	8109152 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 810910c:	68fb      	ldr	r3, [r7, #12]
 810910e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8109112:	60fb      	str	r3, [r7, #12]
 8109114:	e01d      	b.n	8109152 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8109116:	683b      	ldr	r3, [r7, #0]
 8109118:	681b      	ldr	r3, [r3, #0]
 810911a:	f003 0301 	and.w	r3, r3, #1
 810911e:	2b00      	cmp	r3, #0
 8109120:	d003      	beq.n	810912a <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8109122:	68fb      	ldr	r3, [r7, #12]
 8109124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8109128:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810912a:	683b      	ldr	r3, [r7, #0]
 810912c:	681b      	ldr	r3, [r3, #0]
 810912e:	f003 0308 	and.w	r3, r3, #8
 8109132:	2b00      	cmp	r3, #0
 8109134:	d003      	beq.n	810913e <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8109136:	68fb      	ldr	r3, [r7, #12]
 8109138:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810913c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810913e:	683b      	ldr	r3, [r7, #0]
 8109140:	681b      	ldr	r3, [r3, #0]
 8109142:	f003 0320 	and.w	r3, r3, #32
 8109146:	2b00      	cmp	r3, #0
 8109148:	d003      	beq.n	8109152 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 810914a:	68fb      	ldr	r3, [r7, #12]
 810914c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109150:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8109152:	68fb      	ldr	r3, [r7, #12]
 8109154:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8109158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810915c:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810915e:	683b      	ldr	r3, [r7, #0]
 8109160:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8109162:	683b      	ldr	r3, [r7, #0]
 8109164:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8109166:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8109168:	683b      	ldr	r3, [r7, #0]
 810916a:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 810916c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810916e:	683b      	ldr	r3, [r7, #0]
 8109170:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8109172:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8109174:	683b      	ldr	r3, [r7, #0]
 8109176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8109178:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810917a:	68fa      	ldr	r2, [r7, #12]
 810917c:	4313      	orrs	r3, r2
 810917e:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	681b      	ldr	r3, [r3, #0]
 8109184:	68fa      	ldr	r2, [r7, #12]
 8109186:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8109188:	687b      	ldr	r3, [r7, #4]
 810918a:	2201      	movs	r2, #1
 810918c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	2200      	movs	r2, #0
 8109194:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8109198:	2300      	movs	r3, #0
}
 810919a:	4618      	mov	r0, r3
 810919c:	3714      	adds	r7, #20
 810919e:	46bd      	mov	sp, r7
 81091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a4:	4770      	bx	lr
	...

081091a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81091a8:	b580      	push	{r7, lr}
 81091aa:	b08a      	sub	sp, #40	@ 0x28
 81091ac:	af00      	add	r7, sp, #0
 81091ae:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	2b00      	cmp	r3, #0
 81091b4:	d101      	bne.n	81091ba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81091b6:	2301      	movs	r3, #1
 81091b8:	e290      	b.n	81096dc <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81091ba:	f7f9 fd19 	bl	8102bf0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81091c4:	2b01      	cmp	r3, #1
 81091c6:	d113      	bne.n	81091f0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	681b      	ldr	r3, [r3, #0]
 81091cc:	4a96      	ldr	r2, [pc, #600]	@ (8109428 <HAL_SAI_Init+0x280>)
 81091ce:	4293      	cmp	r3, r2
 81091d0:	d004      	beq.n	81091dc <HAL_SAI_Init+0x34>
 81091d2:	687b      	ldr	r3, [r7, #4]
 81091d4:	681b      	ldr	r3, [r3, #0]
 81091d6:	4a95      	ldr	r2, [pc, #596]	@ (810942c <HAL_SAI_Init+0x284>)
 81091d8:	4293      	cmp	r3, r2
 81091da:	d107      	bne.n	81091ec <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81091e0:	2b01      	cmp	r3, #1
 81091e2:	d103      	bne.n	81091ec <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81091e8:	2b00      	cmp	r3, #0
 81091ea:	d001      	beq.n	81091f0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81091ec:	2301      	movs	r3, #1
 81091ee:	e275      	b.n	81096dc <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	681b      	ldr	r3, [r3, #0]
 81091f4:	4a8c      	ldr	r2, [pc, #560]	@ (8109428 <HAL_SAI_Init+0x280>)
 81091f6:	4293      	cmp	r3, r2
 81091f8:	d004      	beq.n	8109204 <HAL_SAI_Init+0x5c>
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	681b      	ldr	r3, [r3, #0]
 81091fe:	4a8c      	ldr	r2, [pc, #560]	@ (8109430 <HAL_SAI_Init+0x288>)
 8109200:	4293      	cmp	r3, r2
 8109202:	d102      	bne.n	810920a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8109204:	4b8b      	ldr	r3, [pc, #556]	@ (8109434 <HAL_SAI_Init+0x28c>)
 8109206:	61bb      	str	r3, [r7, #24]
 8109208:	e028      	b.n	810925c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	681b      	ldr	r3, [r3, #0]
 810920e:	4a8a      	ldr	r2, [pc, #552]	@ (8109438 <HAL_SAI_Init+0x290>)
 8109210:	4293      	cmp	r3, r2
 8109212:	d004      	beq.n	810921e <HAL_SAI_Init+0x76>
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	4a88      	ldr	r2, [pc, #544]	@ (810943c <HAL_SAI_Init+0x294>)
 810921a:	4293      	cmp	r3, r2
 810921c:	d102      	bne.n	8109224 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810921e:	4b88      	ldr	r3, [pc, #544]	@ (8109440 <HAL_SAI_Init+0x298>)
 8109220:	61bb      	str	r3, [r7, #24]
 8109222:	e01b      	b.n	810925c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	681b      	ldr	r3, [r3, #0]
 8109228:	4a86      	ldr	r2, [pc, #536]	@ (8109444 <HAL_SAI_Init+0x29c>)
 810922a:	4293      	cmp	r3, r2
 810922c:	d004      	beq.n	8109238 <HAL_SAI_Init+0x90>
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	4a85      	ldr	r2, [pc, #532]	@ (8109448 <HAL_SAI_Init+0x2a0>)
 8109234:	4293      	cmp	r3, r2
 8109236:	d102      	bne.n	810923e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8109238:	4b84      	ldr	r3, [pc, #528]	@ (810944c <HAL_SAI_Init+0x2a4>)
 810923a:	61bb      	str	r3, [r7, #24]
 810923c:	e00e      	b.n	810925c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	4a7a      	ldr	r2, [pc, #488]	@ (810942c <HAL_SAI_Init+0x284>)
 8109244:	4293      	cmp	r3, r2
 8109246:	d004      	beq.n	8109252 <HAL_SAI_Init+0xaa>
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	681b      	ldr	r3, [r3, #0]
 810924c:	4a80      	ldr	r2, [pc, #512]	@ (8109450 <HAL_SAI_Init+0x2a8>)
 810924e:	4293      	cmp	r3, r2
 8109250:	d102      	bne.n	8109258 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8109252:	4b80      	ldr	r3, [pc, #512]	@ (8109454 <HAL_SAI_Init+0x2ac>)
 8109254:	61bb      	str	r3, [r7, #24]
 8109256:	e001      	b.n	810925c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8109258:	2301      	movs	r3, #1
 810925a:	e23f      	b.n	81096dc <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8109262:	b2db      	uxtb	r3, r3
 8109264:	2b00      	cmp	r3, #0
 8109266:	d106      	bne.n	8109276 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	2200      	movs	r2, #0
 810926c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8109270:	6878      	ldr	r0, [r7, #4]
 8109272:	f7f9 fa1d 	bl	81026b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8109276:	6878      	ldr	r0, [r7, #4]
 8109278:	f000 fa40 	bl	81096fc <SAI_Disable>
 810927c:	4603      	mov	r3, r0
 810927e:	2b00      	cmp	r3, #0
 8109280:	d001      	beq.n	8109286 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8109282:	2301      	movs	r3, #1
 8109284:	e22a      	b.n	81096dc <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	2202      	movs	r2, #2
 810928a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	68db      	ldr	r3, [r3, #12]
 8109292:	2b02      	cmp	r3, #2
 8109294:	d00c      	beq.n	81092b0 <HAL_SAI_Init+0x108>
 8109296:	2b02      	cmp	r3, #2
 8109298:	d80d      	bhi.n	81092b6 <HAL_SAI_Init+0x10e>
 810929a:	2b00      	cmp	r3, #0
 810929c:	d002      	beq.n	81092a4 <HAL_SAI_Init+0xfc>
 810929e:	2b01      	cmp	r3, #1
 81092a0:	d003      	beq.n	81092aa <HAL_SAI_Init+0x102>
 81092a2:	e008      	b.n	81092b6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81092a4:	2300      	movs	r3, #0
 81092a6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81092a8:	e008      	b.n	81092bc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81092aa:	2310      	movs	r3, #16
 81092ac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81092ae:	e005      	b.n	81092bc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81092b0:	2320      	movs	r3, #32
 81092b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81092b4:	e002      	b.n	81092bc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81092b6:	2300      	movs	r3, #0
 81092b8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81092ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	689b      	ldr	r3, [r3, #8]
 81092c0:	2b05      	cmp	r3, #5
 81092c2:	d832      	bhi.n	810932a <HAL_SAI_Init+0x182>
 81092c4:	a201      	add	r2, pc, #4	@ (adr r2, 81092cc <HAL_SAI_Init+0x124>)
 81092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81092ca:	bf00      	nop
 81092cc:	081092e5 	.word	0x081092e5
 81092d0:	081092eb 	.word	0x081092eb
 81092d4:	081092f3 	.word	0x081092f3
 81092d8:	081092fb 	.word	0x081092fb
 81092dc:	0810930b 	.word	0x0810930b
 81092e0:	0810931b 	.word	0x0810931b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81092e4:	2300      	movs	r3, #0
 81092e6:	61fb      	str	r3, [r7, #28]
      break;
 81092e8:	e022      	b.n	8109330 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81092ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81092ee:	61fb      	str	r3, [r7, #28]
      break;
 81092f0:	e01e      	b.n	8109330 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81092f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81092f6:	61fb      	str	r3, [r7, #28]
      break;
 81092f8:	e01a      	b.n	8109330 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81092fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81092fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8109300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109302:	f043 0301 	orr.w	r3, r3, #1
 8109306:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109308:	e012      	b.n	8109330 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810930a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810930e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8109310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109312:	f043 0302 	orr.w	r3, r3, #2
 8109316:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109318:	e00a      	b.n	8109330 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810931a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810931e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8109320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109322:	f043 0303 	orr.w	r3, r3, #3
 8109326:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8109328:	e002      	b.n	8109330 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 810932a:	2300      	movs	r3, #0
 810932c:	61fb      	str	r3, [r7, #28]
      break;
 810932e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8109330:	69bb      	ldr	r3, [r7, #24]
 8109332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109334:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8109336:	687b      	ldr	r3, [r7, #4]
 8109338:	6a1b      	ldr	r3, [r3, #32]
 810933a:	2b00      	cmp	r3, #0
 810933c:	f000 80c5 	beq.w	81094ca <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8109340:	2300      	movs	r3, #0
 8109342:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	681b      	ldr	r3, [r3, #0]
 8109348:	4a37      	ldr	r2, [pc, #220]	@ (8109428 <HAL_SAI_Init+0x280>)
 810934a:	4293      	cmp	r3, r2
 810934c:	d004      	beq.n	8109358 <HAL_SAI_Init+0x1b0>
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	681b      	ldr	r3, [r3, #0]
 8109352:	4a37      	ldr	r2, [pc, #220]	@ (8109430 <HAL_SAI_Init+0x288>)
 8109354:	4293      	cmp	r3, r2
 8109356:	d106      	bne.n	8109366 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8109358:	f44f 7080 	mov.w	r0, #256	@ 0x100
 810935c:	f04f 0100 	mov.w	r1, #0
 8109360:	f7fe fa36 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8109364:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8109366:	687b      	ldr	r3, [r7, #4]
 8109368:	681b      	ldr	r3, [r3, #0]
 810936a:	4a33      	ldr	r2, [pc, #204]	@ (8109438 <HAL_SAI_Init+0x290>)
 810936c:	4293      	cmp	r3, r2
 810936e:	d004      	beq.n	810937a <HAL_SAI_Init+0x1d2>
 8109370:	687b      	ldr	r3, [r7, #4]
 8109372:	681b      	ldr	r3, [r3, #0]
 8109374:	4a31      	ldr	r2, [pc, #196]	@ (810943c <HAL_SAI_Init+0x294>)
 8109376:	4293      	cmp	r3, r2
 8109378:	d106      	bne.n	8109388 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810937a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 810937e:	f04f 0100 	mov.w	r1, #0
 8109382:	f7fe fa25 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8109386:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	4a2d      	ldr	r2, [pc, #180]	@ (8109444 <HAL_SAI_Init+0x29c>)
 810938e:	4293      	cmp	r3, r2
 8109390:	d004      	beq.n	810939c <HAL_SAI_Init+0x1f4>
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	681b      	ldr	r3, [r3, #0]
 8109396:	4a2c      	ldr	r2, [pc, #176]	@ (8109448 <HAL_SAI_Init+0x2a0>)
 8109398:	4293      	cmp	r3, r2
 810939a:	d106      	bne.n	81093aa <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 810939c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81093a0:	f04f 0100 	mov.w	r1, #0
 81093a4:	f7fe fa14 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 81093a8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	681b      	ldr	r3, [r3, #0]
 81093ae:	4a1f      	ldr	r2, [pc, #124]	@ (810942c <HAL_SAI_Init+0x284>)
 81093b0:	4293      	cmp	r3, r2
 81093b2:	d106      	bne.n	81093c2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81093b4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81093b8:	f04f 0100 	mov.w	r1, #0
 81093bc:	f7fe fa08 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 81093c0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	681b      	ldr	r3, [r3, #0]
 81093c6:	4a22      	ldr	r2, [pc, #136]	@ (8109450 <HAL_SAI_Init+0x2a8>)
 81093c8:	4293      	cmp	r3, r2
 81093ca:	d106      	bne.n	81093da <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81093cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 81093d0:	f04f 0100 	mov.w	r1, #0
 81093d4:	f7fe f9fc 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 81093d8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	699b      	ldr	r3, [r3, #24]
 81093de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81093e2:	d139      	bne.n	8109458 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81093e8:	2b04      	cmp	r3, #4
 81093ea:	d102      	bne.n	81093f2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81093ec:	2340      	movs	r3, #64	@ 0x40
 81093ee:	60fb      	str	r3, [r7, #12]
 81093f0:	e00a      	b.n	8109408 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81093f6:	2b08      	cmp	r3, #8
 81093f8:	d103      	bne.n	8109402 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 81093fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81093fe:	60fb      	str	r3, [r7, #12]
 8109400:	e002      	b.n	8109408 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109406:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8109408:	697a      	ldr	r2, [r7, #20]
 810940a:	4613      	mov	r3, r2
 810940c:	009b      	lsls	r3, r3, #2
 810940e:	4413      	add	r3, r2
 8109410:	005b      	lsls	r3, r3, #1
 8109412:	4619      	mov	r1, r3
 8109414:	687b      	ldr	r3, [r7, #4]
 8109416:	6a1b      	ldr	r3, [r3, #32]
 8109418:	68fa      	ldr	r2, [r7, #12]
 810941a:	fb02 f303 	mul.w	r3, r2, r3
 810941e:	fbb1 f3f3 	udiv	r3, r1, r3
 8109422:	613b      	str	r3, [r7, #16]
 8109424:	e030      	b.n	8109488 <HAL_SAI_Init+0x2e0>
 8109426:	bf00      	nop
 8109428:	40015804 	.word	0x40015804
 810942c:	58005404 	.word	0x58005404
 8109430:	40015824 	.word	0x40015824
 8109434:	40015800 	.word	0x40015800
 8109438:	40015c04 	.word	0x40015c04
 810943c:	40015c24 	.word	0x40015c24
 8109440:	40015c00 	.word	0x40015c00
 8109444:	40016004 	.word	0x40016004
 8109448:	40016024 	.word	0x40016024
 810944c:	40016000 	.word	0x40016000
 8109450:	58005424 	.word	0x58005424
 8109454:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810945c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109460:	d101      	bne.n	8109466 <HAL_SAI_Init+0x2be>
 8109462:	2302      	movs	r3, #2
 8109464:	e000      	b.n	8109468 <HAL_SAI_Init+0x2c0>
 8109466:	2301      	movs	r3, #1
 8109468:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810946a:	697a      	ldr	r2, [r7, #20]
 810946c:	4613      	mov	r3, r2
 810946e:	009b      	lsls	r3, r3, #2
 8109470:	4413      	add	r3, r2
 8109472:	005b      	lsls	r3, r3, #1
 8109474:	4619      	mov	r1, r3
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	6a1b      	ldr	r3, [r3, #32]
 810947a:	68ba      	ldr	r2, [r7, #8]
 810947c:	fb02 f303 	mul.w	r3, r2, r3
 8109480:	021b      	lsls	r3, r3, #8
 8109482:	fbb1 f3f3 	udiv	r3, r1, r3
 8109486:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8109488:	693b      	ldr	r3, [r7, #16]
 810948a:	4a96      	ldr	r2, [pc, #600]	@ (81096e4 <HAL_SAI_Init+0x53c>)
 810948c:	fba2 2303 	umull	r2, r3, r2, r3
 8109490:	08da      	lsrs	r2, r3, #3
 8109492:	687b      	ldr	r3, [r7, #4]
 8109494:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8109496:	6939      	ldr	r1, [r7, #16]
 8109498:	4b92      	ldr	r3, [pc, #584]	@ (81096e4 <HAL_SAI_Init+0x53c>)
 810949a:	fba3 2301 	umull	r2, r3, r3, r1
 810949e:	08da      	lsrs	r2, r3, #3
 81094a0:	4613      	mov	r3, r2
 81094a2:	009b      	lsls	r3, r3, #2
 81094a4:	4413      	add	r3, r2
 81094a6:	005b      	lsls	r3, r3, #1
 81094a8:	1aca      	subs	r2, r1, r3
 81094aa:	2a08      	cmp	r2, #8
 81094ac:	d904      	bls.n	81094b8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81094b2:	1c5a      	adds	r2, r3, #1
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81094b8:	687b      	ldr	r3, [r7, #4]
 81094ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81094bc:	2b04      	cmp	r3, #4
 81094be:	d104      	bne.n	81094ca <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81094c0:	687b      	ldr	r3, [r7, #4]
 81094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81094c4:	085a      	lsrs	r2, r3, #1
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81094ca:	687b      	ldr	r3, [r7, #4]
 81094cc:	685b      	ldr	r3, [r3, #4]
 81094ce:	2b00      	cmp	r3, #0
 81094d0:	d003      	beq.n	81094da <HAL_SAI_Init+0x332>
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	685b      	ldr	r3, [r3, #4]
 81094d6:	2b02      	cmp	r3, #2
 81094d8:	d109      	bne.n	81094ee <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81094de:	2b01      	cmp	r3, #1
 81094e0:	d101      	bne.n	81094e6 <HAL_SAI_Init+0x33e>
 81094e2:	2300      	movs	r3, #0
 81094e4:	e001      	b.n	81094ea <HAL_SAI_Init+0x342>
 81094e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81094ea:	623b      	str	r3, [r7, #32]
 81094ec:	e008      	b.n	8109500 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81094ee:	687b      	ldr	r3, [r7, #4]
 81094f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81094f2:	2b01      	cmp	r3, #1
 81094f4:	d102      	bne.n	81094fc <HAL_SAI_Init+0x354>
 81094f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81094fa:	e000      	b.n	81094fe <HAL_SAI_Init+0x356>
 81094fc:	2300      	movs	r3, #0
 81094fe:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8109500:	f7f9 fb76 	bl	8102bf0 <HAL_GetREVID>
 8109504:	4603      	mov	r3, r0
 8109506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810950a:	d331      	bcc.n	8109570 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	681b      	ldr	r3, [r3, #0]
 8109510:	6819      	ldr	r1, [r3, #0]
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	681a      	ldr	r2, [r3, #0]
 8109516:	4b74      	ldr	r3, [pc, #464]	@ (81096e8 <HAL_SAI_Init+0x540>)
 8109518:	400b      	ands	r3, r1
 810951a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	681b      	ldr	r3, [r3, #0]
 8109520:	6819      	ldr	r1, [r3, #0]
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	685a      	ldr	r2, [r3, #4]
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810952a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109530:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109536:	431a      	orrs	r2, r3
 8109538:	6a3b      	ldr	r3, [r7, #32]
 810953a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810953c:	69fb      	ldr	r3, [r7, #28]
 810953e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8109544:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	695b      	ldr	r3, [r3, #20]
 810954a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810954c:	687b      	ldr	r3, [r7, #4]
 810954e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109550:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109556:	051b      	lsls	r3, r3, #20
 8109558:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810955e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8109560:	687b      	ldr	r3, [r7, #4]
 8109562:	691b      	ldr	r3, [r3, #16]
 8109564:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	681b      	ldr	r3, [r3, #0]
 810956a:	430a      	orrs	r2, r1
 810956c:	601a      	str	r2, [r3, #0]
 810956e:	e02d      	b.n	81095cc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	6819      	ldr	r1, [r3, #0]
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	681a      	ldr	r2, [r3, #0]
 810957a:	4b5c      	ldr	r3, [pc, #368]	@ (81096ec <HAL_SAI_Init+0x544>)
 810957c:	400b      	ands	r3, r1
 810957e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	681b      	ldr	r3, [r3, #0]
 8109584:	6819      	ldr	r1, [r3, #0]
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	685a      	ldr	r2, [r3, #4]
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810958e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109594:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810959a:	431a      	orrs	r2, r3
 810959c:	6a3b      	ldr	r3, [r7, #32]
 810959e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81095a0:	69fb      	ldr	r3, [r7, #28]
 81095a2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81095a8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095aa:	687b      	ldr	r3, [r7, #4]
 81095ac:	695b      	ldr	r3, [r3, #20]
 81095ae:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095b4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095b6:	687b      	ldr	r3, [r7, #4]
 81095b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81095ba:	051b      	lsls	r3, r3, #20
 81095bc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095c2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	681b      	ldr	r3, [r3, #0]
 81095c8:	430a      	orrs	r2, r1
 81095ca:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	681b      	ldr	r3, [r3, #0]
 81095d0:	685b      	ldr	r3, [r3, #4]
 81095d2:	687a      	ldr	r2, [r7, #4]
 81095d4:	6812      	ldr	r2, [r2, #0]
 81095d6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 81095da:	f023 030f 	bic.w	r3, r3, #15
 81095de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	681b      	ldr	r3, [r3, #0]
 81095e4:	6859      	ldr	r1, [r3, #4]
 81095e6:	687b      	ldr	r3, [r7, #4]
 81095e8:	69da      	ldr	r2, [r3, #28]
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81095ee:	431a      	orrs	r2, r3
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81095f4:	431a      	orrs	r2, r3
 81095f6:	687b      	ldr	r3, [r7, #4]
 81095f8:	681b      	ldr	r3, [r3, #0]
 81095fa:	430a      	orrs	r2, r1
 81095fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	6899      	ldr	r1, [r3, #8]
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	681a      	ldr	r2, [r3, #0]
 8109608:	4b39      	ldr	r3, [pc, #228]	@ (81096f0 <HAL_SAI_Init+0x548>)
 810960a:	400b      	ands	r3, r1
 810960c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810960e:	687b      	ldr	r3, [r7, #4]
 8109610:	681b      	ldr	r3, [r3, #0]
 8109612:	6899      	ldr	r1, [r3, #8]
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109618:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810961a:	687b      	ldr	r3, [r7, #4]
 810961c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810961e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8109624:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 810962a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109630:	3b01      	subs	r3, #1
 8109632:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8109634:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	681b      	ldr	r3, [r3, #0]
 810963a:	430a      	orrs	r2, r1
 810963c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	681b      	ldr	r3, [r3, #0]
 8109642:	68d9      	ldr	r1, [r3, #12]
 8109644:	687b      	ldr	r3, [r7, #4]
 8109646:	681a      	ldr	r2, [r3, #0]
 8109648:	f24f 0320 	movw	r3, #61472	@ 0xf020
 810964c:	400b      	ands	r3, r1
 810964e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	681b      	ldr	r3, [r3, #0]
 8109654:	68d9      	ldr	r1, [r3, #12]
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810965a:	687b      	ldr	r3, [r7, #4]
 810965c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810965e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109664:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8109666:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810966c:	3b01      	subs	r3, #1
 810966e:	021b      	lsls	r3, r3, #8
 8109670:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8109672:	687b      	ldr	r3, [r7, #4]
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	430a      	orrs	r2, r1
 8109678:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	4a1d      	ldr	r2, [pc, #116]	@ (81096f4 <HAL_SAI_Init+0x54c>)
 8109680:	4293      	cmp	r3, r2
 8109682:	d004      	beq.n	810968e <HAL_SAI_Init+0x4e6>
 8109684:	687b      	ldr	r3, [r7, #4]
 8109686:	681b      	ldr	r3, [r3, #0]
 8109688:	4a1b      	ldr	r2, [pc, #108]	@ (81096f8 <HAL_SAI_Init+0x550>)
 810968a:	4293      	cmp	r3, r2
 810968c:	d119      	bne.n	81096c2 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810968e:	69bb      	ldr	r3, [r7, #24]
 8109690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109692:	f023 0201 	bic.w	r2, r3, #1
 8109696:	69bb      	ldr	r3, [r7, #24]
 8109698:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81096a0:	2b01      	cmp	r3, #1
 81096a2:	d10e      	bne.n	81096c2 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81096ac:	3b01      	subs	r3, #1
 81096ae:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81096b0:	431a      	orrs	r2, r3
 81096b2:	69bb      	ldr	r3, [r7, #24]
 81096b4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81096b6:	69bb      	ldr	r3, [r7, #24]
 81096b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81096ba:	f043 0201 	orr.w	r2, r3, #1
 81096be:	69bb      	ldr	r3, [r7, #24]
 81096c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	2200      	movs	r2, #0
 81096c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	2201      	movs	r2, #1
 81096ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	2200      	movs	r2, #0
 81096d6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 81096da:	2300      	movs	r3, #0
}
 81096dc:	4618      	mov	r0, r3
 81096de:	3728      	adds	r7, #40	@ 0x28
 81096e0:	46bd      	mov	sp, r7
 81096e2:	bd80      	pop	{r7, pc}
 81096e4:	cccccccd 	.word	0xcccccccd
 81096e8:	f005c010 	.word	0xf005c010
 81096ec:	f805c010 	.word	0xf805c010
 81096f0:	fff88000 	.word	0xfff88000
 81096f4:	40015804 	.word	0x40015804
 81096f8:	58005404 	.word	0x58005404

081096fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81096fc:	b480      	push	{r7}
 81096fe:	b085      	sub	sp, #20
 8109700:	af00      	add	r7, sp, #0
 8109702:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8109704:	4b18      	ldr	r3, [pc, #96]	@ (8109768 <SAI_Disable+0x6c>)
 8109706:	681b      	ldr	r3, [r3, #0]
 8109708:	4a18      	ldr	r2, [pc, #96]	@ (810976c <SAI_Disable+0x70>)
 810970a:	fba2 2303 	umull	r2, r3, r2, r3
 810970e:	0b1b      	lsrs	r3, r3, #12
 8109710:	009b      	lsls	r3, r3, #2
 8109712:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8109714:	2300      	movs	r3, #0
 8109716:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	681a      	ldr	r2, [r3, #0]
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8109726:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8109728:	68fb      	ldr	r3, [r7, #12]
 810972a:	2b00      	cmp	r3, #0
 810972c:	d10a      	bne.n	8109744 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8109734:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810973e:	2303      	movs	r3, #3
 8109740:	72fb      	strb	r3, [r7, #11]
      break;
 8109742:	e009      	b.n	8109758 <SAI_Disable+0x5c>
    }
    count--;
 8109744:	68fb      	ldr	r3, [r7, #12]
 8109746:	3b01      	subs	r3, #1
 8109748:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	681b      	ldr	r3, [r3, #0]
 810974e:	681b      	ldr	r3, [r3, #0]
 8109750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109754:	2b00      	cmp	r3, #0
 8109756:	d1e7      	bne.n	8109728 <SAI_Disable+0x2c>

  return status;
 8109758:	7afb      	ldrb	r3, [r7, #11]
}
 810975a:	4618      	mov	r0, r3
 810975c:	3714      	adds	r7, #20
 810975e:	46bd      	mov	sp, r7
 8109760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109764:	4770      	bx	lr
 8109766:	bf00      	nop
 8109768:	10000000 	.word	0x10000000
 810976c:	95cbec1b 	.word	0x95cbec1b

08109770 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8109770:	b580      	push	{r7, lr}
 8109772:	b08a      	sub	sp, #40	@ 0x28
 8109774:	af00      	add	r7, sp, #0
 8109776:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8109778:	687b      	ldr	r3, [r7, #4]
 810977a:	2b00      	cmp	r3, #0
 810977c:	d101      	bne.n	8109782 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810977e:	2301      	movs	r3, #1
 8109780:	e075      	b.n	810986e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8109782:	687b      	ldr	r3, [r7, #4]
 8109784:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109788:	b2db      	uxtb	r3, r3
 810978a:	2b00      	cmp	r3, #0
 810978c:	d105      	bne.n	810979a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	2200      	movs	r2, #0
 8109792:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8109794:	6878      	ldr	r0, [r7, #4]
 8109796:	f7f8 f9f7 	bl	8101b88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	2204      	movs	r2, #4
 810979e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 81097a2:	6878      	ldr	r0, [r7, #4]
 81097a4:	f000 f868 	bl	8109878 <HAL_SD_InitCard>
 81097a8:	4603      	mov	r3, r0
 81097aa:	2b00      	cmp	r3, #0
 81097ac:	d001      	beq.n	81097b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 81097ae:	2301      	movs	r3, #1
 81097b0:	e05d      	b.n	810986e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 81097b2:	f107 0308 	add.w	r3, r7, #8
 81097b6:	4619      	mov	r1, r3
 81097b8:	6878      	ldr	r0, [r7, #4]
 81097ba:	f000 fa9d 	bl	8109cf8 <HAL_SD_GetCardStatus>
 81097be:	4603      	mov	r3, r0
 81097c0:	2b00      	cmp	r3, #0
 81097c2:	d001      	beq.n	81097c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81097c4:	2301      	movs	r3, #1
 81097c6:	e052      	b.n	810986e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81097c8:	7e3b      	ldrb	r3, [r7, #24]
 81097ca:	b2db      	uxtb	r3, r3
 81097cc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81097ce:	7e7b      	ldrb	r3, [r7, #25]
 81097d0:	b2db      	uxtb	r3, r3
 81097d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81097d4:	687b      	ldr	r3, [r7, #4]
 81097d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81097d8:	2b01      	cmp	r3, #1
 81097da:	d10a      	bne.n	81097f2 <HAL_SD_Init+0x82>
 81097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097de:	2b00      	cmp	r3, #0
 81097e0:	d102      	bne.n	81097e8 <HAL_SD_Init+0x78>
 81097e2:	6a3b      	ldr	r3, [r7, #32]
 81097e4:	2b00      	cmp	r3, #0
 81097e6:	d004      	beq.n	81097f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81097ee:	659a      	str	r2, [r3, #88]	@ 0x58
 81097f0:	e00b      	b.n	810980a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81097f2:	687b      	ldr	r3, [r7, #4]
 81097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81097f6:	2b01      	cmp	r3, #1
 81097f8:	d104      	bne.n	8109804 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81097fa:	687b      	ldr	r3, [r7, #4]
 81097fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109800:	659a      	str	r2, [r3, #88]	@ 0x58
 8109802:	e002      	b.n	810980a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	2200      	movs	r2, #0
 8109808:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810980a:	687b      	ldr	r3, [r7, #4]
 810980c:	68db      	ldr	r3, [r3, #12]
 810980e:	4619      	mov	r1, r3
 8109810:	6878      	ldr	r0, [r7, #4]
 8109812:	f000 fb2f 	bl	8109e74 <HAL_SD_ConfigWideBusOperation>
 8109816:	4603      	mov	r3, r0
 8109818:	2b00      	cmp	r3, #0
 810981a:	d001      	beq.n	8109820 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 810981c:	2301      	movs	r3, #1
 810981e:	e026      	b.n	810986e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8109820:	f7f9 f9b6 	bl	8102b90 <HAL_GetTick>
 8109824:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8109826:	e011      	b.n	810984c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109828:	f7f9 f9b2 	bl	8102b90 <HAL_GetTick>
 810982c:	4602      	mov	r2, r0
 810982e:	69fb      	ldr	r3, [r7, #28]
 8109830:	1ad3      	subs	r3, r2, r3
 8109832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109836:	d109      	bne.n	810984c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8109838:	687b      	ldr	r3, [r7, #4]
 810983a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810983e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	2201      	movs	r2, #1
 8109844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8109848:	2303      	movs	r3, #3
 810984a:	e010      	b.n	810986e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810984c:	6878      	ldr	r0, [r7, #4]
 810984e:	f000 fc23 	bl	810a098 <HAL_SD_GetCardState>
 8109852:	4603      	mov	r3, r0
 8109854:	2b04      	cmp	r3, #4
 8109856:	d1e7      	bne.n	8109828 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	2200      	movs	r2, #0
 810985c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	2200      	movs	r2, #0
 8109862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	2201      	movs	r2, #1
 8109868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 810986c:	2300      	movs	r3, #0
}
 810986e:	4618      	mov	r0, r3
 8109870:	3728      	adds	r7, #40	@ 0x28
 8109872:	46bd      	mov	sp, r7
 8109874:	bd80      	pop	{r7, pc}
	...

08109878 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8109878:	b590      	push	{r4, r7, lr}
 810987a:	b08d      	sub	sp, #52	@ 0x34
 810987c:	af02      	add	r7, sp, #8
 810987e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8109880:	2300      	movs	r3, #0
 8109882:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8109884:	2300      	movs	r3, #0
 8109886:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8109888:	2300      	movs	r3, #0
 810988a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810988c:	2300      	movs	r3, #0
 810988e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8109890:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8109894:	f04f 0100 	mov.w	r1, #0
 8109898:	f7fd ff9a 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 810989c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 810989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81098a0:	2b00      	cmp	r3, #0
 81098a2:	d109      	bne.n	81098b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	2201      	movs	r2, #1
 81098a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81098b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81098b4:	2301      	movs	r3, #1
 81098b6:	e070      	b.n	810999a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81098ba:	0a1b      	lsrs	r3, r3, #8
 81098bc:	4a39      	ldr	r2, [pc, #228]	@ (81099a4 <HAL_SD_InitCard+0x12c>)
 81098be:	fba2 2303 	umull	r2, r3, r2, r3
 81098c2:	091b      	lsrs	r3, r3, #4
 81098c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81098c6:	687b      	ldr	r3, [r7, #4]
 81098c8:	681c      	ldr	r4, [r3, #0]
 81098ca:	466a      	mov	r2, sp
 81098cc:	f107 0318 	add.w	r3, r7, #24
 81098d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 81098d4:	e882 0003 	stmia.w	r2, {r0, r1}
 81098d8:	f107 030c 	add.w	r3, r7, #12
 81098dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81098de:	4620      	mov	r0, r4
 81098e0:	f003 fb9c 	bl	810d01c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	4618      	mov	r0, r3
 81098ea:	f003 fbce 	bl	810d08a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81098ee:	69fb      	ldr	r3, [r7, #28]
 81098f0:	2b00      	cmp	r3, #0
 81098f2:	d005      	beq.n	8109900 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81098f4:	69fb      	ldr	r3, [r7, #28]
 81098f6:	005b      	lsls	r3, r3, #1
 81098f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81098fa:	fbb2 f3f3 	udiv	r3, r2, r3
 81098fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8109900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109902:	2b00      	cmp	r3, #0
 8109904:	d007      	beq.n	8109916 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8109906:	4a28      	ldr	r2, [pc, #160]	@ (81099a8 <HAL_SD_InitCard+0x130>)
 8109908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810990a:	fbb2 f3f3 	udiv	r3, r2, r3
 810990e:	3301      	adds	r3, #1
 8109910:	4618      	mov	r0, r3
 8109912:	f7f9 f949 	bl	8102ba8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8109916:	6878      	ldr	r0, [r7, #4]
 8109918:	f000 fcac 	bl	810a274 <SD_PowerON>
 810991c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810991e:	6a3b      	ldr	r3, [r7, #32]
 8109920:	2b00      	cmp	r3, #0
 8109922:	d00b      	beq.n	810993c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	2201      	movs	r2, #1
 8109928:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810992c:	687b      	ldr	r3, [r7, #4]
 810992e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109930:	6a3b      	ldr	r3, [r7, #32]
 8109932:	431a      	orrs	r2, r3
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8109938:	2301      	movs	r3, #1
 810993a:	e02e      	b.n	810999a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810993c:	6878      	ldr	r0, [r7, #4]
 810993e:	f000 fbcb 	bl	810a0d8 <SD_InitCard>
 8109942:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109944:	6a3b      	ldr	r3, [r7, #32]
 8109946:	2b00      	cmp	r3, #0
 8109948:	d00b      	beq.n	8109962 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 810994a:	687b      	ldr	r3, [r7, #4]
 810994c:	2201      	movs	r2, #1
 810994e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109956:	6a3b      	ldr	r3, [r7, #32]
 8109958:	431a      	orrs	r2, r3
 810995a:	687b      	ldr	r3, [r7, #4]
 810995c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810995e:	2301      	movs	r3, #1
 8109960:	e01b      	b.n	810999a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109962:	687b      	ldr	r3, [r7, #4]
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810996a:	4618      	mov	r0, r3
 810996c:	f003 fc22 	bl	810d1b4 <SDMMC_CmdBlockLength>
 8109970:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109972:	6a3b      	ldr	r3, [r7, #32]
 8109974:	2b00      	cmp	r3, #0
 8109976:	d00f      	beq.n	8109998 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	681b      	ldr	r3, [r3, #0]
 810997c:	4a0b      	ldr	r2, [pc, #44]	@ (81099ac <HAL_SD_InitCard+0x134>)
 810997e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109984:	6a3b      	ldr	r3, [r7, #32]
 8109986:	431a      	orrs	r2, r3
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	2201      	movs	r2, #1
 8109990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8109994:	2301      	movs	r3, #1
 8109996:	e000      	b.n	810999a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8109998:	2300      	movs	r3, #0
}
 810999a:	4618      	mov	r0, r3
 810999c:	372c      	adds	r7, #44	@ 0x2c
 810999e:	46bd      	mov	sp, r7
 81099a0:	bd90      	pop	{r4, r7, pc}
 81099a2:	bf00      	nop
 81099a4:	014f8b59 	.word	0x014f8b59
 81099a8:	00012110 	.word	0x00012110
 81099ac:	1fe00fff 	.word	0x1fe00fff

081099b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 81099b0:	b480      	push	{r7}
 81099b2:	b083      	sub	sp, #12
 81099b4:	af00      	add	r7, sp, #0
 81099b6:	6078      	str	r0, [r7, #4]
 81099b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81099be:	0f9b      	lsrs	r3, r3, #30
 81099c0:	b2da      	uxtb	r2, r3
 81099c2:	683b      	ldr	r3, [r7, #0]
 81099c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81099ca:	0e9b      	lsrs	r3, r3, #26
 81099cc:	b2db      	uxtb	r3, r3
 81099ce:	f003 030f 	and.w	r3, r3, #15
 81099d2:	b2da      	uxtb	r2, r3
 81099d4:	683b      	ldr	r3, [r7, #0]
 81099d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81099dc:	0e1b      	lsrs	r3, r3, #24
 81099de:	b2db      	uxtb	r3, r3
 81099e0:	f003 0303 	and.w	r3, r3, #3
 81099e4:	b2da      	uxtb	r2, r3
 81099e6:	683b      	ldr	r3, [r7, #0]
 81099e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81099ea:	687b      	ldr	r3, [r7, #4]
 81099ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81099ee:	0c1b      	lsrs	r3, r3, #16
 81099f0:	b2da      	uxtb	r2, r3
 81099f2:	683b      	ldr	r3, [r7, #0]
 81099f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81099fa:	0a1b      	lsrs	r3, r3, #8
 81099fc:	b2da      	uxtb	r2, r3
 81099fe:	683b      	ldr	r3, [r7, #0]
 8109a00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8109a02:	687b      	ldr	r3, [r7, #4]
 8109a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109a06:	b2da      	uxtb	r2, r3
 8109a08:	683b      	ldr	r3, [r7, #0]
 8109a0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8109a0c:	687b      	ldr	r3, [r7, #4]
 8109a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a10:	0d1b      	lsrs	r3, r3, #20
 8109a12:	b29a      	uxth	r2, r3
 8109a14:	683b      	ldr	r3, [r7, #0]
 8109a16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a1c:	0c1b      	lsrs	r3, r3, #16
 8109a1e:	b2db      	uxtb	r3, r3
 8109a20:	f003 030f 	and.w	r3, r3, #15
 8109a24:	b2da      	uxtb	r2, r3
 8109a26:	683b      	ldr	r3, [r7, #0]
 8109a28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a2e:	0bdb      	lsrs	r3, r3, #15
 8109a30:	b2db      	uxtb	r3, r3
 8109a32:	f003 0301 	and.w	r3, r3, #1
 8109a36:	b2da      	uxtb	r2, r3
 8109a38:	683b      	ldr	r3, [r7, #0]
 8109a3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8109a3c:	687b      	ldr	r3, [r7, #4]
 8109a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a40:	0b9b      	lsrs	r3, r3, #14
 8109a42:	b2db      	uxtb	r3, r3
 8109a44:	f003 0301 	and.w	r3, r3, #1
 8109a48:	b2da      	uxtb	r2, r3
 8109a4a:	683b      	ldr	r3, [r7, #0]
 8109a4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8109a4e:	687b      	ldr	r3, [r7, #4]
 8109a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a52:	0b5b      	lsrs	r3, r3, #13
 8109a54:	b2db      	uxtb	r3, r3
 8109a56:	f003 0301 	and.w	r3, r3, #1
 8109a5a:	b2da      	uxtb	r2, r3
 8109a5c:	683b      	ldr	r3, [r7, #0]
 8109a5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a64:	0b1b      	lsrs	r3, r3, #12
 8109a66:	b2db      	uxtb	r3, r3
 8109a68:	f003 0301 	and.w	r3, r3, #1
 8109a6c:	b2da      	uxtb	r2, r3
 8109a6e:	683b      	ldr	r3, [r7, #0]
 8109a70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8109a72:	683b      	ldr	r3, [r7, #0]
 8109a74:	2200      	movs	r2, #0
 8109a76:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	d163      	bne.n	8109b48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a84:	009a      	lsls	r2, r3, #2
 8109a86:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8109a8a:	4013      	ands	r3, r2
 8109a8c:	687a      	ldr	r2, [r7, #4]
 8109a8e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109a90:	0f92      	lsrs	r2, r2, #30
 8109a92:	431a      	orrs	r2, r3
 8109a94:	683b      	ldr	r3, [r7, #0]
 8109a96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109a9c:	0edb      	lsrs	r3, r3, #27
 8109a9e:	b2db      	uxtb	r3, r3
 8109aa0:	f003 0307 	and.w	r3, r3, #7
 8109aa4:	b2da      	uxtb	r2, r3
 8109aa6:	683b      	ldr	r3, [r7, #0]
 8109aa8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109aae:	0e1b      	lsrs	r3, r3, #24
 8109ab0:	b2db      	uxtb	r3, r3
 8109ab2:	f003 0307 	and.w	r3, r3, #7
 8109ab6:	b2da      	uxtb	r2, r3
 8109ab8:	683b      	ldr	r3, [r7, #0]
 8109aba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8109abc:	687b      	ldr	r3, [r7, #4]
 8109abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109ac0:	0d5b      	lsrs	r3, r3, #21
 8109ac2:	b2db      	uxtb	r3, r3
 8109ac4:	f003 0307 	and.w	r3, r3, #7
 8109ac8:	b2da      	uxtb	r2, r3
 8109aca:	683b      	ldr	r3, [r7, #0]
 8109acc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8109ace:	687b      	ldr	r3, [r7, #4]
 8109ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109ad2:	0c9b      	lsrs	r3, r3, #18
 8109ad4:	b2db      	uxtb	r3, r3
 8109ad6:	f003 0307 	and.w	r3, r3, #7
 8109ada:	b2da      	uxtb	r2, r3
 8109adc:	683b      	ldr	r3, [r7, #0]
 8109ade:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109ae4:	0bdb      	lsrs	r3, r3, #15
 8109ae6:	b2db      	uxtb	r3, r3
 8109ae8:	f003 0307 	and.w	r3, r3, #7
 8109aec:	b2da      	uxtb	r2, r3
 8109aee:	683b      	ldr	r3, [r7, #0]
 8109af0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8109af2:	683b      	ldr	r3, [r7, #0]
 8109af4:	691b      	ldr	r3, [r3, #16]
 8109af6:	1c5a      	adds	r2, r3, #1
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8109afc:	683b      	ldr	r3, [r7, #0]
 8109afe:	7e1b      	ldrb	r3, [r3, #24]
 8109b00:	b2db      	uxtb	r3, r3
 8109b02:	f003 0307 	and.w	r3, r3, #7
 8109b06:	3302      	adds	r3, #2
 8109b08:	2201      	movs	r2, #1
 8109b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8109b0e:	687a      	ldr	r2, [r7, #4]
 8109b10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8109b12:	fb03 f202 	mul.w	r2, r3, r2
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8109b1a:	683b      	ldr	r3, [r7, #0]
 8109b1c:	7a1b      	ldrb	r3, [r3, #8]
 8109b1e:	b2db      	uxtb	r3, r3
 8109b20:	f003 030f 	and.w	r3, r3, #15
 8109b24:	2201      	movs	r2, #1
 8109b26:	409a      	lsls	r2, r3
 8109b28:	687b      	ldr	r3, [r7, #4]
 8109b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8109b2c:	687b      	ldr	r3, [r7, #4]
 8109b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109b30:	687a      	ldr	r2, [r7, #4]
 8109b32:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8109b34:	0a52      	lsrs	r2, r2, #9
 8109b36:	fb03 f202 	mul.w	r2, r3, r2
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8109b3e:	687b      	ldr	r3, [r7, #4]
 8109b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109b44:	655a      	str	r2, [r3, #84]	@ 0x54
 8109b46:	e031      	b.n	8109bac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8109b48:	687b      	ldr	r3, [r7, #4]
 8109b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109b4c:	2b01      	cmp	r3, #1
 8109b4e:	d11d      	bne.n	8109b8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109b54:	041b      	lsls	r3, r3, #16
 8109b56:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109b5e:	0c1b      	lsrs	r3, r3, #16
 8109b60:	431a      	orrs	r2, r3
 8109b62:	683b      	ldr	r3, [r7, #0]
 8109b64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8109b66:	683b      	ldr	r3, [r7, #0]
 8109b68:	691b      	ldr	r3, [r3, #16]
 8109b6a:	3301      	adds	r3, #1
 8109b6c:	029a      	lsls	r2, r3, #10
 8109b6e:	687b      	ldr	r3, [r7, #4]
 8109b70:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109b76:	687b      	ldr	r3, [r7, #4]
 8109b78:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8109b7a:	687b      	ldr	r3, [r7, #4]
 8109b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109b80:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109b86:	687b      	ldr	r3, [r7, #4]
 8109b88:	655a      	str	r2, [r3, #84]	@ 0x54
 8109b8a:	e00f      	b.n	8109bac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109b8c:	687b      	ldr	r3, [r7, #4]
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	4a58      	ldr	r2, [pc, #352]	@ (8109cf4 <HAL_SD_GetCardCSD+0x344>)
 8109b92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109b94:	687b      	ldr	r3, [r7, #4]
 8109b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109b9c:	687b      	ldr	r3, [r7, #4]
 8109b9e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109ba0:	687b      	ldr	r3, [r7, #4]
 8109ba2:	2201      	movs	r2, #1
 8109ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8109ba8:	2301      	movs	r3, #1
 8109baa:	e09d      	b.n	8109ce8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8109bac:	687b      	ldr	r3, [r7, #4]
 8109bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109bb0:	0b9b      	lsrs	r3, r3, #14
 8109bb2:	b2db      	uxtb	r3, r3
 8109bb4:	f003 0301 	and.w	r3, r3, #1
 8109bb8:	b2da      	uxtb	r2, r3
 8109bba:	683b      	ldr	r3, [r7, #0]
 8109bbc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8109bbe:	687b      	ldr	r3, [r7, #4]
 8109bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109bc2:	09db      	lsrs	r3, r3, #7
 8109bc4:	b2db      	uxtb	r3, r3
 8109bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109bca:	b2da      	uxtb	r2, r3
 8109bcc:	683b      	ldr	r3, [r7, #0]
 8109bce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109bd4:	b2db      	uxtb	r3, r3
 8109bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109bda:	b2da      	uxtb	r2, r3
 8109bdc:	683b      	ldr	r3, [r7, #0]
 8109bde:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8109be0:	687b      	ldr	r3, [r7, #4]
 8109be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109be4:	0fdb      	lsrs	r3, r3, #31
 8109be6:	b2da      	uxtb	r2, r3
 8109be8:	683b      	ldr	r3, [r7, #0]
 8109bea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109bf0:	0f5b      	lsrs	r3, r3, #29
 8109bf2:	b2db      	uxtb	r3, r3
 8109bf4:	f003 0303 	and.w	r3, r3, #3
 8109bf8:	b2da      	uxtb	r2, r3
 8109bfa:	683b      	ldr	r3, [r7, #0]
 8109bfc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8109bfe:	687b      	ldr	r3, [r7, #4]
 8109c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c02:	0e9b      	lsrs	r3, r3, #26
 8109c04:	b2db      	uxtb	r3, r3
 8109c06:	f003 0307 	and.w	r3, r3, #7
 8109c0a:	b2da      	uxtb	r2, r3
 8109c0c:	683b      	ldr	r3, [r7, #0]
 8109c0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c14:	0d9b      	lsrs	r3, r3, #22
 8109c16:	b2db      	uxtb	r3, r3
 8109c18:	f003 030f 	and.w	r3, r3, #15
 8109c1c:	b2da      	uxtb	r2, r3
 8109c1e:	683b      	ldr	r3, [r7, #0]
 8109c20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c26:	0d5b      	lsrs	r3, r3, #21
 8109c28:	b2db      	uxtb	r3, r3
 8109c2a:	f003 0301 	and.w	r3, r3, #1
 8109c2e:	b2da      	uxtb	r2, r3
 8109c30:	683b      	ldr	r3, [r7, #0]
 8109c32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8109c36:	683b      	ldr	r3, [r7, #0]
 8109c38:	2200      	movs	r2, #0
 8109c3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c42:	0c1b      	lsrs	r3, r3, #16
 8109c44:	b2db      	uxtb	r3, r3
 8109c46:	f003 0301 	and.w	r3, r3, #1
 8109c4a:	b2da      	uxtb	r2, r3
 8109c4c:	683b      	ldr	r3, [r7, #0]
 8109c4e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8109c52:	687b      	ldr	r3, [r7, #4]
 8109c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c56:	0bdb      	lsrs	r3, r3, #15
 8109c58:	b2db      	uxtb	r3, r3
 8109c5a:	f003 0301 	and.w	r3, r3, #1
 8109c5e:	b2da      	uxtb	r2, r3
 8109c60:	683b      	ldr	r3, [r7, #0]
 8109c62:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8109c66:	687b      	ldr	r3, [r7, #4]
 8109c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c6a:	0b9b      	lsrs	r3, r3, #14
 8109c6c:	b2db      	uxtb	r3, r3
 8109c6e:	f003 0301 	and.w	r3, r3, #1
 8109c72:	b2da      	uxtb	r2, r3
 8109c74:	683b      	ldr	r3, [r7, #0]
 8109c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c7e:	0b5b      	lsrs	r3, r3, #13
 8109c80:	b2db      	uxtb	r3, r3
 8109c82:	f003 0301 	and.w	r3, r3, #1
 8109c86:	b2da      	uxtb	r2, r3
 8109c88:	683b      	ldr	r3, [r7, #0]
 8109c8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c92:	0b1b      	lsrs	r3, r3, #12
 8109c94:	b2db      	uxtb	r3, r3
 8109c96:	f003 0301 	and.w	r3, r3, #1
 8109c9a:	b2da      	uxtb	r2, r3
 8109c9c:	683b      	ldr	r3, [r7, #0]
 8109c9e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8109ca2:	687b      	ldr	r3, [r7, #4]
 8109ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109ca6:	0a9b      	lsrs	r3, r3, #10
 8109ca8:	b2db      	uxtb	r3, r3
 8109caa:	f003 0303 	and.w	r3, r3, #3
 8109cae:	b2da      	uxtb	r2, r3
 8109cb0:	683b      	ldr	r3, [r7, #0]
 8109cb2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8109cb6:	687b      	ldr	r3, [r7, #4]
 8109cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109cba:	0a1b      	lsrs	r3, r3, #8
 8109cbc:	b2db      	uxtb	r3, r3
 8109cbe:	f003 0303 	and.w	r3, r3, #3
 8109cc2:	b2da      	uxtb	r2, r3
 8109cc4:	683b      	ldr	r3, [r7, #0]
 8109cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8109cca:	687b      	ldr	r3, [r7, #4]
 8109ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109cce:	085b      	lsrs	r3, r3, #1
 8109cd0:	b2db      	uxtb	r3, r3
 8109cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109cd6:	b2da      	uxtb	r2, r3
 8109cd8:	683b      	ldr	r3, [r7, #0]
 8109cda:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8109cde:	683b      	ldr	r3, [r7, #0]
 8109ce0:	2201      	movs	r2, #1
 8109ce2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8109ce6:	2300      	movs	r3, #0
}
 8109ce8:	4618      	mov	r0, r3
 8109cea:	370c      	adds	r7, #12
 8109cec:	46bd      	mov	sp, r7
 8109cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cf2:	4770      	bx	lr
 8109cf4:	1fe00fff 	.word	0x1fe00fff

08109cf8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8109cf8:	b580      	push	{r7, lr}
 8109cfa:	b094      	sub	sp, #80	@ 0x50
 8109cfc:	af00      	add	r7, sp, #0
 8109cfe:	6078      	str	r0, [r7, #4]
 8109d00:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8109d02:	2300      	movs	r3, #0
 8109d04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109d0e:	b2db      	uxtb	r3, r3
 8109d10:	2b03      	cmp	r3, #3
 8109d12:	d101      	bne.n	8109d18 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8109d14:	2301      	movs	r3, #1
 8109d16:	e0a7      	b.n	8109e68 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8109d18:	f107 0308 	add.w	r3, r7, #8
 8109d1c:	4619      	mov	r1, r3
 8109d1e:	6878      	ldr	r0, [r7, #4]
 8109d20:	f000 fb36 	bl	810a390 <SD_SendSDStatus>
 8109d24:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8109d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109d28:	2b00      	cmp	r3, #0
 8109d2a:	d011      	beq.n	8109d50 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	681b      	ldr	r3, [r3, #0]
 8109d30:	4a4f      	ldr	r2, [pc, #316]	@ (8109e70 <HAL_SD_GetCardStatus+0x178>)
 8109d32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109d34:	687b      	ldr	r3, [r7, #4]
 8109d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109d3a:	431a      	orrs	r2, r3
 8109d3c:	687b      	ldr	r3, [r7, #4]
 8109d3e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109d40:	687b      	ldr	r3, [r7, #4]
 8109d42:	2201      	movs	r2, #1
 8109d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8109d48:	2301      	movs	r3, #1
 8109d4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8109d4e:	e070      	b.n	8109e32 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8109d50:	68bb      	ldr	r3, [r7, #8]
 8109d52:	099b      	lsrs	r3, r3, #6
 8109d54:	b2db      	uxtb	r3, r3
 8109d56:	f003 0303 	and.w	r3, r3, #3
 8109d5a:	b2da      	uxtb	r2, r3
 8109d5c:	683b      	ldr	r3, [r7, #0]
 8109d5e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8109d60:	68bb      	ldr	r3, [r7, #8]
 8109d62:	095b      	lsrs	r3, r3, #5
 8109d64:	b2db      	uxtb	r3, r3
 8109d66:	f003 0301 	and.w	r3, r3, #1
 8109d6a:	b2da      	uxtb	r2, r3
 8109d6c:	683b      	ldr	r3, [r7, #0]
 8109d6e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8109d70:	68bb      	ldr	r3, [r7, #8]
 8109d72:	0a1b      	lsrs	r3, r3, #8
 8109d74:	b29b      	uxth	r3, r3
 8109d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8109d7a:	b29a      	uxth	r2, r3
 8109d7c:	68bb      	ldr	r3, [r7, #8]
 8109d7e:	0e1b      	lsrs	r3, r3, #24
 8109d80:	b29b      	uxth	r3, r3
 8109d82:	4313      	orrs	r3, r2
 8109d84:	b29a      	uxth	r2, r3
 8109d86:	683b      	ldr	r3, [r7, #0]
 8109d88:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109d8a:	68fb      	ldr	r3, [r7, #12]
 8109d8c:	061a      	lsls	r2, r3, #24
 8109d8e:	68fb      	ldr	r3, [r7, #12]
 8109d90:	021b      	lsls	r3, r3, #8
 8109d92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109d96:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109d98:	68fb      	ldr	r3, [r7, #12]
 8109d9a:	0a1b      	lsrs	r3, r3, #8
 8109d9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109da0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109da2:	68fb      	ldr	r3, [r7, #12]
 8109da4:	0e1b      	lsrs	r3, r3, #24
 8109da6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109da8:	683b      	ldr	r3, [r7, #0]
 8109daa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8109dac:	693b      	ldr	r3, [r7, #16]
 8109dae:	b2da      	uxtb	r2, r3
 8109db0:	683b      	ldr	r3, [r7, #0]
 8109db2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8109db4:	693b      	ldr	r3, [r7, #16]
 8109db6:	0a1b      	lsrs	r3, r3, #8
 8109db8:	b2da      	uxtb	r2, r3
 8109dba:	683b      	ldr	r3, [r7, #0]
 8109dbc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8109dbe:	693b      	ldr	r3, [r7, #16]
 8109dc0:	0d1b      	lsrs	r3, r3, #20
 8109dc2:	b2db      	uxtb	r3, r3
 8109dc4:	f003 030f 	and.w	r3, r3, #15
 8109dc8:	b2da      	uxtb	r2, r3
 8109dca:	683b      	ldr	r3, [r7, #0]
 8109dcc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8109dce:	693b      	ldr	r3, [r7, #16]
 8109dd0:	0c1b      	lsrs	r3, r3, #16
 8109dd2:	b29b      	uxth	r3, r3
 8109dd4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8109dd8:	b29a      	uxth	r2, r3
 8109dda:	697b      	ldr	r3, [r7, #20]
 8109ddc:	b29b      	uxth	r3, r3
 8109dde:	b2db      	uxtb	r3, r3
 8109de0:	b29b      	uxth	r3, r3
 8109de2:	4313      	orrs	r3, r2
 8109de4:	b29a      	uxth	r2, r3
 8109de6:	683b      	ldr	r3, [r7, #0]
 8109de8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8109dea:	697b      	ldr	r3, [r7, #20]
 8109dec:	0a9b      	lsrs	r3, r3, #10
 8109dee:	b2db      	uxtb	r3, r3
 8109df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109df4:	b2da      	uxtb	r2, r3
 8109df6:	683b      	ldr	r3, [r7, #0]
 8109df8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8109dfa:	697b      	ldr	r3, [r7, #20]
 8109dfc:	0a1b      	lsrs	r3, r3, #8
 8109dfe:	b2db      	uxtb	r3, r3
 8109e00:	f003 0303 	and.w	r3, r3, #3
 8109e04:	b2da      	uxtb	r2, r3
 8109e06:	683b      	ldr	r3, [r7, #0]
 8109e08:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8109e0a:	697b      	ldr	r3, [r7, #20]
 8109e0c:	091b      	lsrs	r3, r3, #4
 8109e0e:	b2db      	uxtb	r3, r3
 8109e10:	f003 030f 	and.w	r3, r3, #15
 8109e14:	b2da      	uxtb	r2, r3
 8109e16:	683b      	ldr	r3, [r7, #0]
 8109e18:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8109e1a:	697b      	ldr	r3, [r7, #20]
 8109e1c:	b2db      	uxtb	r3, r3
 8109e1e:	f003 030f 	and.w	r3, r3, #15
 8109e22:	b2da      	uxtb	r2, r3
 8109e24:	683b      	ldr	r3, [r7, #0]
 8109e26:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8109e28:	69bb      	ldr	r3, [r7, #24]
 8109e2a:	0e1b      	lsrs	r3, r3, #24
 8109e2c:	b2da      	uxtb	r2, r3
 8109e2e:	683b      	ldr	r3, [r7, #0]
 8109e30:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109e32:	687b      	ldr	r3, [r7, #4]
 8109e34:	681b      	ldr	r3, [r3, #0]
 8109e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8109e3a:	4618      	mov	r0, r3
 8109e3c:	f003 f9ba 	bl	810d1b4 <SDMMC_CmdBlockLength>
 8109e40:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8109e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109e44:	2b00      	cmp	r3, #0
 8109e46:	d00d      	beq.n	8109e64 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	4a08      	ldr	r2, [pc, #32]	@ (8109e70 <HAL_SD_GetCardStatus+0x178>)
 8109e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8109e50:	687b      	ldr	r3, [r7, #4]
 8109e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109e54:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109e56:	687b      	ldr	r3, [r7, #4]
 8109e58:	2201      	movs	r2, #1
 8109e5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8109e5e:	2301      	movs	r3, #1
 8109e60:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8109e64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8109e68:	4618      	mov	r0, r3
 8109e6a:	3750      	adds	r7, #80	@ 0x50
 8109e6c:	46bd      	mov	sp, r7
 8109e6e:	bd80      	pop	{r7, pc}
 8109e70:	1fe00fff 	.word	0x1fe00fff

08109e74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8109e74:	b590      	push	{r4, r7, lr}
 8109e76:	b08d      	sub	sp, #52	@ 0x34
 8109e78:	af02      	add	r7, sp, #8
 8109e7a:	6078      	str	r0, [r7, #4]
 8109e7c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8109e7e:	2300      	movs	r3, #0
 8109e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	2203      	movs	r2, #3
 8109e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109e8c:	687b      	ldr	r3, [r7, #4]
 8109e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109e90:	2b03      	cmp	r3, #3
 8109e92:	d02e      	beq.n	8109ef2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8109e94:	683b      	ldr	r3, [r7, #0]
 8109e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109e9a:	d106      	bne.n	8109eaa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ea0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	635a      	str	r2, [r3, #52]	@ 0x34
 8109ea8:	e029      	b.n	8109efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8109eaa:	683b      	ldr	r3, [r7, #0]
 8109eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109eb0:	d10a      	bne.n	8109ec8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8109eb2:	6878      	ldr	r0, [r7, #4]
 8109eb4:	f000 fb64 	bl	810a580 <SD_WideBus_Enable>
 8109eb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109ebe:	6a3b      	ldr	r3, [r7, #32]
 8109ec0:	431a      	orrs	r2, r3
 8109ec2:	687b      	ldr	r3, [r7, #4]
 8109ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8109ec6:	e01a      	b.n	8109efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8109ec8:	683b      	ldr	r3, [r7, #0]
 8109eca:	2b00      	cmp	r3, #0
 8109ecc:	d10a      	bne.n	8109ee4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8109ece:	6878      	ldr	r0, [r7, #4]
 8109ed0:	f000 fba1 	bl	810a616 <SD_WideBus_Disable>
 8109ed4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109eda:	6a3b      	ldr	r3, [r7, #32]
 8109edc:	431a      	orrs	r2, r3
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8109ee2:	e00c      	b.n	8109efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ee8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8109eec:	687b      	ldr	r3, [r7, #4]
 8109eee:	635a      	str	r2, [r3, #52]	@ 0x34
 8109ef0:	e005      	b.n	8109efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109ef2:	687b      	ldr	r3, [r7, #4]
 8109ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ef6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109efa:	687b      	ldr	r3, [r7, #4]
 8109efc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109f02:	2b00      	cmp	r3, #0
 8109f04:	d007      	beq.n	8109f16 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	681b      	ldr	r3, [r3, #0]
 8109f0a:	4a5f      	ldr	r2, [pc, #380]	@ (810a088 <HAL_SD_ConfigWideBusOperation+0x214>)
 8109f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8109f0e:	2301      	movs	r3, #1
 8109f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8109f14:	e096      	b.n	810a044 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8109f16:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8109f1a:	f04f 0100 	mov.w	r1, #0
 8109f1e:	f7fd fc57 	bl	81077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8109f22:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8109f24:	69fb      	ldr	r3, [r7, #28]
 8109f26:	2b00      	cmp	r3, #0
 8109f28:	f000 8083 	beq.w	810a032 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	685b      	ldr	r3, [r3, #4]
 8109f30:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	689b      	ldr	r3, [r3, #8]
 8109f36:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8109f38:	683b      	ldr	r3, [r7, #0]
 8109f3a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8109f3c:	687b      	ldr	r3, [r7, #4]
 8109f3e:	691b      	ldr	r3, [r3, #16]
 8109f40:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8109f42:	687b      	ldr	r3, [r7, #4]
 8109f44:	695a      	ldr	r2, [r3, #20]
 8109f46:	69fb      	ldr	r3, [r7, #28]
 8109f48:	4950      	ldr	r1, [pc, #320]	@ (810a08c <HAL_SD_ConfigWideBusOperation+0x218>)
 8109f4a:	fba1 1303 	umull	r1, r3, r1, r3
 8109f4e:	0e1b      	lsrs	r3, r3, #24
 8109f50:	429a      	cmp	r2, r3
 8109f52:	d303      	bcc.n	8109f5c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	695b      	ldr	r3, [r3, #20]
 8109f58:	61bb      	str	r3, [r7, #24]
 8109f5a:	e05a      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8109f5c:	687b      	ldr	r3, [r7, #4]
 8109f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109f64:	d103      	bne.n	8109f6e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109f66:	687b      	ldr	r3, [r7, #4]
 8109f68:	695b      	ldr	r3, [r3, #20]
 8109f6a:	61bb      	str	r3, [r7, #24]
 8109f6c:	e051      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8109f6e:	687b      	ldr	r3, [r7, #4]
 8109f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109f76:	d126      	bne.n	8109fc6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	695b      	ldr	r3, [r3, #20]
 8109f7c:	2b00      	cmp	r3, #0
 8109f7e:	d10e      	bne.n	8109f9e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8109f80:	69fb      	ldr	r3, [r7, #28]
 8109f82:	4a43      	ldr	r2, [pc, #268]	@ (810a090 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109f84:	4293      	cmp	r3, r2
 8109f86:	d906      	bls.n	8109f96 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109f88:	69fb      	ldr	r3, [r7, #28]
 8109f8a:	4a40      	ldr	r2, [pc, #256]	@ (810a08c <HAL_SD_ConfigWideBusOperation+0x218>)
 8109f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8109f90:	0e5b      	lsrs	r3, r3, #25
 8109f92:	61bb      	str	r3, [r7, #24]
 8109f94:	e03d      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109f96:	687b      	ldr	r3, [r7, #4]
 8109f98:	695b      	ldr	r3, [r3, #20]
 8109f9a:	61bb      	str	r3, [r7, #24]
 8109f9c:	e039      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8109f9e:	687b      	ldr	r3, [r7, #4]
 8109fa0:	695b      	ldr	r3, [r3, #20]
 8109fa2:	005b      	lsls	r3, r3, #1
 8109fa4:	69fa      	ldr	r2, [r7, #28]
 8109fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8109faa:	4a39      	ldr	r2, [pc, #228]	@ (810a090 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109fac:	4293      	cmp	r3, r2
 8109fae:	d906      	bls.n	8109fbe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109fb0:	69fb      	ldr	r3, [r7, #28]
 8109fb2:	4a36      	ldr	r2, [pc, #216]	@ (810a08c <HAL_SD_ConfigWideBusOperation+0x218>)
 8109fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8109fb8:	0e5b      	lsrs	r3, r3, #25
 8109fba:	61bb      	str	r3, [r7, #24]
 8109fbc:	e029      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	695b      	ldr	r3, [r3, #20]
 8109fc2:	61bb      	str	r3, [r7, #24]
 8109fc4:	e025      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8109fc6:	687b      	ldr	r3, [r7, #4]
 8109fc8:	695b      	ldr	r3, [r3, #20]
 8109fca:	2b00      	cmp	r3, #0
 8109fcc:	d10e      	bne.n	8109fec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8109fce:	69fb      	ldr	r3, [r7, #28]
 8109fd0:	4a30      	ldr	r2, [pc, #192]	@ (810a094 <HAL_SD_ConfigWideBusOperation+0x220>)
 8109fd2:	4293      	cmp	r3, r2
 8109fd4:	d906      	bls.n	8109fe4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109fd6:	69fb      	ldr	r3, [r7, #28]
 8109fd8:	4a2c      	ldr	r2, [pc, #176]	@ (810a08c <HAL_SD_ConfigWideBusOperation+0x218>)
 8109fda:	fba2 2303 	umull	r2, r3, r2, r3
 8109fde:	0e1b      	lsrs	r3, r3, #24
 8109fe0:	61bb      	str	r3, [r7, #24]
 8109fe2:	e016      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109fe4:	687b      	ldr	r3, [r7, #4]
 8109fe6:	695b      	ldr	r3, [r3, #20]
 8109fe8:	61bb      	str	r3, [r7, #24]
 8109fea:	e012      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8109fec:	687b      	ldr	r3, [r7, #4]
 8109fee:	695b      	ldr	r3, [r3, #20]
 8109ff0:	005b      	lsls	r3, r3, #1
 8109ff2:	69fa      	ldr	r2, [r7, #28]
 8109ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8109ff8:	4a26      	ldr	r2, [pc, #152]	@ (810a094 <HAL_SD_ConfigWideBusOperation+0x220>)
 8109ffa:	4293      	cmp	r3, r2
 8109ffc:	d906      	bls.n	810a00c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109ffe:	69fb      	ldr	r3, [r7, #28]
 810a000:	4a22      	ldr	r2, [pc, #136]	@ (810a08c <HAL_SD_ConfigWideBusOperation+0x218>)
 810a002:	fba2 2303 	umull	r2, r3, r2, r3
 810a006:	0e1b      	lsrs	r3, r3, #24
 810a008:	61bb      	str	r3, [r7, #24]
 810a00a:	e002      	b.n	810a012 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810a00c:	687b      	ldr	r3, [r7, #4]
 810a00e:	695b      	ldr	r3, [r3, #20]
 810a010:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	681c      	ldr	r4, [r3, #0]
 810a016:	466a      	mov	r2, sp
 810a018:	f107 0314 	add.w	r3, r7, #20
 810a01c:	e893 0003 	ldmia.w	r3, {r0, r1}
 810a020:	e882 0003 	stmia.w	r2, {r0, r1}
 810a024:	f107 0308 	add.w	r3, r7, #8
 810a028:	cb0e      	ldmia	r3, {r1, r2, r3}
 810a02a:	4620      	mov	r0, r4
 810a02c:	f002 fff6 	bl	810d01c <SDMMC_Init>
 810a030:	e008      	b.n	810a044 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810a032:	687b      	ldr	r3, [r7, #4]
 810a034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a036:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 810a03e:	2301      	movs	r3, #1
 810a040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	681b      	ldr	r3, [r3, #0]
 810a048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810a04c:	4618      	mov	r0, r3
 810a04e:	f003 f8b1 	bl	810d1b4 <SDMMC_CmdBlockLength>
 810a052:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a054:	6a3b      	ldr	r3, [r7, #32]
 810a056:	2b00      	cmp	r3, #0
 810a058:	d00c      	beq.n	810a074 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	681b      	ldr	r3, [r3, #0]
 810a05e:	4a0a      	ldr	r2, [pc, #40]	@ (810a088 <HAL_SD_ConfigWideBusOperation+0x214>)
 810a060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a066:	6a3b      	ldr	r3, [r7, #32]
 810a068:	431a      	orrs	r2, r3
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 810a06e:	2301      	movs	r3, #1
 810a070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810a074:	687b      	ldr	r3, [r7, #4]
 810a076:	2201      	movs	r2, #1
 810a078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 810a07c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810a080:	4618      	mov	r0, r3
 810a082:	372c      	adds	r7, #44	@ 0x2c
 810a084:	46bd      	mov	sp, r7
 810a086:	bd90      	pop	{r4, r7, pc}
 810a088:	1fe00fff 	.word	0x1fe00fff
 810a08c:	55e63b89 	.word	0x55e63b89
 810a090:	02faf080 	.word	0x02faf080
 810a094:	017d7840 	.word	0x017d7840

0810a098 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810a098:	b580      	push	{r7, lr}
 810a09a:	b086      	sub	sp, #24
 810a09c:	af00      	add	r7, sp, #0
 810a09e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810a0a0:	2300      	movs	r3, #0
 810a0a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 810a0a4:	f107 030c 	add.w	r3, r7, #12
 810a0a8:	4619      	mov	r1, r3
 810a0aa:	6878      	ldr	r0, [r7, #4]
 810a0ac:	f000 fa40 	bl	810a530 <SD_SendStatus>
 810a0b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a0b2:	697b      	ldr	r3, [r7, #20]
 810a0b4:	2b00      	cmp	r3, #0
 810a0b6:	d005      	beq.n	810a0c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810a0b8:	687b      	ldr	r3, [r7, #4]
 810a0ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a0bc:	697b      	ldr	r3, [r7, #20]
 810a0be:	431a      	orrs	r2, r3
 810a0c0:	687b      	ldr	r3, [r7, #4]
 810a0c2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 810a0c4:	68fb      	ldr	r3, [r7, #12]
 810a0c6:	0a5b      	lsrs	r3, r3, #9
 810a0c8:	f003 030f 	and.w	r3, r3, #15
 810a0cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810a0ce:	693b      	ldr	r3, [r7, #16]
}
 810a0d0:	4618      	mov	r0, r3
 810a0d2:	3718      	adds	r7, #24
 810a0d4:	46bd      	mov	sp, r7
 810a0d6:	bd80      	pop	{r7, pc}

0810a0d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810a0d8:	b580      	push	{r7, lr}
 810a0da:	b090      	sub	sp, #64	@ 0x40
 810a0dc:	af00      	add	r7, sp, #0
 810a0de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 810a0e0:	2300      	movs	r3, #0
 810a0e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 810a0e4:	f7f8 fd54 	bl	8102b90 <HAL_GetTick>
 810a0e8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810a0ea:	687b      	ldr	r3, [r7, #4]
 810a0ec:	681b      	ldr	r3, [r3, #0]
 810a0ee:	4618      	mov	r0, r3
 810a0f0:	f002 ffdc 	bl	810d0ac <SDMMC_GetPowerState>
 810a0f4:	4603      	mov	r3, r0
 810a0f6:	2b00      	cmp	r3, #0
 810a0f8:	d102      	bne.n	810a100 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810a0fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 810a0fe:	e0b5      	b.n	810a26c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810a100:	687b      	ldr	r3, [r7, #4]
 810a102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a104:	2b03      	cmp	r3, #3
 810a106:	d02e      	beq.n	810a166 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810a108:	687b      	ldr	r3, [r7, #4]
 810a10a:	681b      	ldr	r3, [r3, #0]
 810a10c:	4618      	mov	r0, r3
 810a10e:	f003 f95d 	bl	810d3cc <SDMMC_CmdSendCID>
 810a112:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a116:	2b00      	cmp	r3, #0
 810a118:	d001      	beq.n	810a11e <SD_InitCard+0x46>
    {
      return errorstate;
 810a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a11c:	e0a6      	b.n	810a26c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a11e:	687b      	ldr	r3, [r7, #4]
 810a120:	681b      	ldr	r3, [r3, #0]
 810a122:	2100      	movs	r1, #0
 810a124:	4618      	mov	r0, r3
 810a126:	f003 f806 	bl	810d136 <SDMMC_GetResponse>
 810a12a:	4602      	mov	r2, r0
 810a12c:	687b      	ldr	r3, [r7, #4]
 810a12e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810a130:	687b      	ldr	r3, [r7, #4]
 810a132:	681b      	ldr	r3, [r3, #0]
 810a134:	2104      	movs	r1, #4
 810a136:	4618      	mov	r0, r3
 810a138:	f002 fffd 	bl	810d136 <SDMMC_GetResponse>
 810a13c:	4602      	mov	r2, r0
 810a13e:	687b      	ldr	r3, [r7, #4]
 810a140:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	2108      	movs	r1, #8
 810a148:	4618      	mov	r0, r3
 810a14a:	f002 fff4 	bl	810d136 <SDMMC_GetResponse>
 810a14e:	4602      	mov	r2, r0
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810a154:	687b      	ldr	r3, [r7, #4]
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	210c      	movs	r1, #12
 810a15a:	4618      	mov	r0, r3
 810a15c:	f002 ffeb 	bl	810d136 <SDMMC_GetResponse>
 810a160:	4602      	mov	r2, r0
 810a162:	687b      	ldr	r3, [r7, #4]
 810a164:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810a166:	687b      	ldr	r3, [r7, #4]
 810a168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a16a:	2b03      	cmp	r3, #3
 810a16c:	d01d      	beq.n	810a1aa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810a16e:	e019      	b.n	810a1a4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	681b      	ldr	r3, [r3, #0]
 810a174:	f107 020a 	add.w	r2, r7, #10
 810a178:	4611      	mov	r1, r2
 810a17a:	4618      	mov	r0, r3
 810a17c:	f003 f965 	bl	810d44a <SDMMC_CmdSetRelAdd>
 810a180:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 810a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a184:	2b00      	cmp	r3, #0
 810a186:	d001      	beq.n	810a18c <SD_InitCard+0xb4>
      {
        return errorstate;
 810a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a18a:	e06f      	b.n	810a26c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 810a18c:	f7f8 fd00 	bl	8102b90 <HAL_GetTick>
 810a190:	4602      	mov	r2, r0
 810a192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a194:	1ad3      	subs	r3, r2, r3
 810a196:	f241 3287 	movw	r2, #4999	@ 0x1387
 810a19a:	4293      	cmp	r3, r2
 810a19c:	d902      	bls.n	810a1a4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 810a19e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a1a2:	e063      	b.n	810a26c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 810a1a4:	897b      	ldrh	r3, [r7, #10]
 810a1a6:	2b00      	cmp	r3, #0
 810a1a8:	d0e2      	beq.n	810a170 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810a1aa:	687b      	ldr	r3, [r7, #4]
 810a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a1ae:	2b03      	cmp	r3, #3
 810a1b0:	d036      	beq.n	810a220 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810a1b2:	897b      	ldrh	r3, [r7, #10]
 810a1b4:	461a      	mov	r2, r3
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a1ba:	687b      	ldr	r3, [r7, #4]
 810a1bc:	681a      	ldr	r2, [r3, #0]
 810a1be:	687b      	ldr	r3, [r7, #4]
 810a1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a1c2:	041b      	lsls	r3, r3, #16
 810a1c4:	4619      	mov	r1, r3
 810a1c6:	4610      	mov	r0, r2
 810a1c8:	f003 f91f 	bl	810d40a <SDMMC_CmdSendCSD>
 810a1cc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	d001      	beq.n	810a1d8 <SD_InitCard+0x100>
    {
      return errorstate;
 810a1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1d6:	e049      	b.n	810a26c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a1d8:	687b      	ldr	r3, [r7, #4]
 810a1da:	681b      	ldr	r3, [r3, #0]
 810a1dc:	2100      	movs	r1, #0
 810a1de:	4618      	mov	r0, r3
 810a1e0:	f002 ffa9 	bl	810d136 <SDMMC_GetResponse>
 810a1e4:	4602      	mov	r2, r0
 810a1e6:	687b      	ldr	r3, [r7, #4]
 810a1e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810a1ea:	687b      	ldr	r3, [r7, #4]
 810a1ec:	681b      	ldr	r3, [r3, #0]
 810a1ee:	2104      	movs	r1, #4
 810a1f0:	4618      	mov	r0, r3
 810a1f2:	f002 ffa0 	bl	810d136 <SDMMC_GetResponse>
 810a1f6:	4602      	mov	r2, r0
 810a1f8:	687b      	ldr	r3, [r7, #4]
 810a1fa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810a1fc:	687b      	ldr	r3, [r7, #4]
 810a1fe:	681b      	ldr	r3, [r3, #0]
 810a200:	2108      	movs	r1, #8
 810a202:	4618      	mov	r0, r3
 810a204:	f002 ff97 	bl	810d136 <SDMMC_GetResponse>
 810a208:	4602      	mov	r2, r0
 810a20a:	687b      	ldr	r3, [r7, #4]
 810a20c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810a20e:	687b      	ldr	r3, [r7, #4]
 810a210:	681b      	ldr	r3, [r3, #0]
 810a212:	210c      	movs	r1, #12
 810a214:	4618      	mov	r0, r3
 810a216:	f002 ff8e 	bl	810d136 <SDMMC_GetResponse>
 810a21a:	4602      	mov	r2, r0
 810a21c:	687b      	ldr	r3, [r7, #4]
 810a21e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810a220:	687b      	ldr	r3, [r7, #4]
 810a222:	681b      	ldr	r3, [r3, #0]
 810a224:	2104      	movs	r1, #4
 810a226:	4618      	mov	r0, r3
 810a228:	f002 ff85 	bl	810d136 <SDMMC_GetResponse>
 810a22c:	4603      	mov	r3, r0
 810a22e:	0d1a      	lsrs	r2, r3, #20
 810a230:	687b      	ldr	r3, [r7, #4]
 810a232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810a234:	f107 030c 	add.w	r3, r7, #12
 810a238:	4619      	mov	r1, r3
 810a23a:	6878      	ldr	r0, [r7, #4]
 810a23c:	f7ff fbb8 	bl	81099b0 <HAL_SD_GetCardCSD>
 810a240:	4603      	mov	r3, r0
 810a242:	2b00      	cmp	r3, #0
 810a244:	d002      	beq.n	810a24c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a246:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a24a:	e00f      	b.n	810a26c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810a24c:	687b      	ldr	r3, [r7, #4]
 810a24e:	681a      	ldr	r2, [r3, #0]
 810a250:	687b      	ldr	r3, [r7, #4]
 810a252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a254:	041b      	lsls	r3, r3, #16
 810a256:	4619      	mov	r1, r3
 810a258:	4610      	mov	r0, r2
 810a25a:	f002 ffce 	bl	810d1fa <SDMMC_CmdSelDesel>
 810a25e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 810a260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a262:	2b00      	cmp	r3, #0
 810a264:	d001      	beq.n	810a26a <SD_InitCard+0x192>
  {
    return errorstate;
 810a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a268:	e000      	b.n	810a26c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810a26a:	2300      	movs	r3, #0
}
 810a26c:	4618      	mov	r0, r3
 810a26e:	3740      	adds	r7, #64	@ 0x40
 810a270:	46bd      	mov	sp, r7
 810a272:	bd80      	pop	{r7, pc}

0810a274 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810a274:	b580      	push	{r7, lr}
 810a276:	b086      	sub	sp, #24
 810a278:	af00      	add	r7, sp, #0
 810a27a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810a27c:	2300      	movs	r3, #0
 810a27e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 810a280:	2300      	movs	r3, #0
 810a282:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 810a284:	2300      	movs	r3, #0
 810a286:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810a288:	687b      	ldr	r3, [r7, #4]
 810a28a:	681b      	ldr	r3, [r3, #0]
 810a28c:	4618      	mov	r0, r3
 810a28e:	f002 ffd7 	bl	810d240 <SDMMC_CmdGoIdleState>
 810a292:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a294:	68fb      	ldr	r3, [r7, #12]
 810a296:	2b00      	cmp	r3, #0
 810a298:	d001      	beq.n	810a29e <SD_PowerON+0x2a>
  {
    return errorstate;
 810a29a:	68fb      	ldr	r3, [r7, #12]
 810a29c:	e072      	b.n	810a384 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810a29e:	687b      	ldr	r3, [r7, #4]
 810a2a0:	681b      	ldr	r3, [r3, #0]
 810a2a2:	4618      	mov	r0, r3
 810a2a4:	f002 ffea 	bl	810d27c <SDMMC_CmdOperCond>
 810a2a8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810a2aa:	68fb      	ldr	r3, [r7, #12]
 810a2ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810a2b0:	d10d      	bne.n	810a2ce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810a2b2:	687b      	ldr	r3, [r7, #4]
 810a2b4:	2200      	movs	r2, #0
 810a2b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810a2b8:	687b      	ldr	r3, [r7, #4]
 810a2ba:	681b      	ldr	r3, [r3, #0]
 810a2bc:	4618      	mov	r0, r3
 810a2be:	f002 ffbf 	bl	810d240 <SDMMC_CmdGoIdleState>
 810a2c2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a2c4:	68fb      	ldr	r3, [r7, #12]
 810a2c6:	2b00      	cmp	r3, #0
 810a2c8:	d004      	beq.n	810a2d4 <SD_PowerON+0x60>
    {
      return errorstate;
 810a2ca:	68fb      	ldr	r3, [r7, #12]
 810a2cc:	e05a      	b.n	810a384 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810a2ce:	687b      	ldr	r3, [r7, #4]
 810a2d0:	2201      	movs	r2, #1
 810a2d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810a2d4:	687b      	ldr	r3, [r7, #4]
 810a2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a2d8:	2b01      	cmp	r3, #1
 810a2da:	d137      	bne.n	810a34c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810a2dc:	687b      	ldr	r3, [r7, #4]
 810a2de:	681b      	ldr	r3, [r3, #0]
 810a2e0:	2100      	movs	r1, #0
 810a2e2:	4618      	mov	r0, r3
 810a2e4:	f002 ffea 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a2e8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a2ea:	68fb      	ldr	r3, [r7, #12]
 810a2ec:	2b00      	cmp	r3, #0
 810a2ee:	d02d      	beq.n	810a34c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a2f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a2f4:	e046      	b.n	810a384 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	681b      	ldr	r3, [r3, #0]
 810a2fa:	2100      	movs	r1, #0
 810a2fc:	4618      	mov	r0, r3
 810a2fe:	f002 ffdd 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a302:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a304:	68fb      	ldr	r3, [r7, #12]
 810a306:	2b00      	cmp	r3, #0
 810a308:	d001      	beq.n	810a30e <SD_PowerON+0x9a>
    {
      return errorstate;
 810a30a:	68fb      	ldr	r3, [r7, #12]
 810a30c:	e03a      	b.n	810a384 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	681b      	ldr	r3, [r3, #0]
 810a312:	491e      	ldr	r1, [pc, #120]	@ (810a38c <SD_PowerON+0x118>)
 810a314:	4618      	mov	r0, r3
 810a316:	f002 fff4 	bl	810d302 <SDMMC_CmdAppOperCommand>
 810a31a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810a31c:	68fb      	ldr	r3, [r7, #12]
 810a31e:	2b00      	cmp	r3, #0
 810a320:	d002      	beq.n	810a328 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810a322:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810a326:	e02d      	b.n	810a384 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	681b      	ldr	r3, [r3, #0]
 810a32c:	2100      	movs	r1, #0
 810a32e:	4618      	mov	r0, r3
 810a330:	f002 ff01 	bl	810d136 <SDMMC_GetResponse>
 810a334:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810a336:	697b      	ldr	r3, [r7, #20]
 810a338:	0fdb      	lsrs	r3, r3, #31
 810a33a:	2b01      	cmp	r3, #1
 810a33c:	d101      	bne.n	810a342 <SD_PowerON+0xce>
 810a33e:	2301      	movs	r3, #1
 810a340:	e000      	b.n	810a344 <SD_PowerON+0xd0>
 810a342:	2300      	movs	r3, #0
 810a344:	613b      	str	r3, [r7, #16]

    count++;
 810a346:	68bb      	ldr	r3, [r7, #8]
 810a348:	3301      	adds	r3, #1
 810a34a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810a34c:	68bb      	ldr	r3, [r7, #8]
 810a34e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810a352:	4293      	cmp	r3, r2
 810a354:	d802      	bhi.n	810a35c <SD_PowerON+0xe8>
 810a356:	693b      	ldr	r3, [r7, #16]
 810a358:	2b00      	cmp	r3, #0
 810a35a:	d0cc      	beq.n	810a2f6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810a35c:	68bb      	ldr	r3, [r7, #8]
 810a35e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810a362:	4293      	cmp	r3, r2
 810a364:	d902      	bls.n	810a36c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810a366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810a36a:	e00b      	b.n	810a384 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810a36c:	687b      	ldr	r3, [r7, #4]
 810a36e:	2200      	movs	r2, #0
 810a370:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 810a372:	697b      	ldr	r3, [r7, #20]
 810a374:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810a378:	2b00      	cmp	r3, #0
 810a37a:	d002      	beq.n	810a382 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	2201      	movs	r2, #1
 810a380:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810a382:	2300      	movs	r3, #0
}
 810a384:	4618      	mov	r0, r3
 810a386:	3718      	adds	r7, #24
 810a388:	46bd      	mov	sp, r7
 810a38a:	bd80      	pop	{r7, pc}
 810a38c:	c1100000 	.word	0xc1100000

0810a390 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810a390:	b580      	push	{r7, lr}
 810a392:	b08c      	sub	sp, #48	@ 0x30
 810a394:	af00      	add	r7, sp, #0
 810a396:	6078      	str	r0, [r7, #4]
 810a398:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810a39a:	f7f8 fbf9 	bl	8102b90 <HAL_GetTick>
 810a39e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810a3a0:	683b      	ldr	r3, [r7, #0]
 810a3a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	681b      	ldr	r3, [r3, #0]
 810a3a8:	2100      	movs	r1, #0
 810a3aa:	4618      	mov	r0, r3
 810a3ac:	f002 fec3 	bl	810d136 <SDMMC_GetResponse>
 810a3b0:	4603      	mov	r3, r0
 810a3b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a3b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a3ba:	d102      	bne.n	810a3c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a3bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a3c0:	e0b0      	b.n	810a524 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810a3c2:	687b      	ldr	r3, [r7, #4]
 810a3c4:	681b      	ldr	r3, [r3, #0]
 810a3c6:	2140      	movs	r1, #64	@ 0x40
 810a3c8:	4618      	mov	r0, r3
 810a3ca:	f002 fef3 	bl	810d1b4 <SDMMC_CmdBlockLength>
 810a3ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a3d0:	6a3b      	ldr	r3, [r7, #32]
 810a3d2:	2b00      	cmp	r3, #0
 810a3d4:	d005      	beq.n	810a3e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a3de:	6a3b      	ldr	r3, [r7, #32]
 810a3e0:	e0a0      	b.n	810a524 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a3e2:	687b      	ldr	r3, [r7, #4]
 810a3e4:	681a      	ldr	r2, [r3, #0]
 810a3e6:	687b      	ldr	r3, [r7, #4]
 810a3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a3ea:	041b      	lsls	r3, r3, #16
 810a3ec:	4619      	mov	r1, r3
 810a3ee:	4610      	mov	r0, r2
 810a3f0:	f002 ff64 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a3f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a3f6:	6a3b      	ldr	r3, [r7, #32]
 810a3f8:	2b00      	cmp	r3, #0
 810a3fa:	d005      	beq.n	810a408 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a3fc:	687b      	ldr	r3, [r7, #4]
 810a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a400:	687b      	ldr	r3, [r7, #4]
 810a402:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a404:	6a3b      	ldr	r3, [r7, #32]
 810a406:	e08d      	b.n	810a524 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810a408:	f04f 33ff 	mov.w	r3, #4294967295
 810a40c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810a40e:	2340      	movs	r3, #64	@ 0x40
 810a410:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810a412:	2360      	movs	r3, #96	@ 0x60
 810a414:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810a416:	2302      	movs	r3, #2
 810a418:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810a41a:	2300      	movs	r3, #0
 810a41c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810a41e:	2301      	movs	r3, #1
 810a420:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	f107 0208 	add.w	r2, r7, #8
 810a42a:	4611      	mov	r1, r2
 810a42c:	4618      	mov	r0, r3
 810a42e:	f002 fe95 	bl	810d15c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	681b      	ldr	r3, [r3, #0]
 810a436:	4618      	mov	r0, r3
 810a438:	f003 f84c 	bl	810d4d4 <SDMMC_CmdStatusRegister>
 810a43c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a43e:	6a3b      	ldr	r3, [r7, #32]
 810a440:	2b00      	cmp	r3, #0
 810a442:	d02b      	beq.n	810a49c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810a44c:	6a3b      	ldr	r3, [r7, #32]
 810a44e:	e069      	b.n	810a524 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810a450:	687b      	ldr	r3, [r7, #4]
 810a452:	681b      	ldr	r3, [r3, #0]
 810a454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810a45a:	2b00      	cmp	r3, #0
 810a45c:	d013      	beq.n	810a486 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810a45e:	2300      	movs	r3, #0
 810a460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a462:	e00d      	b.n	810a480 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	681b      	ldr	r3, [r3, #0]
 810a468:	4618      	mov	r0, r3
 810a46a:	f002 fe01 	bl	810d070 <SDMMC_ReadFIFO>
 810a46e:	4602      	mov	r2, r0
 810a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a472:	601a      	str	r2, [r3, #0]
        pData++;
 810a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a476:	3304      	adds	r3, #4
 810a478:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 810a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a47c:	3301      	adds	r3, #1
 810a47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a482:	2b07      	cmp	r3, #7
 810a484:	d9ee      	bls.n	810a464 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a486:	f7f8 fb83 	bl	8102b90 <HAL_GetTick>
 810a48a:	4602      	mov	r2, r0
 810a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a48e:	1ad3      	subs	r3, r2, r3
 810a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a494:	d102      	bne.n	810a49c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a496:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a49a:	e043      	b.n	810a524 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810a49c:	687b      	ldr	r3, [r7, #4]
 810a49e:	681b      	ldr	r3, [r3, #0]
 810a4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4a2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d0d2      	beq.n	810a450 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810a4aa:	687b      	ldr	r3, [r7, #4]
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4b0:	f003 0308 	and.w	r3, r3, #8
 810a4b4:	2b00      	cmp	r3, #0
 810a4b6:	d001      	beq.n	810a4bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810a4b8:	2308      	movs	r3, #8
 810a4ba:	e033      	b.n	810a524 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810a4bc:	687b      	ldr	r3, [r7, #4]
 810a4be:	681b      	ldr	r3, [r3, #0]
 810a4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4c2:	f003 0302 	and.w	r3, r3, #2
 810a4c6:	2b00      	cmp	r3, #0
 810a4c8:	d001      	beq.n	810a4ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810a4ca:	2302      	movs	r3, #2
 810a4cc:	e02a      	b.n	810a524 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	681b      	ldr	r3, [r3, #0]
 810a4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4d4:	f003 0320 	and.w	r3, r3, #32
 810a4d8:	2b00      	cmp	r3, #0
 810a4da:	d017      	beq.n	810a50c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810a4dc:	2320      	movs	r3, #32
 810a4de:	e021      	b.n	810a524 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810a4e0:	687b      	ldr	r3, [r7, #4]
 810a4e2:	681b      	ldr	r3, [r3, #0]
 810a4e4:	4618      	mov	r0, r3
 810a4e6:	f002 fdc3 	bl	810d070 <SDMMC_ReadFIFO>
 810a4ea:	4602      	mov	r2, r0
 810a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a4ee:	601a      	str	r2, [r3, #0]
    pData++;
 810a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a4f2:	3304      	adds	r3, #4
 810a4f4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a4f6:	f7f8 fb4b 	bl	8102b90 <HAL_GetTick>
 810a4fa:	4602      	mov	r2, r0
 810a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a4fe:	1ad3      	subs	r3, r2, r3
 810a500:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a504:	d102      	bne.n	810a50c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a506:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a50a:	e00b      	b.n	810a524 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810a50c:	687b      	ldr	r3, [r7, #4]
 810a50e:	681b      	ldr	r3, [r3, #0]
 810a510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810a516:	2b00      	cmp	r3, #0
 810a518:	d1e2      	bne.n	810a4e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	4a03      	ldr	r2, [pc, #12]	@ (810a52c <SD_SendSDStatus+0x19c>)
 810a520:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 810a522:	2300      	movs	r3, #0
}
 810a524:	4618      	mov	r0, r3
 810a526:	3730      	adds	r7, #48	@ 0x30
 810a528:	46bd      	mov	sp, r7
 810a52a:	bd80      	pop	{r7, pc}
 810a52c:	18000f3a 	.word	0x18000f3a

0810a530 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810a530:	b580      	push	{r7, lr}
 810a532:	b084      	sub	sp, #16
 810a534:	af00      	add	r7, sp, #0
 810a536:	6078      	str	r0, [r7, #4]
 810a538:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810a53a:	683b      	ldr	r3, [r7, #0]
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	d102      	bne.n	810a546 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810a540:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810a544:	e018      	b.n	810a578 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a546:	687b      	ldr	r3, [r7, #4]
 810a548:	681a      	ldr	r2, [r3, #0]
 810a54a:	687b      	ldr	r3, [r7, #4]
 810a54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a54e:	041b      	lsls	r3, r3, #16
 810a550:	4619      	mov	r1, r3
 810a552:	4610      	mov	r0, r2
 810a554:	f002 ff9b 	bl	810d48e <SDMMC_CmdSendStatus>
 810a558:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a55a:	68fb      	ldr	r3, [r7, #12]
 810a55c:	2b00      	cmp	r3, #0
 810a55e:	d001      	beq.n	810a564 <SD_SendStatus+0x34>
  {
    return errorstate;
 810a560:	68fb      	ldr	r3, [r7, #12]
 810a562:	e009      	b.n	810a578 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	681b      	ldr	r3, [r3, #0]
 810a568:	2100      	movs	r1, #0
 810a56a:	4618      	mov	r0, r3
 810a56c:	f002 fde3 	bl	810d136 <SDMMC_GetResponse>
 810a570:	4602      	mov	r2, r0
 810a572:	683b      	ldr	r3, [r7, #0]
 810a574:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810a576:	2300      	movs	r3, #0
}
 810a578:	4618      	mov	r0, r3
 810a57a:	3710      	adds	r7, #16
 810a57c:	46bd      	mov	sp, r7
 810a57e:	bd80      	pop	{r7, pc}

0810a580 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810a580:	b580      	push	{r7, lr}
 810a582:	b086      	sub	sp, #24
 810a584:	af00      	add	r7, sp, #0
 810a586:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810a588:	2300      	movs	r3, #0
 810a58a:	60fb      	str	r3, [r7, #12]
 810a58c:	2300      	movs	r3, #0
 810a58e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	681b      	ldr	r3, [r3, #0]
 810a594:	2100      	movs	r1, #0
 810a596:	4618      	mov	r0, r3
 810a598:	f002 fdcd 	bl	810d136 <SDMMC_GetResponse>
 810a59c:	4603      	mov	r3, r0
 810a59e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a5a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a5a6:	d102      	bne.n	810a5ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a5a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a5ac:	e02f      	b.n	810a60e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810a5ae:	f107 030c 	add.w	r3, r7, #12
 810a5b2:	4619      	mov	r1, r3
 810a5b4:	6878      	ldr	r0, [r7, #4]
 810a5b6:	f000 f879 	bl	810a6ac <SD_FindSCR>
 810a5ba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a5bc:	697b      	ldr	r3, [r7, #20]
 810a5be:	2b00      	cmp	r3, #0
 810a5c0:	d001      	beq.n	810a5c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810a5c2:	697b      	ldr	r3, [r7, #20]
 810a5c4:	e023      	b.n	810a60e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810a5c6:	693b      	ldr	r3, [r7, #16]
 810a5c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810a5cc:	2b00      	cmp	r3, #0
 810a5ce:	d01c      	beq.n	810a60a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	681a      	ldr	r2, [r3, #0]
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a5d8:	041b      	lsls	r3, r3, #16
 810a5da:	4619      	mov	r1, r3
 810a5dc:	4610      	mov	r0, r2
 810a5de:	f002 fe6d 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a5e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a5e4:	697b      	ldr	r3, [r7, #20]
 810a5e6:	2b00      	cmp	r3, #0
 810a5e8:	d001      	beq.n	810a5ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810a5ea:	697b      	ldr	r3, [r7, #20]
 810a5ec:	e00f      	b.n	810a60e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810a5ee:	687b      	ldr	r3, [r7, #4]
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	2102      	movs	r1, #2
 810a5f4:	4618      	mov	r0, r3
 810a5f6:	f002 fea4 	bl	810d342 <SDMMC_CmdBusWidth>
 810a5fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a5fc:	697b      	ldr	r3, [r7, #20]
 810a5fe:	2b00      	cmp	r3, #0
 810a600:	d001      	beq.n	810a606 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810a602:	697b      	ldr	r3, [r7, #20]
 810a604:	e003      	b.n	810a60e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810a606:	2300      	movs	r3, #0
 810a608:	e001      	b.n	810a60e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810a60a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810a60e:	4618      	mov	r0, r3
 810a610:	3718      	adds	r7, #24
 810a612:	46bd      	mov	sp, r7
 810a614:	bd80      	pop	{r7, pc}

0810a616 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810a616:	b580      	push	{r7, lr}
 810a618:	b086      	sub	sp, #24
 810a61a:	af00      	add	r7, sp, #0
 810a61c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810a61e:	2300      	movs	r3, #0
 810a620:	60fb      	str	r3, [r7, #12]
 810a622:	2300      	movs	r3, #0
 810a624:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	681b      	ldr	r3, [r3, #0]
 810a62a:	2100      	movs	r1, #0
 810a62c:	4618      	mov	r0, r3
 810a62e:	f002 fd82 	bl	810d136 <SDMMC_GetResponse>
 810a632:	4603      	mov	r3, r0
 810a634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a63c:	d102      	bne.n	810a644 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810a63e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a642:	e02f      	b.n	810a6a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810a644:	f107 030c 	add.w	r3, r7, #12
 810a648:	4619      	mov	r1, r3
 810a64a:	6878      	ldr	r0, [r7, #4]
 810a64c:	f000 f82e 	bl	810a6ac <SD_FindSCR>
 810a650:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810a652:	697b      	ldr	r3, [r7, #20]
 810a654:	2b00      	cmp	r3, #0
 810a656:	d001      	beq.n	810a65c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810a658:	697b      	ldr	r3, [r7, #20]
 810a65a:	e023      	b.n	810a6a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810a65c:	693b      	ldr	r3, [r7, #16]
 810a65e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a662:	2b00      	cmp	r3, #0
 810a664:	d01c      	beq.n	810a6a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810a666:	687b      	ldr	r3, [r7, #4]
 810a668:	681a      	ldr	r2, [r3, #0]
 810a66a:	687b      	ldr	r3, [r7, #4]
 810a66c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a66e:	041b      	lsls	r3, r3, #16
 810a670:	4619      	mov	r1, r3
 810a672:	4610      	mov	r0, r2
 810a674:	f002 fe22 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a678:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a67a:	697b      	ldr	r3, [r7, #20]
 810a67c:	2b00      	cmp	r3, #0
 810a67e:	d001      	beq.n	810a684 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810a680:	697b      	ldr	r3, [r7, #20]
 810a682:	e00f      	b.n	810a6a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810a684:	687b      	ldr	r3, [r7, #4]
 810a686:	681b      	ldr	r3, [r3, #0]
 810a688:	2100      	movs	r1, #0
 810a68a:	4618      	mov	r0, r3
 810a68c:	f002 fe59 	bl	810d342 <SDMMC_CmdBusWidth>
 810a690:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810a692:	697b      	ldr	r3, [r7, #20]
 810a694:	2b00      	cmp	r3, #0
 810a696:	d001      	beq.n	810a69c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810a698:	697b      	ldr	r3, [r7, #20]
 810a69a:	e003      	b.n	810a6a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810a69c:	2300      	movs	r3, #0
 810a69e:	e001      	b.n	810a6a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810a6a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810a6a4:	4618      	mov	r0, r3
 810a6a6:	3718      	adds	r7, #24
 810a6a8:	46bd      	mov	sp, r7
 810a6aa:	bd80      	pop	{r7, pc}

0810a6ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810a6ac:	b580      	push	{r7, lr}
 810a6ae:	b08e      	sub	sp, #56	@ 0x38
 810a6b0:	af00      	add	r7, sp, #0
 810a6b2:	6078      	str	r0, [r7, #4]
 810a6b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810a6b6:	f7f8 fa6b 	bl	8102b90 <HAL_GetTick>
 810a6ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 810a6bc:	2300      	movs	r3, #0
 810a6be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810a6c0:	2300      	movs	r3, #0
 810a6c2:	60bb      	str	r3, [r7, #8]
 810a6c4:	2300      	movs	r3, #0
 810a6c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810a6c8:	683b      	ldr	r3, [r7, #0]
 810a6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	2108      	movs	r1, #8
 810a6d2:	4618      	mov	r0, r3
 810a6d4:	f002 fd6e 	bl	810d1b4 <SDMMC_CmdBlockLength>
 810a6d8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a6dc:	2b00      	cmp	r3, #0
 810a6de:	d001      	beq.n	810a6e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 810a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a6e2:	e0ad      	b.n	810a840 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	681a      	ldr	r2, [r3, #0]
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a6ec:	041b      	lsls	r3, r3, #16
 810a6ee:	4619      	mov	r1, r3
 810a6f0:	4610      	mov	r0, r2
 810a6f2:	f002 fde3 	bl	810d2bc <SDMMC_CmdAppCommand>
 810a6f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a6fa:	2b00      	cmp	r3, #0
 810a6fc:	d001      	beq.n	810a702 <SD_FindSCR+0x56>
  {
    return errorstate;
 810a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a700:	e09e      	b.n	810a840 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810a702:	f04f 33ff 	mov.w	r3, #4294967295
 810a706:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810a708:	2308      	movs	r3, #8
 810a70a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810a70c:	2330      	movs	r3, #48	@ 0x30
 810a70e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810a710:	2302      	movs	r3, #2
 810a712:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810a714:	2300      	movs	r3, #0
 810a716:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810a718:	2301      	movs	r3, #1
 810a71a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	681b      	ldr	r3, [r3, #0]
 810a720:	f107 0210 	add.w	r2, r7, #16
 810a724:	4611      	mov	r1, r2
 810a726:	4618      	mov	r0, r3
 810a728:	f002 fd18 	bl	810d15c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810a72c:	687b      	ldr	r3, [r7, #4]
 810a72e:	681b      	ldr	r3, [r3, #0]
 810a730:	4618      	mov	r0, r3
 810a732:	f002 fe29 	bl	810d388 <SDMMC_CmdSendSCR>
 810a736:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810a738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a73a:	2b00      	cmp	r3, #0
 810a73c:	d027      	beq.n	810a78e <SD_FindSCR+0xe2>
  {
    return errorstate;
 810a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a740:	e07e      	b.n	810a840 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810a74c:	2b00      	cmp	r3, #0
 810a74e:	d113      	bne.n	810a778 <SD_FindSCR+0xcc>
 810a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a752:	2b00      	cmp	r3, #0
 810a754:	d110      	bne.n	810a778 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	4618      	mov	r0, r3
 810a75c:	f002 fc88 	bl	810d070 <SDMMC_ReadFIFO>
 810a760:	4603      	mov	r3, r0
 810a762:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810a764:	687b      	ldr	r3, [r7, #4]
 810a766:	681b      	ldr	r3, [r3, #0]
 810a768:	4618      	mov	r0, r3
 810a76a:	f002 fc81 	bl	810d070 <SDMMC_ReadFIFO>
 810a76e:	4603      	mov	r3, r0
 810a770:	60fb      	str	r3, [r7, #12]
      index++;
 810a772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a774:	3301      	adds	r3, #1
 810a776:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810a778:	f7f8 fa0a 	bl	8102b90 <HAL_GetTick>
 810a77c:	4602      	mov	r2, r0
 810a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a780:	1ad3      	subs	r3, r2, r3
 810a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a786:	d102      	bne.n	810a78e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a788:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a78c:	e058      	b.n	810a840 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	681b      	ldr	r3, [r3, #0]
 810a792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a794:	f240 532a 	movw	r3, #1322	@ 0x52a
 810a798:	4013      	ands	r3, r2
 810a79a:	2b00      	cmp	r3, #0
 810a79c:	d0d1      	beq.n	810a742 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	681b      	ldr	r3, [r3, #0]
 810a7a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a7a4:	f003 0308 	and.w	r3, r3, #8
 810a7a8:	2b00      	cmp	r3, #0
 810a7aa:	d005      	beq.n	810a7b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	681b      	ldr	r3, [r3, #0]
 810a7b0:	2208      	movs	r2, #8
 810a7b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810a7b4:	2308      	movs	r3, #8
 810a7b6:	e043      	b.n	810a840 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	681b      	ldr	r3, [r3, #0]
 810a7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a7be:	f003 0302 	and.w	r3, r3, #2
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	d005      	beq.n	810a7d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	681b      	ldr	r3, [r3, #0]
 810a7ca:	2202      	movs	r2, #2
 810a7cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810a7ce:	2302      	movs	r3, #2
 810a7d0:	e036      	b.n	810a840 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	681b      	ldr	r3, [r3, #0]
 810a7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a7d8:	f003 0320 	and.w	r3, r3, #32
 810a7dc:	2b00      	cmp	r3, #0
 810a7de:	d005      	beq.n	810a7ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810a7e0:	687b      	ldr	r3, [r7, #4]
 810a7e2:	681b      	ldr	r3, [r3, #0]
 810a7e4:	2220      	movs	r2, #32
 810a7e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810a7e8:	2320      	movs	r3, #32
 810a7ea:	e029      	b.n	810a840 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810a7ec:	687b      	ldr	r3, [r7, #4]
 810a7ee:	681b      	ldr	r3, [r3, #0]
 810a7f0:	4a15      	ldr	r2, [pc, #84]	@ (810a848 <SD_FindSCR+0x19c>)
 810a7f2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a7f4:	68fb      	ldr	r3, [r7, #12]
 810a7f6:	061a      	lsls	r2, r3, #24
 810a7f8:	68fb      	ldr	r3, [r7, #12]
 810a7fa:	021b      	lsls	r3, r3, #8
 810a7fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810a800:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 810a802:	68fb      	ldr	r3, [r7, #12]
 810a804:	0a1b      	lsrs	r3, r3, #8
 810a806:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a80a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 810a80c:	68fb      	ldr	r3, [r7, #12]
 810a80e:	0e1b      	lsrs	r3, r3, #24
 810a810:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810a812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a814:	601a      	str	r2, [r3, #0]
    scr++;
 810a816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a818:	3304      	adds	r3, #4
 810a81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a81c:	68bb      	ldr	r3, [r7, #8]
 810a81e:	061a      	lsls	r2, r3, #24
 810a820:	68bb      	ldr	r3, [r7, #8]
 810a822:	021b      	lsls	r3, r3, #8
 810a824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810a828:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810a82a:	68bb      	ldr	r3, [r7, #8]
 810a82c:	0a1b      	lsrs	r3, r3, #8
 810a82e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a832:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810a834:	68bb      	ldr	r3, [r7, #8]
 810a836:	0e1b      	lsrs	r3, r3, #24
 810a838:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a83c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810a83e:	2300      	movs	r3, #0
}
 810a840:	4618      	mov	r0, r3
 810a842:	3738      	adds	r7, #56	@ 0x38
 810a844:	46bd      	mov	sp, r7
 810a846:	bd80      	pop	{r7, pc}
 810a848:	18000f3a 	.word	0x18000f3a

0810a84c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 810a84c:	b580      	push	{r7, lr}
 810a84e:	b082      	sub	sp, #8
 810a850:	af00      	add	r7, sp, #0
 810a852:	6078      	str	r0, [r7, #4]
 810a854:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	2b00      	cmp	r3, #0
 810a85a:	d101      	bne.n	810a860 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 810a85c:	2301      	movs	r3, #1
 810a85e:	e02b      	b.n	810a8b8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810a866:	b2db      	uxtb	r3, r3
 810a868:	2b00      	cmp	r3, #0
 810a86a:	d106      	bne.n	810a87a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 810a86c:	687b      	ldr	r3, [r7, #4]
 810a86e:	2200      	movs	r2, #0
 810a870:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810a874:	6878      	ldr	r0, [r7, #4]
 810a876:	f7f7 ff11 	bl	810269c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	2202      	movs	r2, #2
 810a87e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810a882:	687b      	ldr	r3, [r7, #4]
 810a884:	681a      	ldr	r2, [r3, #0]
 810a886:	687b      	ldr	r3, [r7, #4]
 810a888:	3304      	adds	r3, #4
 810a88a:	4619      	mov	r1, r3
 810a88c:	4610      	mov	r0, r2
 810a88e:	f002 faff 	bl	810ce90 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	6818      	ldr	r0, [r3, #0]
 810a896:	687b      	ldr	r3, [r7, #4]
 810a898:	685b      	ldr	r3, [r3, #4]
 810a89a:	461a      	mov	r2, r3
 810a89c:	6839      	ldr	r1, [r7, #0]
 810a89e:	f002 fb54 	bl	810cf4a <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810a8a2:	4b07      	ldr	r3, [pc, #28]	@ (810a8c0 <HAL_SDRAM_Init+0x74>)
 810a8a4:	681b      	ldr	r3, [r3, #0]
 810a8a6:	4a06      	ldr	r2, [pc, #24]	@ (810a8c0 <HAL_SDRAM_Init+0x74>)
 810a8a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810a8ac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	2201      	movs	r2, #1
 810a8b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810a8b6:	2300      	movs	r3, #0
}
 810a8b8:	4618      	mov	r0, r3
 810a8ba:	3708      	adds	r7, #8
 810a8bc:	46bd      	mov	sp, r7
 810a8be:	bd80      	pop	{r7, pc}
 810a8c0:	52004000 	.word	0x52004000

0810a8c4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810a8c4:	b580      	push	{r7, lr}
 810a8c6:	b084      	sub	sp, #16
 810a8c8:	af00      	add	r7, sp, #0
 810a8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 810a8cc:	687b      	ldr	r3, [r7, #4]
 810a8ce:	2b00      	cmp	r3, #0
 810a8d0:	d101      	bne.n	810a8d6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810a8d2:	2301      	movs	r3, #1
 810a8d4:	e05e      	b.n	810a994 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810a8d6:	687b      	ldr	r3, [r7, #4]
 810a8d8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 810a8dc:	b2db      	uxtb	r3, r3
 810a8de:	2b00      	cmp	r3, #0
 810a8e0:	d106      	bne.n	810a8f0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810a8e2:	687b      	ldr	r3, [r7, #4]
 810a8e4:	2200      	movs	r2, #0
 810a8e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810a8ea:	6878      	ldr	r0, [r7, #4]
 810a8ec:	f7f7 f9da 	bl	8101ca4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	2202      	movs	r2, #2
 810a8f4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 810a8f8:	687b      	ldr	r3, [r7, #4]
 810a8fa:	681b      	ldr	r3, [r3, #0]
 810a8fc:	681a      	ldr	r2, [r3, #0]
 810a8fe:	687b      	ldr	r3, [r7, #4]
 810a900:	681b      	ldr	r3, [r3, #0]
 810a902:	f022 0203 	bic.w	r2, r2, #3
 810a906:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	681b      	ldr	r3, [r3, #0]
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 810a910:	68fa      	ldr	r2, [r7, #12]
 810a912:	4b22      	ldr	r3, [pc, #136]	@ (810a99c <HAL_SPDIFRX_Init+0xd8>)
 810a914:	4013      	ands	r3, r2
 810a916:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810a918:	687b      	ldr	r3, [r7, #4]
 810a91a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 810a91c:	687b      	ldr	r3, [r7, #4]
 810a91e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810a920:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810a926:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 810a92c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810a932:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810a934:	687b      	ldr	r3, [r7, #4]
 810a936:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 810a938:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810a93e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810a940:	687b      	ldr	r3, [r7, #4]
 810a942:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810a944:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810a946:	687b      	ldr	r3, [r7, #4]
 810a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 810a94a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 810a950:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810a952:	68fa      	ldr	r2, [r7, #12]
 810a954:	4313      	orrs	r3, r2
 810a956:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810a95e:	2b01      	cmp	r3, #1
 810a960:	d103      	bne.n	810a96a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810a962:	68fb      	ldr	r3, [r7, #12]
 810a964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a968:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 810a96a:	687b      	ldr	r3, [r7, #4]
 810a96c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810a970:	2b01      	cmp	r3, #1
 810a972:	d103      	bne.n	810a97c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810a974:	68fb      	ldr	r3, [r7, #12]
 810a976:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810a97a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 810a97c:	687b      	ldr	r3, [r7, #4]
 810a97e:	681b      	ldr	r3, [r3, #0]
 810a980:	68fa      	ldr	r2, [r7, #12]
 810a982:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810a984:	687b      	ldr	r3, [r7, #4]
 810a986:	2200      	movs	r2, #0
 810a988:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	2201      	movs	r2, #1
 810a98e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810a992:	2300      	movs	r3, #0
}
 810a994:	4618      	mov	r0, r3
 810a996:	3710      	adds	r7, #16
 810a998:	46bd      	mov	sp, r7
 810a99a:	bd80      	pop	{r7, pc}
 810a99c:	ffc88407 	.word	0xffc88407

0810a9a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a9a0:	b580      	push	{r7, lr}
 810a9a2:	b084      	sub	sp, #16
 810a9a4:	af00      	add	r7, sp, #0
 810a9a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	2b00      	cmp	r3, #0
 810a9ac:	d101      	bne.n	810a9b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810a9ae:	2301      	movs	r3, #1
 810a9b0:	e10f      	b.n	810abd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	2200      	movs	r2, #0
 810a9b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	681b      	ldr	r3, [r3, #0]
 810a9bc:	4a87      	ldr	r2, [pc, #540]	@ (810abdc <HAL_SPI_Init+0x23c>)
 810a9be:	4293      	cmp	r3, r2
 810a9c0:	d00f      	beq.n	810a9e2 <HAL_SPI_Init+0x42>
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	681b      	ldr	r3, [r3, #0]
 810a9c6:	4a86      	ldr	r2, [pc, #536]	@ (810abe0 <HAL_SPI_Init+0x240>)
 810a9c8:	4293      	cmp	r3, r2
 810a9ca:	d00a      	beq.n	810a9e2 <HAL_SPI_Init+0x42>
 810a9cc:	687b      	ldr	r3, [r7, #4]
 810a9ce:	681b      	ldr	r3, [r3, #0]
 810a9d0:	4a84      	ldr	r2, [pc, #528]	@ (810abe4 <HAL_SPI_Init+0x244>)
 810a9d2:	4293      	cmp	r3, r2
 810a9d4:	d005      	beq.n	810a9e2 <HAL_SPI_Init+0x42>
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	68db      	ldr	r3, [r3, #12]
 810a9da:	2b0f      	cmp	r3, #15
 810a9dc:	d901      	bls.n	810a9e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810a9de:	2301      	movs	r3, #1
 810a9e0:	e0f7      	b.n	810abd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a9e2:	6878      	ldr	r0, [r7, #4]
 810a9e4:	f000 f900 	bl	810abe8 <SPI_GetPacketSize>
 810a9e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a9ea:	687b      	ldr	r3, [r7, #4]
 810a9ec:	681b      	ldr	r3, [r3, #0]
 810a9ee:	4a7b      	ldr	r2, [pc, #492]	@ (810abdc <HAL_SPI_Init+0x23c>)
 810a9f0:	4293      	cmp	r3, r2
 810a9f2:	d00c      	beq.n	810aa0e <HAL_SPI_Init+0x6e>
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	681b      	ldr	r3, [r3, #0]
 810a9f8:	4a79      	ldr	r2, [pc, #484]	@ (810abe0 <HAL_SPI_Init+0x240>)
 810a9fa:	4293      	cmp	r3, r2
 810a9fc:	d007      	beq.n	810aa0e <HAL_SPI_Init+0x6e>
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	681b      	ldr	r3, [r3, #0]
 810aa02:	4a78      	ldr	r2, [pc, #480]	@ (810abe4 <HAL_SPI_Init+0x244>)
 810aa04:	4293      	cmp	r3, r2
 810aa06:	d002      	beq.n	810aa0e <HAL_SPI_Init+0x6e>
 810aa08:	68fb      	ldr	r3, [r7, #12]
 810aa0a:	2b08      	cmp	r3, #8
 810aa0c:	d811      	bhi.n	810aa32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810aa0e:	687b      	ldr	r3, [r7, #4]
 810aa10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810aa12:	4a72      	ldr	r2, [pc, #456]	@ (810abdc <HAL_SPI_Init+0x23c>)
 810aa14:	4293      	cmp	r3, r2
 810aa16:	d009      	beq.n	810aa2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810aa18:	687b      	ldr	r3, [r7, #4]
 810aa1a:	681b      	ldr	r3, [r3, #0]
 810aa1c:	4a70      	ldr	r2, [pc, #448]	@ (810abe0 <HAL_SPI_Init+0x240>)
 810aa1e:	4293      	cmp	r3, r2
 810aa20:	d004      	beq.n	810aa2c <HAL_SPI_Init+0x8c>
 810aa22:	687b      	ldr	r3, [r7, #4]
 810aa24:	681b      	ldr	r3, [r3, #0]
 810aa26:	4a6f      	ldr	r2, [pc, #444]	@ (810abe4 <HAL_SPI_Init+0x244>)
 810aa28:	4293      	cmp	r3, r2
 810aa2a:	d104      	bne.n	810aa36 <HAL_SPI_Init+0x96>
 810aa2c:	68fb      	ldr	r3, [r7, #12]
 810aa2e:	2b10      	cmp	r3, #16
 810aa30:	d901      	bls.n	810aa36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810aa32:	2301      	movs	r3, #1
 810aa34:	e0cd      	b.n	810abd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810aa36:	687b      	ldr	r3, [r7, #4]
 810aa38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810aa3c:	b2db      	uxtb	r3, r3
 810aa3e:	2b00      	cmp	r3, #0
 810aa40:	d106      	bne.n	810aa50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810aa42:	687b      	ldr	r3, [r7, #4]
 810aa44:	2200      	movs	r2, #0
 810aa46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810aa4a:	6878      	ldr	r0, [r7, #4]
 810aa4c:	f7f7 f990 	bl	8101d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810aa50:	687b      	ldr	r3, [r7, #4]
 810aa52:	2202      	movs	r2, #2
 810aa54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	681b      	ldr	r3, [r3, #0]
 810aa5c:	681a      	ldr	r2, [r3, #0]
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	681b      	ldr	r3, [r3, #0]
 810aa62:	f022 0201 	bic.w	r2, r2, #1
 810aa66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810aa68:	687b      	ldr	r3, [r7, #4]
 810aa6a:	681b      	ldr	r3, [r3, #0]
 810aa6c:	689b      	ldr	r3, [r3, #8]
 810aa6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810aa72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810aa74:	687b      	ldr	r3, [r7, #4]
 810aa76:	699b      	ldr	r3, [r3, #24]
 810aa78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810aa7c:	d119      	bne.n	810aab2 <HAL_SPI_Init+0x112>
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	685b      	ldr	r3, [r3, #4]
 810aa82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810aa86:	d103      	bne.n	810aa90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810aa8c:	2b00      	cmp	r3, #0
 810aa8e:	d008      	beq.n	810aaa2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810aa90:	687b      	ldr	r3, [r7, #4]
 810aa92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d10c      	bne.n	810aab2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810aa9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aaa0:	d107      	bne.n	810aab2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810aaa2:	687b      	ldr	r3, [r7, #4]
 810aaa4:	681b      	ldr	r3, [r3, #0]
 810aaa6:	681a      	ldr	r2, [r3, #0]
 810aaa8:	687b      	ldr	r3, [r7, #4]
 810aaaa:	681b      	ldr	r3, [r3, #0]
 810aaac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810aab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	685b      	ldr	r3, [r3, #4]
 810aab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	d00f      	beq.n	810aade <HAL_SPI_Init+0x13e>
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	68db      	ldr	r3, [r3, #12]
 810aac2:	2b06      	cmp	r3, #6
 810aac4:	d90b      	bls.n	810aade <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	681b      	ldr	r3, [r3, #0]
 810aaca:	681b      	ldr	r3, [r3, #0]
 810aacc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810aad0:	687b      	ldr	r3, [r7, #4]
 810aad2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810aad4:	687b      	ldr	r3, [r7, #4]
 810aad6:	681b      	ldr	r3, [r3, #0]
 810aad8:	430a      	orrs	r2, r1
 810aada:	601a      	str	r2, [r3, #0]
 810aadc:	e007      	b.n	810aaee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810aade:	687b      	ldr	r3, [r7, #4]
 810aae0:	681b      	ldr	r3, [r3, #0]
 810aae2:	681a      	ldr	r2, [r3, #0]
 810aae4:	687b      	ldr	r3, [r7, #4]
 810aae6:	681b      	ldr	r3, [r3, #0]
 810aae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810aaec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810aaee:	687b      	ldr	r3, [r7, #4]
 810aaf0:	69da      	ldr	r2, [r3, #28]
 810aaf2:	687b      	ldr	r3, [r7, #4]
 810aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aaf6:	431a      	orrs	r2, r3
 810aaf8:	68bb      	ldr	r3, [r7, #8]
 810aafa:	431a      	orrs	r2, r3
 810aafc:	687b      	ldr	r3, [r7, #4]
 810aafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ab00:	ea42 0103 	orr.w	r1, r2, r3
 810ab04:	687b      	ldr	r3, [r7, #4]
 810ab06:	68da      	ldr	r2, [r3, #12]
 810ab08:	687b      	ldr	r3, [r7, #4]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	430a      	orrs	r2, r1
 810ab0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810ab14:	687b      	ldr	r3, [r7, #4]
 810ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ab18:	431a      	orrs	r2, r3
 810ab1a:	687b      	ldr	r3, [r7, #4]
 810ab1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ab1e:	431a      	orrs	r2, r3
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	699b      	ldr	r3, [r3, #24]
 810ab24:	431a      	orrs	r2, r3
 810ab26:	687b      	ldr	r3, [r7, #4]
 810ab28:	691b      	ldr	r3, [r3, #16]
 810ab2a:	431a      	orrs	r2, r3
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	695b      	ldr	r3, [r3, #20]
 810ab30:	431a      	orrs	r2, r3
 810ab32:	687b      	ldr	r3, [r7, #4]
 810ab34:	6a1b      	ldr	r3, [r3, #32]
 810ab36:	431a      	orrs	r2, r3
 810ab38:	687b      	ldr	r3, [r7, #4]
 810ab3a:	685b      	ldr	r3, [r3, #4]
 810ab3c:	431a      	orrs	r2, r3
 810ab3e:	687b      	ldr	r3, [r7, #4]
 810ab40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ab42:	431a      	orrs	r2, r3
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	689b      	ldr	r3, [r3, #8]
 810ab48:	431a      	orrs	r2, r3
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ab4e:	ea42 0103 	orr.w	r1, r2, r3
 810ab52:	687b      	ldr	r3, [r7, #4]
 810ab54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	681b      	ldr	r3, [r3, #0]
 810ab5a:	430a      	orrs	r2, r1
 810ab5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	685b      	ldr	r3, [r3, #4]
 810ab62:	2b00      	cmp	r3, #0
 810ab64:	d113      	bne.n	810ab8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	689b      	ldr	r3, [r3, #8]
 810ab6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 810ab70:	687b      	ldr	r3, [r7, #4]
 810ab72:	681b      	ldr	r3, [r3, #0]
 810ab74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810ab78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	681b      	ldr	r3, [r3, #0]
 810ab7e:	689b      	ldr	r3, [r3, #8]
 810ab80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810ab84:	687b      	ldr	r3, [r7, #4]
 810ab86:	681b      	ldr	r3, [r3, #0]
 810ab88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 810ab8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	681b      	ldr	r3, [r3, #0]
 810ab92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ab94:	687b      	ldr	r3, [r7, #4]
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	f022 0201 	bic.w	r2, r2, #1
 810ab9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	685b      	ldr	r3, [r3, #4]
 810aba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810aba6:	2b00      	cmp	r3, #0
 810aba8:	d00a      	beq.n	810abc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810abaa:	687b      	ldr	r3, [r7, #4]
 810abac:	681b      	ldr	r3, [r3, #0]
 810abae:	68db      	ldr	r3, [r3, #12]
 810abb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810abb4:	687b      	ldr	r3, [r7, #4]
 810abb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810abb8:	687b      	ldr	r3, [r7, #4]
 810abba:	681b      	ldr	r3, [r3, #0]
 810abbc:	430a      	orrs	r2, r1
 810abbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810abc0:	687b      	ldr	r3, [r7, #4]
 810abc2:	2200      	movs	r2, #0
 810abc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810abc8:	687b      	ldr	r3, [r7, #4]
 810abca:	2201      	movs	r2, #1
 810abcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 810abd0:	2300      	movs	r3, #0
}
 810abd2:	4618      	mov	r0, r3
 810abd4:	3710      	adds	r7, #16
 810abd6:	46bd      	mov	sp, r7
 810abd8:	bd80      	pop	{r7, pc}
 810abda:	bf00      	nop
 810abdc:	40013000 	.word	0x40013000
 810abe0:	40003800 	.word	0x40003800
 810abe4:	40003c00 	.word	0x40003c00

0810abe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810abe8:	b480      	push	{r7}
 810abea:	b085      	sub	sp, #20
 810abec:	af00      	add	r7, sp, #0
 810abee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810abf0:	687b      	ldr	r3, [r7, #4]
 810abf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810abf4:	095b      	lsrs	r3, r3, #5
 810abf6:	3301      	adds	r3, #1
 810abf8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810abfa:	687b      	ldr	r3, [r7, #4]
 810abfc:	68db      	ldr	r3, [r3, #12]
 810abfe:	3301      	adds	r3, #1
 810ac00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810ac02:	68bb      	ldr	r3, [r7, #8]
 810ac04:	3307      	adds	r3, #7
 810ac06:	08db      	lsrs	r3, r3, #3
 810ac08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810ac0a:	68bb      	ldr	r3, [r7, #8]
 810ac0c:	68fa      	ldr	r2, [r7, #12]
 810ac0e:	fb02 f303 	mul.w	r3, r2, r3
}
 810ac12:	4618      	mov	r0, r3
 810ac14:	3714      	adds	r7, #20
 810ac16:	46bd      	mov	sp, r7
 810ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac1c:	4770      	bx	lr

0810ac1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810ac1e:	b580      	push	{r7, lr}
 810ac20:	b082      	sub	sp, #8
 810ac22:	af00      	add	r7, sp, #0
 810ac24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	2b00      	cmp	r3, #0
 810ac2a:	d101      	bne.n	810ac30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ac2c:	2301      	movs	r3, #1
 810ac2e:	e049      	b.n	810acc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ac30:	687b      	ldr	r3, [r7, #4]
 810ac32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ac36:	b2db      	uxtb	r3, r3
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d106      	bne.n	810ac4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	2200      	movs	r2, #0
 810ac40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ac44:	6878      	ldr	r0, [r7, #4]
 810ac46:	f7f7 f9bd 	bl	8101fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ac4a:	687b      	ldr	r3, [r7, #4]
 810ac4c:	2202      	movs	r2, #2
 810ac4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ac52:	687b      	ldr	r3, [r7, #4]
 810ac54:	681a      	ldr	r2, [r3, #0]
 810ac56:	687b      	ldr	r3, [r7, #4]
 810ac58:	3304      	adds	r3, #4
 810ac5a:	4619      	mov	r1, r3
 810ac5c:	4610      	mov	r0, r2
 810ac5e:	f000 fa03 	bl	810b068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ac62:	687b      	ldr	r3, [r7, #4]
 810ac64:	2201      	movs	r2, #1
 810ac66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac6a:	687b      	ldr	r3, [r7, #4]
 810ac6c:	2201      	movs	r2, #1
 810ac6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ac72:	687b      	ldr	r3, [r7, #4]
 810ac74:	2201      	movs	r2, #1
 810ac76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ac7a:	687b      	ldr	r3, [r7, #4]
 810ac7c:	2201      	movs	r2, #1
 810ac7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ac82:	687b      	ldr	r3, [r7, #4]
 810ac84:	2201      	movs	r2, #1
 810ac86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ac8a:	687b      	ldr	r3, [r7, #4]
 810ac8c:	2201      	movs	r2, #1
 810ac8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	2201      	movs	r2, #1
 810ac96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	2201      	movs	r2, #1
 810ac9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810aca2:	687b      	ldr	r3, [r7, #4]
 810aca4:	2201      	movs	r2, #1
 810aca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810acaa:	687b      	ldr	r3, [r7, #4]
 810acac:	2201      	movs	r2, #1
 810acae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810acb2:	687b      	ldr	r3, [r7, #4]
 810acb4:	2201      	movs	r2, #1
 810acb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810acba:	687b      	ldr	r3, [r7, #4]
 810acbc:	2201      	movs	r2, #1
 810acbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810acc2:	2300      	movs	r3, #0
}
 810acc4:	4618      	mov	r0, r3
 810acc6:	3708      	adds	r7, #8
 810acc8:	46bd      	mov	sp, r7
 810acca:	bd80      	pop	{r7, pc}

0810accc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810accc:	b580      	push	{r7, lr}
 810acce:	b082      	sub	sp, #8
 810acd0:	af00      	add	r7, sp, #0
 810acd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810acd4:	687b      	ldr	r3, [r7, #4]
 810acd6:	2b00      	cmp	r3, #0
 810acd8:	d101      	bne.n	810acde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810acda:	2301      	movs	r3, #1
 810acdc:	e049      	b.n	810ad72 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ace4:	b2db      	uxtb	r3, r3
 810ace6:	2b00      	cmp	r3, #0
 810ace8:	d106      	bne.n	810acf8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810acea:	687b      	ldr	r3, [r7, #4]
 810acec:	2200      	movs	r2, #0
 810acee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 810acf2:	6878      	ldr	r0, [r7, #4]
 810acf4:	f7f7 f944 	bl	8101f80 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810acf8:	687b      	ldr	r3, [r7, #4]
 810acfa:	2202      	movs	r2, #2
 810acfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 810ad00:	687b      	ldr	r3, [r7, #4]
 810ad02:	681a      	ldr	r2, [r3, #0]
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	3304      	adds	r3, #4
 810ad08:	4619      	mov	r1, r3
 810ad0a:	4610      	mov	r0, r2
 810ad0c:	f000 f9ac 	bl	810b068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ad10:	687b      	ldr	r3, [r7, #4]
 810ad12:	2201      	movs	r2, #1
 810ad14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad18:	687b      	ldr	r3, [r7, #4]
 810ad1a:	2201      	movs	r2, #1
 810ad1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	2201      	movs	r2, #1
 810ad24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ad28:	687b      	ldr	r3, [r7, #4]
 810ad2a:	2201      	movs	r2, #1
 810ad2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ad30:	687b      	ldr	r3, [r7, #4]
 810ad32:	2201      	movs	r2, #1
 810ad34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ad38:	687b      	ldr	r3, [r7, #4]
 810ad3a:	2201      	movs	r2, #1
 810ad3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ad40:	687b      	ldr	r3, [r7, #4]
 810ad42:	2201      	movs	r2, #1
 810ad44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	2201      	movs	r2, #1
 810ad4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	2201      	movs	r2, #1
 810ad54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	2201      	movs	r2, #1
 810ad5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	2201      	movs	r2, #1
 810ad64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	2201      	movs	r2, #1
 810ad6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ad70:	2300      	movs	r3, #0
}
 810ad72:	4618      	mov	r0, r3
 810ad74:	3708      	adds	r7, #8
 810ad76:	46bd      	mov	sp, r7
 810ad78:	bd80      	pop	{r7, pc}

0810ad7a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810ad7a:	b580      	push	{r7, lr}
 810ad7c:	b082      	sub	sp, #8
 810ad7e:	af00      	add	r7, sp, #0
 810ad80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ad82:	687b      	ldr	r3, [r7, #4]
 810ad84:	2b00      	cmp	r3, #0
 810ad86:	d101      	bne.n	810ad8c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810ad88:	2301      	movs	r3, #1
 810ad8a:	e049      	b.n	810ae20 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ad92:	b2db      	uxtb	r3, r3
 810ad94:	2b00      	cmp	r3, #0
 810ad96:	d106      	bne.n	810ada6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	2200      	movs	r2, #0
 810ad9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810ada0:	6878      	ldr	r0, [r7, #4]
 810ada2:	f000 f841 	bl	810ae28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ada6:	687b      	ldr	r3, [r7, #4]
 810ada8:	2202      	movs	r2, #2
 810adaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810adae:	687b      	ldr	r3, [r7, #4]
 810adb0:	681a      	ldr	r2, [r3, #0]
 810adb2:	687b      	ldr	r3, [r7, #4]
 810adb4:	3304      	adds	r3, #4
 810adb6:	4619      	mov	r1, r3
 810adb8:	4610      	mov	r0, r2
 810adba:	f000 f955 	bl	810b068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810adbe:	687b      	ldr	r3, [r7, #4]
 810adc0:	2201      	movs	r2, #1
 810adc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	2201      	movs	r2, #1
 810adca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810adce:	687b      	ldr	r3, [r7, #4]
 810add0:	2201      	movs	r2, #1
 810add2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810add6:	687b      	ldr	r3, [r7, #4]
 810add8:	2201      	movs	r2, #1
 810adda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	2201      	movs	r2, #1
 810ade2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	2201      	movs	r2, #1
 810adea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810adee:	687b      	ldr	r3, [r7, #4]
 810adf0:	2201      	movs	r2, #1
 810adf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810adf6:	687b      	ldr	r3, [r7, #4]
 810adf8:	2201      	movs	r2, #1
 810adfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	2201      	movs	r2, #1
 810ae02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	2201      	movs	r2, #1
 810ae0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ae0e:	687b      	ldr	r3, [r7, #4]
 810ae10:	2201      	movs	r2, #1
 810ae12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ae16:	687b      	ldr	r3, [r7, #4]
 810ae18:	2201      	movs	r2, #1
 810ae1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ae1e:	2300      	movs	r3, #0
}
 810ae20:	4618      	mov	r0, r3
 810ae22:	3708      	adds	r7, #8
 810ae24:	46bd      	mov	sp, r7
 810ae26:	bd80      	pop	{r7, pc}

0810ae28 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810ae28:	b480      	push	{r7}
 810ae2a:	b083      	sub	sp, #12
 810ae2c:	af00      	add	r7, sp, #0
 810ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 810ae30:	bf00      	nop
 810ae32:	370c      	adds	r7, #12
 810ae34:	46bd      	mov	sp, r7
 810ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae3a:	4770      	bx	lr

0810ae3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810ae3c:	b580      	push	{r7, lr}
 810ae3e:	b086      	sub	sp, #24
 810ae40:	af00      	add	r7, sp, #0
 810ae42:	60f8      	str	r0, [r7, #12]
 810ae44:	60b9      	str	r1, [r7, #8]
 810ae46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810ae48:	2300      	movs	r3, #0
 810ae4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810ae4c:	68fb      	ldr	r3, [r7, #12]
 810ae4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ae52:	2b01      	cmp	r3, #1
 810ae54:	d101      	bne.n	810ae5a <HAL_TIM_OC_ConfigChannel+0x1e>
 810ae56:	2302      	movs	r3, #2
 810ae58:	e066      	b.n	810af28 <HAL_TIM_OC_ConfigChannel+0xec>
 810ae5a:	68fb      	ldr	r3, [r7, #12]
 810ae5c:	2201      	movs	r2, #1
 810ae5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	2b14      	cmp	r3, #20
 810ae66:	d857      	bhi.n	810af18 <HAL_TIM_OC_ConfigChannel+0xdc>
 810ae68:	a201      	add	r2, pc, #4	@ (adr r2, 810ae70 <HAL_TIM_OC_ConfigChannel+0x34>)
 810ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae6e:	bf00      	nop
 810ae70:	0810aec5 	.word	0x0810aec5
 810ae74:	0810af19 	.word	0x0810af19
 810ae78:	0810af19 	.word	0x0810af19
 810ae7c:	0810af19 	.word	0x0810af19
 810ae80:	0810aed3 	.word	0x0810aed3
 810ae84:	0810af19 	.word	0x0810af19
 810ae88:	0810af19 	.word	0x0810af19
 810ae8c:	0810af19 	.word	0x0810af19
 810ae90:	0810aee1 	.word	0x0810aee1
 810ae94:	0810af19 	.word	0x0810af19
 810ae98:	0810af19 	.word	0x0810af19
 810ae9c:	0810af19 	.word	0x0810af19
 810aea0:	0810aeef 	.word	0x0810aeef
 810aea4:	0810af19 	.word	0x0810af19
 810aea8:	0810af19 	.word	0x0810af19
 810aeac:	0810af19 	.word	0x0810af19
 810aeb0:	0810aefd 	.word	0x0810aefd
 810aeb4:	0810af19 	.word	0x0810af19
 810aeb8:	0810af19 	.word	0x0810af19
 810aebc:	0810af19 	.word	0x0810af19
 810aec0:	0810af0b 	.word	0x0810af0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810aec4:	68fb      	ldr	r3, [r7, #12]
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	68b9      	ldr	r1, [r7, #8]
 810aeca:	4618      	mov	r0, r3
 810aecc:	f000 f96c 	bl	810b1a8 <TIM_OC1_SetConfig>
      break;
 810aed0:	e025      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810aed2:	68fb      	ldr	r3, [r7, #12]
 810aed4:	681b      	ldr	r3, [r3, #0]
 810aed6:	68b9      	ldr	r1, [r7, #8]
 810aed8:	4618      	mov	r0, r3
 810aeda:	f000 f9f5 	bl	810b2c8 <TIM_OC2_SetConfig>
      break;
 810aede:	e01e      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810aee0:	68fb      	ldr	r3, [r7, #12]
 810aee2:	681b      	ldr	r3, [r3, #0]
 810aee4:	68b9      	ldr	r1, [r7, #8]
 810aee6:	4618      	mov	r0, r3
 810aee8:	f000 fa78 	bl	810b3dc <TIM_OC3_SetConfig>
      break;
 810aeec:	e017      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810aeee:	68fb      	ldr	r3, [r7, #12]
 810aef0:	681b      	ldr	r3, [r3, #0]
 810aef2:	68b9      	ldr	r1, [r7, #8]
 810aef4:	4618      	mov	r0, r3
 810aef6:	f000 faf9 	bl	810b4ec <TIM_OC4_SetConfig>
      break;
 810aefa:	e010      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810aefc:	68fb      	ldr	r3, [r7, #12]
 810aefe:	681b      	ldr	r3, [r3, #0]
 810af00:	68b9      	ldr	r1, [r7, #8]
 810af02:	4618      	mov	r0, r3
 810af04:	f000 fb5c 	bl	810b5c0 <TIM_OC5_SetConfig>
      break;
 810af08:	e009      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810af0a:	68fb      	ldr	r3, [r7, #12]
 810af0c:	681b      	ldr	r3, [r3, #0]
 810af0e:	68b9      	ldr	r1, [r7, #8]
 810af10:	4618      	mov	r0, r3
 810af12:	f000 fbb9 	bl	810b688 <TIM_OC6_SetConfig>
      break;
 810af16:	e002      	b.n	810af1e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 810af18:	2301      	movs	r3, #1
 810af1a:	75fb      	strb	r3, [r7, #23]
      break;
 810af1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810af1e:	68fb      	ldr	r3, [r7, #12]
 810af20:	2200      	movs	r2, #0
 810af22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810af26:	7dfb      	ldrb	r3, [r7, #23]
}
 810af28:	4618      	mov	r0, r3
 810af2a:	3718      	adds	r7, #24
 810af2c:	46bd      	mov	sp, r7
 810af2e:	bd80      	pop	{r7, pc}

0810af30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 810af30:	b580      	push	{r7, lr}
 810af32:	b086      	sub	sp, #24
 810af34:	af00      	add	r7, sp, #0
 810af36:	60f8      	str	r0, [r7, #12]
 810af38:	60b9      	str	r1, [r7, #8]
 810af3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810af3c:	2300      	movs	r3, #0
 810af3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 810af40:	68fb      	ldr	r3, [r7, #12]
 810af42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810af46:	2b01      	cmp	r3, #1
 810af48:	d101      	bne.n	810af4e <HAL_TIM_IC_ConfigChannel+0x1e>
 810af4a:	2302      	movs	r3, #2
 810af4c:	e088      	b.n	810b060 <HAL_TIM_IC_ConfigChannel+0x130>
 810af4e:	68fb      	ldr	r3, [r7, #12]
 810af50:	2201      	movs	r2, #1
 810af52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 810af56:	687b      	ldr	r3, [r7, #4]
 810af58:	2b00      	cmp	r3, #0
 810af5a:	d11b      	bne.n	810af94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810af60:	68bb      	ldr	r3, [r7, #8]
 810af62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810af64:	68bb      	ldr	r3, [r7, #8]
 810af66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810af68:	68bb      	ldr	r3, [r7, #8]
 810af6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810af6c:	f000 fbf2 	bl	810b754 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 810af70:	68fb      	ldr	r3, [r7, #12]
 810af72:	681b      	ldr	r3, [r3, #0]
 810af74:	699a      	ldr	r2, [r3, #24]
 810af76:	68fb      	ldr	r3, [r7, #12]
 810af78:	681b      	ldr	r3, [r3, #0]
 810af7a:	f022 020c 	bic.w	r2, r2, #12
 810af7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 810af80:	68fb      	ldr	r3, [r7, #12]
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	6999      	ldr	r1, [r3, #24]
 810af86:	68bb      	ldr	r3, [r7, #8]
 810af88:	689a      	ldr	r2, [r3, #8]
 810af8a:	68fb      	ldr	r3, [r7, #12]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	430a      	orrs	r2, r1
 810af90:	619a      	str	r2, [r3, #24]
 810af92:	e060      	b.n	810b056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810af94:	687b      	ldr	r3, [r7, #4]
 810af96:	2b04      	cmp	r3, #4
 810af98:	d11c      	bne.n	810afd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810af9a:	68fb      	ldr	r3, [r7, #12]
 810af9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810af9e:	68bb      	ldr	r3, [r7, #8]
 810afa0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810afa2:	68bb      	ldr	r3, [r7, #8]
 810afa4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810afa6:	68bb      	ldr	r3, [r7, #8]
 810afa8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 810afaa:	f000 fc47 	bl	810b83c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810afae:	68fb      	ldr	r3, [r7, #12]
 810afb0:	681b      	ldr	r3, [r3, #0]
 810afb2:	699a      	ldr	r2, [r3, #24]
 810afb4:	68fb      	ldr	r3, [r7, #12]
 810afb6:	681b      	ldr	r3, [r3, #0]
 810afb8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810afbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810afbe:	68fb      	ldr	r3, [r7, #12]
 810afc0:	681b      	ldr	r3, [r3, #0]
 810afc2:	6999      	ldr	r1, [r3, #24]
 810afc4:	68bb      	ldr	r3, [r7, #8]
 810afc6:	689b      	ldr	r3, [r3, #8]
 810afc8:	021a      	lsls	r2, r3, #8
 810afca:	68fb      	ldr	r3, [r7, #12]
 810afcc:	681b      	ldr	r3, [r3, #0]
 810afce:	430a      	orrs	r2, r1
 810afd0:	619a      	str	r2, [r3, #24]
 810afd2:	e040      	b.n	810b056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810afd4:	687b      	ldr	r3, [r7, #4]
 810afd6:	2b08      	cmp	r3, #8
 810afd8:	d11b      	bne.n	810b012 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810afda:	68fb      	ldr	r3, [r7, #12]
 810afdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810afde:	68bb      	ldr	r3, [r7, #8]
 810afe0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810afe2:	68bb      	ldr	r3, [r7, #8]
 810afe4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810afe6:	68bb      	ldr	r3, [r7, #8]
 810afe8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 810afea:	f000 fc64 	bl	810b8b6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 810afee:	68fb      	ldr	r3, [r7, #12]
 810aff0:	681b      	ldr	r3, [r3, #0]
 810aff2:	69da      	ldr	r2, [r3, #28]
 810aff4:	68fb      	ldr	r3, [r7, #12]
 810aff6:	681b      	ldr	r3, [r3, #0]
 810aff8:	f022 020c 	bic.w	r2, r2, #12
 810affc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 810affe:	68fb      	ldr	r3, [r7, #12]
 810b000:	681b      	ldr	r3, [r3, #0]
 810b002:	69d9      	ldr	r1, [r3, #28]
 810b004:	68bb      	ldr	r3, [r7, #8]
 810b006:	689a      	ldr	r2, [r3, #8]
 810b008:	68fb      	ldr	r3, [r7, #12]
 810b00a:	681b      	ldr	r3, [r3, #0]
 810b00c:	430a      	orrs	r2, r1
 810b00e:	61da      	str	r2, [r3, #28]
 810b010:	e021      	b.n	810b056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 810b012:	687b      	ldr	r3, [r7, #4]
 810b014:	2b0c      	cmp	r3, #12
 810b016:	d11c      	bne.n	810b052 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810b01c:	68bb      	ldr	r3, [r7, #8]
 810b01e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810b020:	68bb      	ldr	r3, [r7, #8]
 810b022:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810b024:	68bb      	ldr	r3, [r7, #8]
 810b026:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810b028:	f000 fc81 	bl	810b92e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810b02c:	68fb      	ldr	r3, [r7, #12]
 810b02e:	681b      	ldr	r3, [r3, #0]
 810b030:	69da      	ldr	r2, [r3, #28]
 810b032:	68fb      	ldr	r3, [r7, #12]
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810b03a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810b03c:	68fb      	ldr	r3, [r7, #12]
 810b03e:	681b      	ldr	r3, [r3, #0]
 810b040:	69d9      	ldr	r1, [r3, #28]
 810b042:	68bb      	ldr	r3, [r7, #8]
 810b044:	689b      	ldr	r3, [r3, #8]
 810b046:	021a      	lsls	r2, r3, #8
 810b048:	68fb      	ldr	r3, [r7, #12]
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	430a      	orrs	r2, r1
 810b04e:	61da      	str	r2, [r3, #28]
 810b050:	e001      	b.n	810b056 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 810b052:	2301      	movs	r3, #1
 810b054:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810b056:	68fb      	ldr	r3, [r7, #12]
 810b058:	2200      	movs	r2, #0
 810b05a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b05e:	7dfb      	ldrb	r3, [r7, #23]
}
 810b060:	4618      	mov	r0, r3
 810b062:	3718      	adds	r7, #24
 810b064:	46bd      	mov	sp, r7
 810b066:	bd80      	pop	{r7, pc}

0810b068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810b068:	b480      	push	{r7}
 810b06a:	b085      	sub	sp, #20
 810b06c:	af00      	add	r7, sp, #0
 810b06e:	6078      	str	r0, [r7, #4]
 810b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b072:	687b      	ldr	r3, [r7, #4]
 810b074:	681b      	ldr	r3, [r3, #0]
 810b076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b078:	687b      	ldr	r3, [r7, #4]
 810b07a:	4a43      	ldr	r2, [pc, #268]	@ (810b188 <TIM_Base_SetConfig+0x120>)
 810b07c:	4293      	cmp	r3, r2
 810b07e:	d013      	beq.n	810b0a8 <TIM_Base_SetConfig+0x40>
 810b080:	687b      	ldr	r3, [r7, #4]
 810b082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b086:	d00f      	beq.n	810b0a8 <TIM_Base_SetConfig+0x40>
 810b088:	687b      	ldr	r3, [r7, #4]
 810b08a:	4a40      	ldr	r2, [pc, #256]	@ (810b18c <TIM_Base_SetConfig+0x124>)
 810b08c:	4293      	cmp	r3, r2
 810b08e:	d00b      	beq.n	810b0a8 <TIM_Base_SetConfig+0x40>
 810b090:	687b      	ldr	r3, [r7, #4]
 810b092:	4a3f      	ldr	r2, [pc, #252]	@ (810b190 <TIM_Base_SetConfig+0x128>)
 810b094:	4293      	cmp	r3, r2
 810b096:	d007      	beq.n	810b0a8 <TIM_Base_SetConfig+0x40>
 810b098:	687b      	ldr	r3, [r7, #4]
 810b09a:	4a3e      	ldr	r2, [pc, #248]	@ (810b194 <TIM_Base_SetConfig+0x12c>)
 810b09c:	4293      	cmp	r3, r2
 810b09e:	d003      	beq.n	810b0a8 <TIM_Base_SetConfig+0x40>
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	4a3d      	ldr	r2, [pc, #244]	@ (810b198 <TIM_Base_SetConfig+0x130>)
 810b0a4:	4293      	cmp	r3, r2
 810b0a6:	d108      	bne.n	810b0ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b0a8:	68fb      	ldr	r3, [r7, #12]
 810b0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b0b0:	683b      	ldr	r3, [r7, #0]
 810b0b2:	685b      	ldr	r3, [r3, #4]
 810b0b4:	68fa      	ldr	r2, [r7, #12]
 810b0b6:	4313      	orrs	r3, r2
 810b0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	4a32      	ldr	r2, [pc, #200]	@ (810b188 <TIM_Base_SetConfig+0x120>)
 810b0be:	4293      	cmp	r3, r2
 810b0c0:	d01f      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0c2:	687b      	ldr	r3, [r7, #4]
 810b0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0c8:	d01b      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0ca:	687b      	ldr	r3, [r7, #4]
 810b0cc:	4a2f      	ldr	r2, [pc, #188]	@ (810b18c <TIM_Base_SetConfig+0x124>)
 810b0ce:	4293      	cmp	r3, r2
 810b0d0:	d017      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0d2:	687b      	ldr	r3, [r7, #4]
 810b0d4:	4a2e      	ldr	r2, [pc, #184]	@ (810b190 <TIM_Base_SetConfig+0x128>)
 810b0d6:	4293      	cmp	r3, r2
 810b0d8:	d013      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	4a2d      	ldr	r2, [pc, #180]	@ (810b194 <TIM_Base_SetConfig+0x12c>)
 810b0de:	4293      	cmp	r3, r2
 810b0e0:	d00f      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0e2:	687b      	ldr	r3, [r7, #4]
 810b0e4:	4a2c      	ldr	r2, [pc, #176]	@ (810b198 <TIM_Base_SetConfig+0x130>)
 810b0e6:	4293      	cmp	r3, r2
 810b0e8:	d00b      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0ea:	687b      	ldr	r3, [r7, #4]
 810b0ec:	4a2b      	ldr	r2, [pc, #172]	@ (810b19c <TIM_Base_SetConfig+0x134>)
 810b0ee:	4293      	cmp	r3, r2
 810b0f0:	d007      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0f2:	687b      	ldr	r3, [r7, #4]
 810b0f4:	4a2a      	ldr	r2, [pc, #168]	@ (810b1a0 <TIM_Base_SetConfig+0x138>)
 810b0f6:	4293      	cmp	r3, r2
 810b0f8:	d003      	beq.n	810b102 <TIM_Base_SetConfig+0x9a>
 810b0fa:	687b      	ldr	r3, [r7, #4]
 810b0fc:	4a29      	ldr	r2, [pc, #164]	@ (810b1a4 <TIM_Base_SetConfig+0x13c>)
 810b0fe:	4293      	cmp	r3, r2
 810b100:	d108      	bne.n	810b114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b102:	68fb      	ldr	r3, [r7, #12]
 810b104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b10a:	683b      	ldr	r3, [r7, #0]
 810b10c:	68db      	ldr	r3, [r3, #12]
 810b10e:	68fa      	ldr	r2, [r7, #12]
 810b110:	4313      	orrs	r3, r2
 810b112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b114:	68fb      	ldr	r3, [r7, #12]
 810b116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810b11a:	683b      	ldr	r3, [r7, #0]
 810b11c:	695b      	ldr	r3, [r3, #20]
 810b11e:	4313      	orrs	r3, r2
 810b120:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b122:	683b      	ldr	r3, [r7, #0]
 810b124:	689a      	ldr	r2, [r3, #8]
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b12a:	683b      	ldr	r3, [r7, #0]
 810b12c:	681a      	ldr	r2, [r3, #0]
 810b12e:	687b      	ldr	r3, [r7, #4]
 810b130:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b132:	687b      	ldr	r3, [r7, #4]
 810b134:	4a14      	ldr	r2, [pc, #80]	@ (810b188 <TIM_Base_SetConfig+0x120>)
 810b136:	4293      	cmp	r3, r2
 810b138:	d00f      	beq.n	810b15a <TIM_Base_SetConfig+0xf2>
 810b13a:	687b      	ldr	r3, [r7, #4]
 810b13c:	4a16      	ldr	r2, [pc, #88]	@ (810b198 <TIM_Base_SetConfig+0x130>)
 810b13e:	4293      	cmp	r3, r2
 810b140:	d00b      	beq.n	810b15a <TIM_Base_SetConfig+0xf2>
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	4a15      	ldr	r2, [pc, #84]	@ (810b19c <TIM_Base_SetConfig+0x134>)
 810b146:	4293      	cmp	r3, r2
 810b148:	d007      	beq.n	810b15a <TIM_Base_SetConfig+0xf2>
 810b14a:	687b      	ldr	r3, [r7, #4]
 810b14c:	4a14      	ldr	r2, [pc, #80]	@ (810b1a0 <TIM_Base_SetConfig+0x138>)
 810b14e:	4293      	cmp	r3, r2
 810b150:	d003      	beq.n	810b15a <TIM_Base_SetConfig+0xf2>
 810b152:	687b      	ldr	r3, [r7, #4]
 810b154:	4a13      	ldr	r2, [pc, #76]	@ (810b1a4 <TIM_Base_SetConfig+0x13c>)
 810b156:	4293      	cmp	r3, r2
 810b158:	d103      	bne.n	810b162 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b15a:	683b      	ldr	r3, [r7, #0]
 810b15c:	691a      	ldr	r2, [r3, #16]
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810b162:	687b      	ldr	r3, [r7, #4]
 810b164:	681b      	ldr	r3, [r3, #0]
 810b166:	f043 0204 	orr.w	r2, r3, #4
 810b16a:	687b      	ldr	r3, [r7, #4]
 810b16c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b16e:	687b      	ldr	r3, [r7, #4]
 810b170:	2201      	movs	r2, #1
 810b172:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810b174:	687b      	ldr	r3, [r7, #4]
 810b176:	68fa      	ldr	r2, [r7, #12]
 810b178:	601a      	str	r2, [r3, #0]
}
 810b17a:	bf00      	nop
 810b17c:	3714      	adds	r7, #20
 810b17e:	46bd      	mov	sp, r7
 810b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b184:	4770      	bx	lr
 810b186:	bf00      	nop
 810b188:	40010000 	.word	0x40010000
 810b18c:	40000400 	.word	0x40000400
 810b190:	40000800 	.word	0x40000800
 810b194:	40000c00 	.word	0x40000c00
 810b198:	40010400 	.word	0x40010400
 810b19c:	40014000 	.word	0x40014000
 810b1a0:	40014400 	.word	0x40014400
 810b1a4:	40014800 	.word	0x40014800

0810b1a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b1a8:	b480      	push	{r7}
 810b1aa:	b087      	sub	sp, #28
 810b1ac:	af00      	add	r7, sp, #0
 810b1ae:	6078      	str	r0, [r7, #4]
 810b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b1b2:	687b      	ldr	r3, [r7, #4]
 810b1b4:	6a1b      	ldr	r3, [r3, #32]
 810b1b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b1b8:	687b      	ldr	r3, [r7, #4]
 810b1ba:	6a1b      	ldr	r3, [r3, #32]
 810b1bc:	f023 0201 	bic.w	r2, r3, #1
 810b1c0:	687b      	ldr	r3, [r7, #4]
 810b1c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	685b      	ldr	r3, [r3, #4]
 810b1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b1ca:	687b      	ldr	r3, [r7, #4]
 810b1cc:	699b      	ldr	r3, [r3, #24]
 810b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810b1d0:	68fb      	ldr	r3, [r7, #12]
 810b1d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810b1dc:	68fb      	ldr	r3, [r7, #12]
 810b1de:	f023 0303 	bic.w	r3, r3, #3
 810b1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b1e4:	683b      	ldr	r3, [r7, #0]
 810b1e6:	681b      	ldr	r3, [r3, #0]
 810b1e8:	68fa      	ldr	r2, [r7, #12]
 810b1ea:	4313      	orrs	r3, r2
 810b1ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810b1ee:	697b      	ldr	r3, [r7, #20]
 810b1f0:	f023 0302 	bic.w	r3, r3, #2
 810b1f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810b1f6:	683b      	ldr	r3, [r7, #0]
 810b1f8:	689b      	ldr	r3, [r3, #8]
 810b1fa:	697a      	ldr	r2, [r7, #20]
 810b1fc:	4313      	orrs	r3, r2
 810b1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810b200:	687b      	ldr	r3, [r7, #4]
 810b202:	4a2c      	ldr	r2, [pc, #176]	@ (810b2b4 <TIM_OC1_SetConfig+0x10c>)
 810b204:	4293      	cmp	r3, r2
 810b206:	d00f      	beq.n	810b228 <TIM_OC1_SetConfig+0x80>
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	4a2b      	ldr	r2, [pc, #172]	@ (810b2b8 <TIM_OC1_SetConfig+0x110>)
 810b20c:	4293      	cmp	r3, r2
 810b20e:	d00b      	beq.n	810b228 <TIM_OC1_SetConfig+0x80>
 810b210:	687b      	ldr	r3, [r7, #4]
 810b212:	4a2a      	ldr	r2, [pc, #168]	@ (810b2bc <TIM_OC1_SetConfig+0x114>)
 810b214:	4293      	cmp	r3, r2
 810b216:	d007      	beq.n	810b228 <TIM_OC1_SetConfig+0x80>
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	4a29      	ldr	r2, [pc, #164]	@ (810b2c0 <TIM_OC1_SetConfig+0x118>)
 810b21c:	4293      	cmp	r3, r2
 810b21e:	d003      	beq.n	810b228 <TIM_OC1_SetConfig+0x80>
 810b220:	687b      	ldr	r3, [r7, #4]
 810b222:	4a28      	ldr	r2, [pc, #160]	@ (810b2c4 <TIM_OC1_SetConfig+0x11c>)
 810b224:	4293      	cmp	r3, r2
 810b226:	d10c      	bne.n	810b242 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810b228:	697b      	ldr	r3, [r7, #20]
 810b22a:	f023 0308 	bic.w	r3, r3, #8
 810b22e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810b230:	683b      	ldr	r3, [r7, #0]
 810b232:	68db      	ldr	r3, [r3, #12]
 810b234:	697a      	ldr	r2, [r7, #20]
 810b236:	4313      	orrs	r3, r2
 810b238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810b23a:	697b      	ldr	r3, [r7, #20]
 810b23c:	f023 0304 	bic.w	r3, r3, #4
 810b240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	4a1b      	ldr	r2, [pc, #108]	@ (810b2b4 <TIM_OC1_SetConfig+0x10c>)
 810b246:	4293      	cmp	r3, r2
 810b248:	d00f      	beq.n	810b26a <TIM_OC1_SetConfig+0xc2>
 810b24a:	687b      	ldr	r3, [r7, #4]
 810b24c:	4a1a      	ldr	r2, [pc, #104]	@ (810b2b8 <TIM_OC1_SetConfig+0x110>)
 810b24e:	4293      	cmp	r3, r2
 810b250:	d00b      	beq.n	810b26a <TIM_OC1_SetConfig+0xc2>
 810b252:	687b      	ldr	r3, [r7, #4]
 810b254:	4a19      	ldr	r2, [pc, #100]	@ (810b2bc <TIM_OC1_SetConfig+0x114>)
 810b256:	4293      	cmp	r3, r2
 810b258:	d007      	beq.n	810b26a <TIM_OC1_SetConfig+0xc2>
 810b25a:	687b      	ldr	r3, [r7, #4]
 810b25c:	4a18      	ldr	r2, [pc, #96]	@ (810b2c0 <TIM_OC1_SetConfig+0x118>)
 810b25e:	4293      	cmp	r3, r2
 810b260:	d003      	beq.n	810b26a <TIM_OC1_SetConfig+0xc2>
 810b262:	687b      	ldr	r3, [r7, #4]
 810b264:	4a17      	ldr	r2, [pc, #92]	@ (810b2c4 <TIM_OC1_SetConfig+0x11c>)
 810b266:	4293      	cmp	r3, r2
 810b268:	d111      	bne.n	810b28e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810b26a:	693b      	ldr	r3, [r7, #16]
 810b26c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810b272:	693b      	ldr	r3, [r7, #16]
 810b274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810b27a:	683b      	ldr	r3, [r7, #0]
 810b27c:	695b      	ldr	r3, [r3, #20]
 810b27e:	693a      	ldr	r2, [r7, #16]
 810b280:	4313      	orrs	r3, r2
 810b282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810b284:	683b      	ldr	r3, [r7, #0]
 810b286:	699b      	ldr	r3, [r3, #24]
 810b288:	693a      	ldr	r2, [r7, #16]
 810b28a:	4313      	orrs	r3, r2
 810b28c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b28e:	687b      	ldr	r3, [r7, #4]
 810b290:	693a      	ldr	r2, [r7, #16]
 810b292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b294:	687b      	ldr	r3, [r7, #4]
 810b296:	68fa      	ldr	r2, [r7, #12]
 810b298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810b29a:	683b      	ldr	r3, [r7, #0]
 810b29c:	685a      	ldr	r2, [r3, #4]
 810b29e:	687b      	ldr	r3, [r7, #4]
 810b2a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b2a2:	687b      	ldr	r3, [r7, #4]
 810b2a4:	697a      	ldr	r2, [r7, #20]
 810b2a6:	621a      	str	r2, [r3, #32]
}
 810b2a8:	bf00      	nop
 810b2aa:	371c      	adds	r7, #28
 810b2ac:	46bd      	mov	sp, r7
 810b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2b2:	4770      	bx	lr
 810b2b4:	40010000 	.word	0x40010000
 810b2b8:	40010400 	.word	0x40010400
 810b2bc:	40014000 	.word	0x40014000
 810b2c0:	40014400 	.word	0x40014400
 810b2c4:	40014800 	.word	0x40014800

0810b2c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b2c8:	b480      	push	{r7}
 810b2ca:	b087      	sub	sp, #28
 810b2cc:	af00      	add	r7, sp, #0
 810b2ce:	6078      	str	r0, [r7, #4]
 810b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b2d2:	687b      	ldr	r3, [r7, #4]
 810b2d4:	6a1b      	ldr	r3, [r3, #32]
 810b2d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b2d8:	687b      	ldr	r3, [r7, #4]
 810b2da:	6a1b      	ldr	r3, [r3, #32]
 810b2dc:	f023 0210 	bic.w	r2, r3, #16
 810b2e0:	687b      	ldr	r3, [r7, #4]
 810b2e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b2e4:	687b      	ldr	r3, [r7, #4]
 810b2e6:	685b      	ldr	r3, [r3, #4]
 810b2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b2ea:	687b      	ldr	r3, [r7, #4]
 810b2ec:	699b      	ldr	r3, [r3, #24]
 810b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810b2f0:	68fb      	ldr	r3, [r7, #12]
 810b2f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b2f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810b2fc:	68fb      	ldr	r3, [r7, #12]
 810b2fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b304:	683b      	ldr	r3, [r7, #0]
 810b306:	681b      	ldr	r3, [r3, #0]
 810b308:	021b      	lsls	r3, r3, #8
 810b30a:	68fa      	ldr	r2, [r7, #12]
 810b30c:	4313      	orrs	r3, r2
 810b30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810b310:	697b      	ldr	r3, [r7, #20]
 810b312:	f023 0320 	bic.w	r3, r3, #32
 810b316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810b318:	683b      	ldr	r3, [r7, #0]
 810b31a:	689b      	ldr	r3, [r3, #8]
 810b31c:	011b      	lsls	r3, r3, #4
 810b31e:	697a      	ldr	r2, [r7, #20]
 810b320:	4313      	orrs	r3, r2
 810b322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810b324:	687b      	ldr	r3, [r7, #4]
 810b326:	4a28      	ldr	r2, [pc, #160]	@ (810b3c8 <TIM_OC2_SetConfig+0x100>)
 810b328:	4293      	cmp	r3, r2
 810b32a:	d003      	beq.n	810b334 <TIM_OC2_SetConfig+0x6c>
 810b32c:	687b      	ldr	r3, [r7, #4]
 810b32e:	4a27      	ldr	r2, [pc, #156]	@ (810b3cc <TIM_OC2_SetConfig+0x104>)
 810b330:	4293      	cmp	r3, r2
 810b332:	d10d      	bne.n	810b350 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810b334:	697b      	ldr	r3, [r7, #20]
 810b336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b33a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810b33c:	683b      	ldr	r3, [r7, #0]
 810b33e:	68db      	ldr	r3, [r3, #12]
 810b340:	011b      	lsls	r3, r3, #4
 810b342:	697a      	ldr	r2, [r7, #20]
 810b344:	4313      	orrs	r3, r2
 810b346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810b348:	697b      	ldr	r3, [r7, #20]
 810b34a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b34e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b350:	687b      	ldr	r3, [r7, #4]
 810b352:	4a1d      	ldr	r2, [pc, #116]	@ (810b3c8 <TIM_OC2_SetConfig+0x100>)
 810b354:	4293      	cmp	r3, r2
 810b356:	d00f      	beq.n	810b378 <TIM_OC2_SetConfig+0xb0>
 810b358:	687b      	ldr	r3, [r7, #4]
 810b35a:	4a1c      	ldr	r2, [pc, #112]	@ (810b3cc <TIM_OC2_SetConfig+0x104>)
 810b35c:	4293      	cmp	r3, r2
 810b35e:	d00b      	beq.n	810b378 <TIM_OC2_SetConfig+0xb0>
 810b360:	687b      	ldr	r3, [r7, #4]
 810b362:	4a1b      	ldr	r2, [pc, #108]	@ (810b3d0 <TIM_OC2_SetConfig+0x108>)
 810b364:	4293      	cmp	r3, r2
 810b366:	d007      	beq.n	810b378 <TIM_OC2_SetConfig+0xb0>
 810b368:	687b      	ldr	r3, [r7, #4]
 810b36a:	4a1a      	ldr	r2, [pc, #104]	@ (810b3d4 <TIM_OC2_SetConfig+0x10c>)
 810b36c:	4293      	cmp	r3, r2
 810b36e:	d003      	beq.n	810b378 <TIM_OC2_SetConfig+0xb0>
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	4a19      	ldr	r2, [pc, #100]	@ (810b3d8 <TIM_OC2_SetConfig+0x110>)
 810b374:	4293      	cmp	r3, r2
 810b376:	d113      	bne.n	810b3a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810b378:	693b      	ldr	r3, [r7, #16]
 810b37a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810b37e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810b380:	693b      	ldr	r3, [r7, #16]
 810b382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810b386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810b388:	683b      	ldr	r3, [r7, #0]
 810b38a:	695b      	ldr	r3, [r3, #20]
 810b38c:	009b      	lsls	r3, r3, #2
 810b38e:	693a      	ldr	r2, [r7, #16]
 810b390:	4313      	orrs	r3, r2
 810b392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810b394:	683b      	ldr	r3, [r7, #0]
 810b396:	699b      	ldr	r3, [r3, #24]
 810b398:	009b      	lsls	r3, r3, #2
 810b39a:	693a      	ldr	r2, [r7, #16]
 810b39c:	4313      	orrs	r3, r2
 810b39e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b3a0:	687b      	ldr	r3, [r7, #4]
 810b3a2:	693a      	ldr	r2, [r7, #16]
 810b3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b3a6:	687b      	ldr	r3, [r7, #4]
 810b3a8:	68fa      	ldr	r2, [r7, #12]
 810b3aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810b3ac:	683b      	ldr	r3, [r7, #0]
 810b3ae:	685a      	ldr	r2, [r3, #4]
 810b3b0:	687b      	ldr	r3, [r7, #4]
 810b3b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b3b4:	687b      	ldr	r3, [r7, #4]
 810b3b6:	697a      	ldr	r2, [r7, #20]
 810b3b8:	621a      	str	r2, [r3, #32]
}
 810b3ba:	bf00      	nop
 810b3bc:	371c      	adds	r7, #28
 810b3be:	46bd      	mov	sp, r7
 810b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3c4:	4770      	bx	lr
 810b3c6:	bf00      	nop
 810b3c8:	40010000 	.word	0x40010000
 810b3cc:	40010400 	.word	0x40010400
 810b3d0:	40014000 	.word	0x40014000
 810b3d4:	40014400 	.word	0x40014400
 810b3d8:	40014800 	.word	0x40014800

0810b3dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b3dc:	b480      	push	{r7}
 810b3de:	b087      	sub	sp, #28
 810b3e0:	af00      	add	r7, sp, #0
 810b3e2:	6078      	str	r0, [r7, #4]
 810b3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b3e6:	687b      	ldr	r3, [r7, #4]
 810b3e8:	6a1b      	ldr	r3, [r3, #32]
 810b3ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	6a1b      	ldr	r3, [r3, #32]
 810b3f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b3f8:	687b      	ldr	r3, [r7, #4]
 810b3fa:	685b      	ldr	r3, [r3, #4]
 810b3fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b3fe:	687b      	ldr	r3, [r7, #4]
 810b400:	69db      	ldr	r3, [r3, #28]
 810b402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810b404:	68fb      	ldr	r3, [r7, #12]
 810b406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b40a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810b410:	68fb      	ldr	r3, [r7, #12]
 810b412:	f023 0303 	bic.w	r3, r3, #3
 810b416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b418:	683b      	ldr	r3, [r7, #0]
 810b41a:	681b      	ldr	r3, [r3, #0]
 810b41c:	68fa      	ldr	r2, [r7, #12]
 810b41e:	4313      	orrs	r3, r2
 810b420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810b422:	697b      	ldr	r3, [r7, #20]
 810b424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810b42a:	683b      	ldr	r3, [r7, #0]
 810b42c:	689b      	ldr	r3, [r3, #8]
 810b42e:	021b      	lsls	r3, r3, #8
 810b430:	697a      	ldr	r2, [r7, #20]
 810b432:	4313      	orrs	r3, r2
 810b434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810b436:	687b      	ldr	r3, [r7, #4]
 810b438:	4a27      	ldr	r2, [pc, #156]	@ (810b4d8 <TIM_OC3_SetConfig+0xfc>)
 810b43a:	4293      	cmp	r3, r2
 810b43c:	d003      	beq.n	810b446 <TIM_OC3_SetConfig+0x6a>
 810b43e:	687b      	ldr	r3, [r7, #4]
 810b440:	4a26      	ldr	r2, [pc, #152]	@ (810b4dc <TIM_OC3_SetConfig+0x100>)
 810b442:	4293      	cmp	r3, r2
 810b444:	d10d      	bne.n	810b462 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810b446:	697b      	ldr	r3, [r7, #20]
 810b448:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810b44c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810b44e:	683b      	ldr	r3, [r7, #0]
 810b450:	68db      	ldr	r3, [r3, #12]
 810b452:	021b      	lsls	r3, r3, #8
 810b454:	697a      	ldr	r2, [r7, #20]
 810b456:	4313      	orrs	r3, r2
 810b458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810b45a:	697b      	ldr	r3, [r7, #20]
 810b45c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810b460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b462:	687b      	ldr	r3, [r7, #4]
 810b464:	4a1c      	ldr	r2, [pc, #112]	@ (810b4d8 <TIM_OC3_SetConfig+0xfc>)
 810b466:	4293      	cmp	r3, r2
 810b468:	d00f      	beq.n	810b48a <TIM_OC3_SetConfig+0xae>
 810b46a:	687b      	ldr	r3, [r7, #4]
 810b46c:	4a1b      	ldr	r2, [pc, #108]	@ (810b4dc <TIM_OC3_SetConfig+0x100>)
 810b46e:	4293      	cmp	r3, r2
 810b470:	d00b      	beq.n	810b48a <TIM_OC3_SetConfig+0xae>
 810b472:	687b      	ldr	r3, [r7, #4]
 810b474:	4a1a      	ldr	r2, [pc, #104]	@ (810b4e0 <TIM_OC3_SetConfig+0x104>)
 810b476:	4293      	cmp	r3, r2
 810b478:	d007      	beq.n	810b48a <TIM_OC3_SetConfig+0xae>
 810b47a:	687b      	ldr	r3, [r7, #4]
 810b47c:	4a19      	ldr	r2, [pc, #100]	@ (810b4e4 <TIM_OC3_SetConfig+0x108>)
 810b47e:	4293      	cmp	r3, r2
 810b480:	d003      	beq.n	810b48a <TIM_OC3_SetConfig+0xae>
 810b482:	687b      	ldr	r3, [r7, #4]
 810b484:	4a18      	ldr	r2, [pc, #96]	@ (810b4e8 <TIM_OC3_SetConfig+0x10c>)
 810b486:	4293      	cmp	r3, r2
 810b488:	d113      	bne.n	810b4b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810b48a:	693b      	ldr	r3, [r7, #16]
 810b48c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810b490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810b492:	693b      	ldr	r3, [r7, #16]
 810b494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810b498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810b49a:	683b      	ldr	r3, [r7, #0]
 810b49c:	695b      	ldr	r3, [r3, #20]
 810b49e:	011b      	lsls	r3, r3, #4
 810b4a0:	693a      	ldr	r2, [r7, #16]
 810b4a2:	4313      	orrs	r3, r2
 810b4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810b4a6:	683b      	ldr	r3, [r7, #0]
 810b4a8:	699b      	ldr	r3, [r3, #24]
 810b4aa:	011b      	lsls	r3, r3, #4
 810b4ac:	693a      	ldr	r2, [r7, #16]
 810b4ae:	4313      	orrs	r3, r2
 810b4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b4b2:	687b      	ldr	r3, [r7, #4]
 810b4b4:	693a      	ldr	r2, [r7, #16]
 810b4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b4b8:	687b      	ldr	r3, [r7, #4]
 810b4ba:	68fa      	ldr	r2, [r7, #12]
 810b4bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810b4be:	683b      	ldr	r3, [r7, #0]
 810b4c0:	685a      	ldr	r2, [r3, #4]
 810b4c2:	687b      	ldr	r3, [r7, #4]
 810b4c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	697a      	ldr	r2, [r7, #20]
 810b4ca:	621a      	str	r2, [r3, #32]
}
 810b4cc:	bf00      	nop
 810b4ce:	371c      	adds	r7, #28
 810b4d0:	46bd      	mov	sp, r7
 810b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4d6:	4770      	bx	lr
 810b4d8:	40010000 	.word	0x40010000
 810b4dc:	40010400 	.word	0x40010400
 810b4e0:	40014000 	.word	0x40014000
 810b4e4:	40014400 	.word	0x40014400
 810b4e8:	40014800 	.word	0x40014800

0810b4ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b4ec:	b480      	push	{r7}
 810b4ee:	b087      	sub	sp, #28
 810b4f0:	af00      	add	r7, sp, #0
 810b4f2:	6078      	str	r0, [r7, #4]
 810b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b4f6:	687b      	ldr	r3, [r7, #4]
 810b4f8:	6a1b      	ldr	r3, [r3, #32]
 810b4fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810b4fc:	687b      	ldr	r3, [r7, #4]
 810b4fe:	6a1b      	ldr	r3, [r3, #32]
 810b500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810b504:	687b      	ldr	r3, [r7, #4]
 810b506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b508:	687b      	ldr	r3, [r7, #4]
 810b50a:	685b      	ldr	r3, [r3, #4]
 810b50c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b50e:	687b      	ldr	r3, [r7, #4]
 810b510:	69db      	ldr	r3, [r3, #28]
 810b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810b514:	68fb      	ldr	r3, [r7, #12]
 810b516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b51a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810b520:	68fb      	ldr	r3, [r7, #12]
 810b522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b528:	683b      	ldr	r3, [r7, #0]
 810b52a:	681b      	ldr	r3, [r3, #0]
 810b52c:	021b      	lsls	r3, r3, #8
 810b52e:	68fa      	ldr	r2, [r7, #12]
 810b530:	4313      	orrs	r3, r2
 810b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810b534:	693b      	ldr	r3, [r7, #16]
 810b536:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810b53a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810b53c:	683b      	ldr	r3, [r7, #0]
 810b53e:	689b      	ldr	r3, [r3, #8]
 810b540:	031b      	lsls	r3, r3, #12
 810b542:	693a      	ldr	r2, [r7, #16]
 810b544:	4313      	orrs	r3, r2
 810b546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b548:	687b      	ldr	r3, [r7, #4]
 810b54a:	4a18      	ldr	r2, [pc, #96]	@ (810b5ac <TIM_OC4_SetConfig+0xc0>)
 810b54c:	4293      	cmp	r3, r2
 810b54e:	d00f      	beq.n	810b570 <TIM_OC4_SetConfig+0x84>
 810b550:	687b      	ldr	r3, [r7, #4]
 810b552:	4a17      	ldr	r2, [pc, #92]	@ (810b5b0 <TIM_OC4_SetConfig+0xc4>)
 810b554:	4293      	cmp	r3, r2
 810b556:	d00b      	beq.n	810b570 <TIM_OC4_SetConfig+0x84>
 810b558:	687b      	ldr	r3, [r7, #4]
 810b55a:	4a16      	ldr	r2, [pc, #88]	@ (810b5b4 <TIM_OC4_SetConfig+0xc8>)
 810b55c:	4293      	cmp	r3, r2
 810b55e:	d007      	beq.n	810b570 <TIM_OC4_SetConfig+0x84>
 810b560:	687b      	ldr	r3, [r7, #4]
 810b562:	4a15      	ldr	r2, [pc, #84]	@ (810b5b8 <TIM_OC4_SetConfig+0xcc>)
 810b564:	4293      	cmp	r3, r2
 810b566:	d003      	beq.n	810b570 <TIM_OC4_SetConfig+0x84>
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	4a14      	ldr	r2, [pc, #80]	@ (810b5bc <TIM_OC4_SetConfig+0xd0>)
 810b56c:	4293      	cmp	r3, r2
 810b56e:	d109      	bne.n	810b584 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810b570:	697b      	ldr	r3, [r7, #20]
 810b572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810b576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810b578:	683b      	ldr	r3, [r7, #0]
 810b57a:	695b      	ldr	r3, [r3, #20]
 810b57c:	019b      	lsls	r3, r3, #6
 810b57e:	697a      	ldr	r2, [r7, #20]
 810b580:	4313      	orrs	r3, r2
 810b582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b584:	687b      	ldr	r3, [r7, #4]
 810b586:	697a      	ldr	r2, [r7, #20]
 810b588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b58a:	687b      	ldr	r3, [r7, #4]
 810b58c:	68fa      	ldr	r2, [r7, #12]
 810b58e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810b590:	683b      	ldr	r3, [r7, #0]
 810b592:	685a      	ldr	r2, [r3, #4]
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b598:	687b      	ldr	r3, [r7, #4]
 810b59a:	693a      	ldr	r2, [r7, #16]
 810b59c:	621a      	str	r2, [r3, #32]
}
 810b59e:	bf00      	nop
 810b5a0:	371c      	adds	r7, #28
 810b5a2:	46bd      	mov	sp, r7
 810b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5a8:	4770      	bx	lr
 810b5aa:	bf00      	nop
 810b5ac:	40010000 	.word	0x40010000
 810b5b0:	40010400 	.word	0x40010400
 810b5b4:	40014000 	.word	0x40014000
 810b5b8:	40014400 	.word	0x40014400
 810b5bc:	40014800 	.word	0x40014800

0810b5c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810b5c0:	b480      	push	{r7}
 810b5c2:	b087      	sub	sp, #28
 810b5c4:	af00      	add	r7, sp, #0
 810b5c6:	6078      	str	r0, [r7, #4]
 810b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b5ca:	687b      	ldr	r3, [r7, #4]
 810b5cc:	6a1b      	ldr	r3, [r3, #32]
 810b5ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810b5d0:	687b      	ldr	r3, [r7, #4]
 810b5d2:	6a1b      	ldr	r3, [r3, #32]
 810b5d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	685b      	ldr	r3, [r3, #4]
 810b5e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b5e2:	687b      	ldr	r3, [r7, #4]
 810b5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810b5e8:	68fb      	ldr	r3, [r7, #12]
 810b5ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b5ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b5f4:	683b      	ldr	r3, [r7, #0]
 810b5f6:	681b      	ldr	r3, [r3, #0]
 810b5f8:	68fa      	ldr	r2, [r7, #12]
 810b5fa:	4313      	orrs	r3, r2
 810b5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810b5fe:	693b      	ldr	r3, [r7, #16]
 810b600:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810b604:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810b606:	683b      	ldr	r3, [r7, #0]
 810b608:	689b      	ldr	r3, [r3, #8]
 810b60a:	041b      	lsls	r3, r3, #16
 810b60c:	693a      	ldr	r2, [r7, #16]
 810b60e:	4313      	orrs	r3, r2
 810b610:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	4a17      	ldr	r2, [pc, #92]	@ (810b674 <TIM_OC5_SetConfig+0xb4>)
 810b616:	4293      	cmp	r3, r2
 810b618:	d00f      	beq.n	810b63a <TIM_OC5_SetConfig+0x7a>
 810b61a:	687b      	ldr	r3, [r7, #4]
 810b61c:	4a16      	ldr	r2, [pc, #88]	@ (810b678 <TIM_OC5_SetConfig+0xb8>)
 810b61e:	4293      	cmp	r3, r2
 810b620:	d00b      	beq.n	810b63a <TIM_OC5_SetConfig+0x7a>
 810b622:	687b      	ldr	r3, [r7, #4]
 810b624:	4a15      	ldr	r2, [pc, #84]	@ (810b67c <TIM_OC5_SetConfig+0xbc>)
 810b626:	4293      	cmp	r3, r2
 810b628:	d007      	beq.n	810b63a <TIM_OC5_SetConfig+0x7a>
 810b62a:	687b      	ldr	r3, [r7, #4]
 810b62c:	4a14      	ldr	r2, [pc, #80]	@ (810b680 <TIM_OC5_SetConfig+0xc0>)
 810b62e:	4293      	cmp	r3, r2
 810b630:	d003      	beq.n	810b63a <TIM_OC5_SetConfig+0x7a>
 810b632:	687b      	ldr	r3, [r7, #4]
 810b634:	4a13      	ldr	r2, [pc, #76]	@ (810b684 <TIM_OC5_SetConfig+0xc4>)
 810b636:	4293      	cmp	r3, r2
 810b638:	d109      	bne.n	810b64e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810b63a:	697b      	ldr	r3, [r7, #20]
 810b63c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810b642:	683b      	ldr	r3, [r7, #0]
 810b644:	695b      	ldr	r3, [r3, #20]
 810b646:	021b      	lsls	r3, r3, #8
 810b648:	697a      	ldr	r2, [r7, #20]
 810b64a:	4313      	orrs	r3, r2
 810b64c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b64e:	687b      	ldr	r3, [r7, #4]
 810b650:	697a      	ldr	r2, [r7, #20]
 810b652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b654:	687b      	ldr	r3, [r7, #4]
 810b656:	68fa      	ldr	r2, [r7, #12]
 810b658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810b65a:	683b      	ldr	r3, [r7, #0]
 810b65c:	685a      	ldr	r2, [r3, #4]
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	693a      	ldr	r2, [r7, #16]
 810b666:	621a      	str	r2, [r3, #32]
}
 810b668:	bf00      	nop
 810b66a:	371c      	adds	r7, #28
 810b66c:	46bd      	mov	sp, r7
 810b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b672:	4770      	bx	lr
 810b674:	40010000 	.word	0x40010000
 810b678:	40010400 	.word	0x40010400
 810b67c:	40014000 	.word	0x40014000
 810b680:	40014400 	.word	0x40014400
 810b684:	40014800 	.word	0x40014800

0810b688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810b688:	b480      	push	{r7}
 810b68a:	b087      	sub	sp, #28
 810b68c:	af00      	add	r7, sp, #0
 810b68e:	6078      	str	r0, [r7, #4]
 810b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b692:	687b      	ldr	r3, [r7, #4]
 810b694:	6a1b      	ldr	r3, [r3, #32]
 810b696:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810b698:	687b      	ldr	r3, [r7, #4]
 810b69a:	6a1b      	ldr	r3, [r3, #32]
 810b69c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810b6a0:	687b      	ldr	r3, [r7, #4]
 810b6a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b6a4:	687b      	ldr	r3, [r7, #4]
 810b6a6:	685b      	ldr	r3, [r3, #4]
 810b6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b6aa:	687b      	ldr	r3, [r7, #4]
 810b6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810b6b0:	68fb      	ldr	r3, [r7, #12]
 810b6b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b6b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b6bc:	683b      	ldr	r3, [r7, #0]
 810b6be:	681b      	ldr	r3, [r3, #0]
 810b6c0:	021b      	lsls	r3, r3, #8
 810b6c2:	68fa      	ldr	r2, [r7, #12]
 810b6c4:	4313      	orrs	r3, r2
 810b6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810b6c8:	693b      	ldr	r3, [r7, #16]
 810b6ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810b6ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810b6d0:	683b      	ldr	r3, [r7, #0]
 810b6d2:	689b      	ldr	r3, [r3, #8]
 810b6d4:	051b      	lsls	r3, r3, #20
 810b6d6:	693a      	ldr	r2, [r7, #16]
 810b6d8:	4313      	orrs	r3, r2
 810b6da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b6dc:	687b      	ldr	r3, [r7, #4]
 810b6de:	4a18      	ldr	r2, [pc, #96]	@ (810b740 <TIM_OC6_SetConfig+0xb8>)
 810b6e0:	4293      	cmp	r3, r2
 810b6e2:	d00f      	beq.n	810b704 <TIM_OC6_SetConfig+0x7c>
 810b6e4:	687b      	ldr	r3, [r7, #4]
 810b6e6:	4a17      	ldr	r2, [pc, #92]	@ (810b744 <TIM_OC6_SetConfig+0xbc>)
 810b6e8:	4293      	cmp	r3, r2
 810b6ea:	d00b      	beq.n	810b704 <TIM_OC6_SetConfig+0x7c>
 810b6ec:	687b      	ldr	r3, [r7, #4]
 810b6ee:	4a16      	ldr	r2, [pc, #88]	@ (810b748 <TIM_OC6_SetConfig+0xc0>)
 810b6f0:	4293      	cmp	r3, r2
 810b6f2:	d007      	beq.n	810b704 <TIM_OC6_SetConfig+0x7c>
 810b6f4:	687b      	ldr	r3, [r7, #4]
 810b6f6:	4a15      	ldr	r2, [pc, #84]	@ (810b74c <TIM_OC6_SetConfig+0xc4>)
 810b6f8:	4293      	cmp	r3, r2
 810b6fa:	d003      	beq.n	810b704 <TIM_OC6_SetConfig+0x7c>
 810b6fc:	687b      	ldr	r3, [r7, #4]
 810b6fe:	4a14      	ldr	r2, [pc, #80]	@ (810b750 <TIM_OC6_SetConfig+0xc8>)
 810b700:	4293      	cmp	r3, r2
 810b702:	d109      	bne.n	810b718 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810b704:	697b      	ldr	r3, [r7, #20]
 810b706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810b70a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810b70c:	683b      	ldr	r3, [r7, #0]
 810b70e:	695b      	ldr	r3, [r3, #20]
 810b710:	029b      	lsls	r3, r3, #10
 810b712:	697a      	ldr	r2, [r7, #20]
 810b714:	4313      	orrs	r3, r2
 810b716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b718:	687b      	ldr	r3, [r7, #4]
 810b71a:	697a      	ldr	r2, [r7, #20]
 810b71c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b71e:	687b      	ldr	r3, [r7, #4]
 810b720:	68fa      	ldr	r2, [r7, #12]
 810b722:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810b724:	683b      	ldr	r3, [r7, #0]
 810b726:	685a      	ldr	r2, [r3, #4]
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	693a      	ldr	r2, [r7, #16]
 810b730:	621a      	str	r2, [r3, #32]
}
 810b732:	bf00      	nop
 810b734:	371c      	adds	r7, #28
 810b736:	46bd      	mov	sp, r7
 810b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b73c:	4770      	bx	lr
 810b73e:	bf00      	nop
 810b740:	40010000 	.word	0x40010000
 810b744:	40010400 	.word	0x40010400
 810b748:	40014000 	.word	0x40014000
 810b74c:	40014400 	.word	0x40014400
 810b750:	40014800 	.word	0x40014800

0810b754 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810b754:	b480      	push	{r7}
 810b756:	b087      	sub	sp, #28
 810b758:	af00      	add	r7, sp, #0
 810b75a:	60f8      	str	r0, [r7, #12]
 810b75c:	60b9      	str	r1, [r7, #8]
 810b75e:	607a      	str	r2, [r7, #4]
 810b760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810b762:	68fb      	ldr	r3, [r7, #12]
 810b764:	6a1b      	ldr	r3, [r3, #32]
 810b766:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b768:	68fb      	ldr	r3, [r7, #12]
 810b76a:	6a1b      	ldr	r3, [r3, #32]
 810b76c:	f023 0201 	bic.w	r2, r3, #1
 810b770:	68fb      	ldr	r3, [r7, #12]
 810b772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810b774:	68fb      	ldr	r3, [r7, #12]
 810b776:	699b      	ldr	r3, [r3, #24]
 810b778:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810b77a:	68fb      	ldr	r3, [r7, #12]
 810b77c:	4a28      	ldr	r2, [pc, #160]	@ (810b820 <TIM_TI1_SetConfig+0xcc>)
 810b77e:	4293      	cmp	r3, r2
 810b780:	d01b      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b782:	68fb      	ldr	r3, [r7, #12]
 810b784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b788:	d017      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b78a:	68fb      	ldr	r3, [r7, #12]
 810b78c:	4a25      	ldr	r2, [pc, #148]	@ (810b824 <TIM_TI1_SetConfig+0xd0>)
 810b78e:	4293      	cmp	r3, r2
 810b790:	d013      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b792:	68fb      	ldr	r3, [r7, #12]
 810b794:	4a24      	ldr	r2, [pc, #144]	@ (810b828 <TIM_TI1_SetConfig+0xd4>)
 810b796:	4293      	cmp	r3, r2
 810b798:	d00f      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b79a:	68fb      	ldr	r3, [r7, #12]
 810b79c:	4a23      	ldr	r2, [pc, #140]	@ (810b82c <TIM_TI1_SetConfig+0xd8>)
 810b79e:	4293      	cmp	r3, r2
 810b7a0:	d00b      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b7a2:	68fb      	ldr	r3, [r7, #12]
 810b7a4:	4a22      	ldr	r2, [pc, #136]	@ (810b830 <TIM_TI1_SetConfig+0xdc>)
 810b7a6:	4293      	cmp	r3, r2
 810b7a8:	d007      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b7aa:	68fb      	ldr	r3, [r7, #12]
 810b7ac:	4a21      	ldr	r2, [pc, #132]	@ (810b834 <TIM_TI1_SetConfig+0xe0>)
 810b7ae:	4293      	cmp	r3, r2
 810b7b0:	d003      	beq.n	810b7ba <TIM_TI1_SetConfig+0x66>
 810b7b2:	68fb      	ldr	r3, [r7, #12]
 810b7b4:	4a20      	ldr	r2, [pc, #128]	@ (810b838 <TIM_TI1_SetConfig+0xe4>)
 810b7b6:	4293      	cmp	r3, r2
 810b7b8:	d101      	bne.n	810b7be <TIM_TI1_SetConfig+0x6a>
 810b7ba:	2301      	movs	r3, #1
 810b7bc:	e000      	b.n	810b7c0 <TIM_TI1_SetConfig+0x6c>
 810b7be:	2300      	movs	r3, #0
 810b7c0:	2b00      	cmp	r3, #0
 810b7c2:	d008      	beq.n	810b7d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810b7c4:	697b      	ldr	r3, [r7, #20]
 810b7c6:	f023 0303 	bic.w	r3, r3, #3
 810b7ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810b7cc:	697a      	ldr	r2, [r7, #20]
 810b7ce:	687b      	ldr	r3, [r7, #4]
 810b7d0:	4313      	orrs	r3, r2
 810b7d2:	617b      	str	r3, [r7, #20]
 810b7d4:	e003      	b.n	810b7de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810b7d6:	697b      	ldr	r3, [r7, #20]
 810b7d8:	f043 0301 	orr.w	r3, r3, #1
 810b7dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810b7de:	697b      	ldr	r3, [r7, #20]
 810b7e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810b7e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810b7e6:	683b      	ldr	r3, [r7, #0]
 810b7e8:	011b      	lsls	r3, r3, #4
 810b7ea:	b2db      	uxtb	r3, r3
 810b7ec:	697a      	ldr	r2, [r7, #20]
 810b7ee:	4313      	orrs	r3, r2
 810b7f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810b7f2:	693b      	ldr	r3, [r7, #16]
 810b7f4:	f023 030a 	bic.w	r3, r3, #10
 810b7f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810b7fa:	68bb      	ldr	r3, [r7, #8]
 810b7fc:	f003 030a 	and.w	r3, r3, #10
 810b800:	693a      	ldr	r2, [r7, #16]
 810b802:	4313      	orrs	r3, r2
 810b804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810b806:	68fb      	ldr	r3, [r7, #12]
 810b808:	697a      	ldr	r2, [r7, #20]
 810b80a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810b80c:	68fb      	ldr	r3, [r7, #12]
 810b80e:	693a      	ldr	r2, [r7, #16]
 810b810:	621a      	str	r2, [r3, #32]
}
 810b812:	bf00      	nop
 810b814:	371c      	adds	r7, #28
 810b816:	46bd      	mov	sp, r7
 810b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b81c:	4770      	bx	lr
 810b81e:	bf00      	nop
 810b820:	40010000 	.word	0x40010000
 810b824:	40000400 	.word	0x40000400
 810b828:	40000800 	.word	0x40000800
 810b82c:	40000c00 	.word	0x40000c00
 810b830:	40010400 	.word	0x40010400
 810b834:	40001800 	.word	0x40001800
 810b838:	40014000 	.word	0x40014000

0810b83c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b83c:	b480      	push	{r7}
 810b83e:	b087      	sub	sp, #28
 810b840:	af00      	add	r7, sp, #0
 810b842:	60f8      	str	r0, [r7, #12]
 810b844:	60b9      	str	r1, [r7, #8]
 810b846:	607a      	str	r2, [r7, #4]
 810b848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810b84a:	68fb      	ldr	r3, [r7, #12]
 810b84c:	6a1b      	ldr	r3, [r3, #32]
 810b84e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b850:	68fb      	ldr	r3, [r7, #12]
 810b852:	6a1b      	ldr	r3, [r3, #32]
 810b854:	f023 0210 	bic.w	r2, r3, #16
 810b858:	68fb      	ldr	r3, [r7, #12]
 810b85a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810b85c:	68fb      	ldr	r3, [r7, #12]
 810b85e:	699b      	ldr	r3, [r3, #24]
 810b860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810b862:	693b      	ldr	r3, [r7, #16]
 810b864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810b86a:	687b      	ldr	r3, [r7, #4]
 810b86c:	021b      	lsls	r3, r3, #8
 810b86e:	693a      	ldr	r2, [r7, #16]
 810b870:	4313      	orrs	r3, r2
 810b872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810b874:	693b      	ldr	r3, [r7, #16]
 810b876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810b87c:	683b      	ldr	r3, [r7, #0]
 810b87e:	031b      	lsls	r3, r3, #12
 810b880:	b29b      	uxth	r3, r3
 810b882:	693a      	ldr	r2, [r7, #16]
 810b884:	4313      	orrs	r3, r2
 810b886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810b888:	697b      	ldr	r3, [r7, #20]
 810b88a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810b88e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810b890:	68bb      	ldr	r3, [r7, #8]
 810b892:	011b      	lsls	r3, r3, #4
 810b894:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 810b898:	697a      	ldr	r2, [r7, #20]
 810b89a:	4313      	orrs	r3, r2
 810b89c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810b89e:	68fb      	ldr	r3, [r7, #12]
 810b8a0:	693a      	ldr	r2, [r7, #16]
 810b8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810b8a4:	68fb      	ldr	r3, [r7, #12]
 810b8a6:	697a      	ldr	r2, [r7, #20]
 810b8a8:	621a      	str	r2, [r3, #32]
}
 810b8aa:	bf00      	nop
 810b8ac:	371c      	adds	r7, #28
 810b8ae:	46bd      	mov	sp, r7
 810b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8b4:	4770      	bx	lr

0810b8b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b8b6:	b480      	push	{r7}
 810b8b8:	b087      	sub	sp, #28
 810b8ba:	af00      	add	r7, sp, #0
 810b8bc:	60f8      	str	r0, [r7, #12]
 810b8be:	60b9      	str	r1, [r7, #8]
 810b8c0:	607a      	str	r2, [r7, #4]
 810b8c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 810b8c4:	68fb      	ldr	r3, [r7, #12]
 810b8c6:	6a1b      	ldr	r3, [r3, #32]
 810b8c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b8ca:	68fb      	ldr	r3, [r7, #12]
 810b8cc:	6a1b      	ldr	r3, [r3, #32]
 810b8ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810b8d2:	68fb      	ldr	r3, [r7, #12]
 810b8d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810b8d6:	68fb      	ldr	r3, [r7, #12]
 810b8d8:	69db      	ldr	r3, [r3, #28]
 810b8da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810b8dc:	693b      	ldr	r3, [r7, #16]
 810b8de:	f023 0303 	bic.w	r3, r3, #3
 810b8e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 810b8e4:	693a      	ldr	r2, [r7, #16]
 810b8e6:	687b      	ldr	r3, [r7, #4]
 810b8e8:	4313      	orrs	r3, r2
 810b8ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810b8ec:	693b      	ldr	r3, [r7, #16]
 810b8ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810b8f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810b8f4:	683b      	ldr	r3, [r7, #0]
 810b8f6:	011b      	lsls	r3, r3, #4
 810b8f8:	b2db      	uxtb	r3, r3
 810b8fa:	693a      	ldr	r2, [r7, #16]
 810b8fc:	4313      	orrs	r3, r2
 810b8fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810b900:	697b      	ldr	r3, [r7, #20]
 810b902:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 810b906:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810b908:	68bb      	ldr	r3, [r7, #8]
 810b90a:	021b      	lsls	r3, r3, #8
 810b90c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 810b910:	697a      	ldr	r2, [r7, #20]
 810b912:	4313      	orrs	r3, r2
 810b914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810b916:	68fb      	ldr	r3, [r7, #12]
 810b918:	693a      	ldr	r2, [r7, #16]
 810b91a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810b91c:	68fb      	ldr	r3, [r7, #12]
 810b91e:	697a      	ldr	r2, [r7, #20]
 810b920:	621a      	str	r2, [r3, #32]
}
 810b922:	bf00      	nop
 810b924:	371c      	adds	r7, #28
 810b926:	46bd      	mov	sp, r7
 810b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b92c:	4770      	bx	lr

0810b92e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810b92e:	b480      	push	{r7}
 810b930:	b087      	sub	sp, #28
 810b932:	af00      	add	r7, sp, #0
 810b934:	60f8      	str	r0, [r7, #12]
 810b936:	60b9      	str	r1, [r7, #8]
 810b938:	607a      	str	r2, [r7, #4]
 810b93a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 810b93c:	68fb      	ldr	r3, [r7, #12]
 810b93e:	6a1b      	ldr	r3, [r3, #32]
 810b940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810b942:	68fb      	ldr	r3, [r7, #12]
 810b944:	6a1b      	ldr	r3, [r3, #32]
 810b946:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810b94a:	68fb      	ldr	r3, [r7, #12]
 810b94c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810b94e:	68fb      	ldr	r3, [r7, #12]
 810b950:	69db      	ldr	r3, [r3, #28]
 810b952:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810b954:	693b      	ldr	r3, [r7, #16]
 810b956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b95a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810b95c:	687b      	ldr	r3, [r7, #4]
 810b95e:	021b      	lsls	r3, r3, #8
 810b960:	693a      	ldr	r2, [r7, #16]
 810b962:	4313      	orrs	r3, r2
 810b964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810b966:	693b      	ldr	r3, [r7, #16]
 810b968:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b96c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810b96e:	683b      	ldr	r3, [r7, #0]
 810b970:	031b      	lsls	r3, r3, #12
 810b972:	b29b      	uxth	r3, r3
 810b974:	693a      	ldr	r2, [r7, #16]
 810b976:	4313      	orrs	r3, r2
 810b978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810b97a:	697b      	ldr	r3, [r7, #20]
 810b97c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 810b980:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810b982:	68bb      	ldr	r3, [r7, #8]
 810b984:	031b      	lsls	r3, r3, #12
 810b986:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 810b98a:	697a      	ldr	r2, [r7, #20]
 810b98c:	4313      	orrs	r3, r2
 810b98e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810b990:	68fb      	ldr	r3, [r7, #12]
 810b992:	693a      	ldr	r2, [r7, #16]
 810b994:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810b996:	68fb      	ldr	r3, [r7, #12]
 810b998:	697a      	ldr	r2, [r7, #20]
 810b99a:	621a      	str	r2, [r3, #32]
}
 810b99c:	bf00      	nop
 810b99e:	371c      	adds	r7, #28
 810b9a0:	46bd      	mov	sp, r7
 810b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9a6:	4770      	bx	lr

0810b9a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810b9a8:	b480      	push	{r7}
 810b9aa:	b085      	sub	sp, #20
 810b9ac:	af00      	add	r7, sp, #0
 810b9ae:	6078      	str	r0, [r7, #4]
 810b9b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810b9b2:	687b      	ldr	r3, [r7, #4]
 810b9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b9b8:	2b01      	cmp	r3, #1
 810b9ba:	d101      	bne.n	810b9c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810b9bc:	2302      	movs	r3, #2
 810b9be:	e06d      	b.n	810ba9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	2201      	movs	r2, #1
 810b9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	2202      	movs	r2, #2
 810b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	681b      	ldr	r3, [r3, #0]
 810b9d4:	685b      	ldr	r3, [r3, #4]
 810b9d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810b9d8:	687b      	ldr	r3, [r7, #4]
 810b9da:	681b      	ldr	r3, [r3, #0]
 810b9dc:	689b      	ldr	r3, [r3, #8]
 810b9de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	681b      	ldr	r3, [r3, #0]
 810b9e4:	4a30      	ldr	r2, [pc, #192]	@ (810baa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810b9e6:	4293      	cmp	r3, r2
 810b9e8:	d004      	beq.n	810b9f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810b9ea:	687b      	ldr	r3, [r7, #4]
 810b9ec:	681b      	ldr	r3, [r3, #0]
 810b9ee:	4a2f      	ldr	r2, [pc, #188]	@ (810baac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b9f0:	4293      	cmp	r3, r2
 810b9f2:	d108      	bne.n	810ba06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810b9f4:	68fb      	ldr	r3, [r7, #12]
 810b9f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810b9fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810b9fc:	683b      	ldr	r3, [r7, #0]
 810b9fe:	685b      	ldr	r3, [r3, #4]
 810ba00:	68fa      	ldr	r2, [r7, #12]
 810ba02:	4313      	orrs	r3, r2
 810ba04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810ba06:	68fb      	ldr	r3, [r7, #12]
 810ba08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ba0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810ba0e:	683b      	ldr	r3, [r7, #0]
 810ba10:	681b      	ldr	r3, [r3, #0]
 810ba12:	68fa      	ldr	r2, [r7, #12]
 810ba14:	4313      	orrs	r3, r2
 810ba16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810ba18:	687b      	ldr	r3, [r7, #4]
 810ba1a:	681b      	ldr	r3, [r3, #0]
 810ba1c:	68fa      	ldr	r2, [r7, #12]
 810ba1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ba20:	687b      	ldr	r3, [r7, #4]
 810ba22:	681b      	ldr	r3, [r3, #0]
 810ba24:	4a20      	ldr	r2, [pc, #128]	@ (810baa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ba26:	4293      	cmp	r3, r2
 810ba28:	d022      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	681b      	ldr	r3, [r3, #0]
 810ba2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ba32:	d01d      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	681b      	ldr	r3, [r3, #0]
 810ba38:	4a1d      	ldr	r2, [pc, #116]	@ (810bab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810ba3a:	4293      	cmp	r3, r2
 810ba3c:	d018      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	681b      	ldr	r3, [r3, #0]
 810ba42:	4a1c      	ldr	r2, [pc, #112]	@ (810bab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810ba44:	4293      	cmp	r3, r2
 810ba46:	d013      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba48:	687b      	ldr	r3, [r7, #4]
 810ba4a:	681b      	ldr	r3, [r3, #0]
 810ba4c:	4a1a      	ldr	r2, [pc, #104]	@ (810bab8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810ba4e:	4293      	cmp	r3, r2
 810ba50:	d00e      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba52:	687b      	ldr	r3, [r7, #4]
 810ba54:	681b      	ldr	r3, [r3, #0]
 810ba56:	4a15      	ldr	r2, [pc, #84]	@ (810baac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810ba58:	4293      	cmp	r3, r2
 810ba5a:	d009      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba5c:	687b      	ldr	r3, [r7, #4]
 810ba5e:	681b      	ldr	r3, [r3, #0]
 810ba60:	4a16      	ldr	r2, [pc, #88]	@ (810babc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810ba62:	4293      	cmp	r3, r2
 810ba64:	d004      	beq.n	810ba70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	681b      	ldr	r3, [r3, #0]
 810ba6a:	4a15      	ldr	r2, [pc, #84]	@ (810bac0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810ba6c:	4293      	cmp	r3, r2
 810ba6e:	d10c      	bne.n	810ba8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810ba70:	68bb      	ldr	r3, [r7, #8]
 810ba72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810ba76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810ba78:	683b      	ldr	r3, [r7, #0]
 810ba7a:	689b      	ldr	r3, [r3, #8]
 810ba7c:	68ba      	ldr	r2, [r7, #8]
 810ba7e:	4313      	orrs	r3, r2
 810ba80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810ba82:	687b      	ldr	r3, [r7, #4]
 810ba84:	681b      	ldr	r3, [r3, #0]
 810ba86:	68ba      	ldr	r2, [r7, #8]
 810ba88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810ba8a:	687b      	ldr	r3, [r7, #4]
 810ba8c:	2201      	movs	r2, #1
 810ba8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810ba92:	687b      	ldr	r3, [r7, #4]
 810ba94:	2200      	movs	r2, #0
 810ba96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810ba9a:	2300      	movs	r3, #0
}
 810ba9c:	4618      	mov	r0, r3
 810ba9e:	3714      	adds	r7, #20
 810baa0:	46bd      	mov	sp, r7
 810baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810baa6:	4770      	bx	lr
 810baa8:	40010000 	.word	0x40010000
 810baac:	40010400 	.word	0x40010400
 810bab0:	40000400 	.word	0x40000400
 810bab4:	40000800 	.word	0x40000800
 810bab8:	40000c00 	.word	0x40000c00
 810babc:	40001800 	.word	0x40001800
 810bac0:	40014000 	.word	0x40014000

0810bac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810bac4:	b480      	push	{r7}
 810bac6:	b085      	sub	sp, #20
 810bac8:	af00      	add	r7, sp, #0
 810baca:	6078      	str	r0, [r7, #4]
 810bacc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810bace:	2300      	movs	r3, #0
 810bad0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810bad2:	687b      	ldr	r3, [r7, #4]
 810bad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810bad8:	2b01      	cmp	r3, #1
 810bada:	d101      	bne.n	810bae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810badc:	2302      	movs	r3, #2
 810bade:	e065      	b.n	810bbac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810bae0:	687b      	ldr	r3, [r7, #4]
 810bae2:	2201      	movs	r2, #1
 810bae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810bae8:	68fb      	ldr	r3, [r7, #12]
 810baea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810baee:	683b      	ldr	r3, [r7, #0]
 810baf0:	68db      	ldr	r3, [r3, #12]
 810baf2:	4313      	orrs	r3, r2
 810baf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810baf6:	68fb      	ldr	r3, [r7, #12]
 810baf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810bafc:	683b      	ldr	r3, [r7, #0]
 810bafe:	689b      	ldr	r3, [r3, #8]
 810bb00:	4313      	orrs	r3, r2
 810bb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810bb04:	68fb      	ldr	r3, [r7, #12]
 810bb06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810bb0a:	683b      	ldr	r3, [r7, #0]
 810bb0c:	685b      	ldr	r3, [r3, #4]
 810bb0e:	4313      	orrs	r3, r2
 810bb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810bb12:	68fb      	ldr	r3, [r7, #12]
 810bb14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810bb18:	683b      	ldr	r3, [r7, #0]
 810bb1a:	681b      	ldr	r3, [r3, #0]
 810bb1c:	4313      	orrs	r3, r2
 810bb1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810bb20:	68fb      	ldr	r3, [r7, #12]
 810bb22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810bb26:	683b      	ldr	r3, [r7, #0]
 810bb28:	691b      	ldr	r3, [r3, #16]
 810bb2a:	4313      	orrs	r3, r2
 810bb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810bb2e:	68fb      	ldr	r3, [r7, #12]
 810bb30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810bb34:	683b      	ldr	r3, [r7, #0]
 810bb36:	695b      	ldr	r3, [r3, #20]
 810bb38:	4313      	orrs	r3, r2
 810bb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810bb3c:	68fb      	ldr	r3, [r7, #12]
 810bb3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810bb42:	683b      	ldr	r3, [r7, #0]
 810bb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bb46:	4313      	orrs	r3, r2
 810bb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810bb4a:	68fb      	ldr	r3, [r7, #12]
 810bb4c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810bb50:	683b      	ldr	r3, [r7, #0]
 810bb52:	699b      	ldr	r3, [r3, #24]
 810bb54:	041b      	lsls	r3, r3, #16
 810bb56:	4313      	orrs	r3, r2
 810bb58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	681b      	ldr	r3, [r3, #0]
 810bb5e:	4a16      	ldr	r2, [pc, #88]	@ (810bbb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810bb60:	4293      	cmp	r3, r2
 810bb62:	d004      	beq.n	810bb6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	681b      	ldr	r3, [r3, #0]
 810bb68:	4a14      	ldr	r2, [pc, #80]	@ (810bbbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810bb6a:	4293      	cmp	r3, r2
 810bb6c:	d115      	bne.n	810bb9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810bb6e:	68fb      	ldr	r3, [r7, #12]
 810bb70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810bb74:	683b      	ldr	r3, [r7, #0]
 810bb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bb78:	051b      	lsls	r3, r3, #20
 810bb7a:	4313      	orrs	r3, r2
 810bb7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810bb7e:	68fb      	ldr	r3, [r7, #12]
 810bb80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810bb84:	683b      	ldr	r3, [r7, #0]
 810bb86:	69db      	ldr	r3, [r3, #28]
 810bb88:	4313      	orrs	r3, r2
 810bb8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810bb8c:	68fb      	ldr	r3, [r7, #12]
 810bb8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810bb92:	683b      	ldr	r3, [r7, #0]
 810bb94:	6a1b      	ldr	r3, [r3, #32]
 810bb96:	4313      	orrs	r3, r2
 810bb98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	681b      	ldr	r3, [r3, #0]
 810bb9e:	68fa      	ldr	r2, [r7, #12]
 810bba0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810bba2:	687b      	ldr	r3, [r7, #4]
 810bba4:	2200      	movs	r2, #0
 810bba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810bbaa:	2300      	movs	r3, #0
}
 810bbac:	4618      	mov	r0, r3
 810bbae:	3714      	adds	r7, #20
 810bbb0:	46bd      	mov	sp, r7
 810bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbb6:	4770      	bx	lr
 810bbb8:	40010000 	.word	0x40010000
 810bbbc:	40010400 	.word	0x40010400

0810bbc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810bbc0:	b580      	push	{r7, lr}
 810bbc2:	b082      	sub	sp, #8
 810bbc4:	af00      	add	r7, sp, #0
 810bbc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810bbc8:	687b      	ldr	r3, [r7, #4]
 810bbca:	2b00      	cmp	r3, #0
 810bbcc:	d101      	bne.n	810bbd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810bbce:	2301      	movs	r3, #1
 810bbd0:	e042      	b.n	810bc58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810bbd2:	687b      	ldr	r3, [r7, #4]
 810bbd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810bbd8:	2b00      	cmp	r3, #0
 810bbda:	d106      	bne.n	810bbea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810bbdc:	687b      	ldr	r3, [r7, #4]
 810bbde:	2200      	movs	r2, #0
 810bbe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810bbe4:	6878      	ldr	r0, [r7, #4]
 810bbe6:	f7f6 fa71 	bl	81020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810bbea:	687b      	ldr	r3, [r7, #4]
 810bbec:	2224      	movs	r2, #36	@ 0x24
 810bbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810bbf2:	687b      	ldr	r3, [r7, #4]
 810bbf4:	681b      	ldr	r3, [r3, #0]
 810bbf6:	681a      	ldr	r2, [r3, #0]
 810bbf8:	687b      	ldr	r3, [r7, #4]
 810bbfa:	681b      	ldr	r3, [r3, #0]
 810bbfc:	f022 0201 	bic.w	r2, r2, #1
 810bc00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810bc02:	687b      	ldr	r3, [r7, #4]
 810bc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bc06:	2b00      	cmp	r3, #0
 810bc08:	d002      	beq.n	810bc10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810bc0a:	6878      	ldr	r0, [r7, #4]
 810bc0c:	f000 fe1e 	bl	810c84c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810bc10:	6878      	ldr	r0, [r7, #4]
 810bc12:	f000 f8b3 	bl	810bd7c <UART_SetConfig>
 810bc16:	4603      	mov	r3, r0
 810bc18:	2b01      	cmp	r3, #1
 810bc1a:	d101      	bne.n	810bc20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810bc1c:	2301      	movs	r3, #1
 810bc1e:	e01b      	b.n	810bc58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810bc20:	687b      	ldr	r3, [r7, #4]
 810bc22:	681b      	ldr	r3, [r3, #0]
 810bc24:	685a      	ldr	r2, [r3, #4]
 810bc26:	687b      	ldr	r3, [r7, #4]
 810bc28:	681b      	ldr	r3, [r3, #0]
 810bc2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810bc2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	681b      	ldr	r3, [r3, #0]
 810bc34:	689a      	ldr	r2, [r3, #8]
 810bc36:	687b      	ldr	r3, [r7, #4]
 810bc38:	681b      	ldr	r3, [r3, #0]
 810bc3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810bc3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	681b      	ldr	r3, [r3, #0]
 810bc44:	681a      	ldr	r2, [r3, #0]
 810bc46:	687b      	ldr	r3, [r7, #4]
 810bc48:	681b      	ldr	r3, [r3, #0]
 810bc4a:	f042 0201 	orr.w	r2, r2, #1
 810bc4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810bc50:	6878      	ldr	r0, [r7, #4]
 810bc52:	f000 fe9d 	bl	810c990 <UART_CheckIdleState>
 810bc56:	4603      	mov	r3, r0
}
 810bc58:	4618      	mov	r0, r3
 810bc5a:	3708      	adds	r7, #8
 810bc5c:	46bd      	mov	sp, r7
 810bc5e:	bd80      	pop	{r7, pc}

0810bc60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810bc60:	b580      	push	{r7, lr}
 810bc62:	b08a      	sub	sp, #40	@ 0x28
 810bc64:	af02      	add	r7, sp, #8
 810bc66:	60f8      	str	r0, [r7, #12]
 810bc68:	60b9      	str	r1, [r7, #8]
 810bc6a:	603b      	str	r3, [r7, #0]
 810bc6c:	4613      	mov	r3, r2
 810bc6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810bc70:	68fb      	ldr	r3, [r7, #12]
 810bc72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810bc76:	2b20      	cmp	r3, #32
 810bc78:	d17b      	bne.n	810bd72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810bc7a:	68bb      	ldr	r3, [r7, #8]
 810bc7c:	2b00      	cmp	r3, #0
 810bc7e:	d002      	beq.n	810bc86 <HAL_UART_Transmit+0x26>
 810bc80:	88fb      	ldrh	r3, [r7, #6]
 810bc82:	2b00      	cmp	r3, #0
 810bc84:	d101      	bne.n	810bc8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810bc86:	2301      	movs	r3, #1
 810bc88:	e074      	b.n	810bd74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bc8a:	68fb      	ldr	r3, [r7, #12]
 810bc8c:	2200      	movs	r2, #0
 810bc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810bc92:	68fb      	ldr	r3, [r7, #12]
 810bc94:	2221      	movs	r2, #33	@ 0x21
 810bc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810bc9a:	f7f6 ff79 	bl	8102b90 <HAL_GetTick>
 810bc9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810bca0:	68fb      	ldr	r3, [r7, #12]
 810bca2:	88fa      	ldrh	r2, [r7, #6]
 810bca4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810bca8:	68fb      	ldr	r3, [r7, #12]
 810bcaa:	88fa      	ldrh	r2, [r7, #6]
 810bcac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810bcb0:	68fb      	ldr	r3, [r7, #12]
 810bcb2:	689b      	ldr	r3, [r3, #8]
 810bcb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810bcb8:	d108      	bne.n	810bccc <HAL_UART_Transmit+0x6c>
 810bcba:	68fb      	ldr	r3, [r7, #12]
 810bcbc:	691b      	ldr	r3, [r3, #16]
 810bcbe:	2b00      	cmp	r3, #0
 810bcc0:	d104      	bne.n	810bccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810bcc2:	2300      	movs	r3, #0
 810bcc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810bcc6:	68bb      	ldr	r3, [r7, #8]
 810bcc8:	61bb      	str	r3, [r7, #24]
 810bcca:	e003      	b.n	810bcd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810bccc:	68bb      	ldr	r3, [r7, #8]
 810bcce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810bcd0:	2300      	movs	r3, #0
 810bcd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810bcd4:	e030      	b.n	810bd38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810bcd6:	683b      	ldr	r3, [r7, #0]
 810bcd8:	9300      	str	r3, [sp, #0]
 810bcda:	697b      	ldr	r3, [r7, #20]
 810bcdc:	2200      	movs	r2, #0
 810bcde:	2180      	movs	r1, #128	@ 0x80
 810bce0:	68f8      	ldr	r0, [r7, #12]
 810bce2:	f000 feff 	bl	810cae4 <UART_WaitOnFlagUntilTimeout>
 810bce6:	4603      	mov	r3, r0
 810bce8:	2b00      	cmp	r3, #0
 810bcea:	d005      	beq.n	810bcf8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810bcec:	68fb      	ldr	r3, [r7, #12]
 810bcee:	2220      	movs	r2, #32
 810bcf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810bcf4:	2303      	movs	r3, #3
 810bcf6:	e03d      	b.n	810bd74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810bcf8:	69fb      	ldr	r3, [r7, #28]
 810bcfa:	2b00      	cmp	r3, #0
 810bcfc:	d10b      	bne.n	810bd16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810bcfe:	69bb      	ldr	r3, [r7, #24]
 810bd00:	881b      	ldrh	r3, [r3, #0]
 810bd02:	461a      	mov	r2, r3
 810bd04:	68fb      	ldr	r3, [r7, #12]
 810bd06:	681b      	ldr	r3, [r3, #0]
 810bd08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810bd0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810bd0e:	69bb      	ldr	r3, [r7, #24]
 810bd10:	3302      	adds	r3, #2
 810bd12:	61bb      	str	r3, [r7, #24]
 810bd14:	e007      	b.n	810bd26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810bd16:	69fb      	ldr	r3, [r7, #28]
 810bd18:	781a      	ldrb	r2, [r3, #0]
 810bd1a:	68fb      	ldr	r3, [r7, #12]
 810bd1c:	681b      	ldr	r3, [r3, #0]
 810bd1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810bd20:	69fb      	ldr	r3, [r7, #28]
 810bd22:	3301      	adds	r3, #1
 810bd24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810bd26:	68fb      	ldr	r3, [r7, #12]
 810bd28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810bd2c:	b29b      	uxth	r3, r3
 810bd2e:	3b01      	subs	r3, #1
 810bd30:	b29a      	uxth	r2, r3
 810bd32:	68fb      	ldr	r3, [r7, #12]
 810bd34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810bd38:	68fb      	ldr	r3, [r7, #12]
 810bd3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810bd3e:	b29b      	uxth	r3, r3
 810bd40:	2b00      	cmp	r3, #0
 810bd42:	d1c8      	bne.n	810bcd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810bd44:	683b      	ldr	r3, [r7, #0]
 810bd46:	9300      	str	r3, [sp, #0]
 810bd48:	697b      	ldr	r3, [r7, #20]
 810bd4a:	2200      	movs	r2, #0
 810bd4c:	2140      	movs	r1, #64	@ 0x40
 810bd4e:	68f8      	ldr	r0, [r7, #12]
 810bd50:	f000 fec8 	bl	810cae4 <UART_WaitOnFlagUntilTimeout>
 810bd54:	4603      	mov	r3, r0
 810bd56:	2b00      	cmp	r3, #0
 810bd58:	d005      	beq.n	810bd66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810bd5a:	68fb      	ldr	r3, [r7, #12]
 810bd5c:	2220      	movs	r2, #32
 810bd5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810bd62:	2303      	movs	r3, #3
 810bd64:	e006      	b.n	810bd74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810bd66:	68fb      	ldr	r3, [r7, #12]
 810bd68:	2220      	movs	r2, #32
 810bd6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810bd6e:	2300      	movs	r3, #0
 810bd70:	e000      	b.n	810bd74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810bd72:	2302      	movs	r3, #2
  }
}
 810bd74:	4618      	mov	r0, r3
 810bd76:	3720      	adds	r7, #32
 810bd78:	46bd      	mov	sp, r7
 810bd7a:	bd80      	pop	{r7, pc}

0810bd7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810bd7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810bd80:	b092      	sub	sp, #72	@ 0x48
 810bd82:	af00      	add	r7, sp, #0
 810bd84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810bd86:	2300      	movs	r3, #0
 810bd88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810bd8c:	697b      	ldr	r3, [r7, #20]
 810bd8e:	689a      	ldr	r2, [r3, #8]
 810bd90:	697b      	ldr	r3, [r7, #20]
 810bd92:	691b      	ldr	r3, [r3, #16]
 810bd94:	431a      	orrs	r2, r3
 810bd96:	697b      	ldr	r3, [r7, #20]
 810bd98:	695b      	ldr	r3, [r3, #20]
 810bd9a:	431a      	orrs	r2, r3
 810bd9c:	697b      	ldr	r3, [r7, #20]
 810bd9e:	69db      	ldr	r3, [r3, #28]
 810bda0:	4313      	orrs	r3, r2
 810bda2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810bda4:	697b      	ldr	r3, [r7, #20]
 810bda6:	681b      	ldr	r3, [r3, #0]
 810bda8:	681a      	ldr	r2, [r3, #0]
 810bdaa:	4bbd      	ldr	r3, [pc, #756]	@ (810c0a0 <UART_SetConfig+0x324>)
 810bdac:	4013      	ands	r3, r2
 810bdae:	697a      	ldr	r2, [r7, #20]
 810bdb0:	6812      	ldr	r2, [r2, #0]
 810bdb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bdb4:	430b      	orrs	r3, r1
 810bdb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810bdb8:	697b      	ldr	r3, [r7, #20]
 810bdba:	681b      	ldr	r3, [r3, #0]
 810bdbc:	685b      	ldr	r3, [r3, #4]
 810bdbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810bdc2:	697b      	ldr	r3, [r7, #20]
 810bdc4:	68da      	ldr	r2, [r3, #12]
 810bdc6:	697b      	ldr	r3, [r7, #20]
 810bdc8:	681b      	ldr	r3, [r3, #0]
 810bdca:	430a      	orrs	r2, r1
 810bdcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810bdce:	697b      	ldr	r3, [r7, #20]
 810bdd0:	699b      	ldr	r3, [r3, #24]
 810bdd2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810bdd4:	697b      	ldr	r3, [r7, #20]
 810bdd6:	681b      	ldr	r3, [r3, #0]
 810bdd8:	4ab2      	ldr	r2, [pc, #712]	@ (810c0a4 <UART_SetConfig+0x328>)
 810bdda:	4293      	cmp	r3, r2
 810bddc:	d004      	beq.n	810bde8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810bdde:	697b      	ldr	r3, [r7, #20]
 810bde0:	6a1b      	ldr	r3, [r3, #32]
 810bde2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bde4:	4313      	orrs	r3, r2
 810bde6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810bde8:	697b      	ldr	r3, [r7, #20]
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	689b      	ldr	r3, [r3, #8]
 810bdee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810bdf2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810bdf6:	697a      	ldr	r2, [r7, #20]
 810bdf8:	6812      	ldr	r2, [r2, #0]
 810bdfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bdfc:	430b      	orrs	r3, r1
 810bdfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810be00:	697b      	ldr	r3, [r7, #20]
 810be02:	681b      	ldr	r3, [r3, #0]
 810be04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810be06:	f023 010f 	bic.w	r1, r3, #15
 810be0a:	697b      	ldr	r3, [r7, #20]
 810be0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810be0e:	697b      	ldr	r3, [r7, #20]
 810be10:	681b      	ldr	r3, [r3, #0]
 810be12:	430a      	orrs	r2, r1
 810be14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810be16:	697b      	ldr	r3, [r7, #20]
 810be18:	681b      	ldr	r3, [r3, #0]
 810be1a:	4aa3      	ldr	r2, [pc, #652]	@ (810c0a8 <UART_SetConfig+0x32c>)
 810be1c:	4293      	cmp	r3, r2
 810be1e:	d177      	bne.n	810bf10 <UART_SetConfig+0x194>
 810be20:	4ba2      	ldr	r3, [pc, #648]	@ (810c0ac <UART_SetConfig+0x330>)
 810be22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810be24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810be28:	2b28      	cmp	r3, #40	@ 0x28
 810be2a:	d86d      	bhi.n	810bf08 <UART_SetConfig+0x18c>
 810be2c:	a201      	add	r2, pc, #4	@ (adr r2, 810be34 <UART_SetConfig+0xb8>)
 810be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be32:	bf00      	nop
 810be34:	0810bed9 	.word	0x0810bed9
 810be38:	0810bf09 	.word	0x0810bf09
 810be3c:	0810bf09 	.word	0x0810bf09
 810be40:	0810bf09 	.word	0x0810bf09
 810be44:	0810bf09 	.word	0x0810bf09
 810be48:	0810bf09 	.word	0x0810bf09
 810be4c:	0810bf09 	.word	0x0810bf09
 810be50:	0810bf09 	.word	0x0810bf09
 810be54:	0810bee1 	.word	0x0810bee1
 810be58:	0810bf09 	.word	0x0810bf09
 810be5c:	0810bf09 	.word	0x0810bf09
 810be60:	0810bf09 	.word	0x0810bf09
 810be64:	0810bf09 	.word	0x0810bf09
 810be68:	0810bf09 	.word	0x0810bf09
 810be6c:	0810bf09 	.word	0x0810bf09
 810be70:	0810bf09 	.word	0x0810bf09
 810be74:	0810bee9 	.word	0x0810bee9
 810be78:	0810bf09 	.word	0x0810bf09
 810be7c:	0810bf09 	.word	0x0810bf09
 810be80:	0810bf09 	.word	0x0810bf09
 810be84:	0810bf09 	.word	0x0810bf09
 810be88:	0810bf09 	.word	0x0810bf09
 810be8c:	0810bf09 	.word	0x0810bf09
 810be90:	0810bf09 	.word	0x0810bf09
 810be94:	0810bef1 	.word	0x0810bef1
 810be98:	0810bf09 	.word	0x0810bf09
 810be9c:	0810bf09 	.word	0x0810bf09
 810bea0:	0810bf09 	.word	0x0810bf09
 810bea4:	0810bf09 	.word	0x0810bf09
 810bea8:	0810bf09 	.word	0x0810bf09
 810beac:	0810bf09 	.word	0x0810bf09
 810beb0:	0810bf09 	.word	0x0810bf09
 810beb4:	0810bef9 	.word	0x0810bef9
 810beb8:	0810bf09 	.word	0x0810bf09
 810bebc:	0810bf09 	.word	0x0810bf09
 810bec0:	0810bf09 	.word	0x0810bf09
 810bec4:	0810bf09 	.word	0x0810bf09
 810bec8:	0810bf09 	.word	0x0810bf09
 810becc:	0810bf09 	.word	0x0810bf09
 810bed0:	0810bf09 	.word	0x0810bf09
 810bed4:	0810bf01 	.word	0x0810bf01
 810bed8:	2301      	movs	r3, #1
 810beda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bede:	e220      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bee0:	2304      	movs	r3, #4
 810bee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bee6:	e21c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bee8:	2308      	movs	r3, #8
 810beea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810beee:	e218      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bef0:	2310      	movs	r3, #16
 810bef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bef6:	e214      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bef8:	2320      	movs	r3, #32
 810befa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810befe:	e210      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf00:	2340      	movs	r3, #64	@ 0x40
 810bf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf06:	e20c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf08:	2380      	movs	r3, #128	@ 0x80
 810bf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf0e:	e208      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf10:	697b      	ldr	r3, [r7, #20]
 810bf12:	681b      	ldr	r3, [r3, #0]
 810bf14:	4a66      	ldr	r2, [pc, #408]	@ (810c0b0 <UART_SetConfig+0x334>)
 810bf16:	4293      	cmp	r3, r2
 810bf18:	d130      	bne.n	810bf7c <UART_SetConfig+0x200>
 810bf1a:	4b64      	ldr	r3, [pc, #400]	@ (810c0ac <UART_SetConfig+0x330>)
 810bf1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bf1e:	f003 0307 	and.w	r3, r3, #7
 810bf22:	2b05      	cmp	r3, #5
 810bf24:	d826      	bhi.n	810bf74 <UART_SetConfig+0x1f8>
 810bf26:	a201      	add	r2, pc, #4	@ (adr r2, 810bf2c <UART_SetConfig+0x1b0>)
 810bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bf2c:	0810bf45 	.word	0x0810bf45
 810bf30:	0810bf4d 	.word	0x0810bf4d
 810bf34:	0810bf55 	.word	0x0810bf55
 810bf38:	0810bf5d 	.word	0x0810bf5d
 810bf3c:	0810bf65 	.word	0x0810bf65
 810bf40:	0810bf6d 	.word	0x0810bf6d
 810bf44:	2300      	movs	r3, #0
 810bf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf4a:	e1ea      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf4c:	2304      	movs	r3, #4
 810bf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf52:	e1e6      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf54:	2308      	movs	r3, #8
 810bf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf5a:	e1e2      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf5c:	2310      	movs	r3, #16
 810bf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf62:	e1de      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf64:	2320      	movs	r3, #32
 810bf66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf6a:	e1da      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf6c:	2340      	movs	r3, #64	@ 0x40
 810bf6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf72:	e1d6      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf74:	2380      	movs	r3, #128	@ 0x80
 810bf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bf7a:	e1d2      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bf7c:	697b      	ldr	r3, [r7, #20]
 810bf7e:	681b      	ldr	r3, [r3, #0]
 810bf80:	4a4c      	ldr	r2, [pc, #304]	@ (810c0b4 <UART_SetConfig+0x338>)
 810bf82:	4293      	cmp	r3, r2
 810bf84:	d130      	bne.n	810bfe8 <UART_SetConfig+0x26c>
 810bf86:	4b49      	ldr	r3, [pc, #292]	@ (810c0ac <UART_SetConfig+0x330>)
 810bf88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bf8a:	f003 0307 	and.w	r3, r3, #7
 810bf8e:	2b05      	cmp	r3, #5
 810bf90:	d826      	bhi.n	810bfe0 <UART_SetConfig+0x264>
 810bf92:	a201      	add	r2, pc, #4	@ (adr r2, 810bf98 <UART_SetConfig+0x21c>)
 810bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bf98:	0810bfb1 	.word	0x0810bfb1
 810bf9c:	0810bfb9 	.word	0x0810bfb9
 810bfa0:	0810bfc1 	.word	0x0810bfc1
 810bfa4:	0810bfc9 	.word	0x0810bfc9
 810bfa8:	0810bfd1 	.word	0x0810bfd1
 810bfac:	0810bfd9 	.word	0x0810bfd9
 810bfb0:	2300      	movs	r3, #0
 810bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfb6:	e1b4      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfb8:	2304      	movs	r3, #4
 810bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfbe:	e1b0      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfc0:	2308      	movs	r3, #8
 810bfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfc6:	e1ac      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfc8:	2310      	movs	r3, #16
 810bfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfce:	e1a8      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfd0:	2320      	movs	r3, #32
 810bfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfd6:	e1a4      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfd8:	2340      	movs	r3, #64	@ 0x40
 810bfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfde:	e1a0      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfe0:	2380      	movs	r3, #128	@ 0x80
 810bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810bfe6:	e19c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810bfe8:	697b      	ldr	r3, [r7, #20]
 810bfea:	681b      	ldr	r3, [r3, #0]
 810bfec:	4a32      	ldr	r2, [pc, #200]	@ (810c0b8 <UART_SetConfig+0x33c>)
 810bfee:	4293      	cmp	r3, r2
 810bff0:	d130      	bne.n	810c054 <UART_SetConfig+0x2d8>
 810bff2:	4b2e      	ldr	r3, [pc, #184]	@ (810c0ac <UART_SetConfig+0x330>)
 810bff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bff6:	f003 0307 	and.w	r3, r3, #7
 810bffa:	2b05      	cmp	r3, #5
 810bffc:	d826      	bhi.n	810c04c <UART_SetConfig+0x2d0>
 810bffe:	a201      	add	r2, pc, #4	@ (adr r2, 810c004 <UART_SetConfig+0x288>)
 810c000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c004:	0810c01d 	.word	0x0810c01d
 810c008:	0810c025 	.word	0x0810c025
 810c00c:	0810c02d 	.word	0x0810c02d
 810c010:	0810c035 	.word	0x0810c035
 810c014:	0810c03d 	.word	0x0810c03d
 810c018:	0810c045 	.word	0x0810c045
 810c01c:	2300      	movs	r3, #0
 810c01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c022:	e17e      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c024:	2304      	movs	r3, #4
 810c026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c02a:	e17a      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c02c:	2308      	movs	r3, #8
 810c02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c032:	e176      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c034:	2310      	movs	r3, #16
 810c036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c03a:	e172      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c03c:	2320      	movs	r3, #32
 810c03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c042:	e16e      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c044:	2340      	movs	r3, #64	@ 0x40
 810c046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c04a:	e16a      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c04c:	2380      	movs	r3, #128	@ 0x80
 810c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c052:	e166      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c054:	697b      	ldr	r3, [r7, #20]
 810c056:	681b      	ldr	r3, [r3, #0]
 810c058:	4a18      	ldr	r2, [pc, #96]	@ (810c0bc <UART_SetConfig+0x340>)
 810c05a:	4293      	cmp	r3, r2
 810c05c:	d140      	bne.n	810c0e0 <UART_SetConfig+0x364>
 810c05e:	4b13      	ldr	r3, [pc, #76]	@ (810c0ac <UART_SetConfig+0x330>)
 810c060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c062:	f003 0307 	and.w	r3, r3, #7
 810c066:	2b05      	cmp	r3, #5
 810c068:	d836      	bhi.n	810c0d8 <UART_SetConfig+0x35c>
 810c06a:	a201      	add	r2, pc, #4	@ (adr r2, 810c070 <UART_SetConfig+0x2f4>)
 810c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c070:	0810c089 	.word	0x0810c089
 810c074:	0810c091 	.word	0x0810c091
 810c078:	0810c099 	.word	0x0810c099
 810c07c:	0810c0c1 	.word	0x0810c0c1
 810c080:	0810c0c9 	.word	0x0810c0c9
 810c084:	0810c0d1 	.word	0x0810c0d1
 810c088:	2300      	movs	r3, #0
 810c08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c08e:	e148      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c090:	2304      	movs	r3, #4
 810c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c096:	e144      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c098:	2308      	movs	r3, #8
 810c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c09e:	e140      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c0a0:	cfff69f3 	.word	0xcfff69f3
 810c0a4:	58000c00 	.word	0x58000c00
 810c0a8:	40011000 	.word	0x40011000
 810c0ac:	58024400 	.word	0x58024400
 810c0b0:	40004400 	.word	0x40004400
 810c0b4:	40004800 	.word	0x40004800
 810c0b8:	40004c00 	.word	0x40004c00
 810c0bc:	40005000 	.word	0x40005000
 810c0c0:	2310      	movs	r3, #16
 810c0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0c6:	e12c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c0c8:	2320      	movs	r3, #32
 810c0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0ce:	e128      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c0d0:	2340      	movs	r3, #64	@ 0x40
 810c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0d6:	e124      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c0d8:	2380      	movs	r3, #128	@ 0x80
 810c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c0de:	e120      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c0e0:	697b      	ldr	r3, [r7, #20]
 810c0e2:	681b      	ldr	r3, [r3, #0]
 810c0e4:	4acb      	ldr	r2, [pc, #812]	@ (810c414 <UART_SetConfig+0x698>)
 810c0e6:	4293      	cmp	r3, r2
 810c0e8:	d176      	bne.n	810c1d8 <UART_SetConfig+0x45c>
 810c0ea:	4bcb      	ldr	r3, [pc, #812]	@ (810c418 <UART_SetConfig+0x69c>)
 810c0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c0ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810c0f2:	2b28      	cmp	r3, #40	@ 0x28
 810c0f4:	d86c      	bhi.n	810c1d0 <UART_SetConfig+0x454>
 810c0f6:	a201      	add	r2, pc, #4	@ (adr r2, 810c0fc <UART_SetConfig+0x380>)
 810c0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c0fc:	0810c1a1 	.word	0x0810c1a1
 810c100:	0810c1d1 	.word	0x0810c1d1
 810c104:	0810c1d1 	.word	0x0810c1d1
 810c108:	0810c1d1 	.word	0x0810c1d1
 810c10c:	0810c1d1 	.word	0x0810c1d1
 810c110:	0810c1d1 	.word	0x0810c1d1
 810c114:	0810c1d1 	.word	0x0810c1d1
 810c118:	0810c1d1 	.word	0x0810c1d1
 810c11c:	0810c1a9 	.word	0x0810c1a9
 810c120:	0810c1d1 	.word	0x0810c1d1
 810c124:	0810c1d1 	.word	0x0810c1d1
 810c128:	0810c1d1 	.word	0x0810c1d1
 810c12c:	0810c1d1 	.word	0x0810c1d1
 810c130:	0810c1d1 	.word	0x0810c1d1
 810c134:	0810c1d1 	.word	0x0810c1d1
 810c138:	0810c1d1 	.word	0x0810c1d1
 810c13c:	0810c1b1 	.word	0x0810c1b1
 810c140:	0810c1d1 	.word	0x0810c1d1
 810c144:	0810c1d1 	.word	0x0810c1d1
 810c148:	0810c1d1 	.word	0x0810c1d1
 810c14c:	0810c1d1 	.word	0x0810c1d1
 810c150:	0810c1d1 	.word	0x0810c1d1
 810c154:	0810c1d1 	.word	0x0810c1d1
 810c158:	0810c1d1 	.word	0x0810c1d1
 810c15c:	0810c1b9 	.word	0x0810c1b9
 810c160:	0810c1d1 	.word	0x0810c1d1
 810c164:	0810c1d1 	.word	0x0810c1d1
 810c168:	0810c1d1 	.word	0x0810c1d1
 810c16c:	0810c1d1 	.word	0x0810c1d1
 810c170:	0810c1d1 	.word	0x0810c1d1
 810c174:	0810c1d1 	.word	0x0810c1d1
 810c178:	0810c1d1 	.word	0x0810c1d1
 810c17c:	0810c1c1 	.word	0x0810c1c1
 810c180:	0810c1d1 	.word	0x0810c1d1
 810c184:	0810c1d1 	.word	0x0810c1d1
 810c188:	0810c1d1 	.word	0x0810c1d1
 810c18c:	0810c1d1 	.word	0x0810c1d1
 810c190:	0810c1d1 	.word	0x0810c1d1
 810c194:	0810c1d1 	.word	0x0810c1d1
 810c198:	0810c1d1 	.word	0x0810c1d1
 810c19c:	0810c1c9 	.word	0x0810c1c9
 810c1a0:	2301      	movs	r3, #1
 810c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1a6:	e0bc      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1a8:	2304      	movs	r3, #4
 810c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1ae:	e0b8      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1b0:	2308      	movs	r3, #8
 810c1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1b6:	e0b4      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1b8:	2310      	movs	r3, #16
 810c1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1be:	e0b0      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1c0:	2320      	movs	r3, #32
 810c1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1c6:	e0ac      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1c8:	2340      	movs	r3, #64	@ 0x40
 810c1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1ce:	e0a8      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1d0:	2380      	movs	r3, #128	@ 0x80
 810c1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c1d6:	e0a4      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c1d8:	697b      	ldr	r3, [r7, #20]
 810c1da:	681b      	ldr	r3, [r3, #0]
 810c1dc:	4a8f      	ldr	r2, [pc, #572]	@ (810c41c <UART_SetConfig+0x6a0>)
 810c1de:	4293      	cmp	r3, r2
 810c1e0:	d130      	bne.n	810c244 <UART_SetConfig+0x4c8>
 810c1e2:	4b8d      	ldr	r3, [pc, #564]	@ (810c418 <UART_SetConfig+0x69c>)
 810c1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c1e6:	f003 0307 	and.w	r3, r3, #7
 810c1ea:	2b05      	cmp	r3, #5
 810c1ec:	d826      	bhi.n	810c23c <UART_SetConfig+0x4c0>
 810c1ee:	a201      	add	r2, pc, #4	@ (adr r2, 810c1f4 <UART_SetConfig+0x478>)
 810c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c1f4:	0810c20d 	.word	0x0810c20d
 810c1f8:	0810c215 	.word	0x0810c215
 810c1fc:	0810c21d 	.word	0x0810c21d
 810c200:	0810c225 	.word	0x0810c225
 810c204:	0810c22d 	.word	0x0810c22d
 810c208:	0810c235 	.word	0x0810c235
 810c20c:	2300      	movs	r3, #0
 810c20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c212:	e086      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c214:	2304      	movs	r3, #4
 810c216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c21a:	e082      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c21c:	2308      	movs	r3, #8
 810c21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c222:	e07e      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c224:	2310      	movs	r3, #16
 810c226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c22a:	e07a      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c22c:	2320      	movs	r3, #32
 810c22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c232:	e076      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c234:	2340      	movs	r3, #64	@ 0x40
 810c236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c23a:	e072      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c23c:	2380      	movs	r3, #128	@ 0x80
 810c23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c242:	e06e      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c244:	697b      	ldr	r3, [r7, #20]
 810c246:	681b      	ldr	r3, [r3, #0]
 810c248:	4a75      	ldr	r2, [pc, #468]	@ (810c420 <UART_SetConfig+0x6a4>)
 810c24a:	4293      	cmp	r3, r2
 810c24c:	d130      	bne.n	810c2b0 <UART_SetConfig+0x534>
 810c24e:	4b72      	ldr	r3, [pc, #456]	@ (810c418 <UART_SetConfig+0x69c>)
 810c250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c252:	f003 0307 	and.w	r3, r3, #7
 810c256:	2b05      	cmp	r3, #5
 810c258:	d826      	bhi.n	810c2a8 <UART_SetConfig+0x52c>
 810c25a:	a201      	add	r2, pc, #4	@ (adr r2, 810c260 <UART_SetConfig+0x4e4>)
 810c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c260:	0810c279 	.word	0x0810c279
 810c264:	0810c281 	.word	0x0810c281
 810c268:	0810c289 	.word	0x0810c289
 810c26c:	0810c291 	.word	0x0810c291
 810c270:	0810c299 	.word	0x0810c299
 810c274:	0810c2a1 	.word	0x0810c2a1
 810c278:	2300      	movs	r3, #0
 810c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c27e:	e050      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c280:	2304      	movs	r3, #4
 810c282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c286:	e04c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c288:	2308      	movs	r3, #8
 810c28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c28e:	e048      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c290:	2310      	movs	r3, #16
 810c292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c296:	e044      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c298:	2320      	movs	r3, #32
 810c29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c29e:	e040      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2a0:	2340      	movs	r3, #64	@ 0x40
 810c2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c2a6:	e03c      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2a8:	2380      	movs	r3, #128	@ 0x80
 810c2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c2ae:	e038      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2b0:	697b      	ldr	r3, [r7, #20]
 810c2b2:	681b      	ldr	r3, [r3, #0]
 810c2b4:	4a5b      	ldr	r2, [pc, #364]	@ (810c424 <UART_SetConfig+0x6a8>)
 810c2b6:	4293      	cmp	r3, r2
 810c2b8:	d130      	bne.n	810c31c <UART_SetConfig+0x5a0>
 810c2ba:	4b57      	ldr	r3, [pc, #348]	@ (810c418 <UART_SetConfig+0x69c>)
 810c2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c2be:	f003 0307 	and.w	r3, r3, #7
 810c2c2:	2b05      	cmp	r3, #5
 810c2c4:	d826      	bhi.n	810c314 <UART_SetConfig+0x598>
 810c2c6:	a201      	add	r2, pc, #4	@ (adr r2, 810c2cc <UART_SetConfig+0x550>)
 810c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c2cc:	0810c2e5 	.word	0x0810c2e5
 810c2d0:	0810c2ed 	.word	0x0810c2ed
 810c2d4:	0810c2f5 	.word	0x0810c2f5
 810c2d8:	0810c2fd 	.word	0x0810c2fd
 810c2dc:	0810c305 	.word	0x0810c305
 810c2e0:	0810c30d 	.word	0x0810c30d
 810c2e4:	2302      	movs	r3, #2
 810c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c2ea:	e01a      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2ec:	2304      	movs	r3, #4
 810c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c2f2:	e016      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2f4:	2308      	movs	r3, #8
 810c2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c2fa:	e012      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c2fc:	2310      	movs	r3, #16
 810c2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c302:	e00e      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c304:	2320      	movs	r3, #32
 810c306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c30a:	e00a      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c30c:	2340      	movs	r3, #64	@ 0x40
 810c30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c312:	e006      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c314:	2380      	movs	r3, #128	@ 0x80
 810c316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810c31a:	e002      	b.n	810c322 <UART_SetConfig+0x5a6>
 810c31c:	2380      	movs	r3, #128	@ 0x80
 810c31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810c322:	697b      	ldr	r3, [r7, #20]
 810c324:	681b      	ldr	r3, [r3, #0]
 810c326:	4a3f      	ldr	r2, [pc, #252]	@ (810c424 <UART_SetConfig+0x6a8>)
 810c328:	4293      	cmp	r3, r2
 810c32a:	f040 80f8 	bne.w	810c51e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810c32e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c332:	2b20      	cmp	r3, #32
 810c334:	dc46      	bgt.n	810c3c4 <UART_SetConfig+0x648>
 810c336:	2b02      	cmp	r3, #2
 810c338:	f2c0 8082 	blt.w	810c440 <UART_SetConfig+0x6c4>
 810c33c:	3b02      	subs	r3, #2
 810c33e:	2b1e      	cmp	r3, #30
 810c340:	d87e      	bhi.n	810c440 <UART_SetConfig+0x6c4>
 810c342:	a201      	add	r2, pc, #4	@ (adr r2, 810c348 <UART_SetConfig+0x5cc>)
 810c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c348:	0810c3cb 	.word	0x0810c3cb
 810c34c:	0810c441 	.word	0x0810c441
 810c350:	0810c3d3 	.word	0x0810c3d3
 810c354:	0810c441 	.word	0x0810c441
 810c358:	0810c441 	.word	0x0810c441
 810c35c:	0810c441 	.word	0x0810c441
 810c360:	0810c3e3 	.word	0x0810c3e3
 810c364:	0810c441 	.word	0x0810c441
 810c368:	0810c441 	.word	0x0810c441
 810c36c:	0810c441 	.word	0x0810c441
 810c370:	0810c441 	.word	0x0810c441
 810c374:	0810c441 	.word	0x0810c441
 810c378:	0810c441 	.word	0x0810c441
 810c37c:	0810c441 	.word	0x0810c441
 810c380:	0810c3f3 	.word	0x0810c3f3
 810c384:	0810c441 	.word	0x0810c441
 810c388:	0810c441 	.word	0x0810c441
 810c38c:	0810c441 	.word	0x0810c441
 810c390:	0810c441 	.word	0x0810c441
 810c394:	0810c441 	.word	0x0810c441
 810c398:	0810c441 	.word	0x0810c441
 810c39c:	0810c441 	.word	0x0810c441
 810c3a0:	0810c441 	.word	0x0810c441
 810c3a4:	0810c441 	.word	0x0810c441
 810c3a8:	0810c441 	.word	0x0810c441
 810c3ac:	0810c441 	.word	0x0810c441
 810c3b0:	0810c441 	.word	0x0810c441
 810c3b4:	0810c441 	.word	0x0810c441
 810c3b8:	0810c441 	.word	0x0810c441
 810c3bc:	0810c441 	.word	0x0810c441
 810c3c0:	0810c433 	.word	0x0810c433
 810c3c4:	2b40      	cmp	r3, #64	@ 0x40
 810c3c6:	d037      	beq.n	810c438 <UART_SetConfig+0x6bc>
 810c3c8:	e03a      	b.n	810c440 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810c3ca:	f7fb ff81 	bl	81082d0 <HAL_RCCEx_GetD3PCLK1Freq>
 810c3ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c3d0:	e03c      	b.n	810c44c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c3d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c3d6:	4618      	mov	r0, r3
 810c3d8:	f7fb ff90 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c3e0:	e034      	b.n	810c44c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c3e2:	f107 0318 	add.w	r3, r7, #24
 810c3e6:	4618      	mov	r0, r3
 810c3e8:	f7fc f8dc 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c3ec:	69fb      	ldr	r3, [r7, #28]
 810c3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c3f0:	e02c      	b.n	810c44c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c3f2:	4b09      	ldr	r3, [pc, #36]	@ (810c418 <UART_SetConfig+0x69c>)
 810c3f4:	681b      	ldr	r3, [r3, #0]
 810c3f6:	f003 0320 	and.w	r3, r3, #32
 810c3fa:	2b00      	cmp	r3, #0
 810c3fc:	d016      	beq.n	810c42c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c3fe:	4b06      	ldr	r3, [pc, #24]	@ (810c418 <UART_SetConfig+0x69c>)
 810c400:	681b      	ldr	r3, [r3, #0]
 810c402:	08db      	lsrs	r3, r3, #3
 810c404:	f003 0303 	and.w	r3, r3, #3
 810c408:	4a07      	ldr	r2, [pc, #28]	@ (810c428 <UART_SetConfig+0x6ac>)
 810c40a:	fa22 f303 	lsr.w	r3, r2, r3
 810c40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c410:	e01c      	b.n	810c44c <UART_SetConfig+0x6d0>
 810c412:	bf00      	nop
 810c414:	40011400 	.word	0x40011400
 810c418:	58024400 	.word	0x58024400
 810c41c:	40007800 	.word	0x40007800
 810c420:	40007c00 	.word	0x40007c00
 810c424:	58000c00 	.word	0x58000c00
 810c428:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810c42c:	4b9d      	ldr	r3, [pc, #628]	@ (810c6a4 <UART_SetConfig+0x928>)
 810c42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c430:	e00c      	b.n	810c44c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c432:	4b9d      	ldr	r3, [pc, #628]	@ (810c6a8 <UART_SetConfig+0x92c>)
 810c434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c436:	e009      	b.n	810c44c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c43e:	e005      	b.n	810c44c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810c440:	2300      	movs	r3, #0
 810c442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c444:	2301      	movs	r3, #1
 810c446:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c44a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810c44c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c44e:	2b00      	cmp	r3, #0
 810c450:	f000 81de 	beq.w	810c810 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810c454:	697b      	ldr	r3, [r7, #20]
 810c456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c458:	4a94      	ldr	r2, [pc, #592]	@ (810c6ac <UART_SetConfig+0x930>)
 810c45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c45e:	461a      	mov	r2, r3
 810c460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c462:	fbb3 f3f2 	udiv	r3, r3, r2
 810c466:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c468:	697b      	ldr	r3, [r7, #20]
 810c46a:	685a      	ldr	r2, [r3, #4]
 810c46c:	4613      	mov	r3, r2
 810c46e:	005b      	lsls	r3, r3, #1
 810c470:	4413      	add	r3, r2
 810c472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c474:	429a      	cmp	r2, r3
 810c476:	d305      	bcc.n	810c484 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810c478:	697b      	ldr	r3, [r7, #20]
 810c47a:	685b      	ldr	r3, [r3, #4]
 810c47c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c47e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c480:	429a      	cmp	r2, r3
 810c482:	d903      	bls.n	810c48c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810c484:	2301      	movs	r3, #1
 810c486:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c48a:	e1c1      	b.n	810c810 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c48e:	2200      	movs	r2, #0
 810c490:	60bb      	str	r3, [r7, #8]
 810c492:	60fa      	str	r2, [r7, #12]
 810c494:	697b      	ldr	r3, [r7, #20]
 810c496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c498:	4a84      	ldr	r2, [pc, #528]	@ (810c6ac <UART_SetConfig+0x930>)
 810c49a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c49e:	b29b      	uxth	r3, r3
 810c4a0:	2200      	movs	r2, #0
 810c4a2:	603b      	str	r3, [r7, #0]
 810c4a4:	607a      	str	r2, [r7, #4]
 810c4a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c4aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810c4ae:	f7f3 ff13 	bl	81002d8 <__aeabi_uldivmod>
 810c4b2:	4602      	mov	r2, r0
 810c4b4:	460b      	mov	r3, r1
 810c4b6:	4610      	mov	r0, r2
 810c4b8:	4619      	mov	r1, r3
 810c4ba:	f04f 0200 	mov.w	r2, #0
 810c4be:	f04f 0300 	mov.w	r3, #0
 810c4c2:	020b      	lsls	r3, r1, #8
 810c4c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810c4c8:	0202      	lsls	r2, r0, #8
 810c4ca:	6979      	ldr	r1, [r7, #20]
 810c4cc:	6849      	ldr	r1, [r1, #4]
 810c4ce:	0849      	lsrs	r1, r1, #1
 810c4d0:	2000      	movs	r0, #0
 810c4d2:	460c      	mov	r4, r1
 810c4d4:	4605      	mov	r5, r0
 810c4d6:	eb12 0804 	adds.w	r8, r2, r4
 810c4da:	eb43 0905 	adc.w	r9, r3, r5
 810c4de:	697b      	ldr	r3, [r7, #20]
 810c4e0:	685b      	ldr	r3, [r3, #4]
 810c4e2:	2200      	movs	r2, #0
 810c4e4:	469a      	mov	sl, r3
 810c4e6:	4693      	mov	fp, r2
 810c4e8:	4652      	mov	r2, sl
 810c4ea:	465b      	mov	r3, fp
 810c4ec:	4640      	mov	r0, r8
 810c4ee:	4649      	mov	r1, r9
 810c4f0:	f7f3 fef2 	bl	81002d8 <__aeabi_uldivmod>
 810c4f4:	4602      	mov	r2, r0
 810c4f6:	460b      	mov	r3, r1
 810c4f8:	4613      	mov	r3, r2
 810c4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c4fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810c502:	d308      	bcc.n	810c516 <UART_SetConfig+0x79a>
 810c504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c50a:	d204      	bcs.n	810c516 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810c50c:	697b      	ldr	r3, [r7, #20]
 810c50e:	681b      	ldr	r3, [r3, #0]
 810c510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810c512:	60da      	str	r2, [r3, #12]
 810c514:	e17c      	b.n	810c810 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810c516:	2301      	movs	r3, #1
 810c518:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c51c:	e178      	b.n	810c810 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810c51e:	697b      	ldr	r3, [r7, #20]
 810c520:	69db      	ldr	r3, [r3, #28]
 810c522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810c526:	f040 80c5 	bne.w	810c6b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810c52a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c52e:	2b20      	cmp	r3, #32
 810c530:	dc48      	bgt.n	810c5c4 <UART_SetConfig+0x848>
 810c532:	2b00      	cmp	r3, #0
 810c534:	db7b      	blt.n	810c62e <UART_SetConfig+0x8b2>
 810c536:	2b20      	cmp	r3, #32
 810c538:	d879      	bhi.n	810c62e <UART_SetConfig+0x8b2>
 810c53a:	a201      	add	r2, pc, #4	@ (adr r2, 810c540 <UART_SetConfig+0x7c4>)
 810c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c540:	0810c5cb 	.word	0x0810c5cb
 810c544:	0810c5d3 	.word	0x0810c5d3
 810c548:	0810c62f 	.word	0x0810c62f
 810c54c:	0810c62f 	.word	0x0810c62f
 810c550:	0810c5db 	.word	0x0810c5db
 810c554:	0810c62f 	.word	0x0810c62f
 810c558:	0810c62f 	.word	0x0810c62f
 810c55c:	0810c62f 	.word	0x0810c62f
 810c560:	0810c5eb 	.word	0x0810c5eb
 810c564:	0810c62f 	.word	0x0810c62f
 810c568:	0810c62f 	.word	0x0810c62f
 810c56c:	0810c62f 	.word	0x0810c62f
 810c570:	0810c62f 	.word	0x0810c62f
 810c574:	0810c62f 	.word	0x0810c62f
 810c578:	0810c62f 	.word	0x0810c62f
 810c57c:	0810c62f 	.word	0x0810c62f
 810c580:	0810c5fb 	.word	0x0810c5fb
 810c584:	0810c62f 	.word	0x0810c62f
 810c588:	0810c62f 	.word	0x0810c62f
 810c58c:	0810c62f 	.word	0x0810c62f
 810c590:	0810c62f 	.word	0x0810c62f
 810c594:	0810c62f 	.word	0x0810c62f
 810c598:	0810c62f 	.word	0x0810c62f
 810c59c:	0810c62f 	.word	0x0810c62f
 810c5a0:	0810c62f 	.word	0x0810c62f
 810c5a4:	0810c62f 	.word	0x0810c62f
 810c5a8:	0810c62f 	.word	0x0810c62f
 810c5ac:	0810c62f 	.word	0x0810c62f
 810c5b0:	0810c62f 	.word	0x0810c62f
 810c5b4:	0810c62f 	.word	0x0810c62f
 810c5b8:	0810c62f 	.word	0x0810c62f
 810c5bc:	0810c62f 	.word	0x0810c62f
 810c5c0:	0810c621 	.word	0x0810c621
 810c5c4:	2b40      	cmp	r3, #64	@ 0x40
 810c5c6:	d02e      	beq.n	810c626 <UART_SetConfig+0x8aa>
 810c5c8:	e031      	b.n	810c62e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c5ca:	f7f9 fe8b 	bl	81062e4 <HAL_RCC_GetPCLK1Freq>
 810c5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c5d0:	e033      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c5d2:	f7f9 fe9d 	bl	8106310 <HAL_RCC_GetPCLK2Freq>
 810c5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c5d8:	e02f      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c5de:	4618      	mov	r0, r3
 810c5e0:	f7fb fe8c 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c5e8:	e027      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c5ea:	f107 0318 	add.w	r3, r7, #24
 810c5ee:	4618      	mov	r0, r3
 810c5f0:	f7fb ffd8 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c5f4:	69fb      	ldr	r3, [r7, #28]
 810c5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c5f8:	e01f      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c5fa:	4b2d      	ldr	r3, [pc, #180]	@ (810c6b0 <UART_SetConfig+0x934>)
 810c5fc:	681b      	ldr	r3, [r3, #0]
 810c5fe:	f003 0320 	and.w	r3, r3, #32
 810c602:	2b00      	cmp	r3, #0
 810c604:	d009      	beq.n	810c61a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c606:	4b2a      	ldr	r3, [pc, #168]	@ (810c6b0 <UART_SetConfig+0x934>)
 810c608:	681b      	ldr	r3, [r3, #0]
 810c60a:	08db      	lsrs	r3, r3, #3
 810c60c:	f003 0303 	and.w	r3, r3, #3
 810c610:	4a24      	ldr	r2, [pc, #144]	@ (810c6a4 <UART_SetConfig+0x928>)
 810c612:	fa22 f303 	lsr.w	r3, r2, r3
 810c616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c618:	e00f      	b.n	810c63a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810c61a:	4b22      	ldr	r3, [pc, #136]	@ (810c6a4 <UART_SetConfig+0x928>)
 810c61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c61e:	e00c      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c620:	4b21      	ldr	r3, [pc, #132]	@ (810c6a8 <UART_SetConfig+0x92c>)
 810c622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c624:	e009      	b.n	810c63a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c62c:	e005      	b.n	810c63a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810c62e:	2300      	movs	r3, #0
 810c630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c632:	2301      	movs	r3, #1
 810c634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810c63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c63c:	2b00      	cmp	r3, #0
 810c63e:	f000 80e7 	beq.w	810c810 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c642:	697b      	ldr	r3, [r7, #20]
 810c644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c646:	4a19      	ldr	r2, [pc, #100]	@ (810c6ac <UART_SetConfig+0x930>)
 810c648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c64c:	461a      	mov	r2, r3
 810c64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c650:	fbb3 f3f2 	udiv	r3, r3, r2
 810c654:	005a      	lsls	r2, r3, #1
 810c656:	697b      	ldr	r3, [r7, #20]
 810c658:	685b      	ldr	r3, [r3, #4]
 810c65a:	085b      	lsrs	r3, r3, #1
 810c65c:	441a      	add	r2, r3
 810c65e:	697b      	ldr	r3, [r7, #20]
 810c660:	685b      	ldr	r3, [r3, #4]
 810c662:	fbb2 f3f3 	udiv	r3, r2, r3
 810c666:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c66a:	2b0f      	cmp	r3, #15
 810c66c:	d916      	bls.n	810c69c <UART_SetConfig+0x920>
 810c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c674:	d212      	bcs.n	810c69c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810c676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c678:	b29b      	uxth	r3, r3
 810c67a:	f023 030f 	bic.w	r3, r3, #15
 810c67e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810c680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c682:	085b      	lsrs	r3, r3, #1
 810c684:	b29b      	uxth	r3, r3
 810c686:	f003 0307 	and.w	r3, r3, #7
 810c68a:	b29a      	uxth	r2, r3
 810c68c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810c68e:	4313      	orrs	r3, r2
 810c690:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810c692:	697b      	ldr	r3, [r7, #20]
 810c694:	681b      	ldr	r3, [r3, #0]
 810c696:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810c698:	60da      	str	r2, [r3, #12]
 810c69a:	e0b9      	b.n	810c810 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810c69c:	2301      	movs	r3, #1
 810c69e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810c6a2:	e0b5      	b.n	810c810 <UART_SetConfig+0xa94>
 810c6a4:	03d09000 	.word	0x03d09000
 810c6a8:	003d0900 	.word	0x003d0900
 810c6ac:	0810e9b0 	.word	0x0810e9b0
 810c6b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810c6b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810c6b8:	2b20      	cmp	r3, #32
 810c6ba:	dc49      	bgt.n	810c750 <UART_SetConfig+0x9d4>
 810c6bc:	2b00      	cmp	r3, #0
 810c6be:	db7c      	blt.n	810c7ba <UART_SetConfig+0xa3e>
 810c6c0:	2b20      	cmp	r3, #32
 810c6c2:	d87a      	bhi.n	810c7ba <UART_SetConfig+0xa3e>
 810c6c4:	a201      	add	r2, pc, #4	@ (adr r2, 810c6cc <UART_SetConfig+0x950>)
 810c6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c6ca:	bf00      	nop
 810c6cc:	0810c757 	.word	0x0810c757
 810c6d0:	0810c75f 	.word	0x0810c75f
 810c6d4:	0810c7bb 	.word	0x0810c7bb
 810c6d8:	0810c7bb 	.word	0x0810c7bb
 810c6dc:	0810c767 	.word	0x0810c767
 810c6e0:	0810c7bb 	.word	0x0810c7bb
 810c6e4:	0810c7bb 	.word	0x0810c7bb
 810c6e8:	0810c7bb 	.word	0x0810c7bb
 810c6ec:	0810c777 	.word	0x0810c777
 810c6f0:	0810c7bb 	.word	0x0810c7bb
 810c6f4:	0810c7bb 	.word	0x0810c7bb
 810c6f8:	0810c7bb 	.word	0x0810c7bb
 810c6fc:	0810c7bb 	.word	0x0810c7bb
 810c700:	0810c7bb 	.word	0x0810c7bb
 810c704:	0810c7bb 	.word	0x0810c7bb
 810c708:	0810c7bb 	.word	0x0810c7bb
 810c70c:	0810c787 	.word	0x0810c787
 810c710:	0810c7bb 	.word	0x0810c7bb
 810c714:	0810c7bb 	.word	0x0810c7bb
 810c718:	0810c7bb 	.word	0x0810c7bb
 810c71c:	0810c7bb 	.word	0x0810c7bb
 810c720:	0810c7bb 	.word	0x0810c7bb
 810c724:	0810c7bb 	.word	0x0810c7bb
 810c728:	0810c7bb 	.word	0x0810c7bb
 810c72c:	0810c7bb 	.word	0x0810c7bb
 810c730:	0810c7bb 	.word	0x0810c7bb
 810c734:	0810c7bb 	.word	0x0810c7bb
 810c738:	0810c7bb 	.word	0x0810c7bb
 810c73c:	0810c7bb 	.word	0x0810c7bb
 810c740:	0810c7bb 	.word	0x0810c7bb
 810c744:	0810c7bb 	.word	0x0810c7bb
 810c748:	0810c7bb 	.word	0x0810c7bb
 810c74c:	0810c7ad 	.word	0x0810c7ad
 810c750:	2b40      	cmp	r3, #64	@ 0x40
 810c752:	d02e      	beq.n	810c7b2 <UART_SetConfig+0xa36>
 810c754:	e031      	b.n	810c7ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c756:	f7f9 fdc5 	bl	81062e4 <HAL_RCC_GetPCLK1Freq>
 810c75a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c75c:	e033      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c75e:	f7f9 fdd7 	bl	8106310 <HAL_RCC_GetPCLK2Freq>
 810c762:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c764:	e02f      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c76a:	4618      	mov	r0, r3
 810c76c:	f7fb fdc6 	bl	81082fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c774:	e027      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c776:	f107 0318 	add.w	r3, r7, #24
 810c77a:	4618      	mov	r0, r3
 810c77c:	f7fb ff12 	bl	81085a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c780:	69fb      	ldr	r3, [r7, #28]
 810c782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c784:	e01f      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c786:	4b2d      	ldr	r3, [pc, #180]	@ (810c83c <UART_SetConfig+0xac0>)
 810c788:	681b      	ldr	r3, [r3, #0]
 810c78a:	f003 0320 	and.w	r3, r3, #32
 810c78e:	2b00      	cmp	r3, #0
 810c790:	d009      	beq.n	810c7a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c792:	4b2a      	ldr	r3, [pc, #168]	@ (810c83c <UART_SetConfig+0xac0>)
 810c794:	681b      	ldr	r3, [r3, #0]
 810c796:	08db      	lsrs	r3, r3, #3
 810c798:	f003 0303 	and.w	r3, r3, #3
 810c79c:	4a28      	ldr	r2, [pc, #160]	@ (810c840 <UART_SetConfig+0xac4>)
 810c79e:	fa22 f303 	lsr.w	r3, r2, r3
 810c7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c7a4:	e00f      	b.n	810c7c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810c7a6:	4b26      	ldr	r3, [pc, #152]	@ (810c840 <UART_SetConfig+0xac4>)
 810c7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c7aa:	e00c      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c7ac:	4b25      	ldr	r3, [pc, #148]	@ (810c844 <UART_SetConfig+0xac8>)
 810c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c7b0:	e009      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c7b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c7b8:	e005      	b.n	810c7c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810c7ba:	2300      	movs	r3, #0
 810c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810c7be:	2301      	movs	r3, #1
 810c7c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810c7c4:	bf00      	nop
    }

    if (pclk != 0U)
 810c7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c7c8:	2b00      	cmp	r3, #0
 810c7ca:	d021      	beq.n	810c810 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c7cc:	697b      	ldr	r3, [r7, #20]
 810c7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c7d0:	4a1d      	ldr	r2, [pc, #116]	@ (810c848 <UART_SetConfig+0xacc>)
 810c7d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c7d6:	461a      	mov	r2, r3
 810c7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c7da:	fbb3 f2f2 	udiv	r2, r3, r2
 810c7de:	697b      	ldr	r3, [r7, #20]
 810c7e0:	685b      	ldr	r3, [r3, #4]
 810c7e2:	085b      	lsrs	r3, r3, #1
 810c7e4:	441a      	add	r2, r3
 810c7e6:	697b      	ldr	r3, [r7, #20]
 810c7e8:	685b      	ldr	r3, [r3, #4]
 810c7ea:	fbb2 f3f3 	udiv	r3, r2, r3
 810c7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7f2:	2b0f      	cmp	r3, #15
 810c7f4:	d909      	bls.n	810c80a <UART_SetConfig+0xa8e>
 810c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c7fc:	d205      	bcs.n	810c80a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810c7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c800:	b29a      	uxth	r2, r3
 810c802:	697b      	ldr	r3, [r7, #20]
 810c804:	681b      	ldr	r3, [r3, #0]
 810c806:	60da      	str	r2, [r3, #12]
 810c808:	e002      	b.n	810c810 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810c80a:	2301      	movs	r3, #1
 810c80c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810c810:	697b      	ldr	r3, [r7, #20]
 810c812:	2201      	movs	r2, #1
 810c814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810c818:	697b      	ldr	r3, [r7, #20]
 810c81a:	2201      	movs	r2, #1
 810c81c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810c820:	697b      	ldr	r3, [r7, #20]
 810c822:	2200      	movs	r2, #0
 810c824:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810c826:	697b      	ldr	r3, [r7, #20]
 810c828:	2200      	movs	r2, #0
 810c82a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810c82c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810c830:	4618      	mov	r0, r3
 810c832:	3748      	adds	r7, #72	@ 0x48
 810c834:	46bd      	mov	sp, r7
 810c836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810c83a:	bf00      	nop
 810c83c:	58024400 	.word	0x58024400
 810c840:	03d09000 	.word	0x03d09000
 810c844:	003d0900 	.word	0x003d0900
 810c848:	0810e9b0 	.word	0x0810e9b0

0810c84c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810c84c:	b480      	push	{r7}
 810c84e:	b083      	sub	sp, #12
 810c850:	af00      	add	r7, sp, #0
 810c852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c854:	687b      	ldr	r3, [r7, #4]
 810c856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c858:	f003 0308 	and.w	r3, r3, #8
 810c85c:	2b00      	cmp	r3, #0
 810c85e:	d00a      	beq.n	810c876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c860:	687b      	ldr	r3, [r7, #4]
 810c862:	681b      	ldr	r3, [r3, #0]
 810c864:	685b      	ldr	r3, [r3, #4]
 810c866:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810c86a:	687b      	ldr	r3, [r7, #4]
 810c86c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c86e:	687b      	ldr	r3, [r7, #4]
 810c870:	681b      	ldr	r3, [r3, #0]
 810c872:	430a      	orrs	r2, r1
 810c874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810c876:	687b      	ldr	r3, [r7, #4]
 810c878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c87a:	f003 0301 	and.w	r3, r3, #1
 810c87e:	2b00      	cmp	r3, #0
 810c880:	d00a      	beq.n	810c898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c882:	687b      	ldr	r3, [r7, #4]
 810c884:	681b      	ldr	r3, [r3, #0]
 810c886:	685b      	ldr	r3, [r3, #4]
 810c888:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810c88c:	687b      	ldr	r3, [r7, #4]
 810c88e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c890:	687b      	ldr	r3, [r7, #4]
 810c892:	681b      	ldr	r3, [r3, #0]
 810c894:	430a      	orrs	r2, r1
 810c896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c89c:	f003 0302 	and.w	r3, r3, #2
 810c8a0:	2b00      	cmp	r3, #0
 810c8a2:	d00a      	beq.n	810c8ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c8a4:	687b      	ldr	r3, [r7, #4]
 810c8a6:	681b      	ldr	r3, [r3, #0]
 810c8a8:	685b      	ldr	r3, [r3, #4]
 810c8aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810c8ae:	687b      	ldr	r3, [r7, #4]
 810c8b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810c8b2:	687b      	ldr	r3, [r7, #4]
 810c8b4:	681b      	ldr	r3, [r3, #0]
 810c8b6:	430a      	orrs	r2, r1
 810c8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c8ba:	687b      	ldr	r3, [r7, #4]
 810c8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c8be:	f003 0304 	and.w	r3, r3, #4
 810c8c2:	2b00      	cmp	r3, #0
 810c8c4:	d00a      	beq.n	810c8dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c8c6:	687b      	ldr	r3, [r7, #4]
 810c8c8:	681b      	ldr	r3, [r3, #0]
 810c8ca:	685b      	ldr	r3, [r3, #4]
 810c8cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810c8d4:	687b      	ldr	r3, [r7, #4]
 810c8d6:	681b      	ldr	r3, [r3, #0]
 810c8d8:	430a      	orrs	r2, r1
 810c8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c8dc:	687b      	ldr	r3, [r7, #4]
 810c8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c8e0:	f003 0310 	and.w	r3, r3, #16
 810c8e4:	2b00      	cmp	r3, #0
 810c8e6:	d00a      	beq.n	810c8fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	681b      	ldr	r3, [r3, #0]
 810c8ec:	689b      	ldr	r3, [r3, #8]
 810c8ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810c8f2:	687b      	ldr	r3, [r7, #4]
 810c8f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810c8f6:	687b      	ldr	r3, [r7, #4]
 810c8f8:	681b      	ldr	r3, [r3, #0]
 810c8fa:	430a      	orrs	r2, r1
 810c8fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c8fe:	687b      	ldr	r3, [r7, #4]
 810c900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c902:	f003 0320 	and.w	r3, r3, #32
 810c906:	2b00      	cmp	r3, #0
 810c908:	d00a      	beq.n	810c920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c90a:	687b      	ldr	r3, [r7, #4]
 810c90c:	681b      	ldr	r3, [r3, #0]
 810c90e:	689b      	ldr	r3, [r3, #8]
 810c910:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810c914:	687b      	ldr	r3, [r7, #4]
 810c916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810c918:	687b      	ldr	r3, [r7, #4]
 810c91a:	681b      	ldr	r3, [r3, #0]
 810c91c:	430a      	orrs	r2, r1
 810c91e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c920:	687b      	ldr	r3, [r7, #4]
 810c922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c928:	2b00      	cmp	r3, #0
 810c92a:	d01a      	beq.n	810c962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c92c:	687b      	ldr	r3, [r7, #4]
 810c92e:	681b      	ldr	r3, [r3, #0]
 810c930:	685b      	ldr	r3, [r3, #4]
 810c932:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810c93a:	687b      	ldr	r3, [r7, #4]
 810c93c:	681b      	ldr	r3, [r3, #0]
 810c93e:	430a      	orrs	r2, r1
 810c940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c942:	687b      	ldr	r3, [r7, #4]
 810c944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810c946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c94a:	d10a      	bne.n	810c962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c94c:	687b      	ldr	r3, [r7, #4]
 810c94e:	681b      	ldr	r3, [r3, #0]
 810c950:	685b      	ldr	r3, [r3, #4]
 810c952:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810c956:	687b      	ldr	r3, [r7, #4]
 810c958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810c95a:	687b      	ldr	r3, [r7, #4]
 810c95c:	681b      	ldr	r3, [r3, #0]
 810c95e:	430a      	orrs	r2, r1
 810c960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c962:	687b      	ldr	r3, [r7, #4]
 810c964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c96a:	2b00      	cmp	r3, #0
 810c96c:	d00a      	beq.n	810c984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c96e:	687b      	ldr	r3, [r7, #4]
 810c970:	681b      	ldr	r3, [r3, #0]
 810c972:	685b      	ldr	r3, [r3, #4]
 810c974:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810c978:	687b      	ldr	r3, [r7, #4]
 810c97a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810c97c:	687b      	ldr	r3, [r7, #4]
 810c97e:	681b      	ldr	r3, [r3, #0]
 810c980:	430a      	orrs	r2, r1
 810c982:	605a      	str	r2, [r3, #4]
  }
}
 810c984:	bf00      	nop
 810c986:	370c      	adds	r7, #12
 810c988:	46bd      	mov	sp, r7
 810c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c98e:	4770      	bx	lr

0810c990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810c990:	b580      	push	{r7, lr}
 810c992:	b098      	sub	sp, #96	@ 0x60
 810c994:	af02      	add	r7, sp, #8
 810c996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	2200      	movs	r2, #0
 810c99c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810c9a0:	f7f6 f8f6 	bl	8102b90 <HAL_GetTick>
 810c9a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810c9a6:	687b      	ldr	r3, [r7, #4]
 810c9a8:	681b      	ldr	r3, [r3, #0]
 810c9aa:	681b      	ldr	r3, [r3, #0]
 810c9ac:	f003 0308 	and.w	r3, r3, #8
 810c9b0:	2b08      	cmp	r3, #8
 810c9b2:	d12f      	bne.n	810ca14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c9b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810c9b8:	9300      	str	r3, [sp, #0]
 810c9ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810c9bc:	2200      	movs	r2, #0
 810c9be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810c9c2:	6878      	ldr	r0, [r7, #4]
 810c9c4:	f000 f88e 	bl	810cae4 <UART_WaitOnFlagUntilTimeout>
 810c9c8:	4603      	mov	r3, r0
 810c9ca:	2b00      	cmp	r3, #0
 810c9cc:	d022      	beq.n	810ca14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810c9ce:	687b      	ldr	r3, [r7, #4]
 810c9d0:	681b      	ldr	r3, [r3, #0]
 810c9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c9d6:	e853 3f00 	ldrex	r3, [r3]
 810c9da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810c9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810c9e2:	653b      	str	r3, [r7, #80]	@ 0x50
 810c9e4:	687b      	ldr	r3, [r7, #4]
 810c9e6:	681b      	ldr	r3, [r3, #0]
 810c9e8:	461a      	mov	r2, r3
 810c9ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810c9ec:	647b      	str	r3, [r7, #68]	@ 0x44
 810c9ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c9f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810c9f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810c9f4:	e841 2300 	strex	r3, r2, [r1]
 810c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810c9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c9fc:	2b00      	cmp	r3, #0
 810c9fe:	d1e6      	bne.n	810c9ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810ca00:	687b      	ldr	r3, [r7, #4]
 810ca02:	2220      	movs	r2, #32
 810ca04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810ca08:	687b      	ldr	r3, [r7, #4]
 810ca0a:	2200      	movs	r2, #0
 810ca0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ca10:	2303      	movs	r3, #3
 810ca12:	e063      	b.n	810cadc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810ca14:	687b      	ldr	r3, [r7, #4]
 810ca16:	681b      	ldr	r3, [r3, #0]
 810ca18:	681b      	ldr	r3, [r3, #0]
 810ca1a:	f003 0304 	and.w	r3, r3, #4
 810ca1e:	2b04      	cmp	r3, #4
 810ca20:	d149      	bne.n	810cab6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ca22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810ca26:	9300      	str	r3, [sp, #0]
 810ca28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ca2a:	2200      	movs	r2, #0
 810ca2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810ca30:	6878      	ldr	r0, [r7, #4]
 810ca32:	f000 f857 	bl	810cae4 <UART_WaitOnFlagUntilTimeout>
 810ca36:	4603      	mov	r3, r0
 810ca38:	2b00      	cmp	r3, #0
 810ca3a:	d03c      	beq.n	810cab6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ca3c:	687b      	ldr	r3, [r7, #4]
 810ca3e:	681b      	ldr	r3, [r3, #0]
 810ca40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ca44:	e853 3f00 	ldrex	r3, [r3]
 810ca48:	623b      	str	r3, [r7, #32]
   return(result);
 810ca4a:	6a3b      	ldr	r3, [r7, #32]
 810ca4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ca50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ca52:	687b      	ldr	r3, [r7, #4]
 810ca54:	681b      	ldr	r3, [r3, #0]
 810ca56:	461a      	mov	r2, r3
 810ca58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ca5a:	633b      	str	r3, [r7, #48]	@ 0x30
 810ca5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ca60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ca62:	e841 2300 	strex	r3, r2, [r1]
 810ca66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca6a:	2b00      	cmp	r3, #0
 810ca6c:	d1e6      	bne.n	810ca3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ca6e:	687b      	ldr	r3, [r7, #4]
 810ca70:	681b      	ldr	r3, [r3, #0]
 810ca72:	3308      	adds	r3, #8
 810ca74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ca76:	693b      	ldr	r3, [r7, #16]
 810ca78:	e853 3f00 	ldrex	r3, [r3]
 810ca7c:	60fb      	str	r3, [r7, #12]
   return(result);
 810ca7e:	68fb      	ldr	r3, [r7, #12]
 810ca80:	f023 0301 	bic.w	r3, r3, #1
 810ca84:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ca86:	687b      	ldr	r3, [r7, #4]
 810ca88:	681b      	ldr	r3, [r3, #0]
 810ca8a:	3308      	adds	r3, #8
 810ca8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ca8e:	61fa      	str	r2, [r7, #28]
 810ca90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca92:	69b9      	ldr	r1, [r7, #24]
 810ca94:	69fa      	ldr	r2, [r7, #28]
 810ca96:	e841 2300 	strex	r3, r2, [r1]
 810ca9a:	617b      	str	r3, [r7, #20]
   return(result);
 810ca9c:	697b      	ldr	r3, [r7, #20]
 810ca9e:	2b00      	cmp	r3, #0
 810caa0:	d1e5      	bne.n	810ca6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810caa2:	687b      	ldr	r3, [r7, #4]
 810caa4:	2220      	movs	r2, #32
 810caa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810caaa:	687b      	ldr	r3, [r7, #4]
 810caac:	2200      	movs	r2, #0
 810caae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810cab2:	2303      	movs	r3, #3
 810cab4:	e012      	b.n	810cadc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810cab6:	687b      	ldr	r3, [r7, #4]
 810cab8:	2220      	movs	r2, #32
 810caba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	2220      	movs	r2, #32
 810cac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cac6:	687b      	ldr	r3, [r7, #4]
 810cac8:	2200      	movs	r2, #0
 810caca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	2200      	movs	r2, #0
 810cad0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810cad2:	687b      	ldr	r3, [r7, #4]
 810cad4:	2200      	movs	r2, #0
 810cad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810cada:	2300      	movs	r3, #0
}
 810cadc:	4618      	mov	r0, r3
 810cade:	3758      	adds	r7, #88	@ 0x58
 810cae0:	46bd      	mov	sp, r7
 810cae2:	bd80      	pop	{r7, pc}

0810cae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810cae4:	b580      	push	{r7, lr}
 810cae6:	b084      	sub	sp, #16
 810cae8:	af00      	add	r7, sp, #0
 810caea:	60f8      	str	r0, [r7, #12]
 810caec:	60b9      	str	r1, [r7, #8]
 810caee:	603b      	str	r3, [r7, #0]
 810caf0:	4613      	mov	r3, r2
 810caf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810caf4:	e04f      	b.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810caf6:	69bb      	ldr	r3, [r7, #24]
 810caf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cafc:	d04b      	beq.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810cafe:	f7f6 f847 	bl	8102b90 <HAL_GetTick>
 810cb02:	4602      	mov	r2, r0
 810cb04:	683b      	ldr	r3, [r7, #0]
 810cb06:	1ad3      	subs	r3, r2, r3
 810cb08:	69ba      	ldr	r2, [r7, #24]
 810cb0a:	429a      	cmp	r2, r3
 810cb0c:	d302      	bcc.n	810cb14 <UART_WaitOnFlagUntilTimeout+0x30>
 810cb0e:	69bb      	ldr	r3, [r7, #24]
 810cb10:	2b00      	cmp	r3, #0
 810cb12:	d101      	bne.n	810cb18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810cb14:	2303      	movs	r3, #3
 810cb16:	e04e      	b.n	810cbb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810cb18:	68fb      	ldr	r3, [r7, #12]
 810cb1a:	681b      	ldr	r3, [r3, #0]
 810cb1c:	681b      	ldr	r3, [r3, #0]
 810cb1e:	f003 0304 	and.w	r3, r3, #4
 810cb22:	2b00      	cmp	r3, #0
 810cb24:	d037      	beq.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
 810cb26:	68bb      	ldr	r3, [r7, #8]
 810cb28:	2b80      	cmp	r3, #128	@ 0x80
 810cb2a:	d034      	beq.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
 810cb2c:	68bb      	ldr	r3, [r7, #8]
 810cb2e:	2b40      	cmp	r3, #64	@ 0x40
 810cb30:	d031      	beq.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810cb32:	68fb      	ldr	r3, [r7, #12]
 810cb34:	681b      	ldr	r3, [r3, #0]
 810cb36:	69db      	ldr	r3, [r3, #28]
 810cb38:	f003 0308 	and.w	r3, r3, #8
 810cb3c:	2b08      	cmp	r3, #8
 810cb3e:	d110      	bne.n	810cb62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810cb40:	68fb      	ldr	r3, [r7, #12]
 810cb42:	681b      	ldr	r3, [r3, #0]
 810cb44:	2208      	movs	r2, #8
 810cb46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810cb48:	68f8      	ldr	r0, [r7, #12]
 810cb4a:	f000 f838 	bl	810cbbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810cb4e:	68fb      	ldr	r3, [r7, #12]
 810cb50:	2208      	movs	r2, #8
 810cb52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810cb56:	68fb      	ldr	r3, [r7, #12]
 810cb58:	2200      	movs	r2, #0
 810cb5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810cb5e:	2301      	movs	r3, #1
 810cb60:	e029      	b.n	810cbb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810cb62:	68fb      	ldr	r3, [r7, #12]
 810cb64:	681b      	ldr	r3, [r3, #0]
 810cb66:	69db      	ldr	r3, [r3, #28]
 810cb68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810cb6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cb70:	d111      	bne.n	810cb96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810cb72:	68fb      	ldr	r3, [r7, #12]
 810cb74:	681b      	ldr	r3, [r3, #0]
 810cb76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810cb7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810cb7c:	68f8      	ldr	r0, [r7, #12]
 810cb7e:	f000 f81e 	bl	810cbbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810cb82:	68fb      	ldr	r3, [r7, #12]
 810cb84:	2220      	movs	r2, #32
 810cb86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810cb8a:	68fb      	ldr	r3, [r7, #12]
 810cb8c:	2200      	movs	r2, #0
 810cb8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810cb92:	2303      	movs	r3, #3
 810cb94:	e00f      	b.n	810cbb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810cb96:	68fb      	ldr	r3, [r7, #12]
 810cb98:	681b      	ldr	r3, [r3, #0]
 810cb9a:	69da      	ldr	r2, [r3, #28]
 810cb9c:	68bb      	ldr	r3, [r7, #8]
 810cb9e:	4013      	ands	r3, r2
 810cba0:	68ba      	ldr	r2, [r7, #8]
 810cba2:	429a      	cmp	r2, r3
 810cba4:	bf0c      	ite	eq
 810cba6:	2301      	moveq	r3, #1
 810cba8:	2300      	movne	r3, #0
 810cbaa:	b2db      	uxtb	r3, r3
 810cbac:	461a      	mov	r2, r3
 810cbae:	79fb      	ldrb	r3, [r7, #7]
 810cbb0:	429a      	cmp	r2, r3
 810cbb2:	d0a0      	beq.n	810caf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810cbb4:	2300      	movs	r3, #0
}
 810cbb6:	4618      	mov	r0, r3
 810cbb8:	3710      	adds	r7, #16
 810cbba:	46bd      	mov	sp, r7
 810cbbc:	bd80      	pop	{r7, pc}

0810cbbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810cbbe:	b480      	push	{r7}
 810cbc0:	b095      	sub	sp, #84	@ 0x54
 810cbc2:	af00      	add	r7, sp, #0
 810cbc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cbc6:	687b      	ldr	r3, [r7, #4]
 810cbc8:	681b      	ldr	r3, [r3, #0]
 810cbca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cbcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cbce:	e853 3f00 	ldrex	r3, [r3]
 810cbd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cbd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810cbda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810cbdc:	687b      	ldr	r3, [r7, #4]
 810cbde:	681b      	ldr	r3, [r3, #0]
 810cbe0:	461a      	mov	r2, r3
 810cbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810cbe4:	643b      	str	r3, [r7, #64]	@ 0x40
 810cbe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cbe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810cbea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810cbec:	e841 2300 	strex	r3, r2, [r1]
 810cbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cbf4:	2b00      	cmp	r3, #0
 810cbf6:	d1e6      	bne.n	810cbc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cbf8:	687b      	ldr	r3, [r7, #4]
 810cbfa:	681b      	ldr	r3, [r3, #0]
 810cbfc:	3308      	adds	r3, #8
 810cbfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cc00:	6a3b      	ldr	r3, [r7, #32]
 810cc02:	e853 3f00 	ldrex	r3, [r3]
 810cc06:	61fb      	str	r3, [r7, #28]
   return(result);
 810cc08:	69fb      	ldr	r3, [r7, #28]
 810cc0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cc0e:	f023 0301 	bic.w	r3, r3, #1
 810cc12:	64bb      	str	r3, [r7, #72]	@ 0x48
 810cc14:	687b      	ldr	r3, [r7, #4]
 810cc16:	681b      	ldr	r3, [r3, #0]
 810cc18:	3308      	adds	r3, #8
 810cc1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810cc1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810cc1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cc20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810cc22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810cc24:	e841 2300 	strex	r3, r2, [r1]
 810cc28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810cc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc2c:	2b00      	cmp	r3, #0
 810cc2e:	d1e3      	bne.n	810cbf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810cc30:	687b      	ldr	r3, [r7, #4]
 810cc32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810cc34:	2b01      	cmp	r3, #1
 810cc36:	d118      	bne.n	810cc6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cc38:	687b      	ldr	r3, [r7, #4]
 810cc3a:	681b      	ldr	r3, [r3, #0]
 810cc3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cc3e:	68fb      	ldr	r3, [r7, #12]
 810cc40:	e853 3f00 	ldrex	r3, [r3]
 810cc44:	60bb      	str	r3, [r7, #8]
   return(result);
 810cc46:	68bb      	ldr	r3, [r7, #8]
 810cc48:	f023 0310 	bic.w	r3, r3, #16
 810cc4c:	647b      	str	r3, [r7, #68]	@ 0x44
 810cc4e:	687b      	ldr	r3, [r7, #4]
 810cc50:	681b      	ldr	r3, [r3, #0]
 810cc52:	461a      	mov	r2, r3
 810cc54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810cc56:	61bb      	str	r3, [r7, #24]
 810cc58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cc5a:	6979      	ldr	r1, [r7, #20]
 810cc5c:	69ba      	ldr	r2, [r7, #24]
 810cc5e:	e841 2300 	strex	r3, r2, [r1]
 810cc62:	613b      	str	r3, [r7, #16]
   return(result);
 810cc64:	693b      	ldr	r3, [r7, #16]
 810cc66:	2b00      	cmp	r3, #0
 810cc68:	d1e6      	bne.n	810cc38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810cc6a:	687b      	ldr	r3, [r7, #4]
 810cc6c:	2220      	movs	r2, #32
 810cc6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cc72:	687b      	ldr	r3, [r7, #4]
 810cc74:	2200      	movs	r2, #0
 810cc76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810cc78:	687b      	ldr	r3, [r7, #4]
 810cc7a:	2200      	movs	r2, #0
 810cc7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810cc7e:	bf00      	nop
 810cc80:	3754      	adds	r7, #84	@ 0x54
 810cc82:	46bd      	mov	sp, r7
 810cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc88:	4770      	bx	lr

0810cc8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810cc8a:	b480      	push	{r7}
 810cc8c:	b085      	sub	sp, #20
 810cc8e:	af00      	add	r7, sp, #0
 810cc90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cc92:	687b      	ldr	r3, [r7, #4]
 810cc94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cc98:	2b01      	cmp	r3, #1
 810cc9a:	d101      	bne.n	810cca0 <HAL_UARTEx_DisableFifoMode+0x16>
 810cc9c:	2302      	movs	r3, #2
 810cc9e:	e027      	b.n	810ccf0 <HAL_UARTEx_DisableFifoMode+0x66>
 810cca0:	687b      	ldr	r3, [r7, #4]
 810cca2:	2201      	movs	r2, #1
 810cca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cca8:	687b      	ldr	r3, [r7, #4]
 810ccaa:	2224      	movs	r2, #36	@ 0x24
 810ccac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ccb0:	687b      	ldr	r3, [r7, #4]
 810ccb2:	681b      	ldr	r3, [r3, #0]
 810ccb4:	681b      	ldr	r3, [r3, #0]
 810ccb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ccb8:	687b      	ldr	r3, [r7, #4]
 810ccba:	681b      	ldr	r3, [r3, #0]
 810ccbc:	681a      	ldr	r2, [r3, #0]
 810ccbe:	687b      	ldr	r3, [r7, #4]
 810ccc0:	681b      	ldr	r3, [r3, #0]
 810ccc2:	f022 0201 	bic.w	r2, r2, #1
 810ccc6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ccc8:	68fb      	ldr	r3, [r7, #12]
 810ccca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810ccce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810ccd0:	687b      	ldr	r3, [r7, #4]
 810ccd2:	2200      	movs	r2, #0
 810ccd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ccd6:	687b      	ldr	r3, [r7, #4]
 810ccd8:	681b      	ldr	r3, [r3, #0]
 810ccda:	68fa      	ldr	r2, [r7, #12]
 810ccdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ccde:	687b      	ldr	r3, [r7, #4]
 810cce0:	2220      	movs	r2, #32
 810cce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cce6:	687b      	ldr	r3, [r7, #4]
 810cce8:	2200      	movs	r2, #0
 810ccea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ccee:	2300      	movs	r3, #0
}
 810ccf0:	4618      	mov	r0, r3
 810ccf2:	3714      	adds	r7, #20
 810ccf4:	46bd      	mov	sp, r7
 810ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccfa:	4770      	bx	lr

0810ccfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ccfc:	b580      	push	{r7, lr}
 810ccfe:	b084      	sub	sp, #16
 810cd00:	af00      	add	r7, sp, #0
 810cd02:	6078      	str	r0, [r7, #4]
 810cd04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cd06:	687b      	ldr	r3, [r7, #4]
 810cd08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cd0c:	2b01      	cmp	r3, #1
 810cd0e:	d101      	bne.n	810cd14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810cd10:	2302      	movs	r3, #2
 810cd12:	e02d      	b.n	810cd70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810cd14:	687b      	ldr	r3, [r7, #4]
 810cd16:	2201      	movs	r2, #1
 810cd18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cd1c:	687b      	ldr	r3, [r7, #4]
 810cd1e:	2224      	movs	r2, #36	@ 0x24
 810cd20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cd24:	687b      	ldr	r3, [r7, #4]
 810cd26:	681b      	ldr	r3, [r3, #0]
 810cd28:	681b      	ldr	r3, [r3, #0]
 810cd2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cd2c:	687b      	ldr	r3, [r7, #4]
 810cd2e:	681b      	ldr	r3, [r3, #0]
 810cd30:	681a      	ldr	r2, [r3, #0]
 810cd32:	687b      	ldr	r3, [r7, #4]
 810cd34:	681b      	ldr	r3, [r3, #0]
 810cd36:	f022 0201 	bic.w	r2, r2, #1
 810cd3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810cd3c:	687b      	ldr	r3, [r7, #4]
 810cd3e:	681b      	ldr	r3, [r3, #0]
 810cd40:	689b      	ldr	r3, [r3, #8]
 810cd42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810cd46:	687b      	ldr	r3, [r7, #4]
 810cd48:	681b      	ldr	r3, [r3, #0]
 810cd4a:	683a      	ldr	r2, [r7, #0]
 810cd4c:	430a      	orrs	r2, r1
 810cd4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cd50:	6878      	ldr	r0, [r7, #4]
 810cd52:	f000 f84f 	bl	810cdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cd56:	687b      	ldr	r3, [r7, #4]
 810cd58:	681b      	ldr	r3, [r3, #0]
 810cd5a:	68fa      	ldr	r2, [r7, #12]
 810cd5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cd5e:	687b      	ldr	r3, [r7, #4]
 810cd60:	2220      	movs	r2, #32
 810cd62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cd66:	687b      	ldr	r3, [r7, #4]
 810cd68:	2200      	movs	r2, #0
 810cd6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810cd6e:	2300      	movs	r3, #0
}
 810cd70:	4618      	mov	r0, r3
 810cd72:	3710      	adds	r7, #16
 810cd74:	46bd      	mov	sp, r7
 810cd76:	bd80      	pop	{r7, pc}

0810cd78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cd78:	b580      	push	{r7, lr}
 810cd7a:	b084      	sub	sp, #16
 810cd7c:	af00      	add	r7, sp, #0
 810cd7e:	6078      	str	r0, [r7, #4]
 810cd80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cd82:	687b      	ldr	r3, [r7, #4]
 810cd84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810cd88:	2b01      	cmp	r3, #1
 810cd8a:	d101      	bne.n	810cd90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810cd8c:	2302      	movs	r3, #2
 810cd8e:	e02d      	b.n	810cdec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810cd90:	687b      	ldr	r3, [r7, #4]
 810cd92:	2201      	movs	r2, #1
 810cd94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810cd98:	687b      	ldr	r3, [r7, #4]
 810cd9a:	2224      	movs	r2, #36	@ 0x24
 810cd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cda0:	687b      	ldr	r3, [r7, #4]
 810cda2:	681b      	ldr	r3, [r3, #0]
 810cda4:	681b      	ldr	r3, [r3, #0]
 810cda6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cda8:	687b      	ldr	r3, [r7, #4]
 810cdaa:	681b      	ldr	r3, [r3, #0]
 810cdac:	681a      	ldr	r2, [r3, #0]
 810cdae:	687b      	ldr	r3, [r7, #4]
 810cdb0:	681b      	ldr	r3, [r3, #0]
 810cdb2:	f022 0201 	bic.w	r2, r2, #1
 810cdb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810cdb8:	687b      	ldr	r3, [r7, #4]
 810cdba:	681b      	ldr	r3, [r3, #0]
 810cdbc:	689b      	ldr	r3, [r3, #8]
 810cdbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810cdc2:	687b      	ldr	r3, [r7, #4]
 810cdc4:	681b      	ldr	r3, [r3, #0]
 810cdc6:	683a      	ldr	r2, [r7, #0]
 810cdc8:	430a      	orrs	r2, r1
 810cdca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cdcc:	6878      	ldr	r0, [r7, #4]
 810cdce:	f000 f811 	bl	810cdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cdd2:	687b      	ldr	r3, [r7, #4]
 810cdd4:	681b      	ldr	r3, [r3, #0]
 810cdd6:	68fa      	ldr	r2, [r7, #12]
 810cdd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cdda:	687b      	ldr	r3, [r7, #4]
 810cddc:	2220      	movs	r2, #32
 810cdde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cde2:	687b      	ldr	r3, [r7, #4]
 810cde4:	2200      	movs	r2, #0
 810cde6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810cdea:	2300      	movs	r3, #0
}
 810cdec:	4618      	mov	r0, r3
 810cdee:	3710      	adds	r7, #16
 810cdf0:	46bd      	mov	sp, r7
 810cdf2:	bd80      	pop	{r7, pc}

0810cdf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810cdf4:	b480      	push	{r7}
 810cdf6:	b085      	sub	sp, #20
 810cdf8:	af00      	add	r7, sp, #0
 810cdfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810cdfc:	687b      	ldr	r3, [r7, #4]
 810cdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ce00:	2b00      	cmp	r3, #0
 810ce02:	d108      	bne.n	810ce16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ce04:	687b      	ldr	r3, [r7, #4]
 810ce06:	2201      	movs	r2, #1
 810ce08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ce0c:	687b      	ldr	r3, [r7, #4]
 810ce0e:	2201      	movs	r2, #1
 810ce10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ce14:	e031      	b.n	810ce7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ce16:	2310      	movs	r3, #16
 810ce18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ce1a:	2310      	movs	r3, #16
 810ce1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ce1e:	687b      	ldr	r3, [r7, #4]
 810ce20:	681b      	ldr	r3, [r3, #0]
 810ce22:	689b      	ldr	r3, [r3, #8]
 810ce24:	0e5b      	lsrs	r3, r3, #25
 810ce26:	b2db      	uxtb	r3, r3
 810ce28:	f003 0307 	and.w	r3, r3, #7
 810ce2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ce2e:	687b      	ldr	r3, [r7, #4]
 810ce30:	681b      	ldr	r3, [r3, #0]
 810ce32:	689b      	ldr	r3, [r3, #8]
 810ce34:	0f5b      	lsrs	r3, r3, #29
 810ce36:	b2db      	uxtb	r3, r3
 810ce38:	f003 0307 	and.w	r3, r3, #7
 810ce3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ce3e:	7bbb      	ldrb	r3, [r7, #14]
 810ce40:	7b3a      	ldrb	r2, [r7, #12]
 810ce42:	4911      	ldr	r1, [pc, #68]	@ (810ce88 <UARTEx_SetNbDataToProcess+0x94>)
 810ce44:	5c8a      	ldrb	r2, [r1, r2]
 810ce46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ce4a:	7b3a      	ldrb	r2, [r7, #12]
 810ce4c:	490f      	ldr	r1, [pc, #60]	@ (810ce8c <UARTEx_SetNbDataToProcess+0x98>)
 810ce4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ce50:	fb93 f3f2 	sdiv	r3, r3, r2
 810ce54:	b29a      	uxth	r2, r3
 810ce56:	687b      	ldr	r3, [r7, #4]
 810ce58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ce5c:	7bfb      	ldrb	r3, [r7, #15]
 810ce5e:	7b7a      	ldrb	r2, [r7, #13]
 810ce60:	4909      	ldr	r1, [pc, #36]	@ (810ce88 <UARTEx_SetNbDataToProcess+0x94>)
 810ce62:	5c8a      	ldrb	r2, [r1, r2]
 810ce64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ce68:	7b7a      	ldrb	r2, [r7, #13]
 810ce6a:	4908      	ldr	r1, [pc, #32]	@ (810ce8c <UARTEx_SetNbDataToProcess+0x98>)
 810ce6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ce6e:	fb93 f3f2 	sdiv	r3, r3, r2
 810ce72:	b29a      	uxth	r2, r3
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810ce7a:	bf00      	nop
 810ce7c:	3714      	adds	r7, #20
 810ce7e:	46bd      	mov	sp, r7
 810ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce84:	4770      	bx	lr
 810ce86:	bf00      	nop
 810ce88:	0810e9c8 	.word	0x0810e9c8
 810ce8c:	0810e9d0 	.word	0x0810e9d0

0810ce90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 810ce90:	b480      	push	{r7}
 810ce92:	b083      	sub	sp, #12
 810ce94:	af00      	add	r7, sp, #0
 810ce96:	6078      	str	r0, [r7, #4]
 810ce98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810ce9a:	683b      	ldr	r3, [r7, #0]
 810ce9c:	681b      	ldr	r3, [r3, #0]
 810ce9e:	2b00      	cmp	r3, #0
 810cea0:	d123      	bne.n	810ceea <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810cea2:	687b      	ldr	r3, [r7, #4]
 810cea4:	681b      	ldr	r3, [r3, #0]
 810cea6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810ceaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810ceae:	683a      	ldr	r2, [r7, #0]
 810ceb0:	6851      	ldr	r1, [r2, #4]
 810ceb2:	683a      	ldr	r2, [r7, #0]
 810ceb4:	6892      	ldr	r2, [r2, #8]
 810ceb6:	4311      	orrs	r1, r2
 810ceb8:	683a      	ldr	r2, [r7, #0]
 810ceba:	68d2      	ldr	r2, [r2, #12]
 810cebc:	4311      	orrs	r1, r2
 810cebe:	683a      	ldr	r2, [r7, #0]
 810cec0:	6912      	ldr	r2, [r2, #16]
 810cec2:	4311      	orrs	r1, r2
 810cec4:	683a      	ldr	r2, [r7, #0]
 810cec6:	6952      	ldr	r2, [r2, #20]
 810cec8:	4311      	orrs	r1, r2
 810ceca:	683a      	ldr	r2, [r7, #0]
 810cecc:	6992      	ldr	r2, [r2, #24]
 810cece:	4311      	orrs	r1, r2
 810ced0:	683a      	ldr	r2, [r7, #0]
 810ced2:	69d2      	ldr	r2, [r2, #28]
 810ced4:	4311      	orrs	r1, r2
 810ced6:	683a      	ldr	r2, [r7, #0]
 810ced8:	6a12      	ldr	r2, [r2, #32]
 810ceda:	4311      	orrs	r1, r2
 810cedc:	683a      	ldr	r2, [r7, #0]
 810cede:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810cee0:	430a      	orrs	r2, r1
 810cee2:	431a      	orrs	r2, r3
 810cee4:	687b      	ldr	r3, [r7, #4]
 810cee6:	601a      	str	r2, [r3, #0]
 810cee8:	e028      	b.n	810cf3c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810ceea:	687b      	ldr	r3, [r7, #4]
 810ceec:	681b      	ldr	r3, [r3, #0]
 810ceee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810cef2:	683b      	ldr	r3, [r7, #0]
 810cef4:	69d9      	ldr	r1, [r3, #28]
 810cef6:	683b      	ldr	r3, [r7, #0]
 810cef8:	6a1b      	ldr	r3, [r3, #32]
 810cefa:	4319      	orrs	r1, r3
 810cefc:	683b      	ldr	r3, [r7, #0]
 810cefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cf00:	430b      	orrs	r3, r1
 810cf02:	431a      	orrs	r2, r3
 810cf04:	687b      	ldr	r3, [r7, #4]
 810cf06:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810cf08:	687b      	ldr	r3, [r7, #4]
 810cf0a:	685b      	ldr	r3, [r3, #4]
 810cf0c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810cf10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810cf14:	683a      	ldr	r2, [r7, #0]
 810cf16:	6851      	ldr	r1, [r2, #4]
 810cf18:	683a      	ldr	r2, [r7, #0]
 810cf1a:	6892      	ldr	r2, [r2, #8]
 810cf1c:	4311      	orrs	r1, r2
 810cf1e:	683a      	ldr	r2, [r7, #0]
 810cf20:	68d2      	ldr	r2, [r2, #12]
 810cf22:	4311      	orrs	r1, r2
 810cf24:	683a      	ldr	r2, [r7, #0]
 810cf26:	6912      	ldr	r2, [r2, #16]
 810cf28:	4311      	orrs	r1, r2
 810cf2a:	683a      	ldr	r2, [r7, #0]
 810cf2c:	6952      	ldr	r2, [r2, #20]
 810cf2e:	4311      	orrs	r1, r2
 810cf30:	683a      	ldr	r2, [r7, #0]
 810cf32:	6992      	ldr	r2, [r2, #24]
 810cf34:	430a      	orrs	r2, r1
 810cf36:	431a      	orrs	r2, r3
 810cf38:	687b      	ldr	r3, [r7, #4]
 810cf3a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810cf3c:	2300      	movs	r3, #0
}
 810cf3e:	4618      	mov	r0, r3
 810cf40:	370c      	adds	r7, #12
 810cf42:	46bd      	mov	sp, r7
 810cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf48:	4770      	bx	lr

0810cf4a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810cf4a:	b480      	push	{r7}
 810cf4c:	b085      	sub	sp, #20
 810cf4e:	af00      	add	r7, sp, #0
 810cf50:	60f8      	str	r0, [r7, #12]
 810cf52:	60b9      	str	r1, [r7, #8]
 810cf54:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810cf56:	687b      	ldr	r3, [r7, #4]
 810cf58:	2b00      	cmp	r3, #0
 810cf5a:	d128      	bne.n	810cfae <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810cf5c:	68fb      	ldr	r3, [r7, #12]
 810cf5e:	689b      	ldr	r3, [r3, #8]
 810cf60:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810cf64:	68bb      	ldr	r3, [r7, #8]
 810cf66:	681b      	ldr	r3, [r3, #0]
 810cf68:	1e59      	subs	r1, r3, #1
 810cf6a:	68bb      	ldr	r3, [r7, #8]
 810cf6c:	685b      	ldr	r3, [r3, #4]
 810cf6e:	3b01      	subs	r3, #1
 810cf70:	011b      	lsls	r3, r3, #4
 810cf72:	4319      	orrs	r1, r3
 810cf74:	68bb      	ldr	r3, [r7, #8]
 810cf76:	689b      	ldr	r3, [r3, #8]
 810cf78:	3b01      	subs	r3, #1
 810cf7a:	021b      	lsls	r3, r3, #8
 810cf7c:	4319      	orrs	r1, r3
 810cf7e:	68bb      	ldr	r3, [r7, #8]
 810cf80:	68db      	ldr	r3, [r3, #12]
 810cf82:	3b01      	subs	r3, #1
 810cf84:	031b      	lsls	r3, r3, #12
 810cf86:	4319      	orrs	r1, r3
 810cf88:	68bb      	ldr	r3, [r7, #8]
 810cf8a:	691b      	ldr	r3, [r3, #16]
 810cf8c:	3b01      	subs	r3, #1
 810cf8e:	041b      	lsls	r3, r3, #16
 810cf90:	4319      	orrs	r1, r3
 810cf92:	68bb      	ldr	r3, [r7, #8]
 810cf94:	695b      	ldr	r3, [r3, #20]
 810cf96:	3b01      	subs	r3, #1
 810cf98:	051b      	lsls	r3, r3, #20
 810cf9a:	4319      	orrs	r1, r3
 810cf9c:	68bb      	ldr	r3, [r7, #8]
 810cf9e:	699b      	ldr	r3, [r3, #24]
 810cfa0:	3b01      	subs	r3, #1
 810cfa2:	061b      	lsls	r3, r3, #24
 810cfa4:	430b      	orrs	r3, r1
 810cfa6:	431a      	orrs	r2, r3
 810cfa8:	68fb      	ldr	r3, [r7, #12]
 810cfaa:	609a      	str	r2, [r3, #8]
 810cfac:	e02f      	b.n	810d00e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810cfae:	68fb      	ldr	r3, [r7, #12]
 810cfb0:	689b      	ldr	r3, [r3, #8]
 810cfb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810cfb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810cfba:	68ba      	ldr	r2, [r7, #8]
 810cfbc:	68d2      	ldr	r2, [r2, #12]
 810cfbe:	3a01      	subs	r2, #1
 810cfc0:	0311      	lsls	r1, r2, #12
 810cfc2:	68ba      	ldr	r2, [r7, #8]
 810cfc4:	6952      	ldr	r2, [r2, #20]
 810cfc6:	3a01      	subs	r2, #1
 810cfc8:	0512      	lsls	r2, r2, #20
 810cfca:	430a      	orrs	r2, r1
 810cfcc:	431a      	orrs	r2, r3
 810cfce:	68fb      	ldr	r3, [r7, #12]
 810cfd0:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810cfd2:	68fb      	ldr	r3, [r7, #12]
 810cfd4:	68db      	ldr	r3, [r3, #12]
 810cfd6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810cfda:	68bb      	ldr	r3, [r7, #8]
 810cfdc:	681b      	ldr	r3, [r3, #0]
 810cfde:	1e59      	subs	r1, r3, #1
 810cfe0:	68bb      	ldr	r3, [r7, #8]
 810cfe2:	685b      	ldr	r3, [r3, #4]
 810cfe4:	3b01      	subs	r3, #1
 810cfe6:	011b      	lsls	r3, r3, #4
 810cfe8:	4319      	orrs	r1, r3
 810cfea:	68bb      	ldr	r3, [r7, #8]
 810cfec:	689b      	ldr	r3, [r3, #8]
 810cfee:	3b01      	subs	r3, #1
 810cff0:	021b      	lsls	r3, r3, #8
 810cff2:	4319      	orrs	r1, r3
 810cff4:	68bb      	ldr	r3, [r7, #8]
 810cff6:	691b      	ldr	r3, [r3, #16]
 810cff8:	3b01      	subs	r3, #1
 810cffa:	041b      	lsls	r3, r3, #16
 810cffc:	4319      	orrs	r1, r3
 810cffe:	68bb      	ldr	r3, [r7, #8]
 810d000:	699b      	ldr	r3, [r3, #24]
 810d002:	3b01      	subs	r3, #1
 810d004:	061b      	lsls	r3, r3, #24
 810d006:	430b      	orrs	r3, r1
 810d008:	431a      	orrs	r2, r3
 810d00a:	68fb      	ldr	r3, [r7, #12]
 810d00c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810d00e:	2300      	movs	r3, #0
}
 810d010:	4618      	mov	r0, r3
 810d012:	3714      	adds	r7, #20
 810d014:	46bd      	mov	sp, r7
 810d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d01a:	4770      	bx	lr

0810d01c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810d01c:	b084      	sub	sp, #16
 810d01e:	b480      	push	{r7}
 810d020:	b085      	sub	sp, #20
 810d022:	af00      	add	r7, sp, #0
 810d024:	6078      	str	r0, [r7, #4]
 810d026:	f107 001c 	add.w	r0, r7, #28
 810d02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810d02e:	2300      	movs	r3, #0
 810d030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810d032:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810d034:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810d036:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810d03a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810d03e:	431a      	orrs	r2, r3
             Init.ClockDiv
 810d040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810d042:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810d044:	68fa      	ldr	r2, [r7, #12]
 810d046:	4313      	orrs	r3, r2
 810d048:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810d04a:	687b      	ldr	r3, [r7, #4]
 810d04c:	685a      	ldr	r2, [r3, #4]
 810d04e:	4b07      	ldr	r3, [pc, #28]	@ (810d06c <SDMMC_Init+0x50>)
 810d050:	4013      	ands	r3, r2
 810d052:	68fa      	ldr	r2, [r7, #12]
 810d054:	431a      	orrs	r2, r3
 810d056:	687b      	ldr	r3, [r7, #4]
 810d058:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810d05a:	2300      	movs	r3, #0
}
 810d05c:	4618      	mov	r0, r3
 810d05e:	3714      	adds	r7, #20
 810d060:	46bd      	mov	sp, r7
 810d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d066:	b004      	add	sp, #16
 810d068:	4770      	bx	lr
 810d06a:	bf00      	nop
 810d06c:	ffc02c00 	.word	0xffc02c00

0810d070 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810d070:	b480      	push	{r7}
 810d072:	b083      	sub	sp, #12
 810d074:	af00      	add	r7, sp, #0
 810d076:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810d078:	687b      	ldr	r3, [r7, #4]
 810d07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810d07e:	4618      	mov	r0, r3
 810d080:	370c      	adds	r7, #12
 810d082:	46bd      	mov	sp, r7
 810d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d088:	4770      	bx	lr

0810d08a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810d08a:	b480      	push	{r7}
 810d08c:	b083      	sub	sp, #12
 810d08e:	af00      	add	r7, sp, #0
 810d090:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810d092:	687b      	ldr	r3, [r7, #4]
 810d094:	681b      	ldr	r3, [r3, #0]
 810d096:	f043 0203 	orr.w	r2, r3, #3
 810d09a:	687b      	ldr	r3, [r7, #4]
 810d09c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810d09e:	2300      	movs	r3, #0
}
 810d0a0:	4618      	mov	r0, r3
 810d0a2:	370c      	adds	r7, #12
 810d0a4:	46bd      	mov	sp, r7
 810d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0aa:	4770      	bx	lr

0810d0ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810d0ac:	b480      	push	{r7}
 810d0ae:	b083      	sub	sp, #12
 810d0b0:	af00      	add	r7, sp, #0
 810d0b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810d0b4:	687b      	ldr	r3, [r7, #4]
 810d0b6:	681b      	ldr	r3, [r3, #0]
 810d0b8:	f003 0303 	and.w	r3, r3, #3
}
 810d0bc:	4618      	mov	r0, r3
 810d0be:	370c      	adds	r7, #12
 810d0c0:	46bd      	mov	sp, r7
 810d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0c6:	4770      	bx	lr

0810d0c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810d0c8:	b480      	push	{r7}
 810d0ca:	b085      	sub	sp, #20
 810d0cc:	af00      	add	r7, sp, #0
 810d0ce:	6078      	str	r0, [r7, #4]
 810d0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810d0d2:	2300      	movs	r3, #0
 810d0d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810d0d6:	683b      	ldr	r3, [r7, #0]
 810d0d8:	681a      	ldr	r2, [r3, #0]
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810d0de:	683b      	ldr	r3, [r7, #0]
 810d0e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810d0e2:	683b      	ldr	r3, [r7, #0]
 810d0e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810d0e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810d0e8:	683b      	ldr	r3, [r7, #0]
 810d0ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810d0ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 810d0ee:	683b      	ldr	r3, [r7, #0]
 810d0f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810d0f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810d0f4:	68fa      	ldr	r2, [r7, #12]
 810d0f6:	4313      	orrs	r3, r2
 810d0f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810d0fa:	687b      	ldr	r3, [r7, #4]
 810d0fc:	68da      	ldr	r2, [r3, #12]
 810d0fe:	4b06      	ldr	r3, [pc, #24]	@ (810d118 <SDMMC_SendCommand+0x50>)
 810d100:	4013      	ands	r3, r2
 810d102:	68fa      	ldr	r2, [r7, #12]
 810d104:	431a      	orrs	r2, r3
 810d106:	687b      	ldr	r3, [r7, #4]
 810d108:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810d10a:	2300      	movs	r3, #0
}
 810d10c:	4618      	mov	r0, r3
 810d10e:	3714      	adds	r7, #20
 810d110:	46bd      	mov	sp, r7
 810d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d116:	4770      	bx	lr
 810d118:	fffee0c0 	.word	0xfffee0c0

0810d11c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810d11c:	b480      	push	{r7}
 810d11e:	b083      	sub	sp, #12
 810d120:	af00      	add	r7, sp, #0
 810d122:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810d124:	687b      	ldr	r3, [r7, #4]
 810d126:	691b      	ldr	r3, [r3, #16]
 810d128:	b2db      	uxtb	r3, r3
}
 810d12a:	4618      	mov	r0, r3
 810d12c:	370c      	adds	r7, #12
 810d12e:	46bd      	mov	sp, r7
 810d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d134:	4770      	bx	lr

0810d136 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810d136:	b480      	push	{r7}
 810d138:	b085      	sub	sp, #20
 810d13a:	af00      	add	r7, sp, #0
 810d13c:	6078      	str	r0, [r7, #4]
 810d13e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810d140:	687b      	ldr	r3, [r7, #4]
 810d142:	3314      	adds	r3, #20
 810d144:	461a      	mov	r2, r3
 810d146:	683b      	ldr	r3, [r7, #0]
 810d148:	4413      	add	r3, r2
 810d14a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810d14c:	68fb      	ldr	r3, [r7, #12]
 810d14e:	681b      	ldr	r3, [r3, #0]
}
 810d150:	4618      	mov	r0, r3
 810d152:	3714      	adds	r7, #20
 810d154:	46bd      	mov	sp, r7
 810d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d15a:	4770      	bx	lr

0810d15c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810d15c:	b480      	push	{r7}
 810d15e:	b085      	sub	sp, #20
 810d160:	af00      	add	r7, sp, #0
 810d162:	6078      	str	r0, [r7, #4]
 810d164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810d166:	2300      	movs	r3, #0
 810d168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810d16a:	683b      	ldr	r3, [r7, #0]
 810d16c:	681a      	ldr	r2, [r3, #0]
 810d16e:	687b      	ldr	r3, [r7, #4]
 810d170:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810d172:	683b      	ldr	r3, [r7, #0]
 810d174:	685a      	ldr	r2, [r3, #4]
 810d176:	687b      	ldr	r3, [r7, #4]
 810d178:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d17a:	683b      	ldr	r3, [r7, #0]
 810d17c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810d17e:	683b      	ldr	r3, [r7, #0]
 810d180:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d182:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810d184:	683b      	ldr	r3, [r7, #0]
 810d186:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810d188:	431a      	orrs	r2, r3
                       Data->DPSM);
 810d18a:	683b      	ldr	r3, [r7, #0]
 810d18c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810d18e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810d190:	68fa      	ldr	r2, [r7, #12]
 810d192:	4313      	orrs	r3, r2
 810d194:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810d196:	687b      	ldr	r3, [r7, #4]
 810d198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d19a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810d19e:	68fb      	ldr	r3, [r7, #12]
 810d1a0:	431a      	orrs	r2, r3
 810d1a2:	687b      	ldr	r3, [r7, #4]
 810d1a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810d1a6:	2300      	movs	r3, #0

}
 810d1a8:	4618      	mov	r0, r3
 810d1aa:	3714      	adds	r7, #20
 810d1ac:	46bd      	mov	sp, r7
 810d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1b2:	4770      	bx	lr

0810d1b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810d1b4:	b580      	push	{r7, lr}
 810d1b6:	b088      	sub	sp, #32
 810d1b8:	af00      	add	r7, sp, #0
 810d1ba:	6078      	str	r0, [r7, #4]
 810d1bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810d1be:	683b      	ldr	r3, [r7, #0]
 810d1c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810d1c2:	2310      	movs	r3, #16
 810d1c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d1c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d1ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d1cc:	2300      	movs	r3, #0
 810d1ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d1d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d1d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d1d6:	f107 0308 	add.w	r3, r7, #8
 810d1da:	4619      	mov	r1, r3
 810d1dc:	6878      	ldr	r0, [r7, #4]
 810d1de:	f7ff ff73 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810d1e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d1e6:	2110      	movs	r1, #16
 810d1e8:	6878      	ldr	r0, [r7, #4]
 810d1ea:	f000 f995 	bl	810d518 <SDMMC_GetCmdResp1>
 810d1ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d1f0:	69fb      	ldr	r3, [r7, #28]
}
 810d1f2:	4618      	mov	r0, r3
 810d1f4:	3720      	adds	r7, #32
 810d1f6:	46bd      	mov	sp, r7
 810d1f8:	bd80      	pop	{r7, pc}

0810d1fa <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810d1fa:	b580      	push	{r7, lr}
 810d1fc:	b088      	sub	sp, #32
 810d1fe:	af00      	add	r7, sp, #0
 810d200:	6078      	str	r0, [r7, #4]
 810d202:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810d204:	683b      	ldr	r3, [r7, #0]
 810d206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810d208:	2307      	movs	r3, #7
 810d20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d20c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d212:	2300      	movs	r3, #0
 810d214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d21a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d21c:	f107 0308 	add.w	r3, r7, #8
 810d220:	4619      	mov	r1, r3
 810d222:	6878      	ldr	r0, [r7, #4]
 810d224:	f7ff ff50 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810d228:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d22c:	2107      	movs	r1, #7
 810d22e:	6878      	ldr	r0, [r7, #4]
 810d230:	f000 f972 	bl	810d518 <SDMMC_GetCmdResp1>
 810d234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d236:	69fb      	ldr	r3, [r7, #28]
}
 810d238:	4618      	mov	r0, r3
 810d23a:	3720      	adds	r7, #32
 810d23c:	46bd      	mov	sp, r7
 810d23e:	bd80      	pop	{r7, pc}

0810d240 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810d240:	b580      	push	{r7, lr}
 810d242:	b088      	sub	sp, #32
 810d244:	af00      	add	r7, sp, #0
 810d246:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d248:	2300      	movs	r3, #0
 810d24a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810d24c:	2300      	movs	r3, #0
 810d24e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810d250:	2300      	movs	r3, #0
 810d252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d254:	2300      	movs	r3, #0
 810d256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d25c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d25e:	f107 0308 	add.w	r3, r7, #8
 810d262:	4619      	mov	r1, r3
 810d264:	6878      	ldr	r0, [r7, #4]
 810d266:	f7ff ff2f 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810d26a:	6878      	ldr	r0, [r7, #4]
 810d26c:	f000 fb96 	bl	810d99c <SDMMC_GetCmdError>
 810d270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d272:	69fb      	ldr	r3, [r7, #28]
}
 810d274:	4618      	mov	r0, r3
 810d276:	3720      	adds	r7, #32
 810d278:	46bd      	mov	sp, r7
 810d27a:	bd80      	pop	{r7, pc}

0810d27c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810d27c:	b580      	push	{r7, lr}
 810d27e:	b088      	sub	sp, #32
 810d280:	af00      	add	r7, sp, #0
 810d282:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810d284:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810d288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810d28a:	2308      	movs	r3, #8
 810d28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d28e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d294:	2300      	movs	r3, #0
 810d296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d29c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d29e:	f107 0308 	add.w	r3, r7, #8
 810d2a2:	4619      	mov	r1, r3
 810d2a4:	6878      	ldr	r0, [r7, #4]
 810d2a6:	f7ff ff0f 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810d2aa:	6878      	ldr	r0, [r7, #4]
 810d2ac:	f000 fb28 	bl	810d900 <SDMMC_GetCmdResp7>
 810d2b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2b2:	69fb      	ldr	r3, [r7, #28]
}
 810d2b4:	4618      	mov	r0, r3
 810d2b6:	3720      	adds	r7, #32
 810d2b8:	46bd      	mov	sp, r7
 810d2ba:	bd80      	pop	{r7, pc}

0810d2bc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d2bc:	b580      	push	{r7, lr}
 810d2be:	b088      	sub	sp, #32
 810d2c0:	af00      	add	r7, sp, #0
 810d2c2:	6078      	str	r0, [r7, #4]
 810d2c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810d2c6:	683b      	ldr	r3, [r7, #0]
 810d2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810d2ca:	2337      	movs	r3, #55	@ 0x37
 810d2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d2ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d2d4:	2300      	movs	r3, #0
 810d2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d2d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d2dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d2de:	f107 0308 	add.w	r3, r7, #8
 810d2e2:	4619      	mov	r1, r3
 810d2e4:	6878      	ldr	r0, [r7, #4]
 810d2e6:	f7ff feef 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810d2ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d2ee:	2137      	movs	r1, #55	@ 0x37
 810d2f0:	6878      	ldr	r0, [r7, #4]
 810d2f2:	f000 f911 	bl	810d518 <SDMMC_GetCmdResp1>
 810d2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2f8:	69fb      	ldr	r3, [r7, #28]
}
 810d2fa:	4618      	mov	r0, r3
 810d2fc:	3720      	adds	r7, #32
 810d2fe:	46bd      	mov	sp, r7
 810d300:	bd80      	pop	{r7, pc}

0810d302 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d302:	b580      	push	{r7, lr}
 810d304:	b088      	sub	sp, #32
 810d306:	af00      	add	r7, sp, #0
 810d308:	6078      	str	r0, [r7, #4]
 810d30a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d30c:	683b      	ldr	r3, [r7, #0]
 810d30e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810d310:	2329      	movs	r3, #41	@ 0x29
 810d312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d31a:	2300      	movs	r3, #0
 810d31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d31e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d324:	f107 0308 	add.w	r3, r7, #8
 810d328:	4619      	mov	r1, r3
 810d32a:	6878      	ldr	r0, [r7, #4]
 810d32c:	f7ff fecc 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810d330:	6878      	ldr	r0, [r7, #4]
 810d332:	f000 fa2d 	bl	810d790 <SDMMC_GetCmdResp3>
 810d336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d338:	69fb      	ldr	r3, [r7, #28]
}
 810d33a:	4618      	mov	r0, r3
 810d33c:	3720      	adds	r7, #32
 810d33e:	46bd      	mov	sp, r7
 810d340:	bd80      	pop	{r7, pc}

0810d342 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810d342:	b580      	push	{r7, lr}
 810d344:	b088      	sub	sp, #32
 810d346:	af00      	add	r7, sp, #0
 810d348:	6078      	str	r0, [r7, #4]
 810d34a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810d34c:	683b      	ldr	r3, [r7, #0]
 810d34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810d350:	2306      	movs	r3, #6
 810d352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d35a:	2300      	movs	r3, #0
 810d35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d35e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d362:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d364:	f107 0308 	add.w	r3, r7, #8
 810d368:	4619      	mov	r1, r3
 810d36a:	6878      	ldr	r0, [r7, #4]
 810d36c:	f7ff feac 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810d370:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d374:	2106      	movs	r1, #6
 810d376:	6878      	ldr	r0, [r7, #4]
 810d378:	f000 f8ce 	bl	810d518 <SDMMC_GetCmdResp1>
 810d37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d37e:	69fb      	ldr	r3, [r7, #28]
}
 810d380:	4618      	mov	r0, r3
 810d382:	3720      	adds	r7, #32
 810d384:	46bd      	mov	sp, r7
 810d386:	bd80      	pop	{r7, pc}

0810d388 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810d388:	b580      	push	{r7, lr}
 810d38a:	b088      	sub	sp, #32
 810d38c:	af00      	add	r7, sp, #0
 810d38e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810d390:	2300      	movs	r3, #0
 810d392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810d394:	2333      	movs	r3, #51	@ 0x33
 810d396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d39e:	2300      	movs	r3, #0
 810d3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d3a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d3a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d3a8:	f107 0308 	add.w	r3, r7, #8
 810d3ac:	4619      	mov	r1, r3
 810d3ae:	6878      	ldr	r0, [r7, #4]
 810d3b0:	f7ff fe8a 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810d3b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d3b8:	2133      	movs	r1, #51	@ 0x33
 810d3ba:	6878      	ldr	r0, [r7, #4]
 810d3bc:	f000 f8ac 	bl	810d518 <SDMMC_GetCmdResp1>
 810d3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d3c2:	69fb      	ldr	r3, [r7, #28]
}
 810d3c4:	4618      	mov	r0, r3
 810d3c6:	3720      	adds	r7, #32
 810d3c8:	46bd      	mov	sp, r7
 810d3ca:	bd80      	pop	{r7, pc}

0810d3cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810d3cc:	b580      	push	{r7, lr}
 810d3ce:	b088      	sub	sp, #32
 810d3d0:	af00      	add	r7, sp, #0
 810d3d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810d3d4:	2300      	movs	r3, #0
 810d3d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810d3d8:	2302      	movs	r3, #2
 810d3da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d3dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810d3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d3e2:	2300      	movs	r3, #0
 810d3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d3e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d3ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d3ec:	f107 0308 	add.w	r3, r7, #8
 810d3f0:	4619      	mov	r1, r3
 810d3f2:	6878      	ldr	r0, [r7, #4]
 810d3f4:	f7ff fe68 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d3f8:	6878      	ldr	r0, [r7, #4]
 810d3fa:	f000 f97f 	bl	810d6fc <SDMMC_GetCmdResp2>
 810d3fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d400:	69fb      	ldr	r3, [r7, #28]
}
 810d402:	4618      	mov	r0, r3
 810d404:	3720      	adds	r7, #32
 810d406:	46bd      	mov	sp, r7
 810d408:	bd80      	pop	{r7, pc}

0810d40a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d40a:	b580      	push	{r7, lr}
 810d40c:	b088      	sub	sp, #32
 810d40e:	af00      	add	r7, sp, #0
 810d410:	6078      	str	r0, [r7, #4]
 810d412:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810d414:	683b      	ldr	r3, [r7, #0]
 810d416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810d418:	2309      	movs	r3, #9
 810d41a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d41c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810d420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d422:	2300      	movs	r3, #0
 810d424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d42a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d42c:	f107 0308 	add.w	r3, r7, #8
 810d430:	4619      	mov	r1, r3
 810d432:	6878      	ldr	r0, [r7, #4]
 810d434:	f7ff fe48 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d438:	6878      	ldr	r0, [r7, #4]
 810d43a:	f000 f95f 	bl	810d6fc <SDMMC_GetCmdResp2>
 810d43e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d440:	69fb      	ldr	r3, [r7, #28]
}
 810d442:	4618      	mov	r0, r3
 810d444:	3720      	adds	r7, #32
 810d446:	46bd      	mov	sp, r7
 810d448:	bd80      	pop	{r7, pc}

0810d44a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810d44a:	b580      	push	{r7, lr}
 810d44c:	b088      	sub	sp, #32
 810d44e:	af00      	add	r7, sp, #0
 810d450:	6078      	str	r0, [r7, #4]
 810d452:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810d454:	2300      	movs	r3, #0
 810d456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810d458:	2303      	movs	r3, #3
 810d45a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d45c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d462:	2300      	movs	r3, #0
 810d464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d46c:	f107 0308 	add.w	r3, r7, #8
 810d470:	4619      	mov	r1, r3
 810d472:	6878      	ldr	r0, [r7, #4]
 810d474:	f7ff fe28 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810d478:	683a      	ldr	r2, [r7, #0]
 810d47a:	2103      	movs	r1, #3
 810d47c:	6878      	ldr	r0, [r7, #4]
 810d47e:	f000 f9c7 	bl	810d810 <SDMMC_GetCmdResp6>
 810d482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d484:	69fb      	ldr	r3, [r7, #28]
}
 810d486:	4618      	mov	r0, r3
 810d488:	3720      	adds	r7, #32
 810d48a:	46bd      	mov	sp, r7
 810d48c:	bd80      	pop	{r7, pc}

0810d48e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d48e:	b580      	push	{r7, lr}
 810d490:	b088      	sub	sp, #32
 810d492:	af00      	add	r7, sp, #0
 810d494:	6078      	str	r0, [r7, #4]
 810d496:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d498:	683b      	ldr	r3, [r7, #0]
 810d49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810d49c:	230d      	movs	r3, #13
 810d49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d4a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d4a6:	2300      	movs	r3, #0
 810d4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d4aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d4b0:	f107 0308 	add.w	r3, r7, #8
 810d4b4:	4619      	mov	r1, r3
 810d4b6:	6878      	ldr	r0, [r7, #4]
 810d4b8:	f7ff fe06 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810d4bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d4c0:	210d      	movs	r1, #13
 810d4c2:	6878      	ldr	r0, [r7, #4]
 810d4c4:	f000 f828 	bl	810d518 <SDMMC_GetCmdResp1>
 810d4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d4ca:	69fb      	ldr	r3, [r7, #28]
}
 810d4cc:	4618      	mov	r0, r3
 810d4ce:	3720      	adds	r7, #32
 810d4d0:	46bd      	mov	sp, r7
 810d4d2:	bd80      	pop	{r7, pc}

0810d4d4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810d4d4:	b580      	push	{r7, lr}
 810d4d6:	b088      	sub	sp, #32
 810d4d8:	af00      	add	r7, sp, #0
 810d4da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d4dc:	2300      	movs	r3, #0
 810d4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810d4e0:	230d      	movs	r3, #13
 810d4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d4e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d4ea:	2300      	movs	r3, #0
 810d4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d4ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d4f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d4f4:	f107 0308 	add.w	r3, r7, #8
 810d4f8:	4619      	mov	r1, r3
 810d4fa:	6878      	ldr	r0, [r7, #4]
 810d4fc:	f7ff fde4 	bl	810d0c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810d500:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d504:	210d      	movs	r1, #13
 810d506:	6878      	ldr	r0, [r7, #4]
 810d508:	f000 f806 	bl	810d518 <SDMMC_GetCmdResp1>
 810d50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d50e:	69fb      	ldr	r3, [r7, #28]
}
 810d510:	4618      	mov	r0, r3
 810d512:	3720      	adds	r7, #32
 810d514:	46bd      	mov	sp, r7
 810d516:	bd80      	pop	{r7, pc}

0810d518 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810d518:	b580      	push	{r7, lr}
 810d51a:	b088      	sub	sp, #32
 810d51c:	af00      	add	r7, sp, #0
 810d51e:	60f8      	str	r0, [r7, #12]
 810d520:	460b      	mov	r3, r1
 810d522:	607a      	str	r2, [r7, #4]
 810d524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810d526:	4b70      	ldr	r3, [pc, #448]	@ (810d6e8 <SDMMC_GetCmdResp1+0x1d0>)
 810d528:	681b      	ldr	r3, [r3, #0]
 810d52a:	4a70      	ldr	r2, [pc, #448]	@ (810d6ec <SDMMC_GetCmdResp1+0x1d4>)
 810d52c:	fba2 2303 	umull	r2, r3, r2, r3
 810d530:	0a5a      	lsrs	r2, r3, #9
 810d532:	687b      	ldr	r3, [r7, #4]
 810d534:	fb02 f303 	mul.w	r3, r2, r3
 810d538:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d53a:	69fb      	ldr	r3, [r7, #28]
 810d53c:	1e5a      	subs	r2, r3, #1
 810d53e:	61fa      	str	r2, [r7, #28]
 810d540:	2b00      	cmp	r3, #0
 810d542:	d102      	bne.n	810d54a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d544:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d548:	e0c9      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810d54a:	68fb      	ldr	r3, [r7, #12]
 810d54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d54e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810d550:	69ba      	ldr	r2, [r7, #24]
 810d552:	4b67      	ldr	r3, [pc, #412]	@ (810d6f0 <SDMMC_GetCmdResp1+0x1d8>)
 810d554:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d556:	2b00      	cmp	r3, #0
 810d558:	d0ef      	beq.n	810d53a <SDMMC_GetCmdResp1+0x22>
 810d55a:	69bb      	ldr	r3, [r7, #24]
 810d55c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810d560:	2b00      	cmp	r3, #0
 810d562:	d1ea      	bne.n	810d53a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d564:	68fb      	ldr	r3, [r7, #12]
 810d566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d568:	f003 0304 	and.w	r3, r3, #4
 810d56c:	2b00      	cmp	r3, #0
 810d56e:	d004      	beq.n	810d57a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d570:	68fb      	ldr	r3, [r7, #12]
 810d572:	2204      	movs	r2, #4
 810d574:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d576:	2304      	movs	r3, #4
 810d578:	e0b1      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d57a:	68fb      	ldr	r3, [r7, #12]
 810d57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d57e:	f003 0301 	and.w	r3, r3, #1
 810d582:	2b00      	cmp	r3, #0
 810d584:	d004      	beq.n	810d590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d586:	68fb      	ldr	r3, [r7, #12]
 810d588:	2201      	movs	r2, #1
 810d58a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d58c:	2301      	movs	r3, #1
 810d58e:	e0a6      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d590:	68fb      	ldr	r3, [r7, #12]
 810d592:	4a58      	ldr	r2, [pc, #352]	@ (810d6f4 <SDMMC_GetCmdResp1+0x1dc>)
 810d594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d596:	68f8      	ldr	r0, [r7, #12]
 810d598:	f7ff fdc0 	bl	810d11c <SDMMC_GetCommandResponse>
 810d59c:	4603      	mov	r3, r0
 810d59e:	461a      	mov	r2, r3
 810d5a0:	7afb      	ldrb	r3, [r7, #11]
 810d5a2:	4293      	cmp	r3, r2
 810d5a4:	d001      	beq.n	810d5aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d5a6:	2301      	movs	r3, #1
 810d5a8:	e099      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d5aa:	2100      	movs	r1, #0
 810d5ac:	68f8      	ldr	r0, [r7, #12]
 810d5ae:	f7ff fdc2 	bl	810d136 <SDMMC_GetResponse>
 810d5b2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810d5b4:	697a      	ldr	r2, [r7, #20]
 810d5b6:	4b50      	ldr	r3, [pc, #320]	@ (810d6f8 <SDMMC_GetCmdResp1+0x1e0>)
 810d5b8:	4013      	ands	r3, r2
 810d5ba:	2b00      	cmp	r3, #0
 810d5bc:	d101      	bne.n	810d5c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810d5be:	2300      	movs	r3, #0
 810d5c0:	e08d      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810d5c2:	697b      	ldr	r3, [r7, #20]
 810d5c4:	2b00      	cmp	r3, #0
 810d5c6:	da02      	bge.n	810d5ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810d5c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810d5cc:	e087      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810d5ce:	697b      	ldr	r3, [r7, #20]
 810d5d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810d5d4:	2b00      	cmp	r3, #0
 810d5d6:	d001      	beq.n	810d5dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810d5d8:	2340      	movs	r3, #64	@ 0x40
 810d5da:	e080      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810d5dc:	697b      	ldr	r3, [r7, #20]
 810d5de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810d5e2:	2b00      	cmp	r3, #0
 810d5e4:	d001      	beq.n	810d5ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810d5e6:	2380      	movs	r3, #128	@ 0x80
 810d5e8:	e079      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810d5ea:	697b      	ldr	r3, [r7, #20]
 810d5ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	d002      	beq.n	810d5fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810d5f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d5f8:	e071      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810d5fa:	697b      	ldr	r3, [r7, #20]
 810d5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810d600:	2b00      	cmp	r3, #0
 810d602:	d002      	beq.n	810d60a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810d604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810d608:	e069      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810d60a:	697b      	ldr	r3, [r7, #20]
 810d60c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810d610:	2b00      	cmp	r3, #0
 810d612:	d002      	beq.n	810d61a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810d614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d618:	e061      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810d61a:	697b      	ldr	r3, [r7, #20]
 810d61c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810d620:	2b00      	cmp	r3, #0
 810d622:	d002      	beq.n	810d62a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810d624:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810d628:	e059      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810d62a:	697b      	ldr	r3, [r7, #20]
 810d62c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810d630:	2b00      	cmp	r3, #0
 810d632:	d002      	beq.n	810d63a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d638:	e051      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810d63a:	697b      	ldr	r3, [r7, #20]
 810d63c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810d640:	2b00      	cmp	r3, #0
 810d642:	d002      	beq.n	810d64a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810d648:	e049      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810d64a:	697b      	ldr	r3, [r7, #20]
 810d64c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810d650:	2b00      	cmp	r3, #0
 810d652:	d002      	beq.n	810d65a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810d654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810d658:	e041      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810d65a:	697b      	ldr	r3, [r7, #20]
 810d65c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810d660:	2b00      	cmp	r3, #0
 810d662:	d002      	beq.n	810d66a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810d664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d668:	e039      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810d66a:	697b      	ldr	r3, [r7, #20]
 810d66c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810d670:	2b00      	cmp	r3, #0
 810d672:	d002      	beq.n	810d67a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810d674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810d678:	e031      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810d67a:	697b      	ldr	r3, [r7, #20]
 810d67c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810d680:	2b00      	cmp	r3, #0
 810d682:	d002      	beq.n	810d68a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810d684:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810d688:	e029      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810d68a:	697b      	ldr	r3, [r7, #20]
 810d68c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810d690:	2b00      	cmp	r3, #0
 810d692:	d002      	beq.n	810d69a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810d694:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810d698:	e021      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810d69a:	697b      	ldr	r3, [r7, #20]
 810d69c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810d6a0:	2b00      	cmp	r3, #0
 810d6a2:	d002      	beq.n	810d6aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810d6a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810d6a8:	e019      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810d6aa:	697b      	ldr	r3, [r7, #20]
 810d6ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d6b0:	2b00      	cmp	r3, #0
 810d6b2:	d002      	beq.n	810d6ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810d6b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810d6b8:	e011      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810d6ba:	697b      	ldr	r3, [r7, #20]
 810d6bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810d6c0:	2b00      	cmp	r3, #0
 810d6c2:	d002      	beq.n	810d6ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810d6c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810d6c8:	e009      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810d6ca:	697b      	ldr	r3, [r7, #20]
 810d6cc:	f003 0308 	and.w	r3, r3, #8
 810d6d0:	2b00      	cmp	r3, #0
 810d6d2:	d002      	beq.n	810d6da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810d6d4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810d6d8:	e001      	b.n	810d6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d6da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810d6de:	4618      	mov	r0, r3
 810d6e0:	3720      	adds	r7, #32
 810d6e2:	46bd      	mov	sp, r7
 810d6e4:	bd80      	pop	{r7, pc}
 810d6e6:	bf00      	nop
 810d6e8:	10000000 	.word	0x10000000
 810d6ec:	10624dd3 	.word	0x10624dd3
 810d6f0:	00200045 	.word	0x00200045
 810d6f4:	002000c5 	.word	0x002000c5
 810d6f8:	fdffe008 	.word	0xfdffe008

0810d6fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810d6fc:	b480      	push	{r7}
 810d6fe:	b085      	sub	sp, #20
 810d700:	af00      	add	r7, sp, #0
 810d702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d704:	4b1f      	ldr	r3, [pc, #124]	@ (810d784 <SDMMC_GetCmdResp2+0x88>)
 810d706:	681b      	ldr	r3, [r3, #0]
 810d708:	4a1f      	ldr	r2, [pc, #124]	@ (810d788 <SDMMC_GetCmdResp2+0x8c>)
 810d70a:	fba2 2303 	umull	r2, r3, r2, r3
 810d70e:	0a5b      	lsrs	r3, r3, #9
 810d710:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d714:	fb02 f303 	mul.w	r3, r2, r3
 810d718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d71a:	68fb      	ldr	r3, [r7, #12]
 810d71c:	1e5a      	subs	r2, r3, #1
 810d71e:	60fa      	str	r2, [r7, #12]
 810d720:	2b00      	cmp	r3, #0
 810d722:	d102      	bne.n	810d72a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d728:	e026      	b.n	810d778 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810d72a:	687b      	ldr	r3, [r7, #4]
 810d72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d72e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d730:	68bb      	ldr	r3, [r7, #8]
 810d732:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d736:	2b00      	cmp	r3, #0
 810d738:	d0ef      	beq.n	810d71a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d73a:	68bb      	ldr	r3, [r7, #8]
 810d73c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d740:	2b00      	cmp	r3, #0
 810d742:	d1ea      	bne.n	810d71a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d744:	687b      	ldr	r3, [r7, #4]
 810d746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d748:	f003 0304 	and.w	r3, r3, #4
 810d74c:	2b00      	cmp	r3, #0
 810d74e:	d004      	beq.n	810d75a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d750:	687b      	ldr	r3, [r7, #4]
 810d752:	2204      	movs	r2, #4
 810d754:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d756:	2304      	movs	r3, #4
 810d758:	e00e      	b.n	810d778 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d75a:	687b      	ldr	r3, [r7, #4]
 810d75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d75e:	f003 0301 	and.w	r3, r3, #1
 810d762:	2b00      	cmp	r3, #0
 810d764:	d004      	beq.n	810d770 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d766:	687b      	ldr	r3, [r7, #4]
 810d768:	2201      	movs	r2, #1
 810d76a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d76c:	2301      	movs	r3, #1
 810d76e:	e003      	b.n	810d778 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d770:	687b      	ldr	r3, [r7, #4]
 810d772:	4a06      	ldr	r2, [pc, #24]	@ (810d78c <SDMMC_GetCmdResp2+0x90>)
 810d774:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d776:	2300      	movs	r3, #0
}
 810d778:	4618      	mov	r0, r3
 810d77a:	3714      	adds	r7, #20
 810d77c:	46bd      	mov	sp, r7
 810d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d782:	4770      	bx	lr
 810d784:	10000000 	.word	0x10000000
 810d788:	10624dd3 	.word	0x10624dd3
 810d78c:	002000c5 	.word	0x002000c5

0810d790 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810d790:	b480      	push	{r7}
 810d792:	b085      	sub	sp, #20
 810d794:	af00      	add	r7, sp, #0
 810d796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d798:	4b1a      	ldr	r3, [pc, #104]	@ (810d804 <SDMMC_GetCmdResp3+0x74>)
 810d79a:	681b      	ldr	r3, [r3, #0]
 810d79c:	4a1a      	ldr	r2, [pc, #104]	@ (810d808 <SDMMC_GetCmdResp3+0x78>)
 810d79e:	fba2 2303 	umull	r2, r3, r2, r3
 810d7a2:	0a5b      	lsrs	r3, r3, #9
 810d7a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d7a8:	fb02 f303 	mul.w	r3, r2, r3
 810d7ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d7ae:	68fb      	ldr	r3, [r7, #12]
 810d7b0:	1e5a      	subs	r2, r3, #1
 810d7b2:	60fa      	str	r2, [r7, #12]
 810d7b4:	2b00      	cmp	r3, #0
 810d7b6:	d102      	bne.n	810d7be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d7b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d7bc:	e01b      	b.n	810d7f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810d7be:	687b      	ldr	r3, [r7, #4]
 810d7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d7c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d7c4:	68bb      	ldr	r3, [r7, #8]
 810d7c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d7ca:	2b00      	cmp	r3, #0
 810d7cc:	d0ef      	beq.n	810d7ae <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d7ce:	68bb      	ldr	r3, [r7, #8]
 810d7d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d7d4:	2b00      	cmp	r3, #0
 810d7d6:	d1ea      	bne.n	810d7ae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d7d8:	687b      	ldr	r3, [r7, #4]
 810d7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d7dc:	f003 0304 	and.w	r3, r3, #4
 810d7e0:	2b00      	cmp	r3, #0
 810d7e2:	d004      	beq.n	810d7ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	2204      	movs	r2, #4
 810d7e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d7ea:	2304      	movs	r3, #4
 810d7ec:	e003      	b.n	810d7f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d7ee:	687b      	ldr	r3, [r7, #4]
 810d7f0:	4a06      	ldr	r2, [pc, #24]	@ (810d80c <SDMMC_GetCmdResp3+0x7c>)
 810d7f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d7f4:	2300      	movs	r3, #0
}
 810d7f6:	4618      	mov	r0, r3
 810d7f8:	3714      	adds	r7, #20
 810d7fa:	46bd      	mov	sp, r7
 810d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d800:	4770      	bx	lr
 810d802:	bf00      	nop
 810d804:	10000000 	.word	0x10000000
 810d808:	10624dd3 	.word	0x10624dd3
 810d80c:	002000c5 	.word	0x002000c5

0810d810 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810d810:	b580      	push	{r7, lr}
 810d812:	b088      	sub	sp, #32
 810d814:	af00      	add	r7, sp, #0
 810d816:	60f8      	str	r0, [r7, #12]
 810d818:	460b      	mov	r3, r1
 810d81a:	607a      	str	r2, [r7, #4]
 810d81c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d81e:	4b35      	ldr	r3, [pc, #212]	@ (810d8f4 <SDMMC_GetCmdResp6+0xe4>)
 810d820:	681b      	ldr	r3, [r3, #0]
 810d822:	4a35      	ldr	r2, [pc, #212]	@ (810d8f8 <SDMMC_GetCmdResp6+0xe8>)
 810d824:	fba2 2303 	umull	r2, r3, r2, r3
 810d828:	0a5b      	lsrs	r3, r3, #9
 810d82a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d82e:	fb02 f303 	mul.w	r3, r2, r3
 810d832:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d834:	69fb      	ldr	r3, [r7, #28]
 810d836:	1e5a      	subs	r2, r3, #1
 810d838:	61fa      	str	r2, [r7, #28]
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	d102      	bne.n	810d844 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d83e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d842:	e052      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810d844:	68fb      	ldr	r3, [r7, #12]
 810d846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d848:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d84a:	69bb      	ldr	r3, [r7, #24]
 810d84c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d850:	2b00      	cmp	r3, #0
 810d852:	d0ef      	beq.n	810d834 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d854:	69bb      	ldr	r3, [r7, #24]
 810d856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d85a:	2b00      	cmp	r3, #0
 810d85c:	d1ea      	bne.n	810d834 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d85e:	68fb      	ldr	r3, [r7, #12]
 810d860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d862:	f003 0304 	and.w	r3, r3, #4
 810d866:	2b00      	cmp	r3, #0
 810d868:	d004      	beq.n	810d874 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d86a:	68fb      	ldr	r3, [r7, #12]
 810d86c:	2204      	movs	r2, #4
 810d86e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d870:	2304      	movs	r3, #4
 810d872:	e03a      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d874:	68fb      	ldr	r3, [r7, #12]
 810d876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d878:	f003 0301 	and.w	r3, r3, #1
 810d87c:	2b00      	cmp	r3, #0
 810d87e:	d004      	beq.n	810d88a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d880:	68fb      	ldr	r3, [r7, #12]
 810d882:	2201      	movs	r2, #1
 810d884:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d886:	2301      	movs	r3, #1
 810d888:	e02f      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d88a:	68f8      	ldr	r0, [r7, #12]
 810d88c:	f7ff fc46 	bl	810d11c <SDMMC_GetCommandResponse>
 810d890:	4603      	mov	r3, r0
 810d892:	461a      	mov	r2, r3
 810d894:	7afb      	ldrb	r3, [r7, #11]
 810d896:	4293      	cmp	r3, r2
 810d898:	d001      	beq.n	810d89e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d89a:	2301      	movs	r3, #1
 810d89c:	e025      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d89e:	68fb      	ldr	r3, [r7, #12]
 810d8a0:	4a16      	ldr	r2, [pc, #88]	@ (810d8fc <SDMMC_GetCmdResp6+0xec>)
 810d8a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d8a4:	2100      	movs	r1, #0
 810d8a6:	68f8      	ldr	r0, [r7, #12]
 810d8a8:	f7ff fc45 	bl	810d136 <SDMMC_GetResponse>
 810d8ac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810d8ae:	697b      	ldr	r3, [r7, #20]
 810d8b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810d8b4:	2b00      	cmp	r3, #0
 810d8b6:	d106      	bne.n	810d8c6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810d8b8:	697b      	ldr	r3, [r7, #20]
 810d8ba:	0c1b      	lsrs	r3, r3, #16
 810d8bc:	b29a      	uxth	r2, r3
 810d8be:	687b      	ldr	r3, [r7, #4]
 810d8c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810d8c2:	2300      	movs	r3, #0
 810d8c4:	e011      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810d8c6:	697b      	ldr	r3, [r7, #20]
 810d8c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d8cc:	2b00      	cmp	r3, #0
 810d8ce:	d002      	beq.n	810d8d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d8d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810d8d4:	e009      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810d8d6:	697b      	ldr	r3, [r7, #20]
 810d8d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810d8dc:	2b00      	cmp	r3, #0
 810d8de:	d002      	beq.n	810d8e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d8e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810d8e4:	e001      	b.n	810d8ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d8e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810d8ea:	4618      	mov	r0, r3
 810d8ec:	3720      	adds	r7, #32
 810d8ee:	46bd      	mov	sp, r7
 810d8f0:	bd80      	pop	{r7, pc}
 810d8f2:	bf00      	nop
 810d8f4:	10000000 	.word	0x10000000
 810d8f8:	10624dd3 	.word	0x10624dd3
 810d8fc:	002000c5 	.word	0x002000c5

0810d900 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810d900:	b480      	push	{r7}
 810d902:	b085      	sub	sp, #20
 810d904:	af00      	add	r7, sp, #0
 810d906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d908:	4b22      	ldr	r3, [pc, #136]	@ (810d994 <SDMMC_GetCmdResp7+0x94>)
 810d90a:	681b      	ldr	r3, [r3, #0]
 810d90c:	4a22      	ldr	r2, [pc, #136]	@ (810d998 <SDMMC_GetCmdResp7+0x98>)
 810d90e:	fba2 2303 	umull	r2, r3, r2, r3
 810d912:	0a5b      	lsrs	r3, r3, #9
 810d914:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d918:	fb02 f303 	mul.w	r3, r2, r3
 810d91c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d91e:	68fb      	ldr	r3, [r7, #12]
 810d920:	1e5a      	subs	r2, r3, #1
 810d922:	60fa      	str	r2, [r7, #12]
 810d924:	2b00      	cmp	r3, #0
 810d926:	d102      	bne.n	810d92e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d928:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d92c:	e02c      	b.n	810d988 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810d92e:	687b      	ldr	r3, [r7, #4]
 810d930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d932:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d934:	68bb      	ldr	r3, [r7, #8]
 810d936:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810d93a:	2b00      	cmp	r3, #0
 810d93c:	d0ef      	beq.n	810d91e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d93e:	68bb      	ldr	r3, [r7, #8]
 810d940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d944:	2b00      	cmp	r3, #0
 810d946:	d1ea      	bne.n	810d91e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d94c:	f003 0304 	and.w	r3, r3, #4
 810d950:	2b00      	cmp	r3, #0
 810d952:	d004      	beq.n	810d95e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d954:	687b      	ldr	r3, [r7, #4]
 810d956:	2204      	movs	r2, #4
 810d958:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d95a:	2304      	movs	r3, #4
 810d95c:	e014      	b.n	810d988 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d95e:	687b      	ldr	r3, [r7, #4]
 810d960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d962:	f003 0301 	and.w	r3, r3, #1
 810d966:	2b00      	cmp	r3, #0
 810d968:	d004      	beq.n	810d974 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d96a:	687b      	ldr	r3, [r7, #4]
 810d96c:	2201      	movs	r2, #1
 810d96e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d970:	2301      	movs	r3, #1
 810d972:	e009      	b.n	810d988 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810d974:	687b      	ldr	r3, [r7, #4]
 810d976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d97c:	2b00      	cmp	r3, #0
 810d97e:	d002      	beq.n	810d986 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810d980:	687b      	ldr	r3, [r7, #4]
 810d982:	2240      	movs	r2, #64	@ 0x40
 810d984:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810d986:	2300      	movs	r3, #0

}
 810d988:	4618      	mov	r0, r3
 810d98a:	3714      	adds	r7, #20
 810d98c:	46bd      	mov	sp, r7
 810d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d992:	4770      	bx	lr
 810d994:	10000000 	.word	0x10000000
 810d998:	10624dd3 	.word	0x10624dd3

0810d99c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810d99c:	b480      	push	{r7}
 810d99e:	b085      	sub	sp, #20
 810d9a0:	af00      	add	r7, sp, #0
 810d9a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d9a4:	4b11      	ldr	r3, [pc, #68]	@ (810d9ec <SDMMC_GetCmdError+0x50>)
 810d9a6:	681b      	ldr	r3, [r3, #0]
 810d9a8:	4a11      	ldr	r2, [pc, #68]	@ (810d9f0 <SDMMC_GetCmdError+0x54>)
 810d9aa:	fba2 2303 	umull	r2, r3, r2, r3
 810d9ae:	0a5b      	lsrs	r3, r3, #9
 810d9b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 810d9b4:	fb02 f303 	mul.w	r3, r2, r3
 810d9b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d9ba:	68fb      	ldr	r3, [r7, #12]
 810d9bc:	1e5a      	subs	r2, r3, #1
 810d9be:	60fa      	str	r2, [r7, #12]
 810d9c0:	2b00      	cmp	r3, #0
 810d9c2:	d102      	bne.n	810d9ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d9c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810d9c8:	e009      	b.n	810d9de <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d9ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d9d2:	2b00      	cmp	r3, #0
 810d9d4:	d0f1      	beq.n	810d9ba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d9d6:	687b      	ldr	r3, [r7, #4]
 810d9d8:	4a06      	ldr	r2, [pc, #24]	@ (810d9f4 <SDMMC_GetCmdError+0x58>)
 810d9da:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810d9dc:	2300      	movs	r3, #0
}
 810d9de:	4618      	mov	r0, r3
 810d9e0:	3714      	adds	r7, #20
 810d9e2:	46bd      	mov	sp, r7
 810d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9e8:	4770      	bx	lr
 810d9ea:	bf00      	nop
 810d9ec:	10000000 	.word	0x10000000
 810d9f0:	10624dd3 	.word	0x10624dd3
 810d9f4:	002000c5 	.word	0x002000c5

0810d9f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810d9f8:	b084      	sub	sp, #16
 810d9fa:	b580      	push	{r7, lr}
 810d9fc:	b084      	sub	sp, #16
 810d9fe:	af00      	add	r7, sp, #0
 810da00:	6078      	str	r0, [r7, #4]
 810da02:	f107 001c 	add.w	r0, r7, #28
 810da06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810da0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810da0e:	2b01      	cmp	r3, #1
 810da10:	d123      	bne.n	810da5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810da12:	687b      	ldr	r3, [r7, #4]
 810da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810da16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810da1a:	687b      	ldr	r3, [r7, #4]
 810da1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810da1e:	687b      	ldr	r3, [r7, #4]
 810da20:	68db      	ldr	r3, [r3, #12]
 810da22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810da26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810da2a:	687a      	ldr	r2, [r7, #4]
 810da2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810da2e:	687b      	ldr	r3, [r7, #4]
 810da30:	68db      	ldr	r3, [r3, #12]
 810da32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810da36:	687b      	ldr	r3, [r7, #4]
 810da38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810da3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810da3e:	2b01      	cmp	r3, #1
 810da40:	d105      	bne.n	810da4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	68db      	ldr	r3, [r3, #12]
 810da46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810da4a:	687b      	ldr	r3, [r7, #4]
 810da4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810da4e:	6878      	ldr	r0, [r7, #4]
 810da50:	f000 faa6 	bl	810dfa0 <USB_CoreReset>
 810da54:	4603      	mov	r3, r0
 810da56:	73fb      	strb	r3, [r7, #15]
 810da58:	e01b      	b.n	810da92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810da5a:	687b      	ldr	r3, [r7, #4]
 810da5c:	68db      	ldr	r3, [r3, #12]
 810da5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810da62:	687b      	ldr	r3, [r7, #4]
 810da64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810da66:	6878      	ldr	r0, [r7, #4]
 810da68:	f000 fa9a 	bl	810dfa0 <USB_CoreReset>
 810da6c:	4603      	mov	r3, r0
 810da6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810da70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810da74:	2b00      	cmp	r3, #0
 810da76:	d106      	bne.n	810da86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810da78:	687b      	ldr	r3, [r7, #4]
 810da7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810da7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810da80:	687b      	ldr	r3, [r7, #4]
 810da82:	639a      	str	r2, [r3, #56]	@ 0x38
 810da84:	e005      	b.n	810da92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810da86:	687b      	ldr	r3, [r7, #4]
 810da88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810da8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810da8e:	687b      	ldr	r3, [r7, #4]
 810da90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810da92:	7fbb      	ldrb	r3, [r7, #30]
 810da94:	2b01      	cmp	r3, #1
 810da96:	d118      	bne.n	810daca <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810da98:	687b      	ldr	r3, [r7, #4]
 810da9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810da9c:	b29a      	uxth	r2, r3
 810da9e:	687b      	ldr	r3, [r7, #4]
 810daa0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810daa2:	687b      	ldr	r3, [r7, #4]
 810daa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810daa6:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810daaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810daae:	687a      	ldr	r2, [r7, #4]
 810dab0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810dab2:	687b      	ldr	r3, [r7, #4]
 810dab4:	689b      	ldr	r3, [r3, #8]
 810dab6:	f043 0206 	orr.w	r2, r3, #6
 810daba:	687b      	ldr	r3, [r7, #4]
 810dabc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810dabe:	687b      	ldr	r3, [r7, #4]
 810dac0:	689b      	ldr	r3, [r3, #8]
 810dac2:	f043 0220 	orr.w	r2, r3, #32
 810dac6:	687b      	ldr	r3, [r7, #4]
 810dac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810daca:	7bfb      	ldrb	r3, [r7, #15]
}
 810dacc:	4618      	mov	r0, r3
 810dace:	3710      	adds	r7, #16
 810dad0:	46bd      	mov	sp, r7
 810dad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810dad6:	b004      	add	sp, #16
 810dad8:	4770      	bx	lr

0810dada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810dada:	b480      	push	{r7}
 810dadc:	b083      	sub	sp, #12
 810dade:	af00      	add	r7, sp, #0
 810dae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810dae2:	687b      	ldr	r3, [r7, #4]
 810dae4:	689b      	ldr	r3, [r3, #8]
 810dae6:	f023 0201 	bic.w	r2, r3, #1
 810daea:	687b      	ldr	r3, [r7, #4]
 810daec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810daee:	2300      	movs	r3, #0
}
 810daf0:	4618      	mov	r0, r3
 810daf2:	370c      	adds	r7, #12
 810daf4:	46bd      	mov	sp, r7
 810daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dafa:	4770      	bx	lr

0810dafc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810dafc:	b580      	push	{r7, lr}
 810dafe:	b084      	sub	sp, #16
 810db00:	af00      	add	r7, sp, #0
 810db02:	6078      	str	r0, [r7, #4]
 810db04:	460b      	mov	r3, r1
 810db06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810db08:	2300      	movs	r3, #0
 810db0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810db0c:	687b      	ldr	r3, [r7, #4]
 810db0e:	68db      	ldr	r3, [r3, #12]
 810db10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810db14:	687b      	ldr	r3, [r7, #4]
 810db16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810db18:	78fb      	ldrb	r3, [r7, #3]
 810db1a:	2b01      	cmp	r3, #1
 810db1c:	d115      	bne.n	810db4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810db1e:	687b      	ldr	r3, [r7, #4]
 810db20:	68db      	ldr	r3, [r3, #12]
 810db22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810db26:	687b      	ldr	r3, [r7, #4]
 810db28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810db2a:	200a      	movs	r0, #10
 810db2c:	f7f5 f83c 	bl	8102ba8 <HAL_Delay>
      ms += 10U;
 810db30:	68fb      	ldr	r3, [r7, #12]
 810db32:	330a      	adds	r3, #10
 810db34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810db36:	6878      	ldr	r0, [r7, #4]
 810db38:	f000 fa24 	bl	810df84 <USB_GetMode>
 810db3c:	4603      	mov	r3, r0
 810db3e:	2b01      	cmp	r3, #1
 810db40:	d01e      	beq.n	810db80 <USB_SetCurrentMode+0x84>
 810db42:	68fb      	ldr	r3, [r7, #12]
 810db44:	2bc7      	cmp	r3, #199	@ 0xc7
 810db46:	d9f0      	bls.n	810db2a <USB_SetCurrentMode+0x2e>
 810db48:	e01a      	b.n	810db80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810db4a:	78fb      	ldrb	r3, [r7, #3]
 810db4c:	2b00      	cmp	r3, #0
 810db4e:	d115      	bne.n	810db7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810db50:	687b      	ldr	r3, [r7, #4]
 810db52:	68db      	ldr	r3, [r3, #12]
 810db54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810db58:	687b      	ldr	r3, [r7, #4]
 810db5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810db5c:	200a      	movs	r0, #10
 810db5e:	f7f5 f823 	bl	8102ba8 <HAL_Delay>
      ms += 10U;
 810db62:	68fb      	ldr	r3, [r7, #12]
 810db64:	330a      	adds	r3, #10
 810db66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810db68:	6878      	ldr	r0, [r7, #4]
 810db6a:	f000 fa0b 	bl	810df84 <USB_GetMode>
 810db6e:	4603      	mov	r3, r0
 810db70:	2b00      	cmp	r3, #0
 810db72:	d005      	beq.n	810db80 <USB_SetCurrentMode+0x84>
 810db74:	68fb      	ldr	r3, [r7, #12]
 810db76:	2bc7      	cmp	r3, #199	@ 0xc7
 810db78:	d9f0      	bls.n	810db5c <USB_SetCurrentMode+0x60>
 810db7a:	e001      	b.n	810db80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810db7c:	2301      	movs	r3, #1
 810db7e:	e005      	b.n	810db8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810db80:	68fb      	ldr	r3, [r7, #12]
 810db82:	2bc8      	cmp	r3, #200	@ 0xc8
 810db84:	d101      	bne.n	810db8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810db86:	2301      	movs	r3, #1
 810db88:	e000      	b.n	810db8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810db8a:	2300      	movs	r3, #0
}
 810db8c:	4618      	mov	r0, r3
 810db8e:	3710      	adds	r7, #16
 810db90:	46bd      	mov	sp, r7
 810db92:	bd80      	pop	{r7, pc}

0810db94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810db94:	b084      	sub	sp, #16
 810db96:	b580      	push	{r7, lr}
 810db98:	b086      	sub	sp, #24
 810db9a:	af00      	add	r7, sp, #0
 810db9c:	6078      	str	r0, [r7, #4]
 810db9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810dba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810dba6:	2300      	movs	r3, #0
 810dba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810dbaa:	687b      	ldr	r3, [r7, #4]
 810dbac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810dbae:	2300      	movs	r3, #0
 810dbb0:	613b      	str	r3, [r7, #16]
 810dbb2:	e009      	b.n	810dbc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810dbb4:	687a      	ldr	r2, [r7, #4]
 810dbb6:	693b      	ldr	r3, [r7, #16]
 810dbb8:	3340      	adds	r3, #64	@ 0x40
 810dbba:	009b      	lsls	r3, r3, #2
 810dbbc:	4413      	add	r3, r2
 810dbbe:	2200      	movs	r2, #0
 810dbc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810dbc2:	693b      	ldr	r3, [r7, #16]
 810dbc4:	3301      	adds	r3, #1
 810dbc6:	613b      	str	r3, [r7, #16]
 810dbc8:	693b      	ldr	r3, [r7, #16]
 810dbca:	2b0e      	cmp	r3, #14
 810dbcc:	d9f2      	bls.n	810dbb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810dbce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810dbd2:	2b00      	cmp	r3, #0
 810dbd4:	d11c      	bne.n	810dc10 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810dbd6:	68fb      	ldr	r3, [r7, #12]
 810dbd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dbdc:	685b      	ldr	r3, [r3, #4]
 810dbde:	68fa      	ldr	r2, [r7, #12]
 810dbe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810dbe4:	f043 0302 	orr.w	r3, r3, #2
 810dbe8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810dbea:	687b      	ldr	r3, [r7, #4]
 810dbec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dbee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810dbf2:	687b      	ldr	r3, [r7, #4]
 810dbf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810dbf6:	687b      	ldr	r3, [r7, #4]
 810dbf8:	681b      	ldr	r3, [r3, #0]
 810dbfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810dbfe:	687b      	ldr	r3, [r7, #4]
 810dc00:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810dc02:	687b      	ldr	r3, [r7, #4]
 810dc04:	681b      	ldr	r3, [r3, #0]
 810dc06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810dc0a:	687b      	ldr	r3, [r7, #4]
 810dc0c:	601a      	str	r2, [r3, #0]
 810dc0e:	e005      	b.n	810dc1c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810dc10:	687b      	ldr	r3, [r7, #4]
 810dc12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dc14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810dc18:	687b      	ldr	r3, [r7, #4]
 810dc1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810dc1c:	68fb      	ldr	r3, [r7, #12]
 810dc1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810dc22:	461a      	mov	r2, r3
 810dc24:	2300      	movs	r3, #0
 810dc26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810dc28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810dc2c:	2b01      	cmp	r3, #1
 810dc2e:	d10d      	bne.n	810dc4c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810dc30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810dc34:	2b00      	cmp	r3, #0
 810dc36:	d104      	bne.n	810dc42 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810dc38:	2100      	movs	r1, #0
 810dc3a:	6878      	ldr	r0, [r7, #4]
 810dc3c:	f000 f968 	bl	810df10 <USB_SetDevSpeed>
 810dc40:	e008      	b.n	810dc54 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810dc42:	2101      	movs	r1, #1
 810dc44:	6878      	ldr	r0, [r7, #4]
 810dc46:	f000 f963 	bl	810df10 <USB_SetDevSpeed>
 810dc4a:	e003      	b.n	810dc54 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810dc4c:	2103      	movs	r1, #3
 810dc4e:	6878      	ldr	r0, [r7, #4]
 810dc50:	f000 f95e 	bl	810df10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810dc54:	2110      	movs	r1, #16
 810dc56:	6878      	ldr	r0, [r7, #4]
 810dc58:	f000 f8fa 	bl	810de50 <USB_FlushTxFifo>
 810dc5c:	4603      	mov	r3, r0
 810dc5e:	2b00      	cmp	r3, #0
 810dc60:	d001      	beq.n	810dc66 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810dc62:	2301      	movs	r3, #1
 810dc64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810dc66:	6878      	ldr	r0, [r7, #4]
 810dc68:	f000 f924 	bl	810deb4 <USB_FlushRxFifo>
 810dc6c:	4603      	mov	r3, r0
 810dc6e:	2b00      	cmp	r3, #0
 810dc70:	d001      	beq.n	810dc76 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810dc72:	2301      	movs	r3, #1
 810dc74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810dc76:	68fb      	ldr	r3, [r7, #12]
 810dc78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dc7c:	461a      	mov	r2, r3
 810dc7e:	2300      	movs	r3, #0
 810dc80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810dc82:	68fb      	ldr	r3, [r7, #12]
 810dc84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dc88:	461a      	mov	r2, r3
 810dc8a:	2300      	movs	r3, #0
 810dc8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810dc8e:	68fb      	ldr	r3, [r7, #12]
 810dc90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810dc94:	461a      	mov	r2, r3
 810dc96:	2300      	movs	r3, #0
 810dc98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dc9a:	2300      	movs	r3, #0
 810dc9c:	613b      	str	r3, [r7, #16]
 810dc9e:	e043      	b.n	810dd28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810dca0:	693b      	ldr	r3, [r7, #16]
 810dca2:	015a      	lsls	r2, r3, #5
 810dca4:	68fb      	ldr	r3, [r7, #12]
 810dca6:	4413      	add	r3, r2
 810dca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dcac:	681b      	ldr	r3, [r3, #0]
 810dcae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810dcb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810dcb6:	d118      	bne.n	810dcea <USB_DevInit+0x156>
    {
      if (i == 0U)
 810dcb8:	693b      	ldr	r3, [r7, #16]
 810dcba:	2b00      	cmp	r3, #0
 810dcbc:	d10a      	bne.n	810dcd4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810dcbe:	693b      	ldr	r3, [r7, #16]
 810dcc0:	015a      	lsls	r2, r3, #5
 810dcc2:	68fb      	ldr	r3, [r7, #12]
 810dcc4:	4413      	add	r3, r2
 810dcc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dcca:	461a      	mov	r2, r3
 810dccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810dcd0:	6013      	str	r3, [r2, #0]
 810dcd2:	e013      	b.n	810dcfc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810dcd4:	693b      	ldr	r3, [r7, #16]
 810dcd6:	015a      	lsls	r2, r3, #5
 810dcd8:	68fb      	ldr	r3, [r7, #12]
 810dcda:	4413      	add	r3, r2
 810dcdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dce0:	461a      	mov	r2, r3
 810dce2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810dce6:	6013      	str	r3, [r2, #0]
 810dce8:	e008      	b.n	810dcfc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810dcea:	693b      	ldr	r3, [r7, #16]
 810dcec:	015a      	lsls	r2, r3, #5
 810dcee:	68fb      	ldr	r3, [r7, #12]
 810dcf0:	4413      	add	r3, r2
 810dcf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dcf6:	461a      	mov	r2, r3
 810dcf8:	2300      	movs	r3, #0
 810dcfa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810dcfc:	693b      	ldr	r3, [r7, #16]
 810dcfe:	015a      	lsls	r2, r3, #5
 810dd00:	68fb      	ldr	r3, [r7, #12]
 810dd02:	4413      	add	r3, r2
 810dd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dd08:	461a      	mov	r2, r3
 810dd0a:	2300      	movs	r3, #0
 810dd0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810dd0e:	693b      	ldr	r3, [r7, #16]
 810dd10:	015a      	lsls	r2, r3, #5
 810dd12:	68fb      	ldr	r3, [r7, #12]
 810dd14:	4413      	add	r3, r2
 810dd16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810dd1a:	461a      	mov	r2, r3
 810dd1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810dd20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dd22:	693b      	ldr	r3, [r7, #16]
 810dd24:	3301      	adds	r3, #1
 810dd26:	613b      	str	r3, [r7, #16]
 810dd28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810dd2c:	461a      	mov	r2, r3
 810dd2e:	693b      	ldr	r3, [r7, #16]
 810dd30:	4293      	cmp	r3, r2
 810dd32:	d3b5      	bcc.n	810dca0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810dd34:	2300      	movs	r3, #0
 810dd36:	613b      	str	r3, [r7, #16]
 810dd38:	e043      	b.n	810ddc2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810dd3a:	693b      	ldr	r3, [r7, #16]
 810dd3c:	015a      	lsls	r2, r3, #5
 810dd3e:	68fb      	ldr	r3, [r7, #12]
 810dd40:	4413      	add	r3, r2
 810dd42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dd46:	681b      	ldr	r3, [r3, #0]
 810dd48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810dd4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810dd50:	d118      	bne.n	810dd84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810dd52:	693b      	ldr	r3, [r7, #16]
 810dd54:	2b00      	cmp	r3, #0
 810dd56:	d10a      	bne.n	810dd6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810dd58:	693b      	ldr	r3, [r7, #16]
 810dd5a:	015a      	lsls	r2, r3, #5
 810dd5c:	68fb      	ldr	r3, [r7, #12]
 810dd5e:	4413      	add	r3, r2
 810dd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dd64:	461a      	mov	r2, r3
 810dd66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810dd6a:	6013      	str	r3, [r2, #0]
 810dd6c:	e013      	b.n	810dd96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810dd6e:	693b      	ldr	r3, [r7, #16]
 810dd70:	015a      	lsls	r2, r3, #5
 810dd72:	68fb      	ldr	r3, [r7, #12]
 810dd74:	4413      	add	r3, r2
 810dd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dd7a:	461a      	mov	r2, r3
 810dd7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810dd80:	6013      	str	r3, [r2, #0]
 810dd82:	e008      	b.n	810dd96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810dd84:	693b      	ldr	r3, [r7, #16]
 810dd86:	015a      	lsls	r2, r3, #5
 810dd88:	68fb      	ldr	r3, [r7, #12]
 810dd8a:	4413      	add	r3, r2
 810dd8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dd90:	461a      	mov	r2, r3
 810dd92:	2300      	movs	r3, #0
 810dd94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810dd96:	693b      	ldr	r3, [r7, #16]
 810dd98:	015a      	lsls	r2, r3, #5
 810dd9a:	68fb      	ldr	r3, [r7, #12]
 810dd9c:	4413      	add	r3, r2
 810dd9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810dda2:	461a      	mov	r2, r3
 810dda4:	2300      	movs	r3, #0
 810dda6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810dda8:	693b      	ldr	r3, [r7, #16]
 810ddaa:	015a      	lsls	r2, r3, #5
 810ddac:	68fb      	ldr	r3, [r7, #12]
 810ddae:	4413      	add	r3, r2
 810ddb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ddb4:	461a      	mov	r2, r3
 810ddb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810ddba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ddbc:	693b      	ldr	r3, [r7, #16]
 810ddbe:	3301      	adds	r3, #1
 810ddc0:	613b      	str	r3, [r7, #16]
 810ddc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810ddc6:	461a      	mov	r2, r3
 810ddc8:	693b      	ldr	r3, [r7, #16]
 810ddca:	4293      	cmp	r3, r2
 810ddcc:	d3b5      	bcc.n	810dd3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810ddce:	68fb      	ldr	r3, [r7, #12]
 810ddd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ddd4:	691b      	ldr	r3, [r3, #16]
 810ddd6:	68fa      	ldr	r2, [r7, #12]
 810ddd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810dddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810dde0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810dde2:	687b      	ldr	r3, [r7, #4]
 810dde4:	2200      	movs	r2, #0
 810dde6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810dde8:	687b      	ldr	r3, [r7, #4]
 810ddea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810ddee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ddf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810ddf4:	2b00      	cmp	r3, #0
 810ddf6:	d105      	bne.n	810de04 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ddf8:	687b      	ldr	r3, [r7, #4]
 810ddfa:	699b      	ldr	r3, [r3, #24]
 810ddfc:	f043 0210 	orr.w	r2, r3, #16
 810de00:	687b      	ldr	r3, [r7, #4]
 810de02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810de04:	687b      	ldr	r3, [r7, #4]
 810de06:	699a      	ldr	r2, [r3, #24]
 810de08:	4b10      	ldr	r3, [pc, #64]	@ (810de4c <USB_DevInit+0x2b8>)
 810de0a:	4313      	orrs	r3, r2
 810de0c:	687a      	ldr	r2, [r7, #4]
 810de0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810de10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810de14:	2b00      	cmp	r3, #0
 810de16:	d005      	beq.n	810de24 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810de18:	687b      	ldr	r3, [r7, #4]
 810de1a:	699b      	ldr	r3, [r3, #24]
 810de1c:	f043 0208 	orr.w	r2, r3, #8
 810de20:	687b      	ldr	r3, [r7, #4]
 810de22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810de24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810de28:	2b01      	cmp	r3, #1
 810de2a:	d107      	bne.n	810de3c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810de2c:	687b      	ldr	r3, [r7, #4]
 810de2e:	699b      	ldr	r3, [r3, #24]
 810de30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810de34:	f043 0304 	orr.w	r3, r3, #4
 810de38:	687a      	ldr	r2, [r7, #4]
 810de3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810de3c:	7dfb      	ldrb	r3, [r7, #23]
}
 810de3e:	4618      	mov	r0, r3
 810de40:	3718      	adds	r7, #24
 810de42:	46bd      	mov	sp, r7
 810de44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810de48:	b004      	add	sp, #16
 810de4a:	4770      	bx	lr
 810de4c:	803c3800 	.word	0x803c3800

0810de50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810de50:	b480      	push	{r7}
 810de52:	b085      	sub	sp, #20
 810de54:	af00      	add	r7, sp, #0
 810de56:	6078      	str	r0, [r7, #4]
 810de58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810de5a:	2300      	movs	r3, #0
 810de5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810de5e:	68fb      	ldr	r3, [r7, #12]
 810de60:	3301      	adds	r3, #1
 810de62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810de64:	68fb      	ldr	r3, [r7, #12]
 810de66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810de6a:	d901      	bls.n	810de70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810de6c:	2303      	movs	r3, #3
 810de6e:	e01b      	b.n	810dea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810de70:	687b      	ldr	r3, [r7, #4]
 810de72:	691b      	ldr	r3, [r3, #16]
 810de74:	2b00      	cmp	r3, #0
 810de76:	daf2      	bge.n	810de5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810de78:	2300      	movs	r3, #0
 810de7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810de7c:	683b      	ldr	r3, [r7, #0]
 810de7e:	019b      	lsls	r3, r3, #6
 810de80:	f043 0220 	orr.w	r2, r3, #32
 810de84:	687b      	ldr	r3, [r7, #4]
 810de86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810de88:	68fb      	ldr	r3, [r7, #12]
 810de8a:	3301      	adds	r3, #1
 810de8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810de8e:	68fb      	ldr	r3, [r7, #12]
 810de90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810de94:	d901      	bls.n	810de9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810de96:	2303      	movs	r3, #3
 810de98:	e006      	b.n	810dea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810de9a:	687b      	ldr	r3, [r7, #4]
 810de9c:	691b      	ldr	r3, [r3, #16]
 810de9e:	f003 0320 	and.w	r3, r3, #32
 810dea2:	2b20      	cmp	r3, #32
 810dea4:	d0f0      	beq.n	810de88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810dea6:	2300      	movs	r3, #0
}
 810dea8:	4618      	mov	r0, r3
 810deaa:	3714      	adds	r7, #20
 810deac:	46bd      	mov	sp, r7
 810deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810deb2:	4770      	bx	lr

0810deb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810deb4:	b480      	push	{r7}
 810deb6:	b085      	sub	sp, #20
 810deb8:	af00      	add	r7, sp, #0
 810deba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810debc:	2300      	movs	r3, #0
 810debe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810dec0:	68fb      	ldr	r3, [r7, #12]
 810dec2:	3301      	adds	r3, #1
 810dec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dec6:	68fb      	ldr	r3, [r7, #12]
 810dec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810decc:	d901      	bls.n	810ded2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810dece:	2303      	movs	r3, #3
 810ded0:	e018      	b.n	810df04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810ded2:	687b      	ldr	r3, [r7, #4]
 810ded4:	691b      	ldr	r3, [r3, #16]
 810ded6:	2b00      	cmp	r3, #0
 810ded8:	daf2      	bge.n	810dec0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810deda:	2300      	movs	r3, #0
 810dedc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810dede:	687b      	ldr	r3, [r7, #4]
 810dee0:	2210      	movs	r2, #16
 810dee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810dee4:	68fb      	ldr	r3, [r7, #12]
 810dee6:	3301      	adds	r3, #1
 810dee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810deea:	68fb      	ldr	r3, [r7, #12]
 810deec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810def0:	d901      	bls.n	810def6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810def2:	2303      	movs	r3, #3
 810def4:	e006      	b.n	810df04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810def6:	687b      	ldr	r3, [r7, #4]
 810def8:	691b      	ldr	r3, [r3, #16]
 810defa:	f003 0310 	and.w	r3, r3, #16
 810defe:	2b10      	cmp	r3, #16
 810df00:	d0f0      	beq.n	810dee4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810df02:	2300      	movs	r3, #0
}
 810df04:	4618      	mov	r0, r3
 810df06:	3714      	adds	r7, #20
 810df08:	46bd      	mov	sp, r7
 810df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df0e:	4770      	bx	lr

0810df10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810df10:	b480      	push	{r7}
 810df12:	b085      	sub	sp, #20
 810df14:	af00      	add	r7, sp, #0
 810df16:	6078      	str	r0, [r7, #4]
 810df18:	460b      	mov	r3, r1
 810df1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810df1c:	687b      	ldr	r3, [r7, #4]
 810df1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810df20:	68fb      	ldr	r3, [r7, #12]
 810df22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810df26:	681a      	ldr	r2, [r3, #0]
 810df28:	78fb      	ldrb	r3, [r7, #3]
 810df2a:	68f9      	ldr	r1, [r7, #12]
 810df2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810df30:	4313      	orrs	r3, r2
 810df32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810df34:	2300      	movs	r3, #0
}
 810df36:	4618      	mov	r0, r3
 810df38:	3714      	adds	r7, #20
 810df3a:	46bd      	mov	sp, r7
 810df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df40:	4770      	bx	lr

0810df42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810df42:	b480      	push	{r7}
 810df44:	b085      	sub	sp, #20
 810df46:	af00      	add	r7, sp, #0
 810df48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810df4a:	687b      	ldr	r3, [r7, #4]
 810df4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810df4e:	68fb      	ldr	r3, [r7, #12]
 810df50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810df54:	681b      	ldr	r3, [r3, #0]
 810df56:	68fa      	ldr	r2, [r7, #12]
 810df58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810df5c:	f023 0303 	bic.w	r3, r3, #3
 810df60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810df62:	68fb      	ldr	r3, [r7, #12]
 810df64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810df68:	685b      	ldr	r3, [r3, #4]
 810df6a:	68fa      	ldr	r2, [r7, #12]
 810df6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810df70:	f043 0302 	orr.w	r3, r3, #2
 810df74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810df76:	2300      	movs	r3, #0
}
 810df78:	4618      	mov	r0, r3
 810df7a:	3714      	adds	r7, #20
 810df7c:	46bd      	mov	sp, r7
 810df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df82:	4770      	bx	lr

0810df84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810df84:	b480      	push	{r7}
 810df86:	b083      	sub	sp, #12
 810df88:	af00      	add	r7, sp, #0
 810df8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810df8c:	687b      	ldr	r3, [r7, #4]
 810df8e:	695b      	ldr	r3, [r3, #20]
 810df90:	f003 0301 	and.w	r3, r3, #1
}
 810df94:	4618      	mov	r0, r3
 810df96:	370c      	adds	r7, #12
 810df98:	46bd      	mov	sp, r7
 810df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df9e:	4770      	bx	lr

0810dfa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810dfa0:	b480      	push	{r7}
 810dfa2:	b085      	sub	sp, #20
 810dfa4:	af00      	add	r7, sp, #0
 810dfa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810dfa8:	2300      	movs	r3, #0
 810dfaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810dfac:	68fb      	ldr	r3, [r7, #12]
 810dfae:	3301      	adds	r3, #1
 810dfb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dfb2:	68fb      	ldr	r3, [r7, #12]
 810dfb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810dfb8:	d901      	bls.n	810dfbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810dfba:	2303      	movs	r3, #3
 810dfbc:	e01b      	b.n	810dff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810dfbe:	687b      	ldr	r3, [r7, #4]
 810dfc0:	691b      	ldr	r3, [r3, #16]
 810dfc2:	2b00      	cmp	r3, #0
 810dfc4:	daf2      	bge.n	810dfac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810dfc6:	2300      	movs	r3, #0
 810dfc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810dfca:	687b      	ldr	r3, [r7, #4]
 810dfcc:	691b      	ldr	r3, [r3, #16]
 810dfce:	f043 0201 	orr.w	r2, r3, #1
 810dfd2:	687b      	ldr	r3, [r7, #4]
 810dfd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810dfd6:	68fb      	ldr	r3, [r7, #12]
 810dfd8:	3301      	adds	r3, #1
 810dfda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810dfdc:	68fb      	ldr	r3, [r7, #12]
 810dfde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810dfe2:	d901      	bls.n	810dfe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810dfe4:	2303      	movs	r3, #3
 810dfe6:	e006      	b.n	810dff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810dfe8:	687b      	ldr	r3, [r7, #4]
 810dfea:	691b      	ldr	r3, [r3, #16]
 810dfec:	f003 0301 	and.w	r3, r3, #1
 810dff0:	2b01      	cmp	r3, #1
 810dff2:	d0f0      	beq.n	810dfd6 <USB_CoreReset+0x36>

  return HAL_OK;
 810dff4:	2300      	movs	r3, #0
}
 810dff6:	4618      	mov	r0, r3
 810dff8:	3714      	adds	r7, #20
 810dffa:	46bd      	mov	sp, r7
 810dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e000:	4770      	bx	lr
	...

0810e004 <std>:
 810e004:	2300      	movs	r3, #0
 810e006:	b510      	push	{r4, lr}
 810e008:	4604      	mov	r4, r0
 810e00a:	e9c0 3300 	strd	r3, r3, [r0]
 810e00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810e012:	6083      	str	r3, [r0, #8]
 810e014:	8181      	strh	r1, [r0, #12]
 810e016:	6643      	str	r3, [r0, #100]	@ 0x64
 810e018:	81c2      	strh	r2, [r0, #14]
 810e01a:	6183      	str	r3, [r0, #24]
 810e01c:	4619      	mov	r1, r3
 810e01e:	2208      	movs	r2, #8
 810e020:	305c      	adds	r0, #92	@ 0x5c
 810e022:	f000 f9e7 	bl	810e3f4 <memset>
 810e026:	4b0d      	ldr	r3, [pc, #52]	@ (810e05c <std+0x58>)
 810e028:	6263      	str	r3, [r4, #36]	@ 0x24
 810e02a:	4b0d      	ldr	r3, [pc, #52]	@ (810e060 <std+0x5c>)
 810e02c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810e02e:	4b0d      	ldr	r3, [pc, #52]	@ (810e064 <std+0x60>)
 810e030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810e032:	4b0d      	ldr	r3, [pc, #52]	@ (810e068 <std+0x64>)
 810e034:	6323      	str	r3, [r4, #48]	@ 0x30
 810e036:	4b0d      	ldr	r3, [pc, #52]	@ (810e06c <std+0x68>)
 810e038:	6224      	str	r4, [r4, #32]
 810e03a:	429c      	cmp	r4, r3
 810e03c:	d006      	beq.n	810e04c <std+0x48>
 810e03e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810e042:	4294      	cmp	r4, r2
 810e044:	d002      	beq.n	810e04c <std+0x48>
 810e046:	33d0      	adds	r3, #208	@ 0xd0
 810e048:	429c      	cmp	r4, r3
 810e04a:	d105      	bne.n	810e058 <std+0x54>
 810e04c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810e050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e054:	f000 ba46 	b.w	810e4e4 <__retarget_lock_init_recursive>
 810e058:	bd10      	pop	{r4, pc}
 810e05a:	bf00      	nop
 810e05c:	0810e245 	.word	0x0810e245
 810e060:	0810e267 	.word	0x0810e267
 810e064:	0810e29f 	.word	0x0810e29f
 810e068:	0810e2c3 	.word	0x0810e2c3
 810e06c:	10000ea8 	.word	0x10000ea8

0810e070 <stdio_exit_handler>:
 810e070:	4a02      	ldr	r2, [pc, #8]	@ (810e07c <stdio_exit_handler+0xc>)
 810e072:	4903      	ldr	r1, [pc, #12]	@ (810e080 <stdio_exit_handler+0x10>)
 810e074:	4803      	ldr	r0, [pc, #12]	@ (810e084 <stdio_exit_handler+0x14>)
 810e076:	f000 b869 	b.w	810e14c <_fwalk_sglue>
 810e07a:	bf00      	nop
 810e07c:	10000010 	.word	0x10000010
 810e080:	0810e7e5 	.word	0x0810e7e5
 810e084:	10000020 	.word	0x10000020

0810e088 <cleanup_stdio>:
 810e088:	6841      	ldr	r1, [r0, #4]
 810e08a:	4b0c      	ldr	r3, [pc, #48]	@ (810e0bc <cleanup_stdio+0x34>)
 810e08c:	4299      	cmp	r1, r3
 810e08e:	b510      	push	{r4, lr}
 810e090:	4604      	mov	r4, r0
 810e092:	d001      	beq.n	810e098 <cleanup_stdio+0x10>
 810e094:	f000 fba6 	bl	810e7e4 <_fflush_r>
 810e098:	68a1      	ldr	r1, [r4, #8]
 810e09a:	4b09      	ldr	r3, [pc, #36]	@ (810e0c0 <cleanup_stdio+0x38>)
 810e09c:	4299      	cmp	r1, r3
 810e09e:	d002      	beq.n	810e0a6 <cleanup_stdio+0x1e>
 810e0a0:	4620      	mov	r0, r4
 810e0a2:	f000 fb9f 	bl	810e7e4 <_fflush_r>
 810e0a6:	68e1      	ldr	r1, [r4, #12]
 810e0a8:	4b06      	ldr	r3, [pc, #24]	@ (810e0c4 <cleanup_stdio+0x3c>)
 810e0aa:	4299      	cmp	r1, r3
 810e0ac:	d004      	beq.n	810e0b8 <cleanup_stdio+0x30>
 810e0ae:	4620      	mov	r0, r4
 810e0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e0b4:	f000 bb96 	b.w	810e7e4 <_fflush_r>
 810e0b8:	bd10      	pop	{r4, pc}
 810e0ba:	bf00      	nop
 810e0bc:	10000ea8 	.word	0x10000ea8
 810e0c0:	10000f10 	.word	0x10000f10
 810e0c4:	10000f78 	.word	0x10000f78

0810e0c8 <global_stdio_init.part.0>:
 810e0c8:	b510      	push	{r4, lr}
 810e0ca:	4b0b      	ldr	r3, [pc, #44]	@ (810e0f8 <global_stdio_init.part.0+0x30>)
 810e0cc:	4c0b      	ldr	r4, [pc, #44]	@ (810e0fc <global_stdio_init.part.0+0x34>)
 810e0ce:	4a0c      	ldr	r2, [pc, #48]	@ (810e100 <global_stdio_init.part.0+0x38>)
 810e0d0:	601a      	str	r2, [r3, #0]
 810e0d2:	4620      	mov	r0, r4
 810e0d4:	2200      	movs	r2, #0
 810e0d6:	2104      	movs	r1, #4
 810e0d8:	f7ff ff94 	bl	810e004 <std>
 810e0dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810e0e0:	2201      	movs	r2, #1
 810e0e2:	2109      	movs	r1, #9
 810e0e4:	f7ff ff8e 	bl	810e004 <std>
 810e0e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810e0ec:	2202      	movs	r2, #2
 810e0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e0f2:	2112      	movs	r1, #18
 810e0f4:	f7ff bf86 	b.w	810e004 <std>
 810e0f8:	10000fe0 	.word	0x10000fe0
 810e0fc:	10000ea8 	.word	0x10000ea8
 810e100:	0810e071 	.word	0x0810e071

0810e104 <__sfp_lock_acquire>:
 810e104:	4801      	ldr	r0, [pc, #4]	@ (810e10c <__sfp_lock_acquire+0x8>)
 810e106:	f000 b9ee 	b.w	810e4e6 <__retarget_lock_acquire_recursive>
 810e10a:	bf00      	nop
 810e10c:	10000fe9 	.word	0x10000fe9

0810e110 <__sfp_lock_release>:
 810e110:	4801      	ldr	r0, [pc, #4]	@ (810e118 <__sfp_lock_release+0x8>)
 810e112:	f000 b9e9 	b.w	810e4e8 <__retarget_lock_release_recursive>
 810e116:	bf00      	nop
 810e118:	10000fe9 	.word	0x10000fe9

0810e11c <__sinit>:
 810e11c:	b510      	push	{r4, lr}
 810e11e:	4604      	mov	r4, r0
 810e120:	f7ff fff0 	bl	810e104 <__sfp_lock_acquire>
 810e124:	6a23      	ldr	r3, [r4, #32]
 810e126:	b11b      	cbz	r3, 810e130 <__sinit+0x14>
 810e128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810e12c:	f7ff bff0 	b.w	810e110 <__sfp_lock_release>
 810e130:	4b04      	ldr	r3, [pc, #16]	@ (810e144 <__sinit+0x28>)
 810e132:	6223      	str	r3, [r4, #32]
 810e134:	4b04      	ldr	r3, [pc, #16]	@ (810e148 <__sinit+0x2c>)
 810e136:	681b      	ldr	r3, [r3, #0]
 810e138:	2b00      	cmp	r3, #0
 810e13a:	d1f5      	bne.n	810e128 <__sinit+0xc>
 810e13c:	f7ff ffc4 	bl	810e0c8 <global_stdio_init.part.0>
 810e140:	e7f2      	b.n	810e128 <__sinit+0xc>
 810e142:	bf00      	nop
 810e144:	0810e089 	.word	0x0810e089
 810e148:	10000fe0 	.word	0x10000fe0

0810e14c <_fwalk_sglue>:
 810e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e150:	4607      	mov	r7, r0
 810e152:	4688      	mov	r8, r1
 810e154:	4614      	mov	r4, r2
 810e156:	2600      	movs	r6, #0
 810e158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810e15c:	f1b9 0901 	subs.w	r9, r9, #1
 810e160:	d505      	bpl.n	810e16e <_fwalk_sglue+0x22>
 810e162:	6824      	ldr	r4, [r4, #0]
 810e164:	2c00      	cmp	r4, #0
 810e166:	d1f7      	bne.n	810e158 <_fwalk_sglue+0xc>
 810e168:	4630      	mov	r0, r6
 810e16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e16e:	89ab      	ldrh	r3, [r5, #12]
 810e170:	2b01      	cmp	r3, #1
 810e172:	d907      	bls.n	810e184 <_fwalk_sglue+0x38>
 810e174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810e178:	3301      	adds	r3, #1
 810e17a:	d003      	beq.n	810e184 <_fwalk_sglue+0x38>
 810e17c:	4629      	mov	r1, r5
 810e17e:	4638      	mov	r0, r7
 810e180:	47c0      	blx	r8
 810e182:	4306      	orrs	r6, r0
 810e184:	3568      	adds	r5, #104	@ 0x68
 810e186:	e7e9      	b.n	810e15c <_fwalk_sglue+0x10>

0810e188 <_puts_r>:
 810e188:	6a03      	ldr	r3, [r0, #32]
 810e18a:	b570      	push	{r4, r5, r6, lr}
 810e18c:	6884      	ldr	r4, [r0, #8]
 810e18e:	4605      	mov	r5, r0
 810e190:	460e      	mov	r6, r1
 810e192:	b90b      	cbnz	r3, 810e198 <_puts_r+0x10>
 810e194:	f7ff ffc2 	bl	810e11c <__sinit>
 810e198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e19a:	07db      	lsls	r3, r3, #31
 810e19c:	d405      	bmi.n	810e1aa <_puts_r+0x22>
 810e19e:	89a3      	ldrh	r3, [r4, #12]
 810e1a0:	0598      	lsls	r0, r3, #22
 810e1a2:	d402      	bmi.n	810e1aa <_puts_r+0x22>
 810e1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e1a6:	f000 f99e 	bl	810e4e6 <__retarget_lock_acquire_recursive>
 810e1aa:	89a3      	ldrh	r3, [r4, #12]
 810e1ac:	0719      	lsls	r1, r3, #28
 810e1ae:	d502      	bpl.n	810e1b6 <_puts_r+0x2e>
 810e1b0:	6923      	ldr	r3, [r4, #16]
 810e1b2:	2b00      	cmp	r3, #0
 810e1b4:	d135      	bne.n	810e222 <_puts_r+0x9a>
 810e1b6:	4621      	mov	r1, r4
 810e1b8:	4628      	mov	r0, r5
 810e1ba:	f000 f8c5 	bl	810e348 <__swsetup_r>
 810e1be:	b380      	cbz	r0, 810e222 <_puts_r+0x9a>
 810e1c0:	f04f 35ff 	mov.w	r5, #4294967295
 810e1c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e1c6:	07da      	lsls	r2, r3, #31
 810e1c8:	d405      	bmi.n	810e1d6 <_puts_r+0x4e>
 810e1ca:	89a3      	ldrh	r3, [r4, #12]
 810e1cc:	059b      	lsls	r3, r3, #22
 810e1ce:	d402      	bmi.n	810e1d6 <_puts_r+0x4e>
 810e1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e1d2:	f000 f989 	bl	810e4e8 <__retarget_lock_release_recursive>
 810e1d6:	4628      	mov	r0, r5
 810e1d8:	bd70      	pop	{r4, r5, r6, pc}
 810e1da:	2b00      	cmp	r3, #0
 810e1dc:	da04      	bge.n	810e1e8 <_puts_r+0x60>
 810e1de:	69a2      	ldr	r2, [r4, #24]
 810e1e0:	429a      	cmp	r2, r3
 810e1e2:	dc17      	bgt.n	810e214 <_puts_r+0x8c>
 810e1e4:	290a      	cmp	r1, #10
 810e1e6:	d015      	beq.n	810e214 <_puts_r+0x8c>
 810e1e8:	6823      	ldr	r3, [r4, #0]
 810e1ea:	1c5a      	adds	r2, r3, #1
 810e1ec:	6022      	str	r2, [r4, #0]
 810e1ee:	7019      	strb	r1, [r3, #0]
 810e1f0:	68a3      	ldr	r3, [r4, #8]
 810e1f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810e1f6:	3b01      	subs	r3, #1
 810e1f8:	60a3      	str	r3, [r4, #8]
 810e1fa:	2900      	cmp	r1, #0
 810e1fc:	d1ed      	bne.n	810e1da <_puts_r+0x52>
 810e1fe:	2b00      	cmp	r3, #0
 810e200:	da11      	bge.n	810e226 <_puts_r+0x9e>
 810e202:	4622      	mov	r2, r4
 810e204:	210a      	movs	r1, #10
 810e206:	4628      	mov	r0, r5
 810e208:	f000 f85f 	bl	810e2ca <__swbuf_r>
 810e20c:	3001      	adds	r0, #1
 810e20e:	d0d7      	beq.n	810e1c0 <_puts_r+0x38>
 810e210:	250a      	movs	r5, #10
 810e212:	e7d7      	b.n	810e1c4 <_puts_r+0x3c>
 810e214:	4622      	mov	r2, r4
 810e216:	4628      	mov	r0, r5
 810e218:	f000 f857 	bl	810e2ca <__swbuf_r>
 810e21c:	3001      	adds	r0, #1
 810e21e:	d1e7      	bne.n	810e1f0 <_puts_r+0x68>
 810e220:	e7ce      	b.n	810e1c0 <_puts_r+0x38>
 810e222:	3e01      	subs	r6, #1
 810e224:	e7e4      	b.n	810e1f0 <_puts_r+0x68>
 810e226:	6823      	ldr	r3, [r4, #0]
 810e228:	1c5a      	adds	r2, r3, #1
 810e22a:	6022      	str	r2, [r4, #0]
 810e22c:	220a      	movs	r2, #10
 810e22e:	701a      	strb	r2, [r3, #0]
 810e230:	e7ee      	b.n	810e210 <_puts_r+0x88>
	...

0810e234 <puts>:
 810e234:	4b02      	ldr	r3, [pc, #8]	@ (810e240 <puts+0xc>)
 810e236:	4601      	mov	r1, r0
 810e238:	6818      	ldr	r0, [r3, #0]
 810e23a:	f7ff bfa5 	b.w	810e188 <_puts_r>
 810e23e:	bf00      	nop
 810e240:	1000001c 	.word	0x1000001c

0810e244 <__sread>:
 810e244:	b510      	push	{r4, lr}
 810e246:	460c      	mov	r4, r1
 810e248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e24c:	f000 f8fc 	bl	810e448 <_read_r>
 810e250:	2800      	cmp	r0, #0
 810e252:	bfab      	itete	ge
 810e254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810e256:	89a3      	ldrhlt	r3, [r4, #12]
 810e258:	181b      	addge	r3, r3, r0
 810e25a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810e25e:	bfac      	ite	ge
 810e260:	6563      	strge	r3, [r4, #84]	@ 0x54
 810e262:	81a3      	strhlt	r3, [r4, #12]
 810e264:	bd10      	pop	{r4, pc}

0810e266 <__swrite>:
 810e266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e26a:	461f      	mov	r7, r3
 810e26c:	898b      	ldrh	r3, [r1, #12]
 810e26e:	05db      	lsls	r3, r3, #23
 810e270:	4605      	mov	r5, r0
 810e272:	460c      	mov	r4, r1
 810e274:	4616      	mov	r6, r2
 810e276:	d505      	bpl.n	810e284 <__swrite+0x1e>
 810e278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e27c:	2302      	movs	r3, #2
 810e27e:	2200      	movs	r2, #0
 810e280:	f000 f8d0 	bl	810e424 <_lseek_r>
 810e284:	89a3      	ldrh	r3, [r4, #12]
 810e286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e28a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810e28e:	81a3      	strh	r3, [r4, #12]
 810e290:	4632      	mov	r2, r6
 810e292:	463b      	mov	r3, r7
 810e294:	4628      	mov	r0, r5
 810e296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e29a:	f000 b8e7 	b.w	810e46c <_write_r>

0810e29e <__sseek>:
 810e29e:	b510      	push	{r4, lr}
 810e2a0:	460c      	mov	r4, r1
 810e2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e2a6:	f000 f8bd 	bl	810e424 <_lseek_r>
 810e2aa:	1c43      	adds	r3, r0, #1
 810e2ac:	89a3      	ldrh	r3, [r4, #12]
 810e2ae:	bf15      	itete	ne
 810e2b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 810e2b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810e2b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810e2ba:	81a3      	strheq	r3, [r4, #12]
 810e2bc:	bf18      	it	ne
 810e2be:	81a3      	strhne	r3, [r4, #12]
 810e2c0:	bd10      	pop	{r4, pc}

0810e2c2 <__sclose>:
 810e2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e2c6:	f000 b89d 	b.w	810e404 <_close_r>

0810e2ca <__swbuf_r>:
 810e2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e2cc:	460e      	mov	r6, r1
 810e2ce:	4614      	mov	r4, r2
 810e2d0:	4605      	mov	r5, r0
 810e2d2:	b118      	cbz	r0, 810e2dc <__swbuf_r+0x12>
 810e2d4:	6a03      	ldr	r3, [r0, #32]
 810e2d6:	b90b      	cbnz	r3, 810e2dc <__swbuf_r+0x12>
 810e2d8:	f7ff ff20 	bl	810e11c <__sinit>
 810e2dc:	69a3      	ldr	r3, [r4, #24]
 810e2de:	60a3      	str	r3, [r4, #8]
 810e2e0:	89a3      	ldrh	r3, [r4, #12]
 810e2e2:	071a      	lsls	r2, r3, #28
 810e2e4:	d501      	bpl.n	810e2ea <__swbuf_r+0x20>
 810e2e6:	6923      	ldr	r3, [r4, #16]
 810e2e8:	b943      	cbnz	r3, 810e2fc <__swbuf_r+0x32>
 810e2ea:	4621      	mov	r1, r4
 810e2ec:	4628      	mov	r0, r5
 810e2ee:	f000 f82b 	bl	810e348 <__swsetup_r>
 810e2f2:	b118      	cbz	r0, 810e2fc <__swbuf_r+0x32>
 810e2f4:	f04f 37ff 	mov.w	r7, #4294967295
 810e2f8:	4638      	mov	r0, r7
 810e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e2fc:	6823      	ldr	r3, [r4, #0]
 810e2fe:	6922      	ldr	r2, [r4, #16]
 810e300:	1a98      	subs	r0, r3, r2
 810e302:	6963      	ldr	r3, [r4, #20]
 810e304:	b2f6      	uxtb	r6, r6
 810e306:	4283      	cmp	r3, r0
 810e308:	4637      	mov	r7, r6
 810e30a:	dc05      	bgt.n	810e318 <__swbuf_r+0x4e>
 810e30c:	4621      	mov	r1, r4
 810e30e:	4628      	mov	r0, r5
 810e310:	f000 fa68 	bl	810e7e4 <_fflush_r>
 810e314:	2800      	cmp	r0, #0
 810e316:	d1ed      	bne.n	810e2f4 <__swbuf_r+0x2a>
 810e318:	68a3      	ldr	r3, [r4, #8]
 810e31a:	3b01      	subs	r3, #1
 810e31c:	60a3      	str	r3, [r4, #8]
 810e31e:	6823      	ldr	r3, [r4, #0]
 810e320:	1c5a      	adds	r2, r3, #1
 810e322:	6022      	str	r2, [r4, #0]
 810e324:	701e      	strb	r6, [r3, #0]
 810e326:	6962      	ldr	r2, [r4, #20]
 810e328:	1c43      	adds	r3, r0, #1
 810e32a:	429a      	cmp	r2, r3
 810e32c:	d004      	beq.n	810e338 <__swbuf_r+0x6e>
 810e32e:	89a3      	ldrh	r3, [r4, #12]
 810e330:	07db      	lsls	r3, r3, #31
 810e332:	d5e1      	bpl.n	810e2f8 <__swbuf_r+0x2e>
 810e334:	2e0a      	cmp	r6, #10
 810e336:	d1df      	bne.n	810e2f8 <__swbuf_r+0x2e>
 810e338:	4621      	mov	r1, r4
 810e33a:	4628      	mov	r0, r5
 810e33c:	f000 fa52 	bl	810e7e4 <_fflush_r>
 810e340:	2800      	cmp	r0, #0
 810e342:	d0d9      	beq.n	810e2f8 <__swbuf_r+0x2e>
 810e344:	e7d6      	b.n	810e2f4 <__swbuf_r+0x2a>
	...

0810e348 <__swsetup_r>:
 810e348:	b538      	push	{r3, r4, r5, lr}
 810e34a:	4b29      	ldr	r3, [pc, #164]	@ (810e3f0 <__swsetup_r+0xa8>)
 810e34c:	4605      	mov	r5, r0
 810e34e:	6818      	ldr	r0, [r3, #0]
 810e350:	460c      	mov	r4, r1
 810e352:	b118      	cbz	r0, 810e35c <__swsetup_r+0x14>
 810e354:	6a03      	ldr	r3, [r0, #32]
 810e356:	b90b      	cbnz	r3, 810e35c <__swsetup_r+0x14>
 810e358:	f7ff fee0 	bl	810e11c <__sinit>
 810e35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e360:	0719      	lsls	r1, r3, #28
 810e362:	d422      	bmi.n	810e3aa <__swsetup_r+0x62>
 810e364:	06da      	lsls	r2, r3, #27
 810e366:	d407      	bmi.n	810e378 <__swsetup_r+0x30>
 810e368:	2209      	movs	r2, #9
 810e36a:	602a      	str	r2, [r5, #0]
 810e36c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e370:	81a3      	strh	r3, [r4, #12]
 810e372:	f04f 30ff 	mov.w	r0, #4294967295
 810e376:	e033      	b.n	810e3e0 <__swsetup_r+0x98>
 810e378:	0758      	lsls	r0, r3, #29
 810e37a:	d512      	bpl.n	810e3a2 <__swsetup_r+0x5a>
 810e37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e37e:	b141      	cbz	r1, 810e392 <__swsetup_r+0x4a>
 810e380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e384:	4299      	cmp	r1, r3
 810e386:	d002      	beq.n	810e38e <__swsetup_r+0x46>
 810e388:	4628      	mov	r0, r5
 810e38a:	f000 f8af 	bl	810e4ec <_free_r>
 810e38e:	2300      	movs	r3, #0
 810e390:	6363      	str	r3, [r4, #52]	@ 0x34
 810e392:	89a3      	ldrh	r3, [r4, #12]
 810e394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810e398:	81a3      	strh	r3, [r4, #12]
 810e39a:	2300      	movs	r3, #0
 810e39c:	6063      	str	r3, [r4, #4]
 810e39e:	6923      	ldr	r3, [r4, #16]
 810e3a0:	6023      	str	r3, [r4, #0]
 810e3a2:	89a3      	ldrh	r3, [r4, #12]
 810e3a4:	f043 0308 	orr.w	r3, r3, #8
 810e3a8:	81a3      	strh	r3, [r4, #12]
 810e3aa:	6923      	ldr	r3, [r4, #16]
 810e3ac:	b94b      	cbnz	r3, 810e3c2 <__swsetup_r+0x7a>
 810e3ae:	89a3      	ldrh	r3, [r4, #12]
 810e3b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810e3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810e3b8:	d003      	beq.n	810e3c2 <__swsetup_r+0x7a>
 810e3ba:	4621      	mov	r1, r4
 810e3bc:	4628      	mov	r0, r5
 810e3be:	f000 fa5f 	bl	810e880 <__smakebuf_r>
 810e3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e3c6:	f013 0201 	ands.w	r2, r3, #1
 810e3ca:	d00a      	beq.n	810e3e2 <__swsetup_r+0x9a>
 810e3cc:	2200      	movs	r2, #0
 810e3ce:	60a2      	str	r2, [r4, #8]
 810e3d0:	6962      	ldr	r2, [r4, #20]
 810e3d2:	4252      	negs	r2, r2
 810e3d4:	61a2      	str	r2, [r4, #24]
 810e3d6:	6922      	ldr	r2, [r4, #16]
 810e3d8:	b942      	cbnz	r2, 810e3ec <__swsetup_r+0xa4>
 810e3da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810e3de:	d1c5      	bne.n	810e36c <__swsetup_r+0x24>
 810e3e0:	bd38      	pop	{r3, r4, r5, pc}
 810e3e2:	0799      	lsls	r1, r3, #30
 810e3e4:	bf58      	it	pl
 810e3e6:	6962      	ldrpl	r2, [r4, #20]
 810e3e8:	60a2      	str	r2, [r4, #8]
 810e3ea:	e7f4      	b.n	810e3d6 <__swsetup_r+0x8e>
 810e3ec:	2000      	movs	r0, #0
 810e3ee:	e7f7      	b.n	810e3e0 <__swsetup_r+0x98>
 810e3f0:	1000001c 	.word	0x1000001c

0810e3f4 <memset>:
 810e3f4:	4402      	add	r2, r0
 810e3f6:	4603      	mov	r3, r0
 810e3f8:	4293      	cmp	r3, r2
 810e3fa:	d100      	bne.n	810e3fe <memset+0xa>
 810e3fc:	4770      	bx	lr
 810e3fe:	f803 1b01 	strb.w	r1, [r3], #1
 810e402:	e7f9      	b.n	810e3f8 <memset+0x4>

0810e404 <_close_r>:
 810e404:	b538      	push	{r3, r4, r5, lr}
 810e406:	4d06      	ldr	r5, [pc, #24]	@ (810e420 <_close_r+0x1c>)
 810e408:	2300      	movs	r3, #0
 810e40a:	4604      	mov	r4, r0
 810e40c:	4608      	mov	r0, r1
 810e40e:	602b      	str	r3, [r5, #0]
 810e410:	f7f4 fa7f 	bl	8102912 <_close>
 810e414:	1c43      	adds	r3, r0, #1
 810e416:	d102      	bne.n	810e41e <_close_r+0x1a>
 810e418:	682b      	ldr	r3, [r5, #0]
 810e41a:	b103      	cbz	r3, 810e41e <_close_r+0x1a>
 810e41c:	6023      	str	r3, [r4, #0]
 810e41e:	bd38      	pop	{r3, r4, r5, pc}
 810e420:	10000fe4 	.word	0x10000fe4

0810e424 <_lseek_r>:
 810e424:	b538      	push	{r3, r4, r5, lr}
 810e426:	4d07      	ldr	r5, [pc, #28]	@ (810e444 <_lseek_r+0x20>)
 810e428:	4604      	mov	r4, r0
 810e42a:	4608      	mov	r0, r1
 810e42c:	4611      	mov	r1, r2
 810e42e:	2200      	movs	r2, #0
 810e430:	602a      	str	r2, [r5, #0]
 810e432:	461a      	mov	r2, r3
 810e434:	f7f4 fa94 	bl	8102960 <_lseek>
 810e438:	1c43      	adds	r3, r0, #1
 810e43a:	d102      	bne.n	810e442 <_lseek_r+0x1e>
 810e43c:	682b      	ldr	r3, [r5, #0]
 810e43e:	b103      	cbz	r3, 810e442 <_lseek_r+0x1e>
 810e440:	6023      	str	r3, [r4, #0]
 810e442:	bd38      	pop	{r3, r4, r5, pc}
 810e444:	10000fe4 	.word	0x10000fe4

0810e448 <_read_r>:
 810e448:	b538      	push	{r3, r4, r5, lr}
 810e44a:	4d07      	ldr	r5, [pc, #28]	@ (810e468 <_read_r+0x20>)
 810e44c:	4604      	mov	r4, r0
 810e44e:	4608      	mov	r0, r1
 810e450:	4611      	mov	r1, r2
 810e452:	2200      	movs	r2, #0
 810e454:	602a      	str	r2, [r5, #0]
 810e456:	461a      	mov	r2, r3
 810e458:	f7f4 fa22 	bl	81028a0 <_read>
 810e45c:	1c43      	adds	r3, r0, #1
 810e45e:	d102      	bne.n	810e466 <_read_r+0x1e>
 810e460:	682b      	ldr	r3, [r5, #0]
 810e462:	b103      	cbz	r3, 810e466 <_read_r+0x1e>
 810e464:	6023      	str	r3, [r4, #0]
 810e466:	bd38      	pop	{r3, r4, r5, pc}
 810e468:	10000fe4 	.word	0x10000fe4

0810e46c <_write_r>:
 810e46c:	b538      	push	{r3, r4, r5, lr}
 810e46e:	4d07      	ldr	r5, [pc, #28]	@ (810e48c <_write_r+0x20>)
 810e470:	4604      	mov	r4, r0
 810e472:	4608      	mov	r0, r1
 810e474:	4611      	mov	r1, r2
 810e476:	2200      	movs	r2, #0
 810e478:	602a      	str	r2, [r5, #0]
 810e47a:	461a      	mov	r2, r3
 810e47c:	f7f4 fa2d 	bl	81028da <_write>
 810e480:	1c43      	adds	r3, r0, #1
 810e482:	d102      	bne.n	810e48a <_write_r+0x1e>
 810e484:	682b      	ldr	r3, [r5, #0]
 810e486:	b103      	cbz	r3, 810e48a <_write_r+0x1e>
 810e488:	6023      	str	r3, [r4, #0]
 810e48a:	bd38      	pop	{r3, r4, r5, pc}
 810e48c:	10000fe4 	.word	0x10000fe4

0810e490 <__errno>:
 810e490:	4b01      	ldr	r3, [pc, #4]	@ (810e498 <__errno+0x8>)
 810e492:	6818      	ldr	r0, [r3, #0]
 810e494:	4770      	bx	lr
 810e496:	bf00      	nop
 810e498:	1000001c 	.word	0x1000001c

0810e49c <__libc_init_array>:
 810e49c:	b570      	push	{r4, r5, r6, lr}
 810e49e:	4d0d      	ldr	r5, [pc, #52]	@ (810e4d4 <__libc_init_array+0x38>)
 810e4a0:	4c0d      	ldr	r4, [pc, #52]	@ (810e4d8 <__libc_init_array+0x3c>)
 810e4a2:	1b64      	subs	r4, r4, r5
 810e4a4:	10a4      	asrs	r4, r4, #2
 810e4a6:	2600      	movs	r6, #0
 810e4a8:	42a6      	cmp	r6, r4
 810e4aa:	d109      	bne.n	810e4c0 <__libc_init_array+0x24>
 810e4ac:	4d0b      	ldr	r5, [pc, #44]	@ (810e4dc <__libc_init_array+0x40>)
 810e4ae:	4c0c      	ldr	r4, [pc, #48]	@ (810e4e0 <__libc_init_array+0x44>)
 810e4b0:	f000 fa54 	bl	810e95c <_init>
 810e4b4:	1b64      	subs	r4, r4, r5
 810e4b6:	10a4      	asrs	r4, r4, #2
 810e4b8:	2600      	movs	r6, #0
 810e4ba:	42a6      	cmp	r6, r4
 810e4bc:	d105      	bne.n	810e4ca <__libc_init_array+0x2e>
 810e4be:	bd70      	pop	{r4, r5, r6, pc}
 810e4c0:	f855 3b04 	ldr.w	r3, [r5], #4
 810e4c4:	4798      	blx	r3
 810e4c6:	3601      	adds	r6, #1
 810e4c8:	e7ee      	b.n	810e4a8 <__libc_init_array+0xc>
 810e4ca:	f855 3b04 	ldr.w	r3, [r5], #4
 810e4ce:	4798      	blx	r3
 810e4d0:	3601      	adds	r6, #1
 810e4d2:	e7f2      	b.n	810e4ba <__libc_init_array+0x1e>
 810e4d4:	0810e9e0 	.word	0x0810e9e0
 810e4d8:	0810e9e0 	.word	0x0810e9e0
 810e4dc:	0810e9e0 	.word	0x0810e9e0
 810e4e0:	0810e9e4 	.word	0x0810e9e4

0810e4e4 <__retarget_lock_init_recursive>:
 810e4e4:	4770      	bx	lr

0810e4e6 <__retarget_lock_acquire_recursive>:
 810e4e6:	4770      	bx	lr

0810e4e8 <__retarget_lock_release_recursive>:
 810e4e8:	4770      	bx	lr
	...

0810e4ec <_free_r>:
 810e4ec:	b538      	push	{r3, r4, r5, lr}
 810e4ee:	4605      	mov	r5, r0
 810e4f0:	2900      	cmp	r1, #0
 810e4f2:	d041      	beq.n	810e578 <_free_r+0x8c>
 810e4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e4f8:	1f0c      	subs	r4, r1, #4
 810e4fa:	2b00      	cmp	r3, #0
 810e4fc:	bfb8      	it	lt
 810e4fe:	18e4      	addlt	r4, r4, r3
 810e500:	f000 f8e0 	bl	810e6c4 <__malloc_lock>
 810e504:	4a1d      	ldr	r2, [pc, #116]	@ (810e57c <_free_r+0x90>)
 810e506:	6813      	ldr	r3, [r2, #0]
 810e508:	b933      	cbnz	r3, 810e518 <_free_r+0x2c>
 810e50a:	6063      	str	r3, [r4, #4]
 810e50c:	6014      	str	r4, [r2, #0]
 810e50e:	4628      	mov	r0, r5
 810e510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e514:	f000 b8dc 	b.w	810e6d0 <__malloc_unlock>
 810e518:	42a3      	cmp	r3, r4
 810e51a:	d908      	bls.n	810e52e <_free_r+0x42>
 810e51c:	6820      	ldr	r0, [r4, #0]
 810e51e:	1821      	adds	r1, r4, r0
 810e520:	428b      	cmp	r3, r1
 810e522:	bf01      	itttt	eq
 810e524:	6819      	ldreq	r1, [r3, #0]
 810e526:	685b      	ldreq	r3, [r3, #4]
 810e528:	1809      	addeq	r1, r1, r0
 810e52a:	6021      	streq	r1, [r4, #0]
 810e52c:	e7ed      	b.n	810e50a <_free_r+0x1e>
 810e52e:	461a      	mov	r2, r3
 810e530:	685b      	ldr	r3, [r3, #4]
 810e532:	b10b      	cbz	r3, 810e538 <_free_r+0x4c>
 810e534:	42a3      	cmp	r3, r4
 810e536:	d9fa      	bls.n	810e52e <_free_r+0x42>
 810e538:	6811      	ldr	r1, [r2, #0]
 810e53a:	1850      	adds	r0, r2, r1
 810e53c:	42a0      	cmp	r0, r4
 810e53e:	d10b      	bne.n	810e558 <_free_r+0x6c>
 810e540:	6820      	ldr	r0, [r4, #0]
 810e542:	4401      	add	r1, r0
 810e544:	1850      	adds	r0, r2, r1
 810e546:	4283      	cmp	r3, r0
 810e548:	6011      	str	r1, [r2, #0]
 810e54a:	d1e0      	bne.n	810e50e <_free_r+0x22>
 810e54c:	6818      	ldr	r0, [r3, #0]
 810e54e:	685b      	ldr	r3, [r3, #4]
 810e550:	6053      	str	r3, [r2, #4]
 810e552:	4408      	add	r0, r1
 810e554:	6010      	str	r0, [r2, #0]
 810e556:	e7da      	b.n	810e50e <_free_r+0x22>
 810e558:	d902      	bls.n	810e560 <_free_r+0x74>
 810e55a:	230c      	movs	r3, #12
 810e55c:	602b      	str	r3, [r5, #0]
 810e55e:	e7d6      	b.n	810e50e <_free_r+0x22>
 810e560:	6820      	ldr	r0, [r4, #0]
 810e562:	1821      	adds	r1, r4, r0
 810e564:	428b      	cmp	r3, r1
 810e566:	bf04      	itt	eq
 810e568:	6819      	ldreq	r1, [r3, #0]
 810e56a:	685b      	ldreq	r3, [r3, #4]
 810e56c:	6063      	str	r3, [r4, #4]
 810e56e:	bf04      	itt	eq
 810e570:	1809      	addeq	r1, r1, r0
 810e572:	6021      	streq	r1, [r4, #0]
 810e574:	6054      	str	r4, [r2, #4]
 810e576:	e7ca      	b.n	810e50e <_free_r+0x22>
 810e578:	bd38      	pop	{r3, r4, r5, pc}
 810e57a:	bf00      	nop
 810e57c:	10000ff0 	.word	0x10000ff0

0810e580 <sbrk_aligned>:
 810e580:	b570      	push	{r4, r5, r6, lr}
 810e582:	4e0f      	ldr	r6, [pc, #60]	@ (810e5c0 <sbrk_aligned+0x40>)
 810e584:	460c      	mov	r4, r1
 810e586:	6831      	ldr	r1, [r6, #0]
 810e588:	4605      	mov	r5, r0
 810e58a:	b911      	cbnz	r1, 810e592 <sbrk_aligned+0x12>
 810e58c:	f000 f9d6 	bl	810e93c <_sbrk_r>
 810e590:	6030      	str	r0, [r6, #0]
 810e592:	4621      	mov	r1, r4
 810e594:	4628      	mov	r0, r5
 810e596:	f000 f9d1 	bl	810e93c <_sbrk_r>
 810e59a:	1c43      	adds	r3, r0, #1
 810e59c:	d103      	bne.n	810e5a6 <sbrk_aligned+0x26>
 810e59e:	f04f 34ff 	mov.w	r4, #4294967295
 810e5a2:	4620      	mov	r0, r4
 810e5a4:	bd70      	pop	{r4, r5, r6, pc}
 810e5a6:	1cc4      	adds	r4, r0, #3
 810e5a8:	f024 0403 	bic.w	r4, r4, #3
 810e5ac:	42a0      	cmp	r0, r4
 810e5ae:	d0f8      	beq.n	810e5a2 <sbrk_aligned+0x22>
 810e5b0:	1a21      	subs	r1, r4, r0
 810e5b2:	4628      	mov	r0, r5
 810e5b4:	f000 f9c2 	bl	810e93c <_sbrk_r>
 810e5b8:	3001      	adds	r0, #1
 810e5ba:	d1f2      	bne.n	810e5a2 <sbrk_aligned+0x22>
 810e5bc:	e7ef      	b.n	810e59e <sbrk_aligned+0x1e>
 810e5be:	bf00      	nop
 810e5c0:	10000fec 	.word	0x10000fec

0810e5c4 <_malloc_r>:
 810e5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e5c8:	1ccd      	adds	r5, r1, #3
 810e5ca:	f025 0503 	bic.w	r5, r5, #3
 810e5ce:	3508      	adds	r5, #8
 810e5d0:	2d0c      	cmp	r5, #12
 810e5d2:	bf38      	it	cc
 810e5d4:	250c      	movcc	r5, #12
 810e5d6:	2d00      	cmp	r5, #0
 810e5d8:	4606      	mov	r6, r0
 810e5da:	db01      	blt.n	810e5e0 <_malloc_r+0x1c>
 810e5dc:	42a9      	cmp	r1, r5
 810e5de:	d904      	bls.n	810e5ea <_malloc_r+0x26>
 810e5e0:	230c      	movs	r3, #12
 810e5e2:	6033      	str	r3, [r6, #0]
 810e5e4:	2000      	movs	r0, #0
 810e5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e5ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e6c0 <_malloc_r+0xfc>
 810e5ee:	f000 f869 	bl	810e6c4 <__malloc_lock>
 810e5f2:	f8d8 3000 	ldr.w	r3, [r8]
 810e5f6:	461c      	mov	r4, r3
 810e5f8:	bb44      	cbnz	r4, 810e64c <_malloc_r+0x88>
 810e5fa:	4629      	mov	r1, r5
 810e5fc:	4630      	mov	r0, r6
 810e5fe:	f7ff ffbf 	bl	810e580 <sbrk_aligned>
 810e602:	1c43      	adds	r3, r0, #1
 810e604:	4604      	mov	r4, r0
 810e606:	d158      	bne.n	810e6ba <_malloc_r+0xf6>
 810e608:	f8d8 4000 	ldr.w	r4, [r8]
 810e60c:	4627      	mov	r7, r4
 810e60e:	2f00      	cmp	r7, #0
 810e610:	d143      	bne.n	810e69a <_malloc_r+0xd6>
 810e612:	2c00      	cmp	r4, #0
 810e614:	d04b      	beq.n	810e6ae <_malloc_r+0xea>
 810e616:	6823      	ldr	r3, [r4, #0]
 810e618:	4639      	mov	r1, r7
 810e61a:	4630      	mov	r0, r6
 810e61c:	eb04 0903 	add.w	r9, r4, r3
 810e620:	f000 f98c 	bl	810e93c <_sbrk_r>
 810e624:	4581      	cmp	r9, r0
 810e626:	d142      	bne.n	810e6ae <_malloc_r+0xea>
 810e628:	6821      	ldr	r1, [r4, #0]
 810e62a:	1a6d      	subs	r5, r5, r1
 810e62c:	4629      	mov	r1, r5
 810e62e:	4630      	mov	r0, r6
 810e630:	f7ff ffa6 	bl	810e580 <sbrk_aligned>
 810e634:	3001      	adds	r0, #1
 810e636:	d03a      	beq.n	810e6ae <_malloc_r+0xea>
 810e638:	6823      	ldr	r3, [r4, #0]
 810e63a:	442b      	add	r3, r5
 810e63c:	6023      	str	r3, [r4, #0]
 810e63e:	f8d8 3000 	ldr.w	r3, [r8]
 810e642:	685a      	ldr	r2, [r3, #4]
 810e644:	bb62      	cbnz	r2, 810e6a0 <_malloc_r+0xdc>
 810e646:	f8c8 7000 	str.w	r7, [r8]
 810e64a:	e00f      	b.n	810e66c <_malloc_r+0xa8>
 810e64c:	6822      	ldr	r2, [r4, #0]
 810e64e:	1b52      	subs	r2, r2, r5
 810e650:	d420      	bmi.n	810e694 <_malloc_r+0xd0>
 810e652:	2a0b      	cmp	r2, #11
 810e654:	d917      	bls.n	810e686 <_malloc_r+0xc2>
 810e656:	1961      	adds	r1, r4, r5
 810e658:	42a3      	cmp	r3, r4
 810e65a:	6025      	str	r5, [r4, #0]
 810e65c:	bf18      	it	ne
 810e65e:	6059      	strne	r1, [r3, #4]
 810e660:	6863      	ldr	r3, [r4, #4]
 810e662:	bf08      	it	eq
 810e664:	f8c8 1000 	streq.w	r1, [r8]
 810e668:	5162      	str	r2, [r4, r5]
 810e66a:	604b      	str	r3, [r1, #4]
 810e66c:	4630      	mov	r0, r6
 810e66e:	f000 f82f 	bl	810e6d0 <__malloc_unlock>
 810e672:	f104 000b 	add.w	r0, r4, #11
 810e676:	1d23      	adds	r3, r4, #4
 810e678:	f020 0007 	bic.w	r0, r0, #7
 810e67c:	1ac2      	subs	r2, r0, r3
 810e67e:	bf1c      	itt	ne
 810e680:	1a1b      	subne	r3, r3, r0
 810e682:	50a3      	strne	r3, [r4, r2]
 810e684:	e7af      	b.n	810e5e6 <_malloc_r+0x22>
 810e686:	6862      	ldr	r2, [r4, #4]
 810e688:	42a3      	cmp	r3, r4
 810e68a:	bf0c      	ite	eq
 810e68c:	f8c8 2000 	streq.w	r2, [r8]
 810e690:	605a      	strne	r2, [r3, #4]
 810e692:	e7eb      	b.n	810e66c <_malloc_r+0xa8>
 810e694:	4623      	mov	r3, r4
 810e696:	6864      	ldr	r4, [r4, #4]
 810e698:	e7ae      	b.n	810e5f8 <_malloc_r+0x34>
 810e69a:	463c      	mov	r4, r7
 810e69c:	687f      	ldr	r7, [r7, #4]
 810e69e:	e7b6      	b.n	810e60e <_malloc_r+0x4a>
 810e6a0:	461a      	mov	r2, r3
 810e6a2:	685b      	ldr	r3, [r3, #4]
 810e6a4:	42a3      	cmp	r3, r4
 810e6a6:	d1fb      	bne.n	810e6a0 <_malloc_r+0xdc>
 810e6a8:	2300      	movs	r3, #0
 810e6aa:	6053      	str	r3, [r2, #4]
 810e6ac:	e7de      	b.n	810e66c <_malloc_r+0xa8>
 810e6ae:	230c      	movs	r3, #12
 810e6b0:	6033      	str	r3, [r6, #0]
 810e6b2:	4630      	mov	r0, r6
 810e6b4:	f000 f80c 	bl	810e6d0 <__malloc_unlock>
 810e6b8:	e794      	b.n	810e5e4 <_malloc_r+0x20>
 810e6ba:	6005      	str	r5, [r0, #0]
 810e6bc:	e7d6      	b.n	810e66c <_malloc_r+0xa8>
 810e6be:	bf00      	nop
 810e6c0:	10000ff0 	.word	0x10000ff0

0810e6c4 <__malloc_lock>:
 810e6c4:	4801      	ldr	r0, [pc, #4]	@ (810e6cc <__malloc_lock+0x8>)
 810e6c6:	f7ff bf0e 	b.w	810e4e6 <__retarget_lock_acquire_recursive>
 810e6ca:	bf00      	nop
 810e6cc:	10000fe8 	.word	0x10000fe8

0810e6d0 <__malloc_unlock>:
 810e6d0:	4801      	ldr	r0, [pc, #4]	@ (810e6d8 <__malloc_unlock+0x8>)
 810e6d2:	f7ff bf09 	b.w	810e4e8 <__retarget_lock_release_recursive>
 810e6d6:	bf00      	nop
 810e6d8:	10000fe8 	.word	0x10000fe8

0810e6dc <__sflush_r>:
 810e6dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e6e4:	0716      	lsls	r6, r2, #28
 810e6e6:	4605      	mov	r5, r0
 810e6e8:	460c      	mov	r4, r1
 810e6ea:	d454      	bmi.n	810e796 <__sflush_r+0xba>
 810e6ec:	684b      	ldr	r3, [r1, #4]
 810e6ee:	2b00      	cmp	r3, #0
 810e6f0:	dc02      	bgt.n	810e6f8 <__sflush_r+0x1c>
 810e6f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810e6f4:	2b00      	cmp	r3, #0
 810e6f6:	dd48      	ble.n	810e78a <__sflush_r+0xae>
 810e6f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810e6fa:	2e00      	cmp	r6, #0
 810e6fc:	d045      	beq.n	810e78a <__sflush_r+0xae>
 810e6fe:	2300      	movs	r3, #0
 810e700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810e704:	682f      	ldr	r7, [r5, #0]
 810e706:	6a21      	ldr	r1, [r4, #32]
 810e708:	602b      	str	r3, [r5, #0]
 810e70a:	d030      	beq.n	810e76e <__sflush_r+0x92>
 810e70c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810e70e:	89a3      	ldrh	r3, [r4, #12]
 810e710:	0759      	lsls	r1, r3, #29
 810e712:	d505      	bpl.n	810e720 <__sflush_r+0x44>
 810e714:	6863      	ldr	r3, [r4, #4]
 810e716:	1ad2      	subs	r2, r2, r3
 810e718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810e71a:	b10b      	cbz	r3, 810e720 <__sflush_r+0x44>
 810e71c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810e71e:	1ad2      	subs	r2, r2, r3
 810e720:	2300      	movs	r3, #0
 810e722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810e724:	6a21      	ldr	r1, [r4, #32]
 810e726:	4628      	mov	r0, r5
 810e728:	47b0      	blx	r6
 810e72a:	1c43      	adds	r3, r0, #1
 810e72c:	89a3      	ldrh	r3, [r4, #12]
 810e72e:	d106      	bne.n	810e73e <__sflush_r+0x62>
 810e730:	6829      	ldr	r1, [r5, #0]
 810e732:	291d      	cmp	r1, #29
 810e734:	d82b      	bhi.n	810e78e <__sflush_r+0xb2>
 810e736:	4a2a      	ldr	r2, [pc, #168]	@ (810e7e0 <__sflush_r+0x104>)
 810e738:	40ca      	lsrs	r2, r1
 810e73a:	07d6      	lsls	r6, r2, #31
 810e73c:	d527      	bpl.n	810e78e <__sflush_r+0xb2>
 810e73e:	2200      	movs	r2, #0
 810e740:	6062      	str	r2, [r4, #4]
 810e742:	04d9      	lsls	r1, r3, #19
 810e744:	6922      	ldr	r2, [r4, #16]
 810e746:	6022      	str	r2, [r4, #0]
 810e748:	d504      	bpl.n	810e754 <__sflush_r+0x78>
 810e74a:	1c42      	adds	r2, r0, #1
 810e74c:	d101      	bne.n	810e752 <__sflush_r+0x76>
 810e74e:	682b      	ldr	r3, [r5, #0]
 810e750:	b903      	cbnz	r3, 810e754 <__sflush_r+0x78>
 810e752:	6560      	str	r0, [r4, #84]	@ 0x54
 810e754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810e756:	602f      	str	r7, [r5, #0]
 810e758:	b1b9      	cbz	r1, 810e78a <__sflush_r+0xae>
 810e75a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810e75e:	4299      	cmp	r1, r3
 810e760:	d002      	beq.n	810e768 <__sflush_r+0x8c>
 810e762:	4628      	mov	r0, r5
 810e764:	f7ff fec2 	bl	810e4ec <_free_r>
 810e768:	2300      	movs	r3, #0
 810e76a:	6363      	str	r3, [r4, #52]	@ 0x34
 810e76c:	e00d      	b.n	810e78a <__sflush_r+0xae>
 810e76e:	2301      	movs	r3, #1
 810e770:	4628      	mov	r0, r5
 810e772:	47b0      	blx	r6
 810e774:	4602      	mov	r2, r0
 810e776:	1c50      	adds	r0, r2, #1
 810e778:	d1c9      	bne.n	810e70e <__sflush_r+0x32>
 810e77a:	682b      	ldr	r3, [r5, #0]
 810e77c:	2b00      	cmp	r3, #0
 810e77e:	d0c6      	beq.n	810e70e <__sflush_r+0x32>
 810e780:	2b1d      	cmp	r3, #29
 810e782:	d001      	beq.n	810e788 <__sflush_r+0xac>
 810e784:	2b16      	cmp	r3, #22
 810e786:	d11e      	bne.n	810e7c6 <__sflush_r+0xea>
 810e788:	602f      	str	r7, [r5, #0]
 810e78a:	2000      	movs	r0, #0
 810e78c:	e022      	b.n	810e7d4 <__sflush_r+0xf8>
 810e78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e792:	b21b      	sxth	r3, r3
 810e794:	e01b      	b.n	810e7ce <__sflush_r+0xf2>
 810e796:	690f      	ldr	r7, [r1, #16]
 810e798:	2f00      	cmp	r7, #0
 810e79a:	d0f6      	beq.n	810e78a <__sflush_r+0xae>
 810e79c:	0793      	lsls	r3, r2, #30
 810e79e:	680e      	ldr	r6, [r1, #0]
 810e7a0:	bf08      	it	eq
 810e7a2:	694b      	ldreq	r3, [r1, #20]
 810e7a4:	600f      	str	r7, [r1, #0]
 810e7a6:	bf18      	it	ne
 810e7a8:	2300      	movne	r3, #0
 810e7aa:	eba6 0807 	sub.w	r8, r6, r7
 810e7ae:	608b      	str	r3, [r1, #8]
 810e7b0:	f1b8 0f00 	cmp.w	r8, #0
 810e7b4:	dde9      	ble.n	810e78a <__sflush_r+0xae>
 810e7b6:	6a21      	ldr	r1, [r4, #32]
 810e7b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810e7ba:	4643      	mov	r3, r8
 810e7bc:	463a      	mov	r2, r7
 810e7be:	4628      	mov	r0, r5
 810e7c0:	47b0      	blx	r6
 810e7c2:	2800      	cmp	r0, #0
 810e7c4:	dc08      	bgt.n	810e7d8 <__sflush_r+0xfc>
 810e7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e7ce:	81a3      	strh	r3, [r4, #12]
 810e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 810e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e7d8:	4407      	add	r7, r0
 810e7da:	eba8 0800 	sub.w	r8, r8, r0
 810e7de:	e7e7      	b.n	810e7b0 <__sflush_r+0xd4>
 810e7e0:	20400001 	.word	0x20400001

0810e7e4 <_fflush_r>:
 810e7e4:	b538      	push	{r3, r4, r5, lr}
 810e7e6:	690b      	ldr	r3, [r1, #16]
 810e7e8:	4605      	mov	r5, r0
 810e7ea:	460c      	mov	r4, r1
 810e7ec:	b913      	cbnz	r3, 810e7f4 <_fflush_r+0x10>
 810e7ee:	2500      	movs	r5, #0
 810e7f0:	4628      	mov	r0, r5
 810e7f2:	bd38      	pop	{r3, r4, r5, pc}
 810e7f4:	b118      	cbz	r0, 810e7fe <_fflush_r+0x1a>
 810e7f6:	6a03      	ldr	r3, [r0, #32]
 810e7f8:	b90b      	cbnz	r3, 810e7fe <_fflush_r+0x1a>
 810e7fa:	f7ff fc8f 	bl	810e11c <__sinit>
 810e7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e802:	2b00      	cmp	r3, #0
 810e804:	d0f3      	beq.n	810e7ee <_fflush_r+0xa>
 810e806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810e808:	07d0      	lsls	r0, r2, #31
 810e80a:	d404      	bmi.n	810e816 <_fflush_r+0x32>
 810e80c:	0599      	lsls	r1, r3, #22
 810e80e:	d402      	bmi.n	810e816 <_fflush_r+0x32>
 810e810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e812:	f7ff fe68 	bl	810e4e6 <__retarget_lock_acquire_recursive>
 810e816:	4628      	mov	r0, r5
 810e818:	4621      	mov	r1, r4
 810e81a:	f7ff ff5f 	bl	810e6dc <__sflush_r>
 810e81e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e820:	07da      	lsls	r2, r3, #31
 810e822:	4605      	mov	r5, r0
 810e824:	d4e4      	bmi.n	810e7f0 <_fflush_r+0xc>
 810e826:	89a3      	ldrh	r3, [r4, #12]
 810e828:	059b      	lsls	r3, r3, #22
 810e82a:	d4e1      	bmi.n	810e7f0 <_fflush_r+0xc>
 810e82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e82e:	f7ff fe5b 	bl	810e4e8 <__retarget_lock_release_recursive>
 810e832:	e7dd      	b.n	810e7f0 <_fflush_r+0xc>

0810e834 <__swhatbuf_r>:
 810e834:	b570      	push	{r4, r5, r6, lr}
 810e836:	460c      	mov	r4, r1
 810e838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e83c:	2900      	cmp	r1, #0
 810e83e:	b096      	sub	sp, #88	@ 0x58
 810e840:	4615      	mov	r5, r2
 810e842:	461e      	mov	r6, r3
 810e844:	da0d      	bge.n	810e862 <__swhatbuf_r+0x2e>
 810e846:	89a3      	ldrh	r3, [r4, #12]
 810e848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810e84c:	f04f 0100 	mov.w	r1, #0
 810e850:	bf14      	ite	ne
 810e852:	2340      	movne	r3, #64	@ 0x40
 810e854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810e858:	2000      	movs	r0, #0
 810e85a:	6031      	str	r1, [r6, #0]
 810e85c:	602b      	str	r3, [r5, #0]
 810e85e:	b016      	add	sp, #88	@ 0x58
 810e860:	bd70      	pop	{r4, r5, r6, pc}
 810e862:	466a      	mov	r2, sp
 810e864:	f000 f848 	bl	810e8f8 <_fstat_r>
 810e868:	2800      	cmp	r0, #0
 810e86a:	dbec      	blt.n	810e846 <__swhatbuf_r+0x12>
 810e86c:	9901      	ldr	r1, [sp, #4]
 810e86e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810e872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810e876:	4259      	negs	r1, r3
 810e878:	4159      	adcs	r1, r3
 810e87a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810e87e:	e7eb      	b.n	810e858 <__swhatbuf_r+0x24>

0810e880 <__smakebuf_r>:
 810e880:	898b      	ldrh	r3, [r1, #12]
 810e882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e884:	079d      	lsls	r5, r3, #30
 810e886:	4606      	mov	r6, r0
 810e888:	460c      	mov	r4, r1
 810e88a:	d507      	bpl.n	810e89c <__smakebuf_r+0x1c>
 810e88c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810e890:	6023      	str	r3, [r4, #0]
 810e892:	6123      	str	r3, [r4, #16]
 810e894:	2301      	movs	r3, #1
 810e896:	6163      	str	r3, [r4, #20]
 810e898:	b003      	add	sp, #12
 810e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e89c:	ab01      	add	r3, sp, #4
 810e89e:	466a      	mov	r2, sp
 810e8a0:	f7ff ffc8 	bl	810e834 <__swhatbuf_r>
 810e8a4:	9f00      	ldr	r7, [sp, #0]
 810e8a6:	4605      	mov	r5, r0
 810e8a8:	4639      	mov	r1, r7
 810e8aa:	4630      	mov	r0, r6
 810e8ac:	f7ff fe8a 	bl	810e5c4 <_malloc_r>
 810e8b0:	b948      	cbnz	r0, 810e8c6 <__smakebuf_r+0x46>
 810e8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e8b6:	059a      	lsls	r2, r3, #22
 810e8b8:	d4ee      	bmi.n	810e898 <__smakebuf_r+0x18>
 810e8ba:	f023 0303 	bic.w	r3, r3, #3
 810e8be:	f043 0302 	orr.w	r3, r3, #2
 810e8c2:	81a3      	strh	r3, [r4, #12]
 810e8c4:	e7e2      	b.n	810e88c <__smakebuf_r+0xc>
 810e8c6:	89a3      	ldrh	r3, [r4, #12]
 810e8c8:	6020      	str	r0, [r4, #0]
 810e8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810e8ce:	81a3      	strh	r3, [r4, #12]
 810e8d0:	9b01      	ldr	r3, [sp, #4]
 810e8d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810e8d6:	b15b      	cbz	r3, 810e8f0 <__smakebuf_r+0x70>
 810e8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e8dc:	4630      	mov	r0, r6
 810e8de:	f000 f81d 	bl	810e91c <_isatty_r>
 810e8e2:	b128      	cbz	r0, 810e8f0 <__smakebuf_r+0x70>
 810e8e4:	89a3      	ldrh	r3, [r4, #12]
 810e8e6:	f023 0303 	bic.w	r3, r3, #3
 810e8ea:	f043 0301 	orr.w	r3, r3, #1
 810e8ee:	81a3      	strh	r3, [r4, #12]
 810e8f0:	89a3      	ldrh	r3, [r4, #12]
 810e8f2:	431d      	orrs	r5, r3
 810e8f4:	81a5      	strh	r5, [r4, #12]
 810e8f6:	e7cf      	b.n	810e898 <__smakebuf_r+0x18>

0810e8f8 <_fstat_r>:
 810e8f8:	b538      	push	{r3, r4, r5, lr}
 810e8fa:	4d07      	ldr	r5, [pc, #28]	@ (810e918 <_fstat_r+0x20>)
 810e8fc:	2300      	movs	r3, #0
 810e8fe:	4604      	mov	r4, r0
 810e900:	4608      	mov	r0, r1
 810e902:	4611      	mov	r1, r2
 810e904:	602b      	str	r3, [r5, #0]
 810e906:	f7f4 f810 	bl	810292a <_fstat>
 810e90a:	1c43      	adds	r3, r0, #1
 810e90c:	d102      	bne.n	810e914 <_fstat_r+0x1c>
 810e90e:	682b      	ldr	r3, [r5, #0]
 810e910:	b103      	cbz	r3, 810e914 <_fstat_r+0x1c>
 810e912:	6023      	str	r3, [r4, #0]
 810e914:	bd38      	pop	{r3, r4, r5, pc}
 810e916:	bf00      	nop
 810e918:	10000fe4 	.word	0x10000fe4

0810e91c <_isatty_r>:
 810e91c:	b538      	push	{r3, r4, r5, lr}
 810e91e:	4d06      	ldr	r5, [pc, #24]	@ (810e938 <_isatty_r+0x1c>)
 810e920:	2300      	movs	r3, #0
 810e922:	4604      	mov	r4, r0
 810e924:	4608      	mov	r0, r1
 810e926:	602b      	str	r3, [r5, #0]
 810e928:	f7f4 f80f 	bl	810294a <_isatty>
 810e92c:	1c43      	adds	r3, r0, #1
 810e92e:	d102      	bne.n	810e936 <_isatty_r+0x1a>
 810e930:	682b      	ldr	r3, [r5, #0]
 810e932:	b103      	cbz	r3, 810e936 <_isatty_r+0x1a>
 810e934:	6023      	str	r3, [r4, #0]
 810e936:	bd38      	pop	{r3, r4, r5, pc}
 810e938:	10000fe4 	.word	0x10000fe4

0810e93c <_sbrk_r>:
 810e93c:	b538      	push	{r3, r4, r5, lr}
 810e93e:	4d06      	ldr	r5, [pc, #24]	@ (810e958 <_sbrk_r+0x1c>)
 810e940:	2300      	movs	r3, #0
 810e942:	4604      	mov	r4, r0
 810e944:	4608      	mov	r0, r1
 810e946:	602b      	str	r3, [r5, #0]
 810e948:	f7f4 f818 	bl	810297c <_sbrk>
 810e94c:	1c43      	adds	r3, r0, #1
 810e94e:	d102      	bne.n	810e956 <_sbrk_r+0x1a>
 810e950:	682b      	ldr	r3, [r5, #0]
 810e952:	b103      	cbz	r3, 810e956 <_sbrk_r+0x1a>
 810e954:	6023      	str	r3, [r4, #0]
 810e956:	bd38      	pop	{r3, r4, r5, pc}
 810e958:	10000fe4 	.word	0x10000fe4

0810e95c <_init>:
 810e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e95e:	bf00      	nop
 810e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e962:	bc08      	pop	{r3}
 810e964:	469e      	mov	lr, r3
 810e966:	4770      	bx	lr

0810e968 <_fini>:
 810e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e96a:	bf00      	nop
 810e96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e96e:	bc08      	pop	{r3}
 810e970:	469e      	mov	lr, r3
 810e972:	4770      	bx	lr
